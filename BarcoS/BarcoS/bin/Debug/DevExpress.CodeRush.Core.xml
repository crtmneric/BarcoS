<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevExpress.CodeRush.Core</name>
    </assembly>
    <members>
        <member name="T:DevExpress.CodeRush.Core.ProviderBase">
            <summary>
            Base class for ContextProviderBase and StringProviderBase.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.PlugInExtension">
            <summary>
            Ancestor class for Extensions and Providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtension.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtension.InstallExtension(System.Reflection.Assembly)">
            <summary>
            Registers and initializes plugin extension.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtension.GetProperties">
            <summary>
            Used internally by the plug-in loader. Do not use.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtension.ExtensionCategory">
            <summary>
            Returns the name of the PlugInExtensionCollection this extension 
            will be assigned to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtension.Properties">
            <summary>
            Plug-in Extensions can use this to store property values that should not trigger demand.
            The values stored here will be stored in the plug-in loader profile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtension.Register">
            <summary>
            If true, this extension will be available to the DXCore - otherwise, it'll be hidden. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtension.IsRegistered">
            <summary>
            Returns true if this extension was registered.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtension.Category">
            <summary>
            Gets the name of the category that this extension belongs to.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProviderBase.SetProviderName(System.String)">
            <summary>
            Sets the value of the ProviderName property. This method is virtual
            so descendants can override.
            </summary>
            <param name="name">The new name for the provider.</param>
        </member>
        <member name="E:DevExpress.DXCore.Achievements.AchievementProvider.CheckAchievements">
            <summary>
            Handle this event to search for achievenents.
            </summary>
        </member>
        <member name="E:DevExpress.DXCore.Achievements.AchievementProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your achievement to one or more programming languages.
            If you do not handle this event, your achievement provider will be available in all programming languages.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Service">
            <summary>
            Service is the ancestor of all CodeRush services.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Service.LoaderEngineRegistered">
            <summary>
            Override to perform any initialization that must happen after the DXCore 
            loader engine is registered. This happens after regular service initialization.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Achievements.AchievementServices.Providers">
            <summary>
            Returns an array of all registered achievements.
            </summary>  
        </member>
        <member name="P:DevExpress.DXCore.Achievements.CriteriaServices.Providers">
            <summary>
            Returns an array of all registered achievements.
            </summary>  
        </member>
        <member name="M:DevExpress.CodeRush.Core.Action.CanRegisterAction(System.Reflection.Assembly)">
            <summary>
            Checks if this action is allowed to be registered.
            </summary>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Action.GetTag">
            <summary>
            Returns action tag needed to search for action control.
            </summary>
            <returns>Returns action tag needed to search for action control.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.MenuButtonObject">
            <summary>
            Returns IMenuButton from Action.
            This property is not virtual, is needed to get menu button object because MenuButton is overriden by proxy.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.RegisterInVS">
            <summary>
            Registers this action as a Visual Studio command. If false, you can still bind a keystroke 
            to this action in the CodeRush Options dialog on the Shortcuts page. If true, this 
            action can be available in the Visual Studio Options dialog on the Keyboard page. 
            If you want to place this action in a menu or on a command bar, then you should set this 
            property to true. Otherwise no shortcut text will be displayed on corresponding menu item.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.RegisterInCR">
            <summary>
            Registers this action with CodeRush. If false, this action may still be available 
            in the Visual Studio Options dialog on the Keyboard page. If you want to place this 
            action in a menu or on a command bar, then you must set this property to true. If 
            true, you can bind a keystroke to this command in the CodeRush Options dialog on the 
            Shortcuts page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.SyncCRAndVSShortcuts">
            <summary>
            Keeps VS shortcut in sync with CodeRush shortcut. Note, opposite is not true.
            Shortcut set in CodeRush Options dialog will be also set in Visual Studio Options dialog on the Keyboard page.
            VS shortcut is added as Global key mapping.
            This option has no effect when either RegisterInVS or RegisterInCR is set to false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.AllowCustomizeVSShortcut">
            <summary>
            Shows command on Tools->Options...->Keyboard page.
            If set to false, user will not be able to customize shortcut for registered Visual Studio command.
            This option has no effect when RegisterInVS is set to false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.RegisterMenuButton">
            <summary>
            Registers this menu button for Visual Studio command. 
            If RegisterInVS is set to true, corresponding shortcut for VS command will be displayed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.ParentMenu">
            <summary>
            Sets the name of the parenting command bar. If you want to create a menu item 
            for this action, specify the name of the parenting command bar here (e.g., 
            \"Tools\").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Parameters">
            <summary>
            A collection of expected parameters for this action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Position">
            <summary>
            Sets the position for this action in the specified ParentMenu. The first position is one. 
            If you specify zero for this value, the item will appended to the end of the menu. If you 
            specify a negative number, the menu item position will be calculated from the end of the menu 
            (e.g., if Position equals -1 then this menu item will be inserted before the last entry).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Ninched">
            <summary>
            Sets the indeterminate state (neither checked nor cleared) for this action in 
            the current context. You can change this property in a BeforeQueryStatus event handler.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Latched">
            <summary>
            Sets the latched (e.g., selected or checked) state for this action in the 
            current context. You can change this property in a BeforeQueryStatus event handler.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Enabled">
            <summary>
            Sets the enabled state for this action in the current context. You can 
            change this property in a BeforeQueryStatus event handler.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Image">
            <summary>
            Sets the bitmap image for this action. Action images are optional, but can 
            be useful for menu items and toolbar buttons inside the IDE.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.ImageBackColor">
            <summary>
            Sets the image background color for this action. It is used to determine which
            action is to be treated as transparent in the bitmap assigned to the Image property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Invisible">
            <summary>
            Sets the visibility for this action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Supported">
            <summary>
            Indicates if this action is supported in the current context. You can change 
            this property in a BeforeQueryStatus event handler.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.ActionName">
            <summary>
            The name of the action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.GroupName">
            <summary>
            The name of the action group.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.ButtonText">
            <summary>
            The text for buttons and menu items associated with this action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.Description">
            <summary>
            A hint associated with this action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.VisibleToUsers">
            <summary>
            If true, this Action will be visible to users, and appear in the command list on the 
            Shortcuts options page, and will also be documented in the user guide. Setting this 
            property to false will prevent this Action from appearing in the command list, however 
            bindings to this Action can still be established by typing in the Action name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Action.UseFeatureUI">
            <summary>
            Use Feature UI before execute this action.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Action.Execute">
            <summary>
            Occurs when this action is executed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Action.PositionMenuButton">
            <summary>
            Occurs when the menu button for this action is being positioned within its parent menu or toolbar.
            Handling this, allows precise positioning of the menu button.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionCollection.ToArray">
            <summary>
            Returns array of actions.
            </summary>
            <returns>Returns array of actions.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionProxy.RegisterAction(DevExpress.CodeRush.Core.Action)">
            <summary>
            Called by Action registration mechanism to register a real Action
            (newly-created from a load on demand) with an existing ActionProxy
            with the same name.						
            </summary>
            <param name="action">The Action to register with this proxy.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionProxy.GroupName">
            <summary>
            The name of the action group.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.AdornmentSet">
            <summary>
            Adornment set contains lists of adornments grouped by adornment
            holders.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.AdornmentSet.#ctor">
            <summary>
            Creates new instance of the adornment set.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.AdornmentSet.Add(System.String,DevExpress.DXCore.Adornments.AdornmentList)">
            <summary>
            Adds new adornments list to the set.
            </summary>
            <param name="holder">The name of the holder.</param>
            <param name="adornments">The list of adornments to add.</param>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.AdornmentSet.CombineWith(DevExpress.DXCore.Adornments.AdornmentSet)">
            <summary>
            Combines this adornment set with the given set.
            </summary>
            <param name="adornments">The set to combine with.</param>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.AdornmentSet.Clear">
            <summary>
            Clears this set.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.AdornmentSet.Holders">
            <summary>
            Gets string array with names of all adornment holders.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.AdornmentSet.Item(System.String)">
            <summary>
            Gets the list of all adornments inside the holder with the given name.
            </summary>
            <param name="holder">The name of the adornment holder to get.</param>
            <returns>AdornmentList for the adornment holder with the given name.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.NamedDataDictionary`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NamedDataDictionary class.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers">
            <summary>
            Predefined DXCore adornment layers.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.EditorBackground">
            <summary>
            Editor background adornment layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.Editor">
            <summary>
            Editor adornment layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.Outlining">
            <summary>
            Editor outlining layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.EditorForeground">
            <summary>
            Editor foreground layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.LeftMargin">
            <summary>
            Left margin layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.RightMargin">
            <summary>
            Right margin layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.BottomMargin">
            <summary>
            Bottom margin layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.TopMargin">
            <summary>
            Top margin layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.EditorIntraText">
            <summary>
            Editor intra text adornments layer.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.DXCoreAdornmentLayers.RightBottomCorner">
            <summary>
            Editor intra text adornments layer.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.TileElementFrame.ShiftToTheRight(DevExpress.CodeRush.Core.TextView)">
            <summary>
            If tile conflicts with other tile then its position will be corrected by shifting to the right.
            </summary>
            <param name="view"></param>
            <returns>Final bounds of tile.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.ViewAdornmentPainter.GetStartRect">
            <summary>
            Returns start rect calculated from painter view info.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.ViewAdornmentPainter.GetEndRect">
            <summary>
            Returns end rect calculated from painter view info.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.ViewAdornmentPainter.LineHeight">
            <summary>
            The line height in the editor. Used to determine the scaling values for the graphic. 
            You do not need to assign a value to this property if you assign a valid TextView to 
            the TextView property.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.ViewAdornmentPainter.TextView">
            <summary>
            Associates a TextView with this CurvedCodeArrow. If you assign a valid TextView to 
            this property, you do not need to assign a value to the LineHeight property.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.NewPoint(DevExpress.DXCore.Platform.Drawing.Point@,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaX and deltaY are scaled 
            appropriately before offsetting the point.
            </summary>
            <param name="point">The reference point. This point will be adjusted to the return value of this method.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.NewPoint(DevExpress.DXCore.Platform.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaX and deltaY are scaled 
            appropriately before offsetting the point.
            </summary>
            <param name="point">The reference point.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.NewCharPoint(DevExpress.DXCore.Platform.Drawing.Point@,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaY are scaled 
            appropriately before offsetting the point. deltaX is scaled by the 
            HorizontalCharScale value.
            </summary>
            <param name="point">The reference point. This point will be adjusted to the return value of this method.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.NewCharPoint(DevExpress.DXCore.Platform.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaY are scaled 
            appropriately before offsetting the point. deltaX is scaled by the 
            HorizontalCharScale value.
            </summary>
            <param name="point">The reference point.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.Render(DevExpress.DXCore.Platform.Drawing.IDrawingSurface)">
            <summary>
            Paints this adornment on the specified surface using the outline 
            and fill colors specified by this instance's OutlineColor and FillColor 
            properties.
            </summary>
            <param name="context">The Graphics surface to paint.</param>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.OutlineColor">
            <summary>
            The color of the outline pen used to draw the path associated with this instance. 
            Set this property to Color.Empty to prevent an outline from being drawn.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.FillColor">
            <summary>
            The color of the brush used to fill the path associated with this instance. 
            Set this property to Color.Empty to prevent the graphic from being drawn filled.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.HorizontalScale">
            <summary>
            Gets or sets horizontal scale.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.VerticalScale">
            <summary>
            Gets or sets vertical scale.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.PathAdornmentPainter.HorizontalCharScale">
            <summary>
            Gets or sets horizontal char scale.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.ReverseArrowPainter.GetArrowPointArray">
            <summary>
            Returns an array of points that represent this curved arrow.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.BezierArrowAdornmentPainter">
            <summary>
            A curved arrow connecting two points.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.BezierArrowAdornmentPainter.MovePointTo(DevExpress.DXCore.Platform.Drawing.Point,DevExpress.DXCore.Platform.Drawing.Point,System.Double)">
            <summary>
            Creates and returns a point translated along the line between 
            startPoint and targetPoint, moved by the specified distance.
            </summary>
            <param name="startPoint">The starting point of the move.</param>
            <param name="targetPoint">The direction to move toward, relative to startPoint.</param>
            <param name="distance">The distance to move.</param>
            <returns>Returns a point moved along the line (connecting startPoint and targetPoint), by the 
            specified distance.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.BezierArrowAdornmentPainter.RotatePoint(DevExpress.DXCore.Platform.Drawing.Point,DevExpress.DXCore.Platform.Drawing.Point,System.Double)">
            <summary>
            Returns a new point, at the location of the control point when rotated 
            around the pivot point by the specified rotation.
            </summary>
            <param name="pivot">The center of rotation.</param>
            <param name="point">The point to rotate.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated point.</returns>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.BezierArrowAdornmentPainter.PenWidth">
            <summary>
            The width of the pen.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Adornments.RangeArrowAdornment.FLT_BezierControlPointRotation">
            <summary>
            This is the number of degrees that bezier control points are rotated to create the curve for the arrows.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.RangeArrowAdornment.HitRadius">
            <summary>
            A value that determines the distance to extend the Path around this curve. The Path is 
            used in the Contains method, which is useful for hit testing.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.TileVisual.Cursor">
            <summary>
            Gets or sets the cursor that displays when the mouse pointer is over this element.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.TileVisual.Object">
            <summary>
            The object associated with this Tile.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.TileVisual.Master">
            <summary>
            The plug-in that registered this tile. This property is used to direct tile events to its owner.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.TileVisual.TextView">
            <summary>
            Gets the TextView that contains this Tile.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.Arrow135AdornmentPainter">
            <summary>
            Paints an arrow that does a 135-degree turn around, pointing South West.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.BaseArrowAdornmentPainter">
            <summary>
            Base class for an arrow that starts at the middle of a given SourcePoint (about halfway between the baseline
            and the top of the letters).
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.PointAdornmentPainter">
            <summary>
            Ancestor class for graphic elements that paint over code specified by a SourcePoint.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter">
            <summary>
            Ancestor class for elements that paint over code specified by a SourcePoint.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.SetScalingDenominators(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the denominators used to calculate HorizontalScale, HorizontalCharScale, and 
            VerticalScale (defined in PathPainter). Descendants should call this in their 
            constructor to specify the scale at which the coordinates they send to NewPt and 
            NewCharPt were determined.
            </summary>
            <param name="wordWidth">The value for the WordWidthDenominator. The HorizontalScale field 
            will be set to the sum of the width of the range to highlight (in pixels) plus 
            TextView.SpaceWidth times WordWidthExtraChars, all divided by this amount.</param>
            <param name="wordWidthExtraChars">The value for the WordWidthExtraChars field. This value is 
            the number of extra character widths that should be added to the range width (that we're going 
            to highlight) before dividing by WordWidthDenominator. The HorizontalScale field will be set 
            to the sum of the width of the range to highlight (in pixels) plus TextView.SpaceWidth times 
            this value, all divided by this WordWidthDenominator.</param>
            <param name="charWidth">The value for the CharWidthDenominator. The HorizontalCharScale 
            field will be set to the TextView's SpaceWidth divided by this amount.</param>
            <param name="lineHeight">The value for the LineHeightDenominator. The VerticalScale 
            field will be set to the TextView's LineHeight divided by this amount.</param>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.SetScalingDenominators(System.Double,System.Double)">
            <summary>
            Sets the denominators used to calculate _HorizontalScale, _HorizontalCharScale, and 
            _VerticalScale (defined in PathPainter). Descendants should call this in their 
            constructor to specify the scale at which the coordinates they send to NewPt and 
            NewCharPt were determined. For PointHighlighter descendants, _HorizontalScale and
             _HorizontalCharScale will be identical, meaning that there will be no difference 
             between calling NewPt and NewCharPt.
            </summary>
            <param name="charWidth">The value for the _CharWidthDenominator. The _HorizontalCharScale 
            field will be set to the GdiTextView's SpaceWidth divided by this amount.</param>
            <param name="lineHeight">The value for the _LineHeightDenominator. The _VerticalScale 
            field will be set to the GdiTextView's LineHeight divided by this amount.</param>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.GetPoints(DevExpress.DXCore.Platform.Drawing.Point)">
            <summary>
            Create and return a Point array based on the specified startPt. 
            Scaling has been precalculated when this method is called.
            </summary>
            <param name="startPt">The upper left corner of the start of the code to 
            highlight on this line.</param>
            <returns>Returns an array of PointF structures.</returns>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.WordWidthExtraChars">
            <summary>
            Gets or sets WordWidthExtraChars value.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.WordWidthDenominator">
            <summary>
            Gets or sets WordWidthExtraChars value.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.CharWidthDenominator">
            <summary>
            Gets or sets WordWidthExtraChars value.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CoordinateAdornmentPainter.LineHeightDenominator">
            <summary>
            Gets or sets WordWidthExtraChars value.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.PointAdornmentPainter.CalculateScale(DevExpress.CodeRush.Core.TextView)">
            <summary>
            This method is called before calling GetPoints in descendant classes.
            </summary>
            <param name="textView">The TextView to paint in.</param>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.PointAdornmentPainter.Point">
            <summary>
            The SourcePoint where this graphic element will paint.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.BaseArrowAdornmentPainter.#ctor(DevExpress.DXCore.Adornments.ViewElementFrameInfo,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates a new instance of BaseArrow
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.Arrow180AdornmentPainter">
            <summary>
            Paints an arrow that does a 180-degree turn around, pointing left.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.Arrow90AdornmentPainter">
            <summary>
            Paints an arrow that does a 90-degree turn around, pointing South West.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.BrushStrokeAdornmentPainter">
            <summary>
            Paints a brush stroke across the specified source code.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.RangeAdornmentPainter">
            <summary>
            Ancestor class for graphic elements that paint over code specified by a SourceRange.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.RangeAdornmentPainter.CalculateScale(DevExpress.CodeRush.Core.TextView,System.Double)">
            <summary>
            This method is called before calling GetPoints in descendant classes.
            </summary>
            <param name="textView">The GdiTextView to paint in.</param>
            <param name="wordWidthInPixels">The width of the code line we're highlighting.</param>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.RangeAdornmentPainter.Range">
            <summary>
            The range associated with this graphic element. All code within this range will be 
            highlighted, with this graphic element repeated once per line.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.BrushStrokeAdornmentPainter.#ctor(DevExpress.DXCore.Adornments.ViewElementFrameInfo,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates a new instance of BrushStrokeAdornmentPainter
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter">
            <summary>
            Class for drawing curved arrows connecting points in the editor.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.#ctor(DevExpress.DXCore.Adornments.ViewElementFrameInfo,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Creates a new instance of CurvedCodeArrowAdornmentPainter
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.HeadControlPoint(DevExpress.DXCore.Platform.Drawing.Point,DevExpress.DXCore.Platform.Drawing.Point,System.Double,System.Double)">
            <summary>
            Extends the control point and rotates it around the pivot point in the opposite direction of the TailControlPoint method.
            </summary>
            <param name="pivot">The point around which the control point is rotated.</param>
            <param name="control">The control point to rotate and extend.</param>
            <param name="multiplier">The amount to extend the control point.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated and extended control point.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.TailControlPoint(DevExpress.DXCore.Platform.Drawing.Point,DevExpress.DXCore.Platform.Drawing.Point,System.Double,System.Double)">
            <summary>
            Extends the control point and rotates it around the pivot point in the opposite direction of the HeadControlPoint method.
            </summary>
            <param name="pivot">The point around which the control point is rotated.</param>
            <param name="control">The control point to rotate and extend.</param>
            <param name="multiplier">The amount to extend the control point.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated and extended control point.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.GetArrowPointArray">
            <summary>
            Returns an array of points that represent this curved arrow.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.BuildPath(DevExpress.DXCore.Adornments.AdornmentGraphicsPath)">
            <summary>
            Constructs the _ArrowPath, and also calculates _BoundsRect.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.HeadPoint">
            <summary>
            The end of this arrow (the arrow's head).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.TailPoint">
            <summary>
            The start of this arrow (the arrow's tail).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.Inverted">
            <summary>
            Gets whether this curved arrow is inverted top to bottom. If true, then the head is above the tail (pointing up).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.Mirror">
            <summary>
            Determine whether this curved arrow arcs to the left 
            (pointing to the right), or if it arcs to the right 
            (pointing to the left).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Adornments.Painters.CurvedCodeArrowAdornmentPainter.RangeIndex">
            <summary>
            What range index we're in (Ultra-Low, Low, Medium-Low, Medium,
            Medium-High, High, Ultra-High). Ranges determine which set of 
            extension and rotation data we use to shape the curved arrow.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.InsertSymbolAdornmentPainter">
            <summary>
            Paints an insert symbol at the specified point in the source code.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.InsertSymbolAdornmentPainter.#ctor(DevExpress.DXCore.Adornments.ViewElementFrameInfo,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates a new instance of InsertSymbolAdornmentPainter
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.StrikeThroughAdornmentPainter">
            <summary>
            Paints a brush stroke across the specified source code.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.StrikeThroughAdornmentPainter.#ctor(DevExpress.DXCore.Adornments.ViewElementFrameInfo,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates a new instance of StrikeThroughAdornmentPainter
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Adornments.Painters.UnderlineAdornmentPainter">
            <summary>
            Paints a curved brush stroke under the specified source code range.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Adornments.Painters.UnderlineAdornmentPainter.#ctor(DevExpress.DXCore.Adornments.ViewElementFrameInfo,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates a new instance of UnderlineAdornmentPainter
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LineRenderer.Render(System.Drawing.Graphics)">
            <summary>
            Renders the line. Returns true is rendering took place.
            </summary>
            <param name="aGraphics">
            The Graphics object on which the line should be rendered.
            </param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineRenderer.StartPoint">
            <summary>
            The point in which the line starts.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineRenderer.EndPoint">
            <summary>
            The point in which the line starts.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ArrowRenderer.Render(System.Drawing.Graphics)">
            <summary>
            Renders the arrow.
            </summary>
            <param name="aGraphics">
            The Graphics object on which the arrow should be rendered.
            </param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ArrowRenderer.LineText">
            <summary>
            The text that is placed next to the shaft of the arrow.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers a DXCore assembly. This method should not be called by plug-in developers. It
            is used by the CodeRush loader.
            </summary>
            <param name="assembly">The System.Reflection.Assembly to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.Assemblies(DevExpress.CodeRush.Common.DXCoreAssemblyType)">
            <summary>
            Returns an array of CodeRush assemblies of the requested CodeRushAssemblyType.
            </summary>
            <param name="assemblyType">The CodeRushAsssemblyType of assemblies to return.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets a custom attribute of the specified attribute type from the passed-in assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <param name="attributeType">The attribute type to look for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.CoreAssemblies">
            <summary>
            Returns an array of the registered CodeRush assemblies.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.SystemPlugInAssemblies">
            <summary>
            Returns an array of the registered CodeRush system plug-ins.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.PlugInAssemblies">
            <summary>
            Returns an array of the registered CodeRush plug-ins (non-system).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AssemblyServices.Assemblies(DevExpress.CodeRush.Common.CodeRushAssemblyType)">
            <summary>
            Returns an array of CodeRush assemblies of the requested CodeRushAssemblyType.
            </summary>
            <param name="assemblyType">The CodeRushAsssemblyType of assemblies to return.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AssemblyServices.EvaluationAssemblies">
            <summary>
            A collection of assemblies that will time out after a set date. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AssemblyServices.ExpiredAssemblies">
            <summary>
            A collection of assemblies that have expired (and not loaded). 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AssemblyServices.FutureAssemblies">
            <summary>
            A collection of assemblies whose window for running has not yet opened 
            (the system date/time is *before* this assembly's start time).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AssemblyServices.Item(System.String)">
            <summary>
            Returns a registered CodeRush assembly by name.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.BigFeedback">
            <summary>
            Summary description for BigFeedback.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.BigFeedback.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigFeedback.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigFeedback.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigFeedback.Show">
            <summary>
            Shows this BigFeedback, centered on the active TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigFeedback.Show(DevExpress.CodeRush.Win32.HWND)">
            <summary>
            Shows this BigFeedback, centered on the specified window.
            </summary>
            <param name="hWND">The handle to the window to host this BigFeedback message.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BigFeedback.Text">
            <summary>
            The text of the BigFeedback message. Should be kept short.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.BillboardWindow">
            <summary>
            BillboardWindow should be used as an ancestor class to forms that will
            present read-only information to users. BillboardWindow descendants will 
            stay on top of the editor and mouse clicks will pass through to the editor 
            underneath.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BillboardWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BillboardWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BillboardWindow.SaveAndAdjustOpacity">
            <summary>
            Saves the current Opacity setting and adjusts it to work around a bug in Framework 2.0.
            If this isn't done, the window will not be displayed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BillboardWindow.RestoreOpacity">
            <summary>
            Restores the the original Opacity setting. Call this after calling SaveAndAdjustOpacity.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BillboardWindow.PositionInTextView(DevExpress.CodeRush.Core.TextView,System.Drawing.Point)">
            <summary>
            Sets the screen location to the specified point, converting TextView client coordinates 
            (e.g., from an EditorPaintEventArgs object's GetPoint method) into screen coordinates.
            </summary>
            <param name="view">The text view that supplies the client coordinates.</param>
            <param name="pt">The client coordinates to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BreakpointServices.Get(System.String,System.Int32)">
            <summary>
            Gets breakpoint located at given file and line.
            </summary>
            <param name="fileName">File name to locate breakpoint in.</param>
            <param name="lineNumber">Line number where breakpoint exists.</param>
            <returns>Found breakpoint or null if there is no breakpoint in given location.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BreakpointServices.Get(DevExpress.CodeRush.Core.BreakpointLocation)">
            <summary>
            Gets breakpoint located at given location.
            </summary>
            <param name="location">Location of breakpoint.</param>
            <returns>Found breakpoint or null if there is no breakpoint in given location.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BreakpointServices.Toggle">
            <summary>
            Toggles the breakpoint at the caret in the active file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BreakpointServices.Toggle(System.Int32,System.Int32,System.String,System.String,EnvDTE.dbgBreakpointConditionType,System.Int32,EnvDTE.dbgHitCountType,System.Boolean,System.String,System.String)">
            <summary>
            Toggles the breakpoint in the active file.
            </summary>
            <param name="lineNumber">Line to toggle breakpoint at.</param>
            <param name="column">Column to toggle breakpoint at (optional).</param>
            <param name="filter">Filter for new breakpoint (optional).</param>
            <param name="condition">Condition for new breakpoint (optional).</param>
            <param name="conditionType">Type of condition for new breakpoint (optional).</param>
            <param name="hitCount">Hit count for new breakpoint (optional).</param>
            <param name="hitCountType">Type of hit count for new breakpoint (optional).</param>
            <param name="breakWhenHit">If true, breakpoint will be inserted. Otherwise tracepoint will be inserted (optional).</param>
            <param name="message">Message for tracepoint (optional).</param>
            <param name="tag">Custom tag for breakpoint (optional).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BreakpointServices.DisableAllBreakpoints">
            <summary>
            Disables all breakpoints.
            </summary>
            <returns>List of disabled breakpoint locations</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BreakpointServices.EnableBreakpoints(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.BreakpointLocation})">
            <summary>
            Enables breakpoints. If there is no breakpoint in particular location, it will not be created.
            </summary>
            <param name="breakpointLocations">List of breakpoint locations to enable.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ExpressionPreviewDisplayFormatProviderBase">
            <summary>
            Base class for formatted display text providers.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ExpressionPreviewProviderBase">
            <summary>
            Base class for expression preview providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpressionPreviewDisplayFormatProviderBase.IsAvailable(DevExpress.CodeRush.Core.RuntimeContext,System.String)">
            <summary>
            Gets the current availability of this provider.
            </summary>
            <param name="context">Context for which availability of provider is checked.</param>
            <param name="displayText">Display text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpressionPreviewDisplayFormatProviderBase.FormatDisplayValue(DevExpress.CodeRush.Core.RuntimeContext,DevExpress.CodeRush.Core.FormattableString)">
            <summary>
            Formats display text for value evaluated by debugger.
            </summary>
            <param name="context">Context for which format display text.</param>
            <param name="formattedValue">Display text with formatting capabilities.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ExpressionPreviewDisplayValueProviderBase">
            <summary>
            Base class for expression display text providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpressionPreviewDisplayValueProviderBase.IsAvailable(DevExpress.CodeRush.Core.RuntimeContext)">
            <summary>
            Gets the current availability of this provider.
            </summary>
            <param name="context">Context for which availability of provider is checked.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpressionPreviewDisplayValueProviderBase.GetDisplayValue(DevExpress.CodeRush.Core.RuntimeContext)">
            <summary>
            Gets value to display for given value evaluated by debugger.
            </summary>
            <param name="context">Context for which calculate display text.</param>
            <returns>Text to display for particular value evaluated by debugger.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IDebugVisualizerEngine.EvaluateExpression(System.String,System.Boolean,System.Boolean)">
            <summary>
            Evaluates given expression.
            </summary>
            <param name="code">Code to evaluate.</param>
            <param name="evaluateSideEffects">Value indicating whether to evaluate potential side effects.</param>
            <param name="skipQuotes">Value indicating whether string values will be provided with or without enclosing quotes. For values of other types this parameter has no effect.</param>
            <returns>Instance of <see cref="T:DevExpress.CodeRush.Core.IEvaluationResult"/>.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IEvaluationResult.IsError">
            <summary>
            Gets value indicating whether evaluation ended with error.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IEvaluationResult.EvaluationThrewException">
            <summary>
            Gets value indicating whether evaluated code threw exception.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IEvaluationResult.HasSideEffects">
            <summary>
            Gets value indicating whether evaluated code has side effects.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IEvaluationResult.IsOutOfScope">
            <summary>
            Gets value indicating whether evaluated code refers to out of scope variables.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IEvaluationResult.HasValue">
            <summary>
            Gets value indicating whether code evaluated successfully and there is value ready to inspect.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IEvaluationResult.Value">
            <summary>
            Gets evaluated value. May be null when evaluation ended with error. Contains exception data when evaluated code threw exception.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.GetFontAt(System.Int32)">
            <summary>
            Gets font used to render particular character in <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="index">Index of character.</param>
            <returns>Font used to render the character.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.GetColorAt(System.Int32)">
            <summary>
            Gets color used to render particular character in <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="index">Index of character.</param>
            <returns>Color used to render the character.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.GetOpacityAt(System.Int32)">
            <summary>
            Gets opacity used to render particular character in <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="index">Index of character.</param>
            <returns>Opacity used to render the character.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(System.String,System.Double)">
            <summary>
            Sets new regular font for <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(System.String,System.Double,System.Int32)">
            <summary>
            Sets new regular font for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(System.String,System.Double,System.Int32,System.Int32)">
            <summary>
            Sets new regular font for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle)">
            <summary>
            Sets new font for <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="fontStyle">Style of the new font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="fontStyle">Style of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle,System.Int32,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="fontStyle">Style of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(DevExpress.CodeRush.Core.FormattedStringFont)">
            <summary>
            Sets new font for <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="font">New font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(DevExpress.CodeRush.Core.FormattedStringFont,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="font">New font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetFont(DevExpress.CodeRush.Core.FormattedStringFont,System.Int32,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="font">New font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetColor(DevExpress.DXCore.Platform.Drawing.Color)">
            <summary>
            Sets new color for <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="color">New color.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetColor(DevExpress.DXCore.Platform.Drawing.Color,System.Int32)">
            <summary>
            Sets new color for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="color">New color.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetColor(DevExpress.DXCore.Platform.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets new color for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="color">New color.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetOpacity(System.Double)">
            <summary>
            Sets new opacity value for <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="opacity">New opacity. This value will be normalized to fit between 0.0 and 1.0.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetOpacity(System.Double,System.Int32)">
            <summary>
            Sets new opacity value for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="opacity">New opacity. This value will be normalized to fit between 0.0 and 1.0.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattableString.SetOpacity(System.Double,System.Int32,System.Int32)">
            <summary>
            Sets new opacity value for substring of <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
            <param name="opacity">New opacity. This value will be normalized to fit between 0.0 and 1.0.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattableString.Value">
            <summary>
            Gets text to format.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattableString.FormattedValues">
            <summary>
            Gets collection of formatted strings for current <see cref="P:DevExpress.CodeRush.Core.FormattableString.Value"/>.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FormattedString">
            <summary>
            Represents string painted with particular font and color.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattedString.#ctor(System.String,DevExpress.CodeRush.Core.FormattedStringFont,DevExpress.DXCore.Platform.Drawing.Color)">
            <summary>
            Initializes a new instance of the FormattedString class.
            </summary>
            <param name="value">String value.</param>
            <param name="font">Font for string value.</param>
            <param name="color">Color for string value.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedString.Value">
            <summary>
            Gets string to paint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedString.Color">
            <summary>
            Gets color to paint the string value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedString.Font">
            <summary>
            Gets font properties to paint string value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.DisplayValueProvidersByLanguage(System.String)">
            <summary>
            Returns an array of expression display text providers filtered by language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.DisplayFormatProvidersByLanguage(System.String)">
            <summary>
            Returns an array of expression display format providers filtered by language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.EvaluateExpression(System.String,System.Boolean,System.Boolean)">
            <summary>
            Evaluates given expression.
            </summary>
            <param name="code">Code to evaluate.</param>
            <param name="evaluateSideEffects">Value indicating whether to evaluate potential side effects.</param>
            <param name="skipQuotes">Value indicating whether string values will be provided with or without enclosing quotes. For values of other types this parameter has no effect.</param>
            <returns>Instance of <see cref="T:DevExpress.CodeRush.Core.IEvaluationResult"/>.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.GetFormattedValue(DevExpress.CodeRush.Core.IRuntimeValue,System.Boolean,System.Boolean,System.Boolean,DevExpress.CodeRush.Core.FormattedStringFont,DevExpress.DXCore.Platform.Drawing.Color)">
            <summary>
            Gets string representation of runtime value.
            </summary>
            <param name="runtimeValue">Value of expression or variable evaluated by debugger.</param>
            <param name="isModified">Value indicating whether <paramref name="runtimeValue"/> was modified.</param>
            <param name="isConclusiveBoolean">Value indicating whether <paramref name="runtimeValue"/> is conclusive boolean value.</param>
            <param name="hasSideEffects">Value indicating whether <paramref name="runtimeValue"/> was evaluated with side effects.</param>
            <param name="defaultFont">Default font used to format <paramref name="runtimeValue"/>.</param>
            <param name="defaultColor">Default color used to format <paramref name="runtimeValue"/>.</param>
            <returns>Display text for value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.GetFormattedValue(DevExpress.CodeRush.Core.IRuntimeValue,System.Boolean,System.Boolean,System.Boolean,DevExpress.CodeRush.Core.FormattedStringFont,DevExpress.DXCore.Platform.Drawing.Color,DevExpress.CodeRush.Core.FormattedString)">
            <summary>
            Gets string representation of runtime value.
            </summary>
            <param name="runtimeValue">Value of expression or variable evaluated by debugger.</param>
            <param name="isModified">Value indicating whether <paramref name="runtimeValue"/> was modified.</param>
            <param name="isConclusiveBoolean">Value indicating whether <paramref name="runtimeValue"/> is conclusive boolean value.</param>
            <param name="hasSideEffects">Value indicating whether <paramref name="runtimeValue"/> was evaluated with side effects.</param>
            <param name="defaultFont">Default font used to format <paramref name="runtimeValue"/>.</param>
            <param name="defaultColor">Default color used to format <paramref name="runtimeValue"/>.</param>
            <param name="fallbackValue">Value to return in case <paramref name="runtimeValue"/> is null or represents empty value.</param>
            <returns>Display text for value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.CalculateSize(System.Double,System.Double,System.Double,DevExpress.DXCore.Platform.Drawing.Size)">
            <summary>
            Calculates size necessary to draw expression value.
            </summary>
            <param name="minWidth">Minimum width for resulting size.</param>
            <param name="codeWidth">Width of entire expression or variable.</param>
            <param name="maxWidth">Maximum width for resulting size.</param>
            <param name="textSize">Size of formatted text to display.</param>
            <returns>Size necessary to draw value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.GetDisplayValue(DevExpress.CodeRush.Core.RuntimeContext)">
            <summary>
            Gets string representation of runtime value.
            </summary>
            <param name="context">Runtime context to format value for.</param>
            <returns>Display text for value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebugVisualizerServices.Format(DevExpress.CodeRush.Core.RuntimeContext,System.String,DevExpress.CodeRush.Core.FormattedStringFont,DevExpress.DXCore.Platform.Drawing.Color)">
            <summary>
            Formats string representation of runtime value.
            </summary>
            <param name="context">Runtime context to format value for.</param>
            <param name="displayText">Text to display for <paramref name="context"/>.</param>
            <param name="defaultFont">Default font used to format <paramref name="displayText"/>.</param>
            <param name="defaultColor">Default color used to format <paramref name="displayText"/>.</param>
            <returns>Formatted text for value.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DebugVisualizerServices.DisplayValueProviders">
            <summary>
            Returns an array of all expression display text providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DebugVisualizerServices.DisplayFormatProviders">
            <summary>
            Returns an array of all expression display format providers.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FormattedStringFont">
            <summary>
            Describes font used to draw string in <see cref="T:DevExpress.CodeRush.Core.FormattedString"/> class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FormattedStringFont.#ctor(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle)">
            <summary>
            Initializes a new instance of the FormattedStringFont class.
            </summary>
            <param name="name">Font name.</param>
            <param name="size">Font size.</param>
            <param name="style">Font style.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedStringFont.Style">
            <summary>
            Gets style of the font.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedStringFont.Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedStringFont.Name">
            <summary>
            Gets name of the font.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FormattedStringFont.Font">
            <summary>
            Gets font instance.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IRuntimeValue">
            <summary>
            Represents value of expression or variable evaluated by debugger.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IRuntimeValue.GetChildValue(System.String)">
            <summary>
            Gets value of child property.
            </summary>
            <param name="name">Name of property.</param>
            <returns>Value of child property if found, null otherwise.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.Name">
            <summary>
            Gets name of particular evaluated value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.FullName">
            <summary>
            Gets full name of particular evaluated value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.Type">
            <summary>
            Gets type as evaluated by debugger (e.g. "int?").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.ClrType">
            <summary>
            Gets language independent type name (e.g. "System.Nullable[System.Int32]").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.DeclaredType">
            <summary>
            Gets type declared in code as evaluated by debugge (e.g. "object")r.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.DeclaredClrType">
            <summary>
            Gets type declared in code as language independent (e.g. "System.Object").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.Value">
            <summary>
            Gets value evaluated by debugger.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.IsNull">
            <summary>
            Gets value indicating whether current instance represents null value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.IsBooleanTrue">
            <summary>
            Gets value indicating whether current instance represents boolean true value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.IsBooleanFalse">
            <summary>
            Gets value indicating whether current instance represents boolean false value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IRuntimeValue.IsMeaningful">
            <summary>
            Gets value indicating whether <see cref="P:DevExpress.CodeRush.Core.IRuntimeValue.Value"/> is meaningful. It is not when it is equal to <see cref="P:DevExpress.CodeRush.Core.IRuntimeValue.Type"/> enclosed within curly braces.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.RuntimeContext">
            <summary>
            Context for expression preview providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RuntimeContext.#ctor">
            <summary>
            Initializes a new instance of the RuntimeContext class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RuntimeContext.EvaluateExpression(System.String,System.Boolean,System.Boolean)">
            <summary>
            Evaluates given expression.
            </summary>
            <param name="code">Code to evaluate.</param>
            <param name="evaluateSideEffects">Value indicating whether to evaluate potential side effects.</param>
            <param name="skipQuotes">Value indicating whether string values will be provided with or without enclosing quotes. For values of other types this parameter has no effect.</param>
            <returns>Instance of <see cref="T:DevExpress.CodeRush.Core.IEvaluationResult"/> when <paramref name="code"/> was evaluated successfully. Null otherwise.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeContext.Language">
            <summary>
            Gets language currently used by debugger.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeContext.RuntimeValue">
            <summary>
            Gets value of expression or variable evaluated by debugger.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeContext.IsValueModified">
            <summary>
            Gets value indicating whether <see cref="P:DevExpress.CodeRush.Core.RuntimeContext.RuntimeValue"/> is modified or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeContext.IsValueConclusiveBoolean">
            <summary>
            Gets value indicating whether <see cref="P:DevExpress.CodeRush.Core.RuntimeContext.RuntimeValue"/> is conclusive boolean value or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeContext.HasSideEffects">
            <summary>
            Gets value indicating whether <see cref="P:DevExpress.CodeRush.Core.RuntimeContext.RuntimeValue"/> was evaluated with side effects.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.RuntimeValue">
            <summary>
            Represents value of expression or variable evaluated by debugger.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RuntimeValue.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RuntimeValue class.
            </summary>
            <param name="fullName">Full name of value evaluated by debugger.</param>
            <param name="name">Name of value evaluated by debugger.</param>
            <param name="type">Type evaluated by debugger.</param>
            <param name="clrType">Language independent type name.</param>
            <param name="declaredType">Statically declared type of evaluated value as evaluated by debugger.</param>
            <param name="declaredClrType">Statically declared type of evaluated value as language independent.</param>
            <param name="value">Value evaluated by debugger.</param>
            <param name="isNull">Value indicating whether it represents null value.</param>
            <param name="isBooleanTrue">Value indicating whether it represents boolean true value.</param>
            <param name="isMeaningful">Value indicating whether it represents meaningful value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RuntimeValue.#ctor(DevExpress.CodeRush.Core.IRuntimeValue)">
            <summary>
            Initializes a new instance of the RuntimeValue class.
            </summary>
            <param name="runtimeValue">Value evaluated by debugger.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RuntimeValue.GetChildValue(System.String)">
            <summary>
            Gets value of child property.
            </summary>
            <param name="name">Name of property.</param>
            <returns>Value of child property if found, null otherwise.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.FullName">
            <summary>
            Gets full name of particular evaluated value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.Name">
            <summary>
            Gets name of particular evaluated value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.Type">
            <summary>
            Gets type as evaluated by debugger (e.g. "int?").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.ClrType">
            <summary>
            Gets language independent type name (e.g. "System.Nullable[System.Int32]")
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.DeclaredType">
            <summary>
            Gets type declared statically in code as evaluated by debugger (e.g. "object").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.DeclaredClrType">
            <summary>
            Gets type declared statically in code as language independent (e.g. "System.Object").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.Value">
            <summary>
            Gets value evaluated by debugger.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.IsNull">
            <summary>
            Gets value indicating whether current instance represents null value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.IsBooleanTrue">
            <summary>
            Gets value indicating whether current instance represents boolean true value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.IsBooleanFalse">
            <summary>
            Gets value indicating whether current instance represents boolean false value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RuntimeValue.IsMeaningful">
            <summary>
            Gets value indicating whether <see cref="P:DevExpress.CodeRush.Core.RuntimeValue.Value"/> is meaningful. It is not when it is equal to <see cref="P:DevExpress.CodeRush.Core.RuntimeValue.Type"/> enclosed within curly braces.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CheckExpressionPreviewAvailabilityEventArgs">
            <summary>
            Argument for availability check for expression preview providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckExpressionPreviewAvailabilityEventArgs.#ctor">
            <summary>
            Initializes a new instance of the CheckExpressionPreviewAvailabilityEventArgs class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CheckExpressionPreviewAvailabilityEventArgs.Context">
            <summary>
            Gets runtime context for availability check.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CheckExpressionPreviewAvailabilityEventArgs.DisplayText">
            <summary>
            Gets display text for availability check.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CheckExpressionPreviewAvailabilityEventArgs.Available">
            <summary>
            Gets or sets value indicating whether expression preview provider is available in given context.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs">
            <summary>
            Event args for ExpressionDisplayFormatProvider Apply event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.#ctor">
            <summary>
            Initializes a new instance of the GetExpressionDisplayFormatEventArgs class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.GetFontAt(System.Int32)">
            <summary>
            Gets font used to render particular character in <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="index">Index of character.</param>
            <returns>Font used to render the character.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.GetColorAt(System.Int32)">
            <summary>
            Gets color used to render particular character in <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="index">Index of character.</param>
            <returns>Color used to render the character.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.GetOpacityAt(System.Int32)">
            <summary>
            Gets opacity used to render particular character in <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="index">Index of character.</param>
            <returns>Opacity used to render the character.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(System.String,System.Double)">
            <summary>
            Sets new regular font for <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(System.String,System.Double,System.Int32)">
            <summary>
            Sets new regular font for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(System.String,System.Double,System.Int32,System.Int32)">
            <summary>
            Sets new regular font for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle)">
            <summary>
            Sets new font for <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="fontStyle">Style of the new font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="fontStyle">Style of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(System.String,System.Double,DevExpress.DXCore.Platform.Drawing.FontStyle,System.Int32,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="fontName">Name of the new font.</param>
            <param name="fontSize">Size of the new font.</param>
            <param name="fontStyle">Style of the new font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(DevExpress.CodeRush.Core.FormattedStringFont)">
            <summary>
            Sets new font for <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="font">New font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(DevExpress.CodeRush.Core.FormattedStringFont,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="font">New font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetFont(DevExpress.CodeRush.Core.FormattedStringFont,System.Int32,System.Int32)">
            <summary>
            Sets new font for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="font">New font.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetColor(DevExpress.DXCore.Platform.Drawing.Color)">
            <summary>
            Sets new color for <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="color">New color.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetColor(DevExpress.DXCore.Platform.Drawing.Color,System.Int32)">
            <summary>
            Sets new color for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="color">New color.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetColor(DevExpress.DXCore.Platform.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets new color for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="color">New color.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetOpacity(System.Double)">
            <summary>
            Sets new opacity value for <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="opacity">New opacity. This value will be normalized to fit between 0.0 and 1.0.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetOpacity(System.Double,System.Int32)">
            <summary>
            Sets new opacity value for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="opacity">New opacity. This value will be normalized to fit between 0.0 and 1.0.</param>
            <param name="startIndex">Starting index of affected substring.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.SetOpacity(System.Double,System.Int32,System.Int32)">
            <summary>
            Sets new opacity value for substring of <see cref="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText"/>.
            </summary>
            <param name="opacity">New opacity. This value will be normalized to fit between 0.0 and 1.0.</param>
            <param name="startIndex">Starting index of affected substring.</param>
            <param name="length">Length of affected substring.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.Context">
            <summary>
            Gets runtime context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetExpressionDisplayFormatEventArgs.DisplayText">
            <summary>
            Gets display text for expression or variable value.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetExpressionDisplayValueEventArgs">
            <summary>
            Event args for ExpressionDisplayValueProvider Apply event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetExpressionDisplayValueEventArgs.#ctor">
            <summary>
            Initializes a new instance of the GetExpressionDisplayValueEventArgs class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetExpressionDisplayValueEventArgs.Context">
            <summary>
            Gets runtime context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetExpressionDisplayValueEventArgs.DisplayText">
            <summary>
            Gets or sets display text for expression or variable value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetExpressionDisplayValueEventArgs.Handled">
            <summary>
            Gets or sets value indicating whether custom display text was provided by user code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ElementEventArgs.Element">
            <summary>
            Gets element associated with current event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PopupMenu.OnCancelled(System.EventArgs)">
            <summary>
            Triggers the Cancelled event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PopupMenu.OnMenuClosed(System.EventArgs)">
            <summary>
            Triggers the MenuClosed event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PopupMenu.OnMenuPopuped(System.EventArgs)">
            <summary>
            Triggers the MenuPopuped event.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CamelCaseFilter">
            <summary>
            Provides camel case filtering for strings.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CamelCaseFilter.#ctor(System.String)">
            <summary>
            Creates new instance of CamelCaseFilter.
            </summary>
            <param name="filterMask">The filter mask for filtering</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CamelCaseFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new instance of CamelCaseFilter.
            </summary>
            <param name="filterMask">The filter mask for filtering</param>
            <param name="ignoreCase">Defines if case should be ignored while comparison</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CamelCaseFilter.MaskIsValid(System.String)">
            <summary>
            Defines if mask is valid for filter usage.
            It should contain only upper case letters or digits.
            </summary>
            <param name="mask">The mask to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CamelCaseFilter.Accept(System.String)">
            <summary>
            Makes filtering of specified text.
            </summary>
            <param name="text">The text to filter</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CamelCaseFilter.Accept(System.String,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Makes filtering of specified text.
            </summary>
            <param name="text">The text to filter</param>
            <param name="containsOnlyUpperCaseLetters">Defines if passed text contains only upper case letters. 
            In this case time for taking of upper case letters from text will not be spent. 
            This is usefull for saving of time when filtering of great number of strings</param>
            <param name="hasEqualUpperCase">Defines if passed text has equal upper case letters</param>
            <param name="hasEqualFirstLetterInUpperCase">Defines if passed text has equal first upper case letter</param>
            <returns></returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CaretPosition">
            <summary>
            Represents the position of the caret in an editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.Line">
            <summary>
            Returns the current line of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.Offset">
            <summary>
            Returns the current character offset of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.SourcePoint">
            <summary>
            Returns a SourcePoint representing the current position of the caret. This value can
            exist in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.TextDocument">
            <summary>
            Returns the TextDocument that the caret is positioned in.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.TextView">
            <summary>
            Returns the TextView that the caret is positioned in.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.ViewColumn">
            <summary>
            Returns the current view column of the caret. This is a character offset + any
            necessary virtual spaces.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.VirtualSpaces">
            <summary>
            The number of virtual spaces between the caret view column and the ending character 
            offset of the current line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretPosition.Column">
            <summary>
            Returns the current column of the caret. This can be in virtual space.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.DeleteLeft(System.Int32)">
            <summary>
            Deletes the specified number of characters to the left of the caret.
            </summary>
            <param name="count">The number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.DeleteRight(System.Int32)">
            <summary>
            Deletes the specified number of characters to the right of the caret.
            </summary>
            <param name="count">The number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.DeleteLeftWhiteSpace">
            <summary>
            Deletes whitespace characters to the left of the caret and returns the number of characters deleted.
            </summary>
            <returns>Returns the number of characters deleted.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.DeleteRightWhiteSpace">
            <summary>
            Deletes whitespace characters to the right of the caret and returns the number of characters deleted.
            </summary>
            <returns>Returns the number of characters deleted.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.GetSurroundingCharacters(System.Char@,System.Char@)">
            <summary>
            Places the character to the left and right of the caret (on the current line) 
            in the parameters leftChar and rightChar.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.GetSurroundingText(System.String@,System.String@)">
            <summary>
            Determines the text to the left and right of the caret (on the current line) in the active text document.
            </summary>
            <param name="leftText">This output parameter is set to the text to the left of the caret.</param>
            <param name="rightText">This output parameter is set to the text to the right of the caret.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.Insert(System.Char,System.Boolean)">
            <summary>
            Inserts a character at the caret position and optionally moves the caret.
            </summary>
            <param name="ch">The character to insert.</param>
            <param name="moveCaret">If true, the caret will be moved after the inserted character.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.Insert(System.Char)">
            <summary>
            Inserts a character at the caret position and moves the caret.
            </summary>
            <param name="ch">The character to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.Insert(System.String,System.Boolean)">
            <summary>
            Inserts the given text at the caret position and optionally moves the caret.
            </summary>
            <param name="text">The text to insert.</param>
            <param name="moveCaret">If true, the caret will be moved after the inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.Insert(System.String)">
            <summary>
            Inserts the given text at the caret position and optionally moves the caret.
            </summary>
            <param name="text">The text to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Moves the editor caret to the given position.
            </summary>
            <param name="point">The location to move the caret to.</param>
            <param name="extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves the editor caret to the given position.
            </summary>
            <param name="point">The location to move the caret to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveTo(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the active point to the specified line and column.
            </summary>
            <param name="line">The line number, starting at one, from the beginning of the buffer. </param>
            <param name="column">Represents the column, starting at one, that is the new column location.</param>
            <param name="extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the active point to the specified line and column.
            </summary>
            <param name="line">The line number, starting at one, from the beginning of the buffer. </param>
            <param name="column">Represents the column, starting at one, that is the new column location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveTo(System.Int32,System.Boolean)">
            <summary>
            Moves the caret to the location represented by the specified stream position and, 
            optionally, extends the selection.
            </summary>
            <param name="position">The stream position to move the caret to. A stream position
            is the offset from the start of the file.</param>
            <param name="extend">If true, the current selection will be selected to the new caret
            position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveTo(System.Int32)">
            <summary>
            Moves the caret to the location represented by the specified stream position.
            </summary>
            <param name="position">The stream position to move the caret to. A stream position
            is the offset from the start of the file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveLeft(System.Int32)">
            <summary>
            Moves the caret to the left a specified number of characters. If the caret is currently inside 
            virtual space, it will moved to the end of the current line first.
            </summary>
            <param name="numChars">The number of characters to move the caret.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveRight(System.Int32)">
            <summary>
            Moves the caret to the right a specified number of characters. If the caret is currently inside 
            virtual space, it will moved to the end of the current line first.
            </summary>
            <param name="numChars">The number of characters to move the caret.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveToEndOfLine">
            <summary>
            Positions the caret at the end of the current line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveToStartOfLine">
            <summary>
            Positions the caret at the start of the current line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.MoveOutOfVirtualSpace">
            <summary>
            If the caret is in virtual space, it will be moved to the position of the end-of-line terminator
            on the line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.Hide">
            <summary>
            Hides the caret (the editor cursor). You can restore the caret after calling 
            Hide() through a call to CodeRush.Caret.Show(). Every call to Hide() must have 
            a matching call to Show().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.Show">
            <summary>
            Shows the caret (the editor cursor). Call this after calling Hide().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.InCodeSnippetField">
            <summary>
            Determines whether or not the editor caret is currently in a code snippet field. This
            will only return true in Visual Studio 2005 or newer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.InCurrentStatementMarker">
            <summary>
            Determines whether or not the editor caret is currently in a current statement marker. This
            will only return true in Visual Studio 2005 or newer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.DeleteWhiteSpaceLeft">
            <summary>
            Deletes whitespace characters to the left of the caret and returns the number of characters deleted.
            </summary>
            <returns>Returns the number of characters deleted.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.DeleteWhiteSpaceRight">
            <summary>
            Deletes whitespace characters to the right of the caret and returns the number of characters deleted.
            </summary>
            <returns>Returns the number of characters deleted.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.GetSurroundingText(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.String@,System.String@)">
            <summary>
            Determines the text to the left and right of the specified characterOffset on the specified lineNumber in the specified text document.
            </summary>
            <param name="document">The TextDocument containing the text to check.</param>
            <param name="lineNumber">The line number containing the surrounding text.</param>
            <param name="characterOffset">The character offset to split the line at.</param>
            <param name="leftText">This output parameter is set to the text to the left of the split point.</param>
            <param name="rightText">This output parameter is set to the text to the right of the split point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.GetSurroundingText(System.Int32,System.Int32,System.String@,System.String@)">
            <summary>
            Determines the text to the left and right of the specified characterOffset on the specified lineNumber in the active text document.
            </summary>
            <param name="lineNumber">The line number containing the surrounding text.</param>
            <param name="characterOffset">The character offset to split the line at.</param>
            <param name="leftText">This output parameter is set to the text to the left of the split point.</param>
            <param name="rightText">This output parameter is set to the text to the right of the split point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.IsComment(DevExpress.CodeRush.Core.CaretLocation)">
            <summary>
            Determines if aCaretLocation is a comment.
            </summary>
            <param name="aCaretLocation">The location to test. You can get a new CaretLocation from CodeRush.Language.</param>
            <returns>Returns true if aCaretLocation is inside a comment.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.IsString(DevExpress.CodeRush.Core.CaretLocation)">
            <summary>
            Determines if aCaretLocation is a string.
            </summary>
            <param name="aCaretLocation">The location to test. You can get a new CaretLocation from CodeRush.Language.</param>
            <returns>Returns true if aCaretLocation is inside a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CaretServices.IsCode(DevExpress.CodeRush.Core.CaretLocation)">
            <summary>
            Determines if aCaretLocation is in code.
            </summary>
            <param name="aCaretLocation">The location to test. You can get a new CaretLocation from CodeRush.Language.</param>
            <returns>Returns true if aCaretLocation is inside code.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.Active">
            <summary>
            Returns a newly-created EnvDTE.EditPoint reflecting the ActivePoint in the
            active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.Line">
            <summary>
            Returns the line number of the active caret, or -1 if a text view is not active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.Offset">
            <summary>
            Returns the line character offset of the active caret, or -1 if a text view is not active. If 
            the caret is in virtual space, this will be the position of the end-of-line terminator on the line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.SourcePoint">
            <summary>
            Gets a SourcePoint representing the current caret position, or SourcePoint.Empty if a text view is not active.
            This may be inside virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.ViewColumn">
            <summary>
            Returns the current view column of the active caret, or -1 if a text view is not active. This value
            may be inside virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.AtEndOfWord">
            <summary>
            Returns true if the caret is at the end of a word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.AtStartOfWord">
            <summary>
            Returns true if the caret is at the start of a word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.AtCompilerDirective">
            <summary>
            Returns true when the caret is at the line with compiler directive (e.g. #warning, #error).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.ScreenPosition">
            <summary>
            Returns the screen position of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.InsideCode">
            <summary>
            Returns true if the caret is inside a code block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.InsideComment">
            <summary>
            Returns true if the caret is inside of a comment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.InsideXmlDocComment">
            <summary>
            Returns true if the caret is inside xml documentation comment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.InsideParens">
            <summary>
            Returns true if the caret is inside parentheses.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.InsideString">
            <summary>
            Returns true if the caret is inside of a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.InsideVirtualSpace">
            <summary>
            Returns true if the caret is inside virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.Location">
            <summary>
            Returns a CaretLocation representing the current location of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnEmptyLine">
            <summary>
            Returns true if caret is on empty line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnDeclaration">
            <summary>
            Returns true if the caret is on declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnDeclarationName">
            <summary>
            Returns true if the caret is on a declaration name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnDeclarationType">
            <summary>
            Returns true if the caret is on a declaration type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnDeclarationVisibility">
            <summary>
            Returns true if the caret is on a declaration visibility keyword.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnDeclarationStartToken">
            <summary>
            Returns true if the caret is on a start token of the declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnMethod">
            <summary>
            Returns true if the caret is on method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnMethodName">
            <summary>
            Returns true if the caret is on a method name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnMethodType">
            <summary>
            Returns true if the caret is on a method type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnMethodVisibility">
            <summary>
            Returns true if the caret is on a visibility keyword.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnProperty">
            <summary>
            Returns true if the caret is on property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnPropertyName">
            <summary>
            Returns true if the caret is on a property name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnPropertyType">
            <summary>
            Returns true if the caret is on a property type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.OnPropertyVisibility">
            <summary>
            Returns true if the caret is on a property visibility keyword.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.LeftChar">
            <summary>
            Gets the character to the left of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.LeftText">
            <summary>
            Gets the text to the left of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.RightChar">
            <summary>
            Gets the character to the right of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.RightText">
            <summary>
            Gets the text to the right of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.Column">
            <summary>
            Returns the current column of the active caret, or -1 if a text view is not active. This value
            may be inside virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.CharLeft">
            <summary>
            Gets the character to the left of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.CharRight">
            <summary>
            Gets the character to the right of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.DisplayColumn">
            <summary>
            Returns the display column of the active caret, or -1 if a text view is not active. This value
            may be inside virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.LineNumber">
            <summary>
            Returns the line number of the active cursor, or -1 if a text document is not active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.VirtualDisplayColumn">
            <summary>
            Returns the virtual display column of the active cursor, or -1 if a text document is not active. 
            The virtual display column is the actual column the cursor is in, regardless of whether there 
            is actually text at that location.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.TextLeft">
            <summary>
            Gets the text to the left of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretServices.TextRight">
            <summary>
            Gets the text to the right of the caret.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeCleanup.OrganizeMembers.OrganizeMemberProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeCleanup.OrganizeMembers.OrganizeMemberProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProviderList.Get(System.String)">
            <summary>
            Returns code issue provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
            <returns>CodeIssueProvider instance if found.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssueProviderList.Providers">
            <summary>
            Returns an array of all registered code issue providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeIssuesProcessEngine.RunSolutionAnalysis">
            <summary>
            Runs solution wide analysis if it is enabled.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeIssuesProcessEngine.RefreshActiveDocumentIssues">
            <summary>
            Checks active document for code issues and refreshes them.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeIssuesProcessEngine.GetWideAnalysisProgressInfo">
            <summary>
             Gets current state of the Solution Wide Analysis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeIssuesProcessEngine.CanCheckCodeIssues(DevExpress.CodeRush.StructuralParser.ISourceFile)">
            <summary>
            Defines if issues check process is available for the custom file in project.
            </summary>
            <param name="file">The file to check</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorSettingGroupProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorSettingGroupProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DelegateMethodGeneratedEventArgs.DelegateCode">
            <summary>
            DelegateCode - the generated delegate source code. Change this code if needed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetTypeInitializersEventArgs.Type">
            <summary>
            The Type to deliver.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetTypeInitializersEventArgs.LanguageID">
            <summary>
            The Language ID of the Type Initializers to deliver.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetTypeInitializersEventArgs.TypeInitializers">
            <summary>
            Add Initializers to this property in your event handler as needed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetTypeInitializersEventArgs.DescendantInitializers">
            <summary>
            Add Initializers to this property in your event handler as needed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintsAppearanceChangedEventArgs.MustHandleBy(System.Object)">
            <summary>
            MustHandleBy - check whether the given object must handle the event
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintsAppearanceChangedEventArgs.Appearance">
            <summary>
            Appearance - set of color values that specify hint appearance 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintsAppearanceChangedEventArgs.IsBroadcast">
            <summary>
            IsBroadcast - if true, all subscribers must handle this event
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintsAppearanceChangedEventArgs.Destination">
            <summary>
            Destination - the object to witch the event was addressed (use when IsBroadcast = false)
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.IntellisenseCompletionProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your provider to one or more programming languages.
            If you do not handle this event, your provider will be available in all programming languages.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.IntellisenseCompletionProvider.CheckAvailability">
            <summary>
            Handle this event to indicate what conditions this provider is available or recommended
            under.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.IntellisenseCompletionProvider.CollectCompletions">
            <summary>
            Handle this event to get intellisense completion set.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IntellisenseOptions.Storage">
            
             Gets a DecoupledStorage instance for this options page.
            
        </member>
        <member name="M:DevExpress.CodeRush.Core.IntellisenseServices.Get(System.String)">
            <summary>
            Returns intellisense completion provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
            <returns>IntellisenseCompletionProvider instance if found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NodeNavigator.FindElements(System.Collections.Generic.List{DevExpress.CodeRush.StructuralParser.LanguageElement},System.Xml.XmlNode@)">
            <summary>
            Finds and returns all child elements corresponding to the specified node.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NodeNavigator.GetPosition(System.String)">
            <summary>
            Converts an XML-encoded source code address to a TargetPosition.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NodeNavigator.GetCurrentAddress">
            <summary>
            Returns the current selection as an XML-encoded source code address.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TargetPosition.Show">
            <summary>
            Opens the file associated with this TargetPosition, restores the selection, and optionally restores the view.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ILinkClient">
            <summary>
            Language extension plug-ins can implement this interface on an object and return it via the
            LanguageExtension.ProvideLinkClient event to provide logic for standard linked identifiers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkClient.IsValidInsert(System.Char,System.String,System.Int32)">
            <summary>
            Determines whether it is valid to insert the specified System.Char in the text at the given position.
            </summary>
            <param name="ch">The System.Char to be inserted.</param>
            <param name="text">The text that the System.Char will be inserted in.</param>
            <param name="position">The position in the text at which the System.Char will be inserted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkClient.GetFirstInvaldCharIndex(System.String)">
            <summary>
            Gets the position of the first invalid System.Char in the given text. If no invalid System.Chars
            are found, return -1.
            </summary>
            <param name="text">The text to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Sharing.SharingServices.Providers">
            <summary>
            Returns an array of all registered achievements.
            </summary>  
        </member>
        <member name="T:DevExpress.CodeRush.Core.LineTransformation">
            <summary>
            Represents the transform from a formatted text line to a rendered text line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineTransformation.BottomSpace">
            <summary>
            Gets the amount of space required below the text of the line before applying
             the Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale factor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineTransformation.Right">
            <summary>
            Gets the x-coordinate of the effective right edge of the line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineTransformation.TopSpace">
            <summary>
            Gets the amount of space required above the text of the line before applying
            the Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale factor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineTransformation.VerticalScale">
            <summary>
            Gets the vertical scale factor to be applied to the text of the line and
            the space above and below the line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineTransformation.IsEmpty">
            <summary>
            Returns true if this line tranformation was not modified.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineTransformation.Empty">
            <summary>
            Returns the default line transformation.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IStorable">
            <summary>
            Interface used to retrieve load and save methods from data collections
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TypeInitializersProviderBase">
            <summary>
            Base class for the TypeInitializersProvider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetProviders">
            <summary>
            Returns an array of TypeInitializersProviders.
            </summary>
            <returns>Returns the TypeInitializersProvider if found, otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetTypeInitializers(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Returns a type initializers collection, that match the specified type parameter.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetTypeInitializers(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String)">
            <summary>
            Returns a type initializers collection, that match the specified type and languageID parameters.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to find.</param>
            <param name="languageID">The language ID to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetAllInitializers(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Returns a initializers collection, that match the specified type parameter.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetAllInitializers(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String)">
            <summary>
            Returns a initializers collection, that match the specified type parameter.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to find.</param>
            <param name="providerName">The intellisense provider name to collect completions.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetAllInitializers(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String,System.String)">
            <summary>
            Returns a initializers collection, that match the specified type and languageID parameters.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to find.</param>
            <param name="providerName">The intellisense provider name to collect completions.</param>
            <param name="languageID">The language ID to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetDefaultValue(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Returns a default value for type parameter.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to generate default value</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetDefaultValue(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String)">
            <summary>
            Returns a default value for type and languageID parameters.
            Throws an exception if TypeInitializersProvider is not found.
            </summary>
            <param name="type">The type reference to generate default value</param>
            <param name="languageID">The language to generate default value</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetDefaultValueForInitialization(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Returns a default value for type parameter.
            </summary>
            <param name="type">The type reference to generate default value</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetDefaultValueForInitialization(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String)">
            <summary>
            Returns a default value for type and languageID parameters.
            </summary>
            <param name="type">The type reference to generate default value</param>
            <param name="languageID">The language ID to generate default value</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TypeInitializersProviderServices.GetDefaultValueForInitialization(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String)">
            <summary>
            Returns a default value for type and typeName parameters.
            </summary>
            <param name="type">The type element to generate default value</param>
            <param name="typeName">The type name to generate default value</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VisibilityChanger.GetSupportedVisibilities(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement)">
            <summary>
            Gets list of visibilities supported for specified element.
            </summary>
            <param name="element">Element to investigate valid visibilities for.</param>
            <returns>Visibilities that can be applied for specified element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VisibilityChanger.CanChangeVisibility(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement)">
            <summary>
            Checks whether the visibility of specified element can be changed.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True when visibility can be changed to other value. False otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VisibilityChanger.ChangeVisibility(DevExpress.CodeRush.StructuralParser.PropertyAccessor,DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Changes visibility of particular property accessor.
            </summary>
            <param name="accessor">Property accessor to update visibility of.</param>
            <param name="newVisibility">New visibility.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VisibilityChanger.ChangeVisibility(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.StructuralParser.PropertyAccessor},DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Changes visibility of particular property accessors.
            </summary>
            <param name="accessors">All property accessors to update visibility of.</param>
            <param name="newVisibility">New visibility.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VisibilityChanger.ChangeVisibility(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement,DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Changes visibility of particular type or member.
            </summary>
            <param name="element">All types and members to update visibility of.</param>
            <param name="newVisibility">New visibility.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VisibilityChanger.ChangeVisibility(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement},DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Changes visibility of particular types and members.
            </summary>
            <param name="elements">All types and members to update visibility of.</param>
            <param name="newVisibility">New visibility.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ClipboardEntry">
            <summary>
            Describes a clipboard operation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardEntry.Clone">
            <summary>
            Creates a new instance that is a copy of this ClipboardEntry.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.BestGuessType">
            <summary>
            Returns the name of the type of the identifier on the clipboard, 
            if determinable at the time of the cut or copy operation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.Text">
            <summary>
            Returns the text on the clipboard.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.Time">
            <summary>
            Returns the time the clipboard operation was performed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.Type">
            <summary>
            Gets the TypeDeclaration for the identifier on the clipboard, 
            if determinable at the time of the cut or copy operation 
            (otherwise returns null).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.Source">
            <summary>
            Returns the source location of the clipboard operation, if available.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.FromIDE">
            <summary>
            Returns true if the clipboard operation was performed in the IDE.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.LanguageID">
            <summary>
            The active language ID (e.g., "CSharp", "C/C++", "VB", etc.) at the time of the clipboard operation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.Anchor">
            <summary>
            Gets the anchor location after clipboard operation.
            Use this property instead of Source.AnchorLine and Source.AnchorColumn, 
            they will return invalid values, if the code was modified.
            Returns null if clipboard operation was done outside of the VS VsTextBuffer.
            This can also be null if the document that the clipboard operation was performed
            on is closed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.AnchorPoint">
            <summary>
            Gets the Anchor as SourcePoint. Returns SourcePoint.Empty if Location is null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.CaretPoint">
            <summary>
            Gets the caret location after clipboard operation.
            Use this property instead of Source.AnchorLine and Source.AnchorColumn, 
            they will return invalid values, if the code was modified.
            Returns null if clipboard operation was done outside of the VS VsTextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.Document">
            <summary>
            Gets the document of the clipboard operation.
            Returns null if clipboard operation was done outside ot the VS Document.
            (Use HasDocument to see if Document property is set.)
            Do not hold on to this reference for extended periods of time. 
            User operations performed after the clipboard operation took place (e.g., closing a document) 
            can render this reference invalid.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.HasAnchor">
            <summary>
            Returns true if clipboard entry has anchor in the code editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.HasSource">
            <summary>
            Returns true if clipboard entry has Source property set.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardEntry.HasDocument">
            <summary>
            Returns true if clipboard entry has Document property set.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ClipboardMonitor">
            <summary>
            Clipboard changes monitoring class
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Monitor">
            <summary>
            Monitor is the ancestor of all CodeRush monitors.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardMonitor.Enabled">
            <summary>
            Gets or sets value determining if clipboard changes 
            monitoring is enabled.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.Cycle">
            <summary>
            Cycles the clipboard ring and places the next available text on the clipboard.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.Copy">
            <summary>
            Copies the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.Cut">
            <summary>
            Cuts the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.GetData(System.String)">
            <summary>
            Returns an object supporting the clipboard format specified by format
            </summary>
            <param name="format">The desired clipboard format. Use the DataFormats class to specify common clipboard formats.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.FindData(System.String[])">
            <summary>
            Returns an object supporting the clipboard format specified by formats.
            </summary>
            <param name="formats">
            The desired clipboard formats. Use the DataFormats class to specify common clipboard formats.
            Data for the first found format is returned.
            </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.GetData(System.Type)">
            <summary>
            Returns an object supporting the clipboard format specified by format
            </summary>
            <param name="format">The desired clipboard format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.FindData(System.Type[])">
            <summary>
            Returns an object supporting the clipboard format specified by formats
            </summary>
            <param name="formats">The desired clipboard formats. Data for the first found format is returned.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.HasDataFormat(System.String)">
            <summary>
            Returns true if the clipboard holds data that can be represented by the format specified by aFormat
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.HasDataFormat(System.Type)">
            <summary>
            Returns true if the clipboard holds data that can be represented by the format specified by aFormat
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.Paste">
            <summary>
            Pastes the current contents of the clipbaord.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.SetLastOperation(DevExpress.CodeRush.Core.ClipboardOperation)">
            <summary>
            Sets that last clipboard operation. Used internally by CodeRush system plug-ins.
            </summary>
            <param name="aClipboardOperation">The clipboard operation just performed in the IDE. One of 
            ClipboardOperation.Cut, ClipboardOperation.Copy, or ClipboardOperation.Unknown</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.GetText">
            <summary>
            Returns the text on the clipboard.
            GetText tries to obtain "UnicodeText" format first,
            and checks for "Text" format if "UnicodeText" is not available.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.HasType(System.String)">
            <summary>
            Returns true if the clipboard has an identifier of the same type as that specified by typeName.
            </summary>
            <param name="typeName">The type to check for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ClipboardServices.CycleClipboard">
            <summary>
            Cycles the clipboard ring. NOTE: This method is obsolete -- you should use CodeRush.Clipboard.Cycle.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.DataIsFresh">
            <summary>
            Returns true if the data in the clipboard originates from the current cursor position in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsHTML">
            <summary>
            Returns the data on the clipboard as HTML.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsRTF">
            <summary>
            Returns the data on the clipboard as RTF.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsText">
            <summary>
            Returns the data on the clipboard as text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsUnicodeText">
            <summary>
            Returns the data on the clipboard as Unicode text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsObject">
            <summary>
            Returns the data on the clipboard as a deserialized object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsComponent">
            <summary>
            Returns the data on the clipboard as a deserialized Component.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsImage">
            <summary>
            Returns the data on the clipboard as an Image.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.AsString">
            <summary>
            Returns the data on the clipboard as string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasText">
            <summary>
            Returns true if the clipboard holds data that can be represented as text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasImage">
            <summary>
            Returns true if the clipboard holds data that can be represented as an Image.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasHTML">
            <summary>
            Returns true if the clipboard holds data that can be represented as HTML.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasRTF">
            <summary>
            Returns true if the clipboard holds data that can be represented in RTF (Rich Text Format).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasObject">
            <summary>
            Returns true if the clipboard holds a .NET object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasComponent">
            <summary>
            Returns true if the clipboard holds a Component.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.HasUnicodeText">
            <summary>
            Returns true if the clipboard holds data that can represented in Unicode text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.LastOperation">
            <summary>
            Returns the last clipboard operation performed in the IDE. One of 
            ClipboardOperation.Cut, ClipboardOperation.Copy, or ClipboardOperation.Unknown
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.LastEntry">
            <summary>
            A description of the last entry cut or copied to the clipboard.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ClipboardServices.LastType">
            <summary>
            Gets the TypeDeclaration for the identifier on the clipboard, 
            if determinable at the time of the cut or copy operation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeRec.ChangeKind">
            <summary>
            Returns change kind for the current record.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeRec.ModifiedLine">
            <summary>
            Number of modified line in destination code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeRec.SourceLine">
            <summary>
            Number of modified line in source code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeRec.ModifiedCode">
            <summary>
            Returns modified string.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeDiffVisualizer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ModifyRec.SymbolChanges">
            <summary>
            Returns changes in the line if code was modified (ChangeKind = CodeChangeKind.Modify).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ITextViewAdornment">
            <summary>
            Represents text view visual adornment.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITextViewAdornment.Add(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Adds this visual adornment to the given text view.
            </summary>
            <param name="textView">The text view to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITextViewAdornment.Remove">
            <summary>
            Removes this visual adornment from 
            the appropriate text view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseCodeIssue.UpdateRangeFromMarker">
            <summary>
            Updates issue range from marker bound to it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseCodeIssue.Provider">
            <summary>
            Gets or sets code issue provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseCodeIssue.Range">
            <summary>
            Gets or sets code issue range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseCodeIssue.HighlightInCodeEditor">
            <summary>
            Gets or sets value if code issue should be highlighted in code editor.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CodeIssue">
            <summary>
            Represents a code issue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.CodeIssueType)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code issue range.</param>
            <param name="type">The code issue type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.CodeIssueType,System.String)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code issue range.</param>
            <param name="type">The code issue type.</param>
            <param name="message">The code issue message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.CodeIssueType,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code issue range.</param>
            <param name="type">The code issue type.</param>
            <param name="message">The code issue message.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.CodeIssueType,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="type">The code issue type.</param>
            <param name="message">The code issue message.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String,System.Double,System.Object)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code issue message.</param>
            <param name="languageID">The code issue language ID.</param>
            <param name="metricWeight">The code issue metric weight.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String,System.String,System.Double,System.Object)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code issue message.</param>
            <param name="description">The code issue description.</param>
            <param name="languageID">The code issue language ID.</param>
            <param name="metricWeight">The code issue metric weight.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.AddRelatedLocation(System.String,System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Adds related location to this code issue.
            </summary>
            <param name="projectFullName">Project full name.</param>
            <param name="filePath">The path of the related file.</param>
            <param name="range">The range of the related location</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.GetRelatedLocations">
            <summary>
            Returns related locations for this code issue.
            </summary>
            <returns>Returns related locations for this code issue.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssue.ReportIssue">
            <summary>
            Collects diagnostics data and reports it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.Type">
            <summary>
            Gets or sets code issue type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.MetricType">
            <summary>
            Gets or sets code issue metric type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.Message">
            <summary>
            Gets or sets code issue message.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.Description">
            <summary>
            Gets or sets code issue description.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.Data">
            <summary>
            Gets or sets code issue custom data.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.HighlightRange">
            <summary>
            Gets or sets code issue highlight range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.LanguageID">
            <summary>
            Gets or sets code issue language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.MetricWeight">
            <summary>
            Gets or sets code issue metric weight.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssue.CanReportIssue">
            <summary>
            Returns true if report issue is supported
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProvider.IsLanguageSupported(System.String)">
            <summary>
            Returns true if this code issue provider supports the given language.
            </summary>
            <param name="languageID">The languageID to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProvider.GetCodeIssues(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns code issues for the given file.
            </summary>
            <param name="scope">The scope to check for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProvider.GetCodeIssues(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs)">
            <summary>
            Returns code issues for the given file.
            </summary>
            <param name="ea">The event args to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssueProvider.IsLanguageEnabled(System.String)">
            <summary>
            Returns true if this code issue is available in the given language.
            </summary>
            <param name="languageID">The languageID to check.</param>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeIssueProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your code issue to one or more programming languages.
            If you do not handle this event, your code issue provider will be available in all programming languages.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeIssueProvider.CheckCodeIssues">
            <summary>
            Handle this event to process a file and search for code issues. Use the Scope property of the passed-in event args (Scope usually points to an ISourceFile) to search that scope for issues.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeIssueProvider.SuppressChanged">
            <summary>
            Handle this event to process a change suppress scopes for Code Issue provider
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeIssueProvider.AfterIssueCacheDeserialized">
            <summary>
            Handle this event to process code issues what are deserialized from code issues cache.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CodeIssueType">
            <summary>
            Code issue type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CodeSmell">
            <summary>
            Code smell.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="score">The code smell score value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code smell range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code smell range.</param>
            <param name="message">The code smell message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Double)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code smell range.</param>
            <param name="message">The code smell message.</param>
            <param name="score">The code smell score.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code smell range.</param>
            <param name="message">The code smell message.</param>
            <param name="data">The code smell data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeSmell.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object,System.Double)">
            <summary>
            Initializes a new instance of the CodeIssue class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="range">The code smell range.</param>
            <param name="message">The code smell message.</param>
            <param name="data">The code smell data.</param>
            <param name="score">The code smell score.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeSmell.Score">
            <summary>
            Gets or sets code smell score value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptor.#ctor(System.String,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Initializes a new instance of the ChangeDescriptor class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptor.Excludes(DevExpress.CodeRush.Core.ChangeDescriptor)">
            <summary>
            Checks if the given change is excluded by this change.
            </summary>
            <param name="change">The change to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptor.AddNewItems(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.ChangeDescriptorItem})">
            <summary>
            Adds new items to this change.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptor.RemoveIdenticalItems(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.ChangeDescriptorItem})">
            <summary>
            Returns all idetical items from this change.
            </summary>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptor.RemoveItem(DevExpress.CodeRush.Core.ChangeDescriptorItem)">
            <summary>
            Removes item from this change.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptor.ChangeType">
            <summary>
            Gets or sets change type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptor.AffectedItems">
            <summary>
            Gets all items affected by this change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptor.AffectedItemsArray">
            <summary>
            Gets array of all items affected by this change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptor.CheckedItems">
            <summary>
            Gets all checked items.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptor.UnCheckedItems">
            <summary>
            Gets all unchecked items.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ChangeDescriptorItem">
            <summary>
            Check item for code issues checking thread.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptorItem.#ctor(DevExpress.CodeRush.Core.ChangeDescriptor,DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Initializes a new instance of the CodeIssueCheckItem class.
            </summary>
            <param name="change">The parent change.</param>
            <param name="fileNode">The file node to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptorItem.SetChange(DevExpress.CodeRush.Core.ChangeDescriptor)">
            <summary>
            Sets change for this item.
            </summary>
            <param name="change">The change to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangeDescriptorItem.IsEqualTo(DevExpress.CodeRush.Core.ChangeDescriptorItem)">
            <summary>
            Returns true if the specified item is identical to this one.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptorItem.Change">
            <summary>
            Gets parent change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptorItem.FileNode">
            <summary>
            Gets file node to check.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptorItem.Scope">
            <summary>
            Gets or sets change item scope.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangeDescriptorItem.IsChecked">
            <summary>
            Gets or sets value indicating if this item was checked.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CheckCodeIssuesEventHandler">
            <summary>
            Event handler for checking code issues inside the given file.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="ea">The code issues event args.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs">
            <summary>
            Event args for check code issues event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.#ctor(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Initializes a new instance of the CheckCodeIssuesEventArgs class.
            </summary>
            <param name="provider">The code issue provider.</param>
            <param name="scope">The scope to check for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.SetValues(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Sets values for this event args.
            </summary>
            <param name="provider">The provider to use.</param>
            <param name="scope">The scope to check for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.ClearValues">
            <summary>
            Clears values for this event args.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.SetResolvedScope(DevExpress.CodeRush.StructuralParser.ScopeResolveResult)">
            <summary>
            Sets resolved scope.
            </summary>
            <param name="resolvedScope">The resolved scope to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.Core.CodeIssue)">
            <summary>
            Adds new code issue.
            </summary>
            <param name="issue">The code issue.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.Core.CodeIssueType,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Adds new code issue with the given type and range.
            </summary>
            <param name="issueType">The code issue type.</param>
            <param name="range">The code issue range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.Core.CodeIssueType,DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Adds new code issue with the given type, range and message.
            </summary>
            <param name="issueType">The code issue type.</param>
            <param name="range">The code issue range.</param>
            <param name="message">The code issue message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.Core.CodeIssueType,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new code issue with the given type, range, message and custom data.
            </summary>
            <param name="issueType">The code issue type.</param>
            <param name="range">The code issue range.</param>
            <param name="message">The code issue message.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.Core.CodeIssueType,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new code issue with the given type, range, highlight range, message and custom data.
            </summary>
            <param name="issueType">The code issue type.</param>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code issue message.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Double,System.Object)">
            <summary>
            Adds new code issue with the given range, highlight range, message, metricWeight and custom data.
            </summary>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code issue message.</param>
            <param name="metricWeight">The code issue metric weight.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String,System.Double,System.Object)">
            <summary>
            Adds new code issue with the given range, highlight range, message, laguageID, metricWeight and custom data.
            </summary>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code issue message.</param>
            <param name="languageID">The code issue language.</param>
            <param name="metricWeight">The code issue metric weight.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddIssue(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String,System.String,System.Double,System.Object)">
            <summary>
            Adds new code issue with the given range, highlight range, message, laguageID, metricWeight and custom data.
            </summary>
            <param name="range">The code issue range.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code issue message.</param>
            <param name="description">The code issue description.</param>
            <param name="languageID">The code issue language.</param>
            <param name="metricWeight">The code issue metric weight.</param>
            <param name="data">The code issue custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddWarning(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Adds new code warning with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code warning.</param>
            <param name="message">The code warning message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddWarning(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new code warning with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code warning.</param>
            <param name="message">The code warning message.</param>
            <param name="data">The code warning custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddWarning(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String)">
            <summary>
            Adds new code warning with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code warning.</param>
            <param name="message">The code warning message.</param>
            <param name="description">The code warning description.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddError(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Adds new code error with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code error.</param>
            <param name="message">The code error message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddError(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new code error with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code error.</param>
            <param name="message">The code error message.</param>
            <param name="data">The code warning custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddHint(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Adds new code suggestion with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code suggestion.</param>
            <param name="message">The code suggestion message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddHint(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new code suggestion with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code suggestion.</param>
            <param name="message">The code suggestion message.</param>
            <param name="data">The code warning custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddHint(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new code suggestion with the given range, highlight range, message and custom data.
            </summary>
            <param name="range">The range of the code suggestion.</param>
            <param name="highlightRange">The code issue highlight range.</param>
            <param name="message">The code suggestion message.</param>
            <param name="data">The code warning custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddSmell(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Double)">
            <summary>
            Adds new code smell with the given range, message and score.
            </summary>
            <param name="range"></param>
            <param name="message"></param>
            <param name="score"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddSmell(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object,System.Double)">
            <summary>
            Adds new code smell with the given range, message and custom data.
            </summary>
            <param name="range">The range of the code smell.</param>
            <param name="message">The code smell message.</param>
            <param name="data">The code smell custom data.</param>
            <param name="score">The code smell score value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddDeadCode(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Adds new dead code with the given range, message and custom data.
            </summary>
            <param name="range">The range of the dead code.</param>
            <param name="message">The dead code message.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.AddDeadCode(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.Object)">
            <summary>
            Adds new dead code with the given range, message and custom data.
            </summary>
            <param name="range">The range of the dead code.</param>
            <param name="message">The dead code message.</param>
            <param name="data">The dead code custom data.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.ClearIssues">
            <summary>
            Clears all code issues inside this event args.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.ResolveScope">
            <summary>
            Resolves the scope using default reference filter.
            The result is cached inside this event args instance.
            Subsequent calls to this method will return the cached result.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.GetScopeDeclarationReferenceMapping">
            <summary>
            Resolves the scope using default reference filter.
            The result is cached inside this event args instance.
            Subsequent calls to this method will return the cached result.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns declaration for the given element.
            </summary>
            <param name="element">The element to get declaration for.</param>
            <returns>Returns declaration for the given element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.IsSuppressed(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if active code issue provider is suppressed for the element.
            </summary>
            <param name="element">The element to check.</param>
            <returns>Returns true if active code issue provider is suppressed for the element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.GetEnumerable(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns an IEnumerable implementer which enumerates the given element and all it's children
            recursivelly.
            </summary>
            <param name="element">The element to enumerate.</param>
            <returns>An IEnumerable implementer which enumerates the given element and all it's children</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.GetEnumerable(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementFilter)">
            <summary>
            Returns an IEnumerable implementor which enumerates the given element and all it's children
            recursivelly.
            </summary>
            <param name="element">The element to enumerate.</param>
            <param name="filter">The element filter to use.</param>
            <returns>An IEnumerable implementer which enumerates given element and all it's children</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.GetEnumerable(DevExpress.CodeRush.StructuralParser.LanguageElementType[])">
            <summary>
            Returns an IEnumerable implementor which enumerates elements of the current file scope.
            </summary>
            <param name="args">A type of language elements to enumerate.</param>
            <returns>An IEnumerable implementor which enumerates elements of the current file scope.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.GetEnumerable(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.LanguageElementType[])">
            <summary>
            Returns an IEnumerable implementor which enumerates elements of the given scope.
            </summary>
            <param name="scope">The scope where to enumerate elements.</param>
            <param name="args">A type of language elements to enumerate.</param>
            <returns>An IEnumerable implementor which enumerates elements of the given scope.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.ConvertToLanguageElement(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Converts given IElement implementor to LanguageElement if possible.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>LanguageElement instance if conversion was successful, otherwise returns null.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.Scope">
            <summary>
            Returns an IElement (which can usually be cast to an ISourceFile) which can be iterated over. Use the AddXxxx methods inside these event args to add any issues found.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.Issues">
            <summary>
            Gets a list of collected code issues.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs.Provider">
            <summary>
            Gets active code issue provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssues.ICodeFixHint.AddPreviewHint(DevExpress.CodeRush.Core.MessageHintBase)">
            <summary>
            Adds a sub-preview hint to control their visibility inside the main code fix hint.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.InvalidateUI">
            <summary>
            Invalidates code issues UI.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.InvalidateSolutionUI">
            <summary>
            Invalidates code issues UI which relates to displaying of issues in the solution.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.CreateTextMarker(DevExpress.CodeRush.TextMarkers.TextMarkerType,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new text marker.
            </summary>
            <param name="type">The marker type to create.</param>
            <param name="document">The document to use.</param>
            <param name="range">The range of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.IsSuppressed(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if active code issue provider is suppressed for the element.
            </summary>
            <param name="provider">The provider to check.</param>
            <param name="element">The element to check.</param>
            <returns>Returns true if active code issue provider is suppressed for the element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.IsSuppressed(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.Core.ISuppressionScope)">
            <summary>
            Returns true if active code issue provider is suppressed for the scope.
            </summary>
            <param name="provider">The provider to check.</param>
            <param name="scope">The scope to check.</param>
            <returns>Returns true if active code issue provider is suppressed for the scope.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.GetSuppressionScope(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets suppression scope for the given element.
            </summary>
            <param name="element">The element to get scope for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.CloseCodeFixHint">
            <summary>
            Forcedly closes CodeFix hint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.NavigateToIssue(DevExpress.CodeRush.Core.CodeIssue)">
            <summary>
            Navigates to the specified issue.
            </summary>
            <param name="nextIssue"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.NavigateToIssue(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified issue.
            </summary>
            <param name="targetFilePath"></param>
            <param name="targetPoint"></param>
            <param name="setMouseCursorPos"></param>
            <param name="moveHintAboveTheCode"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.NavigateToIssue(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.CodeIssue,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified issue.
            </summary>
            <param name="targetFilePath"></param>
            <param name="targetPoint"></param>
            <param name="issue"></param>
            <param name="setMouseCursorPos"></param>
            <param name="moveHintAboveTheCode"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeSmellEngine.NavigateToIssue(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.CodeIssue,System.Boolean,DevExpress.CodeRush.Core.TargetButtonMouseCursorPosition)">
            <summary>
            Navigates to the specified issue.
            </summary>
            <param name="targetFilePath"></param>
            <param name="targetPoint"></param>
            <param name="issue"></param>
            <param name="moveHintAboveTheCode"></param>
            <param name="mouseCursorPosition"></param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.CodeFixHintIsActive">
            <summary>
            Returns true if the CodeFix hint is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.CodeFixHintLocation">
            <summary>
            Returns the location of the active CodeFix hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.CodeFixHintSize">
            <summary>
            Returns the size of the active CodeFix hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.CodeFixHint">
            <summary>
            Returns the instance of the active CodeFix hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.ZoomWindowHintIsActive">
            <summary>
            Returns true if the Code Issues Zoom Window hint is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.IsEnabled">
            <summary>
            Returns true if Code Issue analyisis is enabled.
            </summary>    
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeSmellEngine.IsSolutionWide">
            <summary>
            Returns true if Solution Wide Analyusis option is set.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ISuppressionScope">
            <summary>
            Provider suppression scope.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISuppressionScope.GetScopeString">
            <summary>
            Gets scope string.
            </summary>
            <returns>Returns scope string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISuppressionScope.GetParentScopes">
            <summary>
            Gets parent supression scopes.
            </summary>
            <returns>Returns parent supression scopes.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssues.Icons.IssueIcon.NewPoint(System.Drawing.PointF@,System.Double,System.Double)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaX and deltaY are scaled 
            appropriately before offsetting the point.
            </summary>
            <param name="point">The reference point. This point will be adjusted to the return value of this method.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeIssues.Icons.IssueIcon.NewPoint(System.Drawing.PointF,System.Double,System.Double)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaX and deltaY are scaled 
            appropriately before offsetting the point.
            </summary>
            <param name="point">The reference point.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IssueServices">
            <summary>
            Code issue services.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.#ctor">
            <summary>
            Creates a new instance of the CodeIssueServices class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueIconFromType(DevExpress.CodeRush.Core.CodeIssueType)">
            <summary>
            Returns the icon of the specified code issue.
            </summary>
            <param name="issueType"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CaretInside(System.String)">
            <summary>
            Returns true if the caret is inside specified issue.
            </summary>
            <param name="issueMsg"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesAtPoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets list of issues at the specified source point.
            </summary>
            <param name="point">The source point to get issues.</param>
            <returns>List of issues at the specified source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesOnLine(System.Int32)">
            <summary>
            Gets list of issues at the specified line.
            </summary>
            <param name="line">The line to get issues for.</param>
            <returns>List of issues at the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetCodeIssuePriorityComparison">
            <summary>
            Returns comparison for code issues.
            </summary>
            <returns>Returns comparison for code issues.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesAtPoint(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets list of issues at the specified source point.
            </summary>
            <param name="fileNode"></param>
            <param name="point">The source point to get issues.</param>
            <returns>List of issues at the specified source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesAtPoint(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue},DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Get list of issues at the specified source point.
            </summary>
            <param name="issues">The issues to check.</param>
            <param name="point">The source point to get issues.</param>
            <returns>List of issues at the specified source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns closest issue before the given source point inside active document.
            </summary>
            <param name="point">The source point to use.</param>
            <returns>Closest issue before the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueBefore(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns closest issue before the given source point inside specified file node.
            </summary>
            <param name="fileNode">The file node to get issues from.</param>
            <param name="point">The source point to use.</param>
            <returns>Closest issue before the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueBefore(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue},DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns closest issue before the given source point.
            </summary>
            <param name="issues">The issues to search inside.</param>
            <param name="point">The source point to use.</param>
            <returns>Closest issue before the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueStartedBefore(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns closest issue started before the given source point inside current active text document.
            </summary>
            <param name="point">The source point to use.</param>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>Closest issue started before the given source point inside current active text document.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueStartedBefore(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue},DevExpress.CodeRush.StructuralParser.SourcePoint,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns closest issue started before the given source point.
            </summary>
            <param name="issues">The issues to search inside.</param>
            <param name="point">The source point to use.</param>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>Closest issue started before the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueAfter(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns closest issue after the given source point inside active document.
            </summary>
            <param name="point">The source point to use.</param>
            <returns>Closest issue after the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueAfter(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns closest issue after the given source point inside active document.
            </summary>
            <param name="point">The source point to use.</param>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>Closest issue after the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueAfter(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns closest issue after the given source point inside specified file node.
            </summary>
            <param name="fileNode">The file node to get issues from.</param>
            <param name="point">The source point to use.</param>
            <returns>Closest issue after the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueAfter(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns closest issue after the given source point inside specified file node.
            </summary>
            <param name="fileNode">The file node to get issues from.</param>
            <param name="point">The source point to use.</param>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>Closest issue after the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueAfter(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue},DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns closest issue after the given source point.
            </summary>
            <param name="issues">The issues to search inside.</param>
            <param name="point">The source point to use.</param>
            <returns>Closest issue after the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssueAfter(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue},DevExpress.CodeRush.StructuralParser.SourcePoint,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns closest issue after the given source point.
            </summary>
            <param name="issues">The issues to search inside.</param>
            <param name="point">The source point to use.</param>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>Closest issue after the given source point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetFirstIssueAtCaret">
            <summary>
            Returns first issue found at caret position.
            </summary>
            <returns>First issue found at caret position.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetFirstIssueAtCaret(System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns first issue found at caret position.
            </summary>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>First issue found at caret position.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetLastIssueAtCaret">
            <summary>
            Returns last issue found at caret position.
            </summary>
            <returns>Last issue found at caret position.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetLastIssueAtCaret(System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Returns last issue found at caret position.
            </summary>
            <param name="predicate">The predicate to filter issues.</param>
            <returns>Last issue found at caret position.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.SortByRange(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Sorts array of code issues by range.
            </summary>
            <param name="issues">The array of issues to sort.</param>
            <returns>New sorted array of issues.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CheckCodeIssues(DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Gets all code issues inside the given file node.
            </summary>
            <param name="fileNode">The file node to check for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CheckCodeIssues(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Gets all code issues inside the given file node.
            </summary>
            <param name="resolvedScope">The resolved scope to check for code issues.</param>
            <param name="fileNode">The file node to check for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CheckCodeIssues(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets all code issues inside the given file node.
            </summary>
            <param name="resolvedScope">The resolved scope to check for code issues.</param>
            <param name="fileNode">The file node to check for code issues.</param>
            <param name="scope">The scope to check (usially an ISourceFile instance).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetCodeSmellsInView(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Gets all code issues inside the given view.
            </summary>
            <param name="textView">The text view to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWorst(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Gets worst code issue type inside the given text document.
            </summary>
            <param name="textDocument">The text document to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWorst(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.CodeIssueType[])">
            <summary>
            Gets worst code issue type inside the given text document.
            </summary>
            <param name="textDocument">The text document to check.</param>
            <param name="skipTypes">The list of issues to skip.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWorst(DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Gets worst code issue type inside the given file node.
            </summary>
            <param name="fileNode">The file node to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWorst(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.Core.CodeIssueType[])">
            <summary>
            Gets worst code issue type inside the given file node.
            </summary>
            <param name="fileNode">The file node to check.</param>
            <param name="skipTypes">The list of issues to skip.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWorst(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Gets worst code issue type inside the given list of issues.
            </summary>
            <param name="issues">The list of issues to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWorst(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.CodeIssue},DevExpress.CodeRush.Core.CodeIssueType[])">
            <summary>
            Gets worst code issue type inside the given list of issues.
            </summary>
            <param name="issues">The list of issues to check.</param>
            <param name="skipTypes">The list of issues to skip.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesInDocument(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Gets all code issues found in the given text document.
            </summary>
            <param name="document">The document to get code issues for.</param>
            <returns>List of code issues in the given document.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesInDocumentByPriority(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Gets all code issues found in the given text document sorted by thier priority.
            </summary>
            <param name="document">The document to get code issues for.</param>
            <returns>List of code issues in the given document.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesInView(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Gets all code issues in the active view.
            </summary>
            <param name="view">The text view to get code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesInViewByPriority(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Gets all code issues in the active view.
            </summary>
            <param name="view">The text view to get code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetNextIssue(DevExpress.CodeRush.Core.CodeIssue)">
            <summary>
            Gets an issue followed by the specified issue in the active source file.
            </summary>
            <param name="issue">The start issue to search from.</param>
            <returns>Code issue followed by the specified issue.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetNextIssue(DevExpress.CodeRush.Core.CodeIssue,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Gets an issue followed by the specified issue in the active source file.
            </summary>
            <param name="issue">The start issue to search from.</param>
            <param name="predicate">The predicate to use.</param>
            <returns>Code issue followed by the specified issue.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetPreviousIssue(DevExpress.CodeRush.Core.CodeIssue)">
            <summary>
            Gets an issue followed before the specified issue in the active source file.
            </summary>
            <param name="issue">The start issue to search from.</param>
            <returns>Code issue followed before the specified issue.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetPreviousIssue(DevExpress.CodeRush.Core.CodeIssue,System.Predicate{DevExpress.CodeRush.Core.CodeIssue})">
            <summary>
            Gets an issue followed before the specified issue in the active source file.
            </summary>
            <param name="issue">The start issue to search from.</param>
            <param name="predicate">The predicate to use.</param>
            <returns>Code issue followed before the specified issue.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.DrawIcon(System.Drawing.Graphics,System.Drawing.Rectangle,DevExpress.CodeRush.Core.CodeIssueType)">
            <summary>
            Draws the icon of the specified code issue onto a graphics location.
            </summary>
            <param name="graphics">The graphics object to draw on.</param>
            <param name="rectangle">The rectangle of the icon. Width and Height should be identical for proper scaling.</param>
            <param name="issueType">The type of a code issue.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.InvalidateUI">
            <summary>
            Invalidates code issues UI.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CanCheckCodeIssues(DevExpress.CodeRush.StructuralParser.ISourceFile)">
            <summary>
            Returns true if code issues can be checked inside the given text document.
            </summary>
            <param name="file">The file to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CreateTextMarker(DevExpress.CodeRush.TextMarkers.TextMarkerType,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new text marker.
            </summary>
            <param name="markerType">The marker type to create.</param>
            <param name="document">The document to use.</param>
            <param name="range">The range of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetIssuesStorage">
            <summary>
            Returns DecoupledStorage instance for this service.
            </summary>
            <returns>DecoupledStorage instance for this service.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.IsSuppressed(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if active code issue provider is suppressed for the element.
            </summary>
            <param name="provider">The provider to check.</param>
            <param name="element">The element to check.</param>
            <returns>Returns true if active code issue provider is suppressed for the element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.IsSuppressed(DevExpress.CodeRush.Core.CodeIssueProvider,DevExpress.CodeRush.Core.ISuppressionScope)">
            <summary>
            Returns true if active code issue provider is suppressed for the scope.
            </summary>
            <param name="provider">The provider to check.</param>
            <param name="scope">The scope to check.</param>
            <returns>Returns true if active code issue provider is suppressed for the scope.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetSuppressionScope(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets suppression scope for the given element.
            </summary>
            <param name="element">The element to get scope for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetEnumerable(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets IEnumerable implementer which enumerates given element and all it's children
            recursivelly.
            </summary>
            <param name="element">The element to enumerate.</param>
            <returns>Returns IEnumerable implementer which enumerates given element and all it's children</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetEnumerable(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementFilter)">
            <summary>
            Gets IEnumerable implementer which enumerates given element and all it's children
            recursivelly.
            </summary>
            <param name="element">The element to enumerate.</param>
            <param name="filter">The element filter to use.</param>
            <returns>Returns IEnumerable implementer which enumerates given element and all it's children</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.RefreshActiveDocumentIssues">
            <summary>
            Checks active document for code issues and refreshes them.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.Get(System.String)">
            <summary>
            Returns code issue provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
            <returns>CodeIssueProvider instance if found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.RunSolutionAnalysis">
            <summary>
            Runs solution wide analysis if it is enabled.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.GetWideAnalysisProgressInfo">
            <summary>
             Gets current state of the Solution Wide Analysis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.CloseCodeFixHint">
            <summary>
            Forcedly closes CodeFix hint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.NavigateToIssue(DevExpress.CodeRush.Core.CodeIssue)">
            <summary>
            Navigates to the specified code issue.
            </summary>
            <param name="nextIssue"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.NavigateToIssue(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified code issue.
            </summary>
            <param name="targetFilePath"></param>
            <param name="targetPoint"></param>
            <param name="setMouseCursorPos"></param>
            <param name="moveHintAboveTheCode"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.NavigateToIssue(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.CodeIssue,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified code issue.
            </summary>
            <param name="targetFilePath"></param>
            <param name="targetPoint"></param>
            <param name="issue"></param>
            <param name="setMouseCursorPos"></param>
            <param name="moveHintAboveTheCode"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IssueServices.NavigateToIssue(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.CodeIssue,System.Boolean,DevExpress.CodeRush.Core.TargetButtonMouseCursorPosition)">
            <summary>
            Navigates to the specified code issue.
            </summary>
            <param name="targetFilePath"></param>
            <param name="targetPoint"></param>
            <param name="issue"></param>
            <param name="moveHintAboveTheCode"></param>
            <param name="mouseCursorPosition"></param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.CalculationIsActive">
            <summary>
            Returns true if calculation of code issues is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.Providers">
            <summary>
            Returns an array of all registered code issue providers.
            </summary>  
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.CodeFixHintIsActive">
            <summary>
            Returns true if the CodeFix hint is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.CodeFixHintLocation">
            <summary>
            Returns the location of the active CodeFix hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.CodeFixHintSize">
            <summary>
            Returns the size of the active CodeFix hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.CodeFixHint">
            <summary>
            Returns the instance of the CodeFix hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.ZoomWindowHintIsActive">
            <summary>
            Returns true if the Code Issues Zoom Window hint is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.IsEnabled">
            <summary>
            Returns true if the Code Issues analysis is enabled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IssueServices.IsSolutionWide">
            <summary>
            Returns true if the Code Issues Zoom Window hint is active.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.BaseCodeIssueSearcher">
            <summary>
            Code issue searcher.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseCodeIssueSearcher.IsUserException(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Returns true if the throw expression uses a user declared exception descendant.
            </summary>
            <param name="resolveResult"></param>
            <param name="throwExp"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseCodeIssueSearcher.IsUserException(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IThrowStatement)">
            <summary>
            Returns true if the throw statement uses a user declared exception descendant.
            </summary>
            <param name="resolveResult"></param>
            <param name="throwStatement"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseCodeIssueSearcher.CheckCodeIssues(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs)">
            <summary>
            Searches for code issues inside the given scope.
            </summary>
            <param name="ea">The scope to search for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ComplexMemberIssueSearcher.CheckCodeIssues(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs)">
            <summary>
            Searches for code issues inside the given scope.
            </summary>
            <param name="ea">The scope to search for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndeclaredElementIssueSearcher.CheckCodeIssues(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs)">
            <summary>
            Searches for code issues inside the given scope.
            </summary>
            <param name="ea">The scope to search for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.IsEventHandler(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Checks if method is event handler.
            </summary>
            <param name="resolveResult">The scope resolve result to use.</param>
            <param name="member">The member to use.</param>
            <returns>Returns true if member is event handler.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.AddDeadCode(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Adds unused declaration warning.
            </summary>
            <param name="ea">The code issue check event arguments.</param>
            <param name="elements">The collection of declarations to add warning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.GetSearchScope(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns search scope for the given declaration.
            </summary>
            <param name="scope">The current scope to use.</param>
            <param name="declaration">The declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.AddDeadCode(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Adds unused declaration warning.
            </summary>
            <param name="ea">The code issue check event arguments.</param>
            <param name="element">The declaration to add warning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.IsUnusedDeclaration(DevExpress.CodeRush.StructuralParser.ReferenceSearcher,DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Checks if the given declaration is unused inside the specified scope.
            </summary>
            <param name="searcher">The reference searcher to use.</param>
            <param name="resolveResult">The scope resolve result to use.</param>
            <param name="scope">The scope to search.</param>
            <param name="declaration">The declaration to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.GetUnusedDeclarations(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs,DevExpress.CodeRush.StructuralParser.IElement,System.Type[])">
            <summary>
            Gets unused declarations of the spcified type inside the given scope.
            </summary>
            <param name="ea">Check code issue event arguments.</param>
            <param name="scope">The scope to search.</param>
            <param name="types">The type of element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.GetDeclarationTypes">
            <summary>
            Returns an array of supported declaration types.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.CanCheckUnusedDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given declaration can be checked.
            </summary>
            <param name="declaration">The declaration to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.CanCheckUnusedDeclaration(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given declaration can be checked.
            </summary>
            <param name="resolveResult">The resolve result to use.</param>
            <param name="declaration">The declaration to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedElementIssueSearcher.CheckCodeIssues(DevExpress.CodeRush.Core.CheckCodeIssuesEventArgs)">
            <summary>
            Searches for code issues inside the given scope.
            </summary>
            <param name="ea">The scope to search for code issues.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedLocalIssueSearcher.GetSearchScope(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns search scope for the given declaration.
            </summary>
            <param name="scope">The current scope to use.</param>
            <param name="declaration">The declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedLocalIssueSearcher.GetDeclarationTypes">
            <summary>
            Returns an array of supported declaration types.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedLocalIssueSearcher.CanCheckUnusedDeclaration(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given declaration can be checked.
            </summary>
            <param name="resolveResult">The resolve result to use.</param>
            <param name="declaration">The declaration to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedPrivateMethodIssueSearcher.GetSearchScope(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns search scope for the given declaration.
            </summary>
            <param name="scope">The current scope to use.</param>
            <param name="declaration">The declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedPrivateMethodIssueSearcher.GetDeclarationTypes">
            <summary>
            Returns an array of supported declaration types.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnusedPrivateMethodIssueSearcher.CanCheckUnusedDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given declaration can be checked.
            </summary>
            <param name="declaration">The declaration to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeHelper.GetUniqueName(System.String,System.Collections.IList)">
            <summary>
            Returns a string based on the passed base name which is unique in the passed list. 
            Returned strings are the passed name with a trailing integer, starting with 1 and 
            incrementing until the return value is unique. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.#ctor">
            <summary>
            Initializes a new instance of the ContentServices class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.Get(System.String)">
            <summary>
            Returns content provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
            <returns>ContentProvider instance if found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.Execute(System.String)">
            <summary>
            Executes content provider with the given name.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.ResetIsUpdating">
            <summary>
            Resets internal update counter, so availability checks can 
            be normally resumed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.BeginUpdate">
            <summary>
            This method suspends checking availability.
            If you call this inside plug-in, you must guarantee a 
            call to EndUpdate() (e.g., placed in a finally block). 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.EndUpdate">
            <summary>
            Marks the end of an update session. You must call this once for every call to BeginUpdate().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentServices.GetAvailableContentProvidersAfterParse">
            <summary>
            Parses the active document if the text has been changed and gets all available content providers 
            in the active context. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentServices.CanShowSmartTag">
            <summary>
            Returns true if there's at least one content provider available and it's possible to show the SmartTag.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentServices.Providers">
            <summary>
            Gets all registered content providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentServices.AvailableProviders">
            <summary>
            Gets all available content providers in the active context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentServices.LastExecutedProvider">
            <summary>
            Return the last applied content provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentServices.VSFeatures">
            <summary>
            Returns a list of Visual Studio feature wrappers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentServices.IsUpdating">
            <summary>
            Returns true if availability is updated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeModServices.CanShowSmartTagAsync(DevExpress.CodeRush.Core.AsyncAvailabilityEventArgs)">
            <summary>
            Return true if there's at least one code provider available.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeModServices.GetAvailableCodeProviders">
            <summary>
            Gets all available code providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeModServices.GetConsolidatedLinesCount">
            <summary>
            Returns the number of duplicate code lines consolidated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeModServices.CanShowSmartTag">
            <summary>
            Return true if there's at least one code provider available.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeModServices.AvailableCodeProviders">
            <summary>
            Gets all available code providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeModServices.CodeProviders">
            <summary>
            Gets all registered code providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeModServices.Providers">
            <summary>
            Gets all registered code providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeModServices.ProvidersCount">
            <summary>
            Gets count of registered code providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeRush.OnLoaded(DevExpress.CodeRush.Core.DXCoreLoadedEventArgs)">
            <summary>
            Raises Loaded event.
            </summary>
            <param name="ea">The event args to use</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeRush.OnUnloading(DevExpress.CodeRush.Core.DXCoreUnloadingEventArgs)">
            <summary>
            Raises Unloading event.
            </summary>
            <param name="ea">The event args to use</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeRush.ChangeLoadState(DevExpress.CodeRush.Core.DXCoreLoadState)">
            <summary>
            Used internally by the DXCore loader. Do not use.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeRush.InitializeDXCore(EnvDTE.DTE,DevExpress.CodeRush.Core.CodeRushStateCause)">
            <summary>
            Used internally by the DXCore loader. Do not use.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeRush.FinalizeDXCore(Extensibility.ext_DisconnectMode)">
            <summary>
            Used internally by the DXCore loader. Do not use.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.CurrentState">
            <summary>
            Gets the current state of CodeRush.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.ActionHint">
            <summary>
            ActionHint services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Assembly">
            <summary>
            Assembly services
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.BigHint">
            <summary>
            BigHint services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Breakpoint">
            <summary>
            Get and toggle breakpoints.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Caret">
            <summary>
            Edit window cursor (caret) services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Clipboard">
            <summary>
            Clipboard services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.CodeMod">
            <summary>
            CodeMod services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.CodeStyle">
            <summary>
            Code style services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Color">
            <summary>
            Color services (blending, brightening, etc.)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Command">
            <summary>
            CodeRush Action and Visual Studio Command services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Constants">
            <summary>
            CodeRush constants.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Content">
            <summary>
            Content services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Contract">
            <summary>
            Contract services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Criteria">
            <summary>
            Contract services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Context">
            <summary>
            Access to context providers and methods that report whether specified context is satisfied.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Designer">
            <summary>
            Designer services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.TextBuffers">
            <summary>
            Text buffer service that provides low-level access to text buffers open (visibly or invisibly) in Visual Studio.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Documents">
            <summary>
            Document services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.DynamicLists">
            <summary>
            DynamicList provider services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Editor">
            <summary>
            Text window services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.EditPoints">
            <summary>
            Provides services for manipulating DXCore EditPoints.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.File">
            <summary>
            File services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Graphics">
            <summary>
            Graphics services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.GUIDs">
            <summary>
            Environment identifiers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Hints">
            <summary>
            Hinting services for showing shortcut hints, big feedback, and 
            other discoverability services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.IDE">
            <summary>
            IDE services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Intellassist">
            <summary>
            Intellassist services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Intellisense">
            <summary>
            Intellisense services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Key">
            <summary>
            Keystroke, key name, and key mapping services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Language">
            <summary>
            Programming language services, including access to LanguageExtensions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Location">
            <summary>
            Access to the current SourceLocation, describing the cursor position within the solution.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Markers">
            <summary>
            Markers services (e.g., dropping, swapping, and collecting markers in source code) 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Menus">
            <summary>
            Menu services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.MultiSelect">
            <summary>
            MultiSelect services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Options">
            <summary>
            Options page and decoupled storage services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Outline">
            <summary>
            Editor outlining services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.PlugInExtensions">
            <summary>
            Access to registered plug-in extensions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Project">
            <summary>
            Project services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Profiling">
            <summary>
            Access to profiling extensions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.ProjectItems">
            <summary>
            ProjectItem services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Reflection">
            <summary>
            .NET reflection services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.RegEx">
            <summary>
            Regular expression search engine services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Resources">
            <summary>
            Shared resources for use in plug-ins.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Selection">
            <summary>
            Text selection and active edit point services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Serialization">
            <summary>
            Serialization services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.SmartTags">
            <summary>
            SmartTag services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Solution">
            <summary>
            Solution services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Source">
            <summary>
            Source model services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Strings">
            <summary>
            String provider services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.StrUtil">
            <summary>
            String services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Synchronization">
            <summary>
            Provides methods for synchronizing thread code on Visual Studio's foreground thread.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Templates">
            <summary>
            Template and text expansion services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.TextCommands">
            <summary>
            TextCommands services (used internally by the DXCore to register and access TextCommands).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.TextExpansions">
            <summary>
            Provides methods and properties for expanding dynamic text (e.g., CodeRush Templates).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.ToolWindows">
            <summary>
            ToolWindow services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.TypeInitializers">
            <summary>
            TypeInitializers provider services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.UndoStack">
            <summary>
            Undo context and undo/redo stack services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Version">
            <summary>
            CodeRush version information services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.ViewPane">
            <summary>
            ViewPane services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.VSSettings">
            <summary>
            Visual Studio settings (font, syntax highlight colors, etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Windows">
            <summary>
            Window services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Wizards">
            <summary>
            CodeRush wizards services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.XPO">
            <summary>
            XPO services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Navigation">
            <summary>
            Navigation services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Issues">
            <summary>
            Code issue services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Document">
            <summary>
            Document services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeRush.Menu">
            <summary>
            Menu services.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeRush.Loaded">
            <summary>
            Fired when CodeRush engine is loaded.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeRush.BeforeLoaded">
            <summary>
            Fired when CodeRush engine is loaded.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.CodeRush.Unloading">
            <summary>
            Fired when CodeRush engine is being unloaded.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeStyleServices.HasLocalStyle(System.String)">
            <summary>
            Return true if the passed name has local variable style based on customer settings for the active language (on the Editor\Code Style\Identifiers options page).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeStyleServices.HasFieldStyle(System.String)">
            <summary>
            Return true if the passed name has field variable style based on customer settings for the active language (on the Editor\Code Style\Identifiers options page).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeStyleServices.HasParamStyle(System.String)">
            <summary>
            Return true if the passed name has parameter style based on customer settings for the active language (on the Editor\Code Style\Identifiers options page).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.SuppressDefaultAccessModifiers">
            <summary>
            Determines whether access modifiers for default visibilities are omitted from the code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatTemplate">
            <summary>
            Determines whether code template text should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatSmartPaste">
            <summary>
            Determines whether smart pastes should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatDuplicateLine">
            <summary>
            Determines whether duplicate line actions should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatMultiLineEmbedding">
            <summary>
            Determines whether multi-line embeddings should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatSingleLineEmbedding">
            <summary>
            Determines whether single-line embeddings should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatAutoDeclaration">
            <summary>
            Determines whether Auto Declare code should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatCodeLibraryClip">
            <summary>
            Determines whether inserted code library clips should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatRefactoring">
            <summary>
            Determines whether code refactorings should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FormatSelectionInversion">
            <summary>
            Determines whether selection inversions should be reformatted according to the current IDE formatting style options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeField">
            <summary>
            Returns MemberVisibility for fields.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeConstant">
            <summary>
            Returns MemberVisibility for constants.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeMethod">
            <summary>
            Returns MemberVisibility for methods.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeProperty">
            <summary>
            Returns MemberVisibility for properties.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeEvent">
            <summary>
            Returns MemberVisibility for events.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeType">
            <summary>
            Returns MemberVisibility for types.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ScopeNestedType">
            <summary>
            Returns MemberVisibility for nested types.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.PrefixLocal">
            <summary>
            Returns the prefix associated with local variables for the active language based on customer settings (on the Editor\Code Style\Identifiers options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.SuffixLocal">
            <summary>
            Returns the suffix associated with local variables for the active language based on customer settings (on the Editor\Code Style\Identifiers options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.PrefixParam">
            <summary>
            Returns the prefix associated with parameters for the active language based on customer settings (on the Editor\Code Style\Identifiers options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.SuffixParam">
            <summary>
            Returns the suffix associated with parameters for the active language based on customer settings (on the Editor\Code Style\Identifiers options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.PrefixField">
            <summary>
            Returns the prefix associated with field variables for the active language based on customer settings (on the Editor\Code Style\Identifiers options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.SuffixField">
            <summary>
            Returns the suffix associated with field variables for the active language based on customer settings (on the Editor\Code Style\Identifiers options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.Formatting">
            <summary>
            Returns the IFormattingService implementer for access to code formatting rules.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.UseMemberSections">
            <summary>
            Gets or sets the value indicating whether the p?Type? template and other similar features
            will organize created members into their own sections. See the Editor | Code Style | Member
            Sections options page to set the text for the specified sections.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.NamespaceReferencesLocation">
            <summary>
            Gets or sets the namespace reference location value indicating where generated references should be placed to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.UseImplicitVariable">
            <summary>
            Return true if should use Implicit Variable (based on customer settings on the 'Editor\Code Style\Programming Style' options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.UseBuiltInTypes">
            <summary>
            Return true if should use built-in types (based on customer settings on the 'Editor\Code Style\Programming Style' options page).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.FieldScope">
            <summary>
            Returns MemberVisibility for fields.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.ConstantScope">
            <summary>
            Returns MemberVisibility for constants.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.MethodScope">
            <summary>
            Returns MemberVisibility for methods.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.PropertyScope">
            <summary>
            Returns MemberVisibility for properties.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.EventScope">
            <summary>
            Returns MemberVisibility for events.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.TypeScope">
            <summary>
            Returns MemberVisibility for types.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeStyleServices.NestedTypeScope">
            <summary>
            Returns MemberVisibility for nested types.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CollapsibleRegion">
            <summary>
            Represents a collapsed or expanded region of outlined text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CollapsibleRegion.Collapse(System.Boolean)">
            <summary>
            Collapses this region. If undoable is true, this action is placed on the current undo stack.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CollapsibleRegion.Collapse">
            <summary>
            Collapses this region. This action is placed on the current undo stack.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CollapsibleRegion.Expand(System.Boolean)">
            <summary>
            Expands this region. If undoable is true, this action is placed on the current undo stack.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CollapsibleRegion.Expand">
            <summary>
            Expands this region. This action is placed on the current undo stack.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CollapsibleRegion.Collapsed">
            <summary>
            Gets or sets the collapsed state of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CollapsibleRegion.Expanded">
            <summary>
            Gets or sets the expanded state of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CollapsibleRegion.IsValid">
            <summary>
            Returns true if this region is valid; otherwise, false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CollapsibleRegion.Range">
            <summary>
            Returns the range of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CollapsibleRegion.Text">
            <summary>
            Gets or sets the text banner for this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CollapsibleRegion.TextDocument">
            <summary>
            Gets the TextDocument associated with this region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Collapse(System.Boolean)">
            <summary>
            Collapses this region. If undoable is true, this action is placed on the current undo stack.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Collapse">
            <summary>
            Collapses this region. This action is placed on the current undo stack.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Expand(System.Boolean)">
            <summary>
            Expands this region. If undoable is true, this action is placed on the current undo stack.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Expand">
            <summary>
            Expands this region. This action is placed on the current undo stack.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.BaseBuffer">
            <summary>
            Gets the base buffer for this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.VsHiddenRegion">
            <summary>
            Gets the internal IVsHiddenRegion.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Collapsed">
            <summary>
            Gets or sets the collapsed state of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Expanded">
            <summary>
            Gets or sets the expanded state of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.IsValid">
            <summary>
            Returns true if this region is valid; otherwise, false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Range">
            <summary>
            Returns the range of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.Text">
            <summary>
            Gets or sets the text banner for this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSIPCollapsibleRegion.TextDocument">
            <summary>
            Gets the TextDocument associated with this region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.BlendColor(System.Drawing.Color,System.Drawing.Color,System.Byte)">
            <summary>
            Blends two colors to produce a third color.
            </summary>
            <param name="aColor1">The first color to blend.</param>
            <param name="aColor2">The second color to blend.</param>
            <param name="aPercentOfColor1">The percentage of the first color (0-100).</param>
            <returns>The blend of the two colors.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.BlendColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Blends two colors to produce a third color.
            </summary>
            <param name="aColor1">The first color to blend.</param>
            <param name="aColor2">The second color to blend.</param>
            <returns>The blend of the two colors.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.ReloadColors">
            <summary>
            Loads custom color settings from storage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.Invert(System.Drawing.Color)">
            <summary>
            Inverts a color.
            </summary>
            <param name="aColor">The color to invert.</param>
            <returns>A negative of the specified color.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.Blend(System.Drawing.Color,System.Drawing.Color,System.Byte)">
            <summary>
            Blends two colors to produce a third color.
            </summary>
            <param name="aColor1">The first color to blend.</param>
            <param name="aColor2">The second color to blend.</param>
            <param name="aPercentOfColor1">The percentage of the first color (0-100).</param>
            <returns>The blend of the two colors.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.Blend(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Blends two colors to produce a third color.
            </summary>
            <param name="aColor1">The first color to blend.</param>
            <param name="aColor2">The second color to blend.</param>
            <returns>The blend of the two colors.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.AdjustBrightness(System.Drawing.Color,System.Int32)">
            <summary>
            Adjusts the brightness of a specified color by the specified amount.
            </summary>
            <param name="aColor">The color to adjust.</param>
            <param name="aAmount">The amount of brightness to add, or subtract if negative (-255 to 255).</param>
            <returns>The new color.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.IsMatch(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Determines if two colors are equivalent.
            </summary>
            <param name="aColor1">A color to compare.</param>
            <param name="aColor2">A color to compare.</param>
            <returns>Returns true if the colors match.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ColorServices.IsMatch(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Determines if two colors are equivalent.
            </summary>
            <param name="aColor1">A color to compare.</param>
            <param name="aColor2">A color to compare.</param>
            <param name="aTolerance">A tolerance used in the comparison. The difference between each red, green, and blue component of the two colors must not exceed this value. </param>
            <returns>Returns true if the colors match within the specified tolerance.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ColorServices.SyntaxHighlighting">
            <summary>
            Colors for syntax highlighting CodeRush elements.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.CommandExists(System.Guid,System.UInt32)">
            <summary>
            Uses VSIP to determine whether or not a VS command exists.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.CommandExists(System.String,System.UInt32)">
            <summary>
            Uses VSIP to determine whether or not a VS command exists.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.CommandExists(System.String)">
            <summary>
            Uses VSIP to determine whether or not a VS command exists.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetCommandName(System.UInt32)">
            <summary>
            Uses VSIP to get the english name of a VS command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetCommandName(System.Int32)">
            <summary>
            Uses VSIP to get the english name of a VS command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetCommandName(System.Guid,System.UInt32)">
            <summary>
            Uses VSIP to get the english name of a VS command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetCommandName(System.Guid,System.Int32)">
            <summary>
            Uses VSIP to get the english name of a VS command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetCommandName(System.String,System.Int32)">
            <summary>
            Uses VSIP to get the english name of a VS command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetCommandName(EnvDTE.Command)">
            <summary>
            Uses VSIP to get the english name of a VS command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.IsCommandRegisteredForAction(System.String,System.String)">
            <summary>
            Checks whether given command was registered inside Visual Studio for particular CodeRush action.
            </summary>
            <param name="commandName">Name of Visual Studio command.</param>
            <param name="actionName">Name of CodeRush action.</param>
            <returns>True if <paramref name="commandName"/> was registered by CodeRush for <paramref name="actionName"/>; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.IsCommandRegisteredForAction(System.String,DevExpress.CodeRush.Core.Action)">
            <summary>
            Checks whether given command was registered inside Visual Studio for particular CodeRush action.
            </summary>
            <param name="commandName">Name of Visual Studio command.</param>
            <param name="action">CodeRush action.</param>
            <returns>True if <paramref name="commandName"/> was registered by CodeRush for <paramref name="action"/>; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.String)">
            <summary>
            Executes an action or command registered with the DXCore and/or Visual Studio. If the action or command does not
            exist or cannot be executed, this method returns false.
            </summary>
            <param name="name">Name of the action or command to execute (e.g., "Edit.Copy").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.String,System.String)">
            <summary>
            Executes an action or command registered with the DXCore and/or Visual Studio. If the action or command does not
            exist or cannot be executed, this method returns false.
            </summary>
            <param name="name">Name of the action or command to execute (e.g., "Edit.Copy").</param>
            <param name="parameters">Optional string parameters for the action or command.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(EnvDTE.Command)">
            <summary>
            Executes the specified Visual Studio command. If the command is null or cannot be executed, this method returns false.
            </summary>
            <param name="command">The Visual Studio command to execute.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(EnvDTE.Command,System.String)">
            <summary>
            Executes the specified Visual Studio command. If the command is null or cannot be executed, this method returns false.
            </summary>
            <param name="command">The Visual Studio command to execute.</param>
            <param name="parameters">Optional string parameters to the command.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes the Visual Studio command bound to passed shortcut in Text Editor scope.
            </summary>
            <param name="keyCode">Shortcut to execute command for.</param>
            <param name="control">Value indicating whether control modifier key is down.</param>
            <param name="shift">Value indicating whether shift modifier key is down.</param>
            <param name="alt">Value indicating whether alt modifier key is down.</param>
            <returns>True if command was executed; False otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.Guid,System.Int32)">
            <summary>
            Executes the Visual Studio command represented by the specified command group and id. If the command does not exist or cannot
            be executed, this method returns false.
            </summary>
            <param name="commandGroup">A System.Guid representing the command group of the command to execute.</param>
            <param name="commandID">A System.Int32 representing the command ID of the command to execute.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.Guid,System.Int32,System.String)">
            <summary>
            Executes the Visual Studio command represented by the specified command group and id. If the command does not exist or cannot
            be executed, this method returns false.
            </summary>
            <param name="commandGroup">A System.Guid representing the command group of the command to execute.</param>
            <param name="commandID">A System.Int32 representing the command ID of the command to execute.</param>
            <param name="parameters">Optional string parameters to the command.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.String,System.Int32)">
            <summary>
            Executes the Visual Studio command represented by the specified command group and id. If the command does not exist or cannot
            be executed, this method returns false.
            </summary>
            <param name="commandGroup">A System.String representing the command group of the command to execute.</param>
            <param name="commandID">A System.Int32 representing the command ID of the command to execute.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Execute(System.String,System.Int32,System.String)">
            <summary>
            Executes the Visual Studio command represented by the specified command group and id. If the command does not exist or cannot
            be executed, this method returns false.
            </summary>
            <param name="commandGroup">A System.String representing the command group of the command to execute.</param>
            <param name="commandID">A System.Int32 representing the command ID of the command to execute.</param>
            <param name="parameters">Optional string parameters to the command.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetVsCommandBindings">
            <summary>
            Gets list of all VS command bindings.
            </summary>
            <returns>List of command bindings.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetVsCommandConflicts(DevExpress.CodeRush.Core.ShortcutBase,DevExpress.CodeRush.Core.ShortcutBase)">
            <summary>
            Gets list of VS command bindings which have conflict with given shortcuts.
            </summary>
            <param name="key1">First key.</param>
            <param name="key2">Second key.</param>
            <returns>List of conflicting command bindings.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetVsCommandConflicts(DevExpress.CodeRush.Core.ShortcutBase,DevExpress.CodeRush.Core.ShortcutBase,System.String)">
            <summary>
            Gets list of VS command bindings which have conflict with given shortcuts.
            </summary>
            <param name="key1">First key.</param>
            <param name="key2">Second key.</param>
            <param name="actionName">Name of action to detect conflict for.</param>
            <returns>List of conflicting command bindings.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.ExecuteAction(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.Object@,System.Object@,System.Boolean@)">
            <summary>
            Executes a registered CodeRush action. This method is called internally by CodeRush. There is no need to call this from an add-in (use Execute instead).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.QueryStatus(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            Checks the status of the specified action. This method is called internally by CodeRush. There is no need to call this yourself.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.ExecuteAction(System.String,EnvDTE.vsCommandExecOption,System.Object@,System.Object@,System.Boolean@)">
            <summary>
            Executes a registered CodeRush action. This method is called internally by CodeRush. There is no need to call this from an add-in (use Execute instead).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.QueryStatus(System.String,EnvDTE.vsCommandStatusTextWanted,EnvDTE.vsCommandStatus@,System.Object@)">
            <summary>
            Checks the status of the specified action. This method is called internally by CodeRush. There is no need to call this yourself.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Register(DevExpress.CodeRush.Core.Action)">
            <summary>
            Registers the CodeRush action with the CodeRush.Actions list. Internal method, no need to call directly.
            </summary>
            <param name="action">The command to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.RegisterAllWithIDE">
            <summary>
            Registers each known Action with the IDE. Internal method, no need to call directly.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.RegisterWithIDE(DevExpress.CodeRush.Core.Action)">
            <summary>
            Registers a Action with the IDE if its RegisterInVS property is true.
            </summary>
            <param name="action">The Action to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Unregister(DevExpress.CodeRush.Core.Action)">
            <summary>
            Unregisters a Action so that it is no longer available in CodeRush and the IDE.
            </summary>
            <param name="action">The Action to unregister.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.AddNamed(System.String,System.String,System.String)">
            <summary>
            Adds a named command and registers it exclusively with Visual Studio (and not with CodeRush). If you want to register a command with 
            Visual Studio, we recommend dropping a Action on your plug-in form and setting properties as needed.
            </summary>
            <param name="commandName">The name of the command to register. This command will be prefixed by "CodeRush.". Do not include a period in this name.</param>
            <param name="buttonText">The text used if a button is bound to this command.</param>
            <param name="toolTip">A hint that describes this command.</param>
            <returns>Returns the name command added. If the command already exists or if an exception is thrown, this method returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.AddNamed(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a named command and registers it exclusively with Visual Studio (and not with CodeRush). If you want to register a command with 
            Visual Studio, we recommend dropping a Action on your plug-in form and setting properties as needed.
            </summary>
            <param name="commandName">The name of the command to register. This command will be prefixed by "CodeRush.". Do not include a period in this name.</param>
            <param name="buttonText">The text used if a button is bound to this command.</param>
            <param name="toolTip">A hint that describes this command.</param>
            <param name="allowCustomizeVSShortcut">If true, added command will appear on the "Tools->Options...->Keyboard" option page.</param>
            <returns>Returns the name command added. If the command already exists or if an exception is thrown, this method returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Delete(System.String)">
            <summary>
            Removes the named Visual Studio command.
            </summary>
            <param name="commandName">Name of command.</param>
            <returns>True if the command existed.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.DeleteAllStartingWith(System.String)">
            <summary>
            Deletes all Visual Studio commands starting with the specified prefix in the CodeRush category (e.g., "CodeRush." + prefix).
            </summary>
            <param name="prefix">The prefix of the commands to delete. Any commands in the specified category that start with
            this prefix will be deleted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.DeleteAllStartingWith(System.String,System.String[])">
            <summary>
            Deletes all Visual Studio commands starting with the specified prefix in the CodeRush category (e.g., "CodeRush." + aCommandPrefix).
            </summary>
            <param name="prefix">The prefix of the commands to delete. Any commands in the specified category that start with
            this prefix will be deleted.</param>
            <param name="exceptions">A string array containing a list of commands that should not be deleted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.DeleteAllStartingWith(System.String,System.String)">
            <summary>
            Deletes all Visual Studio commands starting with the specified prefix and category.
            </summary>
            <param name="prefix">The prefix of the commands to delete. Any commands in the specified category that start with this prefix will be deleted.</param>
            <param name="category">The category to search for. For example, in the command "Edit.Cut", "Edit" is the category.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.DeleteAllStartingWith(System.String,System.String,System.String[])">
            <summary>
            Deletes all Visual Studio commands starting with the specified prefix and category, except for the commands listed in
            the given "exceptions" string array.
            </summary>
            <param name="prefix">The prefix of the commands to delete. Any commands in the specified category that start with
            this prefix will be deleted.</param>
            <param name="category">The category to search for. For example, in the command "Edit.Cut", "Edit" is the category.</param>
            <param name="exceptions">A string array containing a list of commands that should not be deleted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetFirstStartingWith(System.String,System.String)">
            <summary>
            Returns the first Visual Studio command starting with the specified prefix in the specified category.
            </summary>
            <param name="prefix">The prefix to search for.</param>
            <param name="category">The category to search in. For example, in the command "Edit.Cut", "Edit" is the category.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Exists(System.String)">
            <summary>
            Returns true if the specified command exists and has been registered with Visual Studio.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.FindPopup(DevExpress.CodeRush.Menus.MenuBar,System.String,System.Boolean)">
            <summary>
            Searches a MenuBar for a popup menu control whose Bar.Name 
            matches name.
            </summary>
            <param name="bar">The MenuBar to search</param>
            <param name="name">The name to search for</param>
            <param name="recursive">If true the search will continue through and MenuBars found.</param>
            <returns>The MenuPopup whose Bar.Name matches name.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Get(System.String,System.String)">
            <summary>
            Returns the Visual Studio command specified by category and name.
            </summary>
            <param name="name">The name of the command to find.</param>
            <param name="category ">The name of the command before the leading ".". For example, 
            in the command "Edit.Copy", it would be "Edit".</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.Get(System.String)">
            <summary>
            Returns the Visual Studio registered command given by name. "CodeRush." is prepended as the command category if a category is not specified.
            </summary>
            <param name="name">The name of the command to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CommandServices.GetBar(System.String)">
            <summary>
            Returns the MenuBar specified by name.
            </summary>
            <param name="name">The name of the name to retrieve.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ControlSubClasser">
            <summary>
            A descendent of WindowSubClasser intended for hooking .NET Controls.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.WindowSubClasser">
            <summary>
            A descendent of NativeWindow that implements IDisposable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowSubClasser.#ctor">
            <summary>
            Creates an instance of HandleHook with no handle assigned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowSubClasser.#ctor(DevExpress.CodeRush.Win32.HWND)">
            <summary>
            Creates an instance of HandleHook with a handle assigned.
            </summary>
            <param name="handle">The handle to assign window hook to.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Logic">
            <summary>
            Provides bit and logical manipulation routines.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Logic.ToArray(System.Int64,System.Int32)">
            <summary>
            Converts the specifed value to an array of booleans.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="count">The number of bits to process.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Logic.ToString(System.Int64,System.Int32)">
            <summary>
            Converts the specified value to a binary representation string.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="count">The number of bits to process.</param>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str">
            <summary>
            String constants (not translated).
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CarriageReturnLineFeed">
            <summary>
            "\r\n"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CarriageReturn">
            <summary>
            "\r"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.LineFeed">
            <summary>
            "\n"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tab">
            <summary>
            "\t"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Space">
            <summary>
            " "
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Dot">
            <summary>
            "."
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Colon">
            <summary>
            ":"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Semicolon">
            <summary>
            ";"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.DoubleQuote">
            <summary>
            "\""
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Comma">
            <summary>
            ","
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.BackSlash">
            <summary>
            "\\"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.ForwardSlash">
            <summary>
            "/"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asterisk">
            <summary>
            "*"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.OpenParen">
            <summary>
            "("
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CloseParen">
            <summary>
            ")"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.EqualsSign">
            <summary>
            "="
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.BitGroupDelimiter">
            <summary>
            "v" -- For parsing bits from a string. (E.g. "0001 v 0011 v 0101 v 0111 v 1110 v 1111")
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.NewName">
            <summary>
            "%NewName%" -- this special string is used in text that presents a message 
            about a new member name (e.g., for a newly-created method or property) to 
            the user.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Sharp">
            <summary>
            "#"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CS">
            <summary>
            "C#"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.VB">
            <summary>
            "VB"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Language">
            <summary>
            "Language"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Inherits">
            <summary>
            "Inherits"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CodeBehind">
            <summary>
            "CodeBehind"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CodeFile">
            <summary>
            "CodeFile"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.WebUserControl">
            <summary>
            "WebUserControl"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Qualified">
            <summary>
            "Qualified"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Universal">
            <summary>
            "Universal"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Runat">
            <summary>
            "runat"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Server">
            <summary>
            "server"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Id">
            <summary>
            "id"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.asp">
            <summary>
            "asp"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Page">
            <summary>
            "Page"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Link">
            <summary>
            "link"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Style">
            <summary>
            "style"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Class">
            <summary>
            "class"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CssClass">
            <summary>
            "CssClass"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Body">
            <summary>
            "body"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Head">
            <summary>
            "head"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Html">
            <summary>
            "html"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Form">
            <summary>
            "form"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.Div">
            <summary>
            "div"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.AutoEventWireUp">
            <summary>
            "AutoEventWireUp"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.MasterFileExt">
            <summary>
            ".master"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.AspxFileExt">
            <summary>
            ".aspx"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.AscxFileExt">
            <summary>
            ".ascx"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.SkinFileExt">
            <summary>
            ".skin"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CssFilExt">
            <summary>
            ".css"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CsFileExt">
            <summary>
            ".cs"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.VbFileExt">
            <summary>
            ".vb"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CompareValidator">
            <summary>
            "CompareValidator"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.RangeValidator">
            <summary>
            "RangeValidator"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.CustomValidator">
            <summary>
            "CustomValidator"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.RegularExpressionValidator">
            <summary>
            "RegularExpressionValidator"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Asp.RequiredFieldValidator">
            <summary>
            "RequiredFieldValidator"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AbstractMemberCannotBeDeclaredInNonabstractClass">
            <summary>
            Abstract member cannot be declared in nonabstract class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AbstractMemberCannotBePrivate">
            <summary>
            Abstract member cannot be private
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AbstractMemberCannotBeSealed">
            <summary>
            Abstract member cannot be marked as sealed
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AbstractMemberCannotBeVirtual">
            <summary>
            Abstract member cannot be marked as virtual
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AbstractMemberCannotDeclareABody">
            <summary>
            Abstract member cannot declare a body
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AccessorInAnInterfaceCannotHaveModifiers">
            <summary>
            Accessor in an interface cannot have modifiers
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AnonymousMethodCannotHaveParamsParameter">
            <summary>
            Anonymous method cannot have 'params' parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.AssignmentGlobalVariable">
            <summary>
            Assignment Global Variable
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ArrayElementsCannotBeOfStaticType">
            <summary>
            Array elements cannot be of static type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.BaseKeywordIsNotValidInAStaticMember">
            <summary>
            Keyword "base" is not valid in a static member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.BaseTypeConstructorsAreNotImplemented">
            <summary>
            Base type constructors are not implemented
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CanBeInitializedConditionally">
            <summary>
            Can initialize conditionally
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CanCombineInitializationAndDeclaration">
            <summary>
            Can combine initialization with declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CanDeclareMvcView">
            <summary>
            Can declare MVC View
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CanImplementBaseTypeConstructors">
            <summary>
            Can implement base type constructors
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CanInlineTemporaryVariable">
            <summary>
            Can inline temporary variable
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CanRemoveTypeQualifier">
            <summary>
            Can remove type qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotCreateInstanceOfAbstractClass">
            <summary>
            Cannot create an instance of abstract class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotCreateInstanceOfInterface">
            <summary>
            Cannot create an instance of interface
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotCreateInstanceOfStaticClass">
            <summary>
            Cannot create an instance of static class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotDeclareVariableOfStaticType">
            <summary>
            Cannot declare variable of static type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotInheritFromSealedType">
            <summary>
            Cannot inherit from sealed type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotInheritFromSpecialValueTypeClass">
            <summary>
            Cannot inherit from special class \'System.ValueType\'
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotInheritFromStaticClass">
            <summary>
            Cannot inherit from static class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotUseRefOrOutParameterInsideAnAnonymousMethodBlock">
            <summary>
            Cannot use ref or out parameter inside an anonymous method block
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotYieldInTheBodyOfACatchClause">
            <summary>
            Cannot yield in the body of a catch clause
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotYieldInTheBodyOfAFinallyClause">
            <summary>
            Cannot yield in the body of a finally clause
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CannotYieldInTheBodyOfATryBlockWithACatchClause">
            <summary>
            Cannot yield in the body of a try block with a catch clause
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CatchBlockSimplyReThrow">
            <summary>
            Catch blocks that simply re-throw the same exception
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CaseStatementCanBeUsed">
            <summary>
            Case statement can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CaseStatementHasIncorrectIntegerRangeExpression">
            <summary>
            Case statement has incorrect range of integers expression
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ComplexMember">
            <summary>
            Complex member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ConditionalCanBeFlattened">
            <summary>
            Conditional can be flattened
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ConstantCannotBeMarkedStatic">
            <summary>
            Constant cannot be marked static
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ConstantCannotBeMarkedShared">
            <summary>
            Constant cannot be marked shared
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ConstructorCannotCallItself">
            <summary>
            Constructor cannot call itself
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ConstructorMustDeclareABody">
            <summary>
            Constructor must declare a body
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ControlCannotLeaveTheBodyOfAFinallyClause">
            <summary>
            Control cannot leave the body of a finally clause
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.CircularBaseClassDependancy">
            <summary>
            Circular base class dependency
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DeclarationCanBeMadeConstant">
            <summary>
            Declaration can be a constant
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DelegateCanBeReplacedWithLambdaExpression">
            <summary>
            Delegate can be replaced with lambda expression
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DelegateCannotBeStatic">
            <summary>
            Delegate cannot be marked static
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DestructorMustDeclareABody">
            <summary>
            Destructor must declare a body
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DuplicateCode">
            <summary>
            Duplicate code
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DuplicateLocalDeclaration">
            <summary>
            Duplicate declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.DuplicatePropertyDeclaration">
            <summary>
            Duplicate declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.EmptyCatchClauseSupressesAnyErrors">
            <summary>
            Catch block is empty
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.EnvironmentNewLineCanBeUsed">
            <summary>
            Environment.NewLine can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.EnumerationCannotDeriveFromThisType">
            <summary>
            Enumeration cannot derive from this type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.EventAccessorsCannotHaveModifiers">
            <summary>
            Event accessors cannot have modifiers
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.EventInInterfaceCannotHaveAddOrRemoveAccessors">
            <summary>
            Interface events cannot have add or remove accessors
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExpressionHasRedundancy">
            <summary>
            Expression has redundancy
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExpressionIsComplex">
            <summary>
            Expression is complex
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExtensionMethodCannotHaveParameterArray">
            <summary>
            Extension method cannot have a parameter array used with \'this\' modifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExtensionMethodCannotHavePointerParameter">
            <summary>
            Extension method cannot have a pointer parameter used with \'this\' modifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExtensionMethodMissesSystemCoreReference">
            <summary>
            Cannot define a new extension method because the compiler required type. Add a reference to System.Core assembly.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExtensionMethodMustBeDefinedInANonGenericStaticClass">
            <summary>
            Extension method must be defined in a non-generic static class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExtensionMethodMustBeDefinedInATopLevelStaticClass">
            <summary>
            Extension method must be defined in a top level static class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExtensionMethodThisParameterShouldBeFirst">
            <summary>
            Parameter modifier \'this\' should be the first parameter of extension method
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ExternMemberCannotDeclareABody">
            <summary>
            Extern member cannot declare a body
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ForEachActionCanBeCalled">
            <summary>
            ForEach Action can be called
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.FieldCanBeMadeReadOnly">
            <summary>
            Field can be read-only
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.GenericTypeCannotDeriveFromAttribute">
            <summary>
            Generic class cannot derive from Attribute
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.HidesOuterDeclaration">
            <summary>
            Hides declaration from the outer scope
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ImplicitVariableCanBeUsed">
            <summary>
            Implicit variable can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.IndexerCannotBeStatic">
            <summary>
            Indexer cannot be static
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.IndexerMustHaveAtLeastOneParameter">
            <summary>
            Indexer must have at least one parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.InitializerCanBeUsed">
            <summary>
            Initializer can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.InterfaceCannotContainConstructors">
            <summary>
            Interface cannot contain constructors
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.InterfaceNameExpected">
            <summary>
            Interface expected
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.InterfaceMemberCannotHaveADefinition">
            <summary>
            Interface member cannot have a definition
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.LambdaExpressionCannotHaveParamsParameter">
            <summary>
            Lambda expression cannot have 'params' parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.LocalIsNotDisposed">
            <summary>
            Undisposed local
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.LocalIsntHoldingItsWeight">
            <summary>
            Local isn't holding its weight
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberCanBeShared">
            <summary>
            Member can be shared
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberCanBeStatic">
            <summary>
            Member can be static
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberCanBeMoved">
            <summary>
            Member can be moved to
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberCanMoveUp">
            <summary>
            Member can move up
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberCannotBeSealedBecauseItIsNotAnOverride">
            <summary>
            Member cannot be sealed because it is not an override
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberMustDeclareABodyBecauseItIsNotMarkedAbstractOrExtern">
            <summary>
            Member must declare a body because it is not marked abstract or extern
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MemberNamesCannotBeTheSameAsEnclosingType">
            <summary>
            Member names cannot be the same as their enclosing type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.MethodMustHaveAReturnType">
            <summary>
            Method must have a return type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.NamespaceNameDoesNotCorrespondToFolderStructure">
            <summary>
            Namespace name does not correspond to folder structure
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.NestedCodeCanBeFlattened">
            <summary>
            Nested code can be flattened
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.NullCoalescingOperationCanBeUsed">
            <summary>
            Null coalescing operation can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OnlyClassTypesCanContainDestructors">
            <summary>
            Only class types can contain destructors
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OperatorCannotBeAbstract">
            <summary>
            Operator cannot be abstract
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OperatorCannotHaveParamsParameter">
            <summary>
            Operator cannot have 'params' parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OperatorMustBeDeclaredStaticAndPublic">
            <summary>
            Operator must be declared static and public
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OperatorMustDeclareABody">
            <summary>
            Operator must declare a body
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OverloadedUnaryOperatorTakesOneParameter">
            <summary>
            Overloaded unary operator takes one parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OverrideMemberCannotBeNew">
            <summary>
            Override member cannot be marked as new
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OverrideMemberCannotInheritSealedMember">
            <summary>
            Cannot override inherited sealed member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OverrideMemberCannotBeVirtual">
            <summary>
            Override member cannot be marked as virtual
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.OverrideMemberCannotChangeAccessRights">
            <summary>
            Override member cannot change access rights
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ParamsParameterMustBeASingleDimensionalArray">
            <summary>
            The params parameter must be a single dimensional array
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ParamsParameterMustBeTheLastParameterInAFormalParameterList">
            <summary>
            The params parameter must be the last parameter in a formal parameter list
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.PartialMethodCannotHaveModifiers">
            <summary>
            Partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.PartialMethodCannotHaveOutParameters">
            <summary>
            Partial method cannot have out parameters
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.PartialMethodHasOnlySinglePart">
            <summary>
            Partial method has only single part
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.PartialMethodMustBeDeclaratedInPartialType">
            <summary>
            Partial method must be declared within a partial class or partial struct
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.PropertyCanBeAutoImplemented">
            <summary>
            Property can be auto-implemented
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.PropertyCannotHaveVoidType">
            <summary>
            Property cannot have void type
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ProtectedMemberCannotBeDeclaredInStruct">
            <summary>
            Protected member cannot be declared in struct
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ProtectedMemberInSealedTypeWillBePrivate">
            <summary>
            Protected member in sealed type will be private
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantAttributeParentheses">
            <summary>
            Redundant attribute parentheses
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantBaseConstructorCall">
            <summary>
            Redundant base constructor call
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantBaseQualifier">
            <summary>
            Redundant base qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantBooleanComparison">
            <summary>
            Redundant boolean comparison
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantCatchClause">
            <summary>
            Redundant catch clause
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantConstructor">
            <summary>
            Redundant Constructor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantDelegateCreation">
            <summary>
            Redundant Delegate Creation
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantDestructor">
            <summary>
            Redundant Destructor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantElseStatement">
            <summary>
            Redundant else statement
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantEmptyEventHandler">
            <summary>
            Empty event handler
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantEmptyNamespaceDeclaration">
            <summary>
            Empty namespace declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantEmptySelectStatement">
            <summary>
            Empty select statement
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantEmptySwitchStatement">
            <summary>
            Empty switch statement
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantFieldInitialization">
            <summary>
            Redundant field initialization
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantFinallyBlock">
            <summary>
            Empty finally block
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantLambdaParameterExplicitTypeSpecification">
            <summary>
            Lambda parameter has redundant type specification
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantMemberOverride">
            <summary>
            Redundant member override
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantNamespaceReference">
            <summary>
            Redundant namespace reference
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantPartialModifier">
            <summary>
            Partial class has only a single part
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantPrivateSetter">
            <summary>
            Redundant private setter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantSealedModifier">
            <summary>
            Redundant sealed modifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantSetterAccessor">
            <summary>
            Redundant setter accessor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantStringFormatCall">
            <summary>
            Redundant String.Format call
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantMeQualifier">
            <summary>
            Redundant Me qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantThisQualifier">
            <summary>
            Redundant this qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantToStringCall">
            <summary>
            Redundant ToString() call
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.RedundantTypeQualifier">
            <summary>
            Redundant type qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ResultVariableCanBeRemoved">
            <summary>
            Result variable can be removed
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.SealedClassCannotBeAbstract">
            <summary>
            Sealed class cannot be abstract
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StaticClassCannotBeAbstract">
            <summary>
            Static class cannot be abstract
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.SuspiciousThisUsage">
            <summary>
            Suspicious usage of this qualifier in the inner function
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.SuspiciousEqualToOperationUsage">
            <summary>
            Wrong EqualTo Operation Usage.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.SuspiciousInequalToOperationUsage">
            <summary>
            Wrong InequalTo Operation Usage.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StatementIsNotTerminated">
            <summary>
            Wrong ExactlyEqualTo Operation Usage.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StaticClassCannotBeSealed">
            <summary>
            Static class cannot be sealed
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StaticClassCannotContainProtectedMember">
            <summary>
            Static class cannot contain protected member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StaticClassCannotDeclareInstanceMember">
            <summary>
            Cannot declare instance member in a static class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StaticConstructorsCannotHaveAccessModifiers">
            <summary>
            Static constructors cannot have access modifiers
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StaticConstructorsMustBeParameterLess">
            <summary>
            Static constructors must be parameterless
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StringBuilderCanBeUsed">
            <summary>
            StringBuilder can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StringCanBeMovedToResourceFile">
            <summary>
            String can be moved to resource file
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StringCompareCanBeUsed">
            <summary>
            String.Compare can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StringFormatCanBeUsed">
            <summary>
            String.Format can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StringIsNullOrEmptyCanBeUsed">
            <summary>
            String.IsNullOrEmpty can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.StructCannotContainParameterlessConstructor">
            <summary>
            Struct cannot contain parameterless constructor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.SwitchMissesElseClause">
            <summary>
            Default branch is missing
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.SwitchMissesEnumElementCase">
            <summary>
            Case statements do not explicitly handle all enum values
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.TernaryExpressionCanBeUsed">
            <summary>
            Ternary expression can be used
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ThisKeywordIsNotValidInAStaticMember">
            <summary>
            Keyword this/Me is not valid in a static member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.ThisQulifierInGlobalContext">
            <summary>
            This qualifier in global context
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.TryStatementWithoutCatchOrFinally">
            <summary>
            Try statement without catch or finally
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.TypeCanBeMovedToSeparateFile">
            <summary>
            Type can be moved to separate file
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.TypeNameDoesNotCorrespondToFileName">
            <summary>
            Type name does not correspond to file name
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnassignedVariableUsage">
            <summary>
            Unassigned variable usage
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UndeclaredElement">
            <summary>
            Undeclared element
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnimplementedMember">
            <summary>
            Unimplemented member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedAliasDeclaration">
            <summary>
            Unused alias declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedDeclaration">
            <summary>
            Unused declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedParameter">
            <summary>
            Unused parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedLocal">
            <summary>
            Unused variable
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedPrivateMember">
            <summary>
            Unused member
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedSetter">
            <summary>
            Unused setter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.UnusedTypeParameter">
            <summary>
            Unused type parameter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.VirtualMemberCannotBeDeclaredInSealedClass">
            <summary>
            Virtual member cannot be declared in sealed class
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.VirtualMemberCannotBeDeclaredInStructures">
            <summary>
            Virtual member cannot be declared in structures
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.VirtualMemberCannotBePrivate">
            <summary>
            Virtual member cannot be private
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.VirtualMemberCallInConstructor">
            <summary>
            Virtual call in constructor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.XamlObsoleteMemberUsage">
            <summary>
            Member is obsolete
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.XamlUndeclaredStaticResource">
            <summary>
            Undeclared static resource
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CodeIssues.XamlDefaultValueUsed">
            <summary>
            Default value used
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.CSharp">
            <summary>
            C# string constants.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CSharp.Void">
            <summary>
            "void"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CSharp.Unsafe">
            <summary>
            "Unsafe"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CSharp.BraceBegin">
            <summary>
            The start delimiter of CSharp code blocks.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.CSharp.BraceEnd">
            <summary>
            The end delimiter of CSharp code blocks.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.Language">
            <summary>
            Language-independent string constants.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.True">
            <summary>
            Lower-case "true" -- used for comparing primitives occuring inside 
            expressions in VB and C#.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.False">
            <summary>
            Lower-case "false" -- used for comparing primitives occuring inside 
            expressions in VB and C#.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.CSharp">
            <summary>
            The Language ID of C# ("CSharp").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.VisualBasic">
            <summary>
            The Language ID of Visual Basic ("Basic").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.CPlusPlus">
            <summary>
            The Language ID of C++ ("C/C++").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.CSS">
            <summary>
            The Language ID of CSS ("CSS").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.HTML">
            <summary>
            The Language ID of HTML ("HTML").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.XML">
            <summary>
            The Language ID of XML ("HTML/XML").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.XMLOnly">
            <summary>
            The Language ID of XML ("XML").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.XAML">
            <summary>
            The Language ID of XAML ("XAML").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.JavaScript">
            <summary>
            The Language ID of JavaScript ("JavaScript").
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.IDL">
            <summary>
            The Language ID of IDL
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.VisualBasicMaxNameLength">
            <summary>
            Maximum length of name.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Language.CSharpMaxNameLength">
            <summary>
            Maximum length of name.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.StorageKey">
            <summary>
            String constants for decoupled storage keys.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.StorageKey.General">
            <summary>
            "General"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.StorageKey.Statistics">
            <summary>
            "Statistics"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.StorageKey.ConsolidatedLinesCount">
            <summary>
            "ConsolidatedLinesCount"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.StorageKey.ConsolidationExecutionCount">
            <summary>
            "ConsolidationExecutionCount"
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.Tag">
            <summary>
            String constants for parsing text.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.LinkStart">
            <summary>
            "«Link("
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.LinkEnd">
            <summary>
            ")»"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.Open">
            <summary>
            "&lt;&lt;&lt;?"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.Close">
            <summary>
            "?&gt;&gt;&gt;"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.OpenSharp">
            <summary>
            "&lt;&lt;&lt;#"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.CloseSharp">
            <summary>
            "#&gt;&gt;&gt;"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.SecondaryOpen">
            <summary>
            "&lt;&lt;"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Tag.SecondaryClose">
            <summary>
            "&gt;&gt;"
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.Type">
            <summary>
            Selected types used for code generation...
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Type.Object">
            <summary>
            "object"
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.Attribute">
            <summary>
            String constants for declaring attributes.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Attribute.Obsolete">
            <summary>
            "Obsolete"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Attribute.EditorBrowsable">
            <summary>
            "EditorBrowseable"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Attribute.EditorBrowsableStateNever">
            <summary>
            "EditorBrowseableStateNever"
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.Provider">
            <summary>
            Names of selected string providers.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Provider.PropertyNameFromLocal">
            <summary>
            The "PropertyNameFromLocal" string provider.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Provider.PropertyNameFromField">
            <summary>
            The "PropertyNameFromField" string provider.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Provider.PropertyNameFromParam">
            <summary>
            The "PropertyNameFromParam" string provider.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Provider.FormatLocalName">
            <summary>
            The "FormatLocalName" string provider.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.ConditionalToCase">
            <summary>
            Conditional to Case
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.ConvertToAutoImplementedProperty">
            <summary>
            Convert to Auto-implemented Property
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.ConvertToConstant">
            <summary>
            Convert to Constant
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.ConvertToInitializer">
            <summary>
            Convert to Initializer
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.CompressToLambdaExpression">
            <summary>
            Compress to Lambda Expression
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.CompressToNullCoalescingOperation">
            <summary>
            Compress to Null Coalescing Operation
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.CompressToTernaryExpression">
            <summary>
            Compress to Ternary Expression
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.InitializeConditionally">
            <summary>
            Initialize Conditionally
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.IntroduceForEachAction">
            <summary>
            Introduce ForEach Action
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.MakeImplicit">
            <summary>
            Make Implicit
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.MakeMemberStatic">
            <summary>
            Make Member Static
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.MakeReadOnly">
            <summary>
            Make Read-only
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.MoveInitializationToDeclaration">
            <summary>
            Move Initialization to Declaration
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.MoveTypeToFile">
            <summary>
            Move Type to File
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveEventHandler">
            <summary>
            Remove Event Handler
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantAssignment">
            <summary>
            Remove Redundant Assignment
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantBaseQualifier">
            <summary>
            Remove Redundant Base Qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantCall">
            <summary>
            Remove Redundant Call
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantConstructor">
            <summary>
            Remove Redundant Constructor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantDelegateCreation">
            <summary>
            Remove Redundant Delegate Creation
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantDestructor">
            <summary>
            Remove Redundant Destructor
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantStringFormat">
            <summary>
            Remove Redundant String.Format
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantThisQualifier">
            <summary>
            Remove Redundant This Qualifier
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantToStringCall">
            <summary>
            Remove Redundant ToString Call
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveRedundantTypeSpecification">
            <summary>
            Remove Redundant Type Specification
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemovePrivateSetter">
            <summary>
            Remove Private Setter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RemoveSetter">
            <summary>
            Remove Setter
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.RenameTypeToMatchFile">
            <summary>
            Rename Type to Match File
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.ReplaceNestedConditional">
            <summary>
            Replace Nested Conditional
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.UseEnvironmentNewLine">
            <summary>
            Use Environment.NewLine
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.UseStringCompare">
            <summary>
            Use String.Compare
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.UseStringFormat">
            <summary>
            Use String.Format
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Refactorings.UseStringIsNullOrEmpty">
            <summary>
            Use String.IsNullOrEmpty
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.TextCommand">
            <summary>
            TextCommands without surrounding delimiters -- to format for expansion, 
            use CodeRush.TextCommands.Format(...);
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.Marker">
            <summary>
            The "Marker" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.HardMarker">
            <summary>
            The "HardMarker" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.EndFormat">
            <summary>
            The "EndFormat" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.BeginFormat">
            <summary>
            The "BeginFormat" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.StoreInsertionPoint">
            <summary>
            The "StoreInsertionPoint" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.GotoInsertionPoint">
            <summary>
            The "GotoInsertionPoint" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.GotoCutPoint">
            <summary>
            The "GotoCutPoint" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.BlockAnchor">
            <summary>
            The "BlockAnchor" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.Field">
            <summary>
            The "Field" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.FieldStart">
            <summary>
            The "FieldStart" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.FieldEnd">
            <summary>
            The "FieldEnd" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.Target">
            <summary>
            The "Target" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.FinalTarget">
            <summary>
            The "FinalTarget" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.FinalTargetStart">
            <summary>
            The "FinalTargetStart" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.FinalTargetEnd">
            <summary>
            The "FinalTargetEnd" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.ClearFields">
            <summary>
            The "ClearFields" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.Caret">
            <summary>
            The "Caret" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.Link">
            <summary>
            The "Link" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.MultiLink">
            <summary>
            The "MultiLink" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.TextLink">
            <summary>
            The "TextLink" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.TextCommand.TypeLink">
            <summary>
            The "TypeLink" TextCommand.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.System">
            <summary>
            "System"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemCollections">
            <summary>
            "System.Collections"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemComponentModel">
            <summary>
            "System.ComponentModel"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemConfiguration">
            <summary>
            "System.Configuration"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemData">
            <summary>
            "System.Data"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemDrawing">
            <summary>
            "System.Drawing"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWeb">
            <summary>
            "System.Web"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebSecurity">
            <summary>
            "System.Web.Security"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebSessionState">
            <summary>
            "System.Web.SessionState"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebUI">
            <summary>
            "System.Web.UI"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebUIHtmlControls">
            <summary>
            "System.Web.UI.HtmlControls"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebUIPage">
            <summary>
            "System.Web.UI.Page"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebUIWebControls">
            <summary>
            "System.Web.UI.WebControls"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebUIUserControl">
            <summary>
            "System.Web.UI.UserControl"
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Using.SystemWebUIWebControlsWebParts">
            <summary>
            "System.Web.UI.WebControls.WebParts"
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.Str.Action">
            <summary>
            Names of common Actions
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorTargetMoveLeft">
            <summary>
            The "Refactor Target Move Left" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorTargetMoveRight">
            <summary>
            The "Refactor Target Move Right" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorTargetMoveUp">
            <summary>
            The "Refactor Target Move Up" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorTargetMoveDown">
            <summary>
            The "Refactor Target Move Down" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorFocusNext">
            <summary>
            The "Refactor Focus Next" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorFocusPrevious">
            <summary>
            The "Refactor Focus Previous" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorAccept">
            <summary>
            The "Refactor Accept" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorCancel">
            <summary>
            The "Refactor Cancel" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.RefactorTargetCheck">
            <summary>
            The "Refactor Target Check" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerShowNext">
            <summary>
            The "Text Replacer Show Next" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerShowPrevious">
            <summary>
            The "Text Replacer Show Previous" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerAccept">
            <summary>
            The "Text Replacer Accept" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerAcceptAll">
            <summary>
            The "Text Replacer Accept All" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerCancel">
            <summary>
            The "Text Replacer Cancel" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerStop">
            <summary>
            The "Text Replacer Stop" Action.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Constants.Str.Action.TextReplacerSuspend">
            <summary>
            The "Text Replacer Suspend" Action.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Constants.TextCommands">
            <summary>
            TextCommand string composition methods.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.SetLastAvailability(DevExpress.CodeRush.Core.RefactoringAvailability)">
            <summary>
            Sets last availability for the content provider.
            </summary>
            <param name="availability">The availability to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.Execute">
            <summary>
            Executes this provider if it is available.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.Cancel">
            <summary>
            Cancels this provider if it is currently being applied.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.ShowRefactoringPreview(System.Drawing.Rectangle)">
            <summary>
            Allows the provider to show a preview of the impact it will have on the code.
            </summary>
            <param name="menuRect">A Rectangle representing the current Refactor/Code menu in screen coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.ShowRefactoringPreview(System.Drawing.Rectangle,System.Drawing.Rectangle[]@,DevExpress.CodeRush.Core.HintSurface@)">
            <summary>
            Allows the provider to show a preview of the impact it will have on the code.
            </summary>
            <param name="menuRect">A Rectangle representing the current Refactor/Code menu in screen coordinates.</param>
            <param name="previewRectangles">An array of Rectangles representing preview hinting in screen coordinates.</param>
            <param name="hintLegend">A HintSurface representing legend for the preview hinting.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.HideRefactoringPreview(System.Drawing.Rectangle)">
            <summary>
            Allows the provider to show a preview of the impact it will have on the code.
            </summary>
            <param name="menuRect">A Rectangle representing the current Refactor/Code menu in screen coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.GetAvailability">
            <summary>
            Gets the current availability of this provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.GetExclusiveAvailabilityBehavior">
            <summary>
            Determines what will happen when the Refactor Action is invoked without parameters 
            and this is the only provider available. By default this method returns ExclusiveAvailabilityBehavior property value,
            descendants can override this.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.ExecuteRefactoring">
            <summary>
            Executes refactoring if it is available.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringProviderBase.CancelRefactoring">
            <summary>
            Cancels refactoring if it is executing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.LastAvailability">
            <summary>
            Returns last availability for this provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.ExclusiveAvailabilityBehavior">
            <summary>
            Determines what will happen when the Refactor Action is invoked without parameters 
            and this is the only provider available. Default behavior is to immediately apply the provider.
            However for certain providers having unexpected or potentially surprising side-effects,
            it may make more sense to show the Refactor menu, which provides an opportunity to review 
            impact (through the preview hint) before committing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.IsAvailable">
            <summary>
            Gets or sets the availability of the provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.SupportsAsyncMode">
            <summary>
            Set SupportsAsyncMode to true if your CheckAvailability event handler takes a long time to process and can be called in a non-UI thread.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.Mode">
            <summary>    
            Defines the mode of the Confirm Changes service if it is used to process changes from this provider. Set this property to Prompt
            if user should approve the changes through UI.
            </summary>    
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.IsNestedRefactoring">
            <summary>
            Determines whether this provider will be executing from another provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.IsNestedProvider">
            <summary>
            Determines whether this provider will be executing from another provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringProviderBase.Availability">
            <summary>
            Gets true if refactoring is available
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ISmartTagItem">
            <summary>
            Provides smart tag item funcionality.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.GetSubMenuItems">
            <summary>
            Returns sub menu items for the smart tag item.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.GetSubMenuItem(System.String)">
            <summary>
            Returns sub menu item with the given name.
            </summary>
            <param name="name">The name of the sub menu item to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.SelectMenuItem(DevExpress.CodeRush.Core.ISmartTagItem)">
            <summary>
            This method is called when sub menu item is selected.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.Execute">
            <summary>
            Executes smart tag item action.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.ShowPreview(System.Drawing.Rectangle)">
            <summary>
            Shows preview for this smart tag item.
            </summary>
            <param name="rectangle">The menu rectangle.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.ShowPreview(System.Drawing.Rectangle,System.Drawing.Rectangle[]@,DevExpress.CodeRush.Core.HintSurface@)">
            <summary>
            Shows preview for this smart tag item.
            </summary>
            <param name="rectangle">The menu rectangle.</param>
            <param name="rectangles">The preview rectangles.</param>
            <param name="legend">The smart tag item hing legend.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.HidePreview(System.Drawing.Rectangle)">
            <summary>
            Hides smart tag item preview.
            </summary>
            <param name="rectangle">The menu rectangle to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagItem.GetContextString">
            <summary>
            Gets smart tag item context string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.Name">
            <summary>
            Gets smart tag item name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.Caption">
            <summary>
            Gets smart tag item caption.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.HintCaption">
            <summary>
            Gets smart tag item hint caption.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.HintText">
            <summary>
            Gets smart tag item hint text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.ParentMenu">
            <summary>
            The name of the parent menu where this content provider should be moved.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.ShowBigHint">
            <summary>
            Gets or sets the value indicating whether or not show the BigHint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.HasSubMenuItems">
            <summary>
            Gets value determining if smart tag item has sub item.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.ItemType">
            <summary>
            Gets smart tag item type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.ImageIndex">
            <summary>
            Index from static image collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.Image">
            <summary>
            Sets the bitmap image for this this smart tag item. 
            Action images are optional, but can 
            be useful for displaying in the context menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.ImageBackColor">
            <summary>
            Sets the image background color for this smart tag item. It is used to determine which
            color is to be treated as transparent in the bitmap assigned to the Image property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagItem.Provider">
            <summary>
            Gets or sets smart tag provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnCheckAvailability(DevExpress.CodeRush.Core.CheckContentAvailabilityEventArgs)">
            <summary>
            Triggers the CheckAvailability event and returns a TriggerResult value to indicate whether the event succeeded or failed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnSetUp(DevExpress.CodeRush.Core.SetUpContentEventArgs)">
            <summary>
            Triggers the SetUp event and returns a TriggerResult value to indicate whether the event succeeded or failed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnTearDown(DevExpress.CodeRush.Core.TearDownContentEventArgs)">
            <summary>
            Triggers the TearDown event and returns a TriggerResult value to indicate whether the event succeeded or failed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnApply(DevExpress.CodeRush.Core.ApplyContentEventArgs)">
            <summary>
            Triggers Apply event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnCancelled(DevExpress.CodeRush.Core.ContentCancelledEventArgs)">
            <summary>
            Triggers Cancelled event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnPreparePreview(DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs)">
            <summary>
            Triggers PreparePreview event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnHidePreview(DevExpress.CodeRush.Core.HideContentPreviewEventArgs)">
            <summary>
            Triggers HidePreview event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OnGetAvailabilityContextString(DevExpress.CodeRush.Core.GetContentAvailabilityContextStringEventArgs)">
            <summary>
            Triggers GetAvailabilityContextString event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.OpenUndoUnit">
            <summary>
            Opens an undo unit with this provider's DisplayName if AutoUndo is set to true.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.CommitUndoUnit">
            <summary>
            Commits the opened undo unit (from OpenUndoUnit) to the undo stack if AutoUndo is set to true.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.DiscardUndoUnit">
            <summary>
            Discards the opened undo unit (from OpenUndoUnit) if AutoUndo is set to true.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.LogEventTriggerException(System.String,System.Exception)">
            <summary>
            Logs an exception raised during an event trigger.
            </summary>
            <param name="eventName">The name of the event that raised an exception.</param>
            <param name="ex">The exception that was raised.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.GetContextString">
            <summary>
            Returns availability context string for the provider.
            Availability context string is used to determine provider 
            order based on historic usage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.ShowRefactoringPreview(System.Drawing.Rectangle)">
            <summary>
            Allows the provider to show a preview of the impact it will have on the code.
            </summary>
            <param name="menuRect">A Rectangle representing the current Refactoring menu in screen coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.ShowRefactoringPreview(System.Drawing.Rectangle,System.Drawing.Rectangle[]@,DevExpress.CodeRush.Core.HintSurface@)">
            <summary>
            Allows the provider to show a preview of the impact it will have on the code.
            </summary>
            <param name="menuRect">A Rectangle representing the current Refactoring menu in screen coordinates.</param>
            <param name="previewRectangles">A List of Rectangles representing preview hinting in screen coordinates.</param>
            <param name="hintLegend">A HintSurface representing legend for the preview hinting.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.HideRefactoringPreview(System.Drawing.Rectangle)">
            <summary>
            Allows the provider to hide any preview previously displayed through a call to ShowRefactoringPreview.
            </summary>
            <param name="menuRect">A Rectangle representing the current Refactoring menu in screen coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.GetAvailability(DevExpress.CodeRush.Core.SmartTagContext)">
            <summary>
            Gets the current availability of this provider with specified contex.
            </summary>
            <param name="context">Context to check provider availability.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.Execute(DevExpress.CodeRush.Core.SmartTagContext)">
            <summary>
            Executes this provider with specified context. NOTE: This operation may be asynchronous if the Picker property
            is assigned to.
            </summary>
            <param name="context">Context of provider execution.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.Execute">
            <summary>
            Executes this provider. NOTE: This operation may be asynchronous if the Picker property
            is assigned to.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.Cancel">
            <summary>
            Cancels this provider if it is executing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.GetSubMenuItems">
            <summary>
            Returns the sub-menu items for this provider. These items are only valid while:
            
            1. The availability of this provider is checked.
            2. The preview hint for this provider is being displayed.
            3. This provider is being displayed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContentProvider.GetSubMenuItem(System.String)">
            <summary>
            Returns the sub-menu item with the specified name. If the sub-menu item is not found, null is returned.
            </summary>
            <param name="name">The name of the sub-menu item to return.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.HasSubMenuItems">
            <summary>
            Determines whether this provider has sub-menu items or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.ActionHintText">
            <summary>
            Gets or sets the text that will be displayed in an ActionHint after this provider is applied.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.AutoActivate">
            <summary>
            If true, this provider will be automatically activated while it is executing and deactivated
            afterwards. If false, the provider needs to call the Activate and Deactivate methods of this 
            ContentProvider at the appropriate times.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.AutoUndo">
            <summary>
            If true, an undo unit will automatically be created to collect all text changes made by this
            provider during the Apply event. If false, the provider is responsible to handle the
            undo stack itself.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.Picker">
            <summary>
            Assign to a DXCore picker component to get user input before applying this provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.CodeIssueMessage">
            <summary>
            Set a unique string that connects this content provider to a particular code issue. This string should also be passed to the ea.AddIssue() method, called from the IssueProvider’s CheckCodeIssues event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.RequiresSubMenuChoice">
            <summary>
            Specifies whether this content provider is applied only when a sub menu item is chosen. If there are no sub menus added to this content provider, then it can be applied by choosing it from a menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.SolvedIssues">
            <summary>
            Returns a list of code issue provider names that this content provider may fix.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.UIStrings">
            <summary>
            Contains text used for Refactor/Code UI (e.g., the Refactor/Code menu and hint). NOTE:
            This text may be modified by a RefactorProvider's CheckAvailability event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.NeedsSelection">
            <summary>
            Set NeedsSelection to true if this content provider requires a selection to determine availability. This is used by the Code Issue architecture to select the range of the issue before a check is made (through the CheckAvailability event) to see if this content provider can provide a fix to the issue in question.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.Image">
            <summary>
            Sets the bitmap image for this this smart tag item. Images are optional, but can be useful for displaying in the context menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.ImageBackColor">
            <summary>
            Sets the image background color for this smart tag item. It is used to determine which
            color is to be treated as transparent in the bitmap assigned to the Image property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContentProvider.ParentMenu">
            <summary>
            The name of the parent menu where this content provider should be moved.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.CheckAvailability">
            <summary>
            Occurs when the availability of this provider in the current context is being tested. 
            Handle this event to indicate what conditions this provider is available or recommended
            under.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your provider to one or more 
            programming languages. If you do not handle this event, your provider will be available 
            in all programming languages.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.VisualStudioSupported">
            <summary>
            Handle this optional event if you want to restrict your provider to one or more 
            Visual Studio versions. If you do not handle this event, your provider will be available 
            in any Visual Studio version.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.SetUp">
            <summary>
            Occurs immediately before the Apply event is fired. Handle this optional event to perform any 
            necessary setup before the provider is applied.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.TearDown">
            <summary>
            Occurs immediately after the Apply event is fired. Handle this optional event to perform any 
            necessary clean up after the provider is applied.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.Apply">
            <summary>
            Occurs when the provider needs to be applied. Handle this event to apply this provider
            to the currently existing code in the active TextDocument. NOTE: This event will never fire if
            the provider is not available so code that checks for provider availability is not
            necessary in a handler for this event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.Cancelled">
            <summary>
            Occurs when this provider has been cancelled. Implement code that will cancel this provider 
            inside a handler for this event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.PreparePreview">
            <summary>
            Occurs when the user highlights this provider inside the Refactor menu. Handle 
            this optional event to display any additional visual information that can preview 
            the impact of this provider. If you handle this event, you should clean up 
            your preview in a HidePreview event handler.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.HidePreview">
            <summary>
            Occurs when a menu item inside the Refactor menu is no longer 
            highlighted. This can happen when the user selects a different provider, 
            when the user executes the selected provider, or when the Refactor menu 
            closes. If you display visual information in the ShowPreview event, you should 
            also handle this event to clean up the preview.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ContentProvider.GetAvailabilityContextString">
            <summary>
            Occurs before the smart tag manager determines command order based on historic usage.
            If your provider has distinct states that you would like separate entries for,
            handle this event and assign a unique string to  the Context property of the event
            args that represents the distinct state.
            For example, the Inline Temp provider handles this event and sets the Context 
            property to \"1\" when only one instance of the temporary variable exists."
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ComplexityStorer.Dispose">
            <summary>
            Disposes the current object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ComplexityStorer.GetComplexity(DevExpress.CodeRush.Core.ContentProvider,System.Double)">
            <summary>
            Gets storied complexity for the specified complexitry provider.
            </summary>
            <param name="provider">The provider to get complexity</param>
            <param name="defaultValue">The default value if the complexity was not stored before</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ComplexityStorer.SetComplexity(System.String,System.Double)">
            <summary>
            Sets complexity for the specified complexitry provider.
            </summary>
            <param name="providerName">The provider to set complexity</param>
            <param name="value">The default value if the complexity was not stored before</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ComplexityStorer.Type">
            <summary>
            Gets type of the complexity ...
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TimeComplexityStorer">
            <summary>
            Singleton class providing calculation of the complexity for the ContentProviders.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TimeComplexityStorer.StartCalculation(DevExpress.CodeRush.Core.ContentProvider)">
            <summary>
            Starts to calculate the complexity for the specified provider.
            </summary>
            <param name="provider">The ContentProvider to start calculate complexity for</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TimeComplexityStorer.EndCalculation">
            <summary>
            Ends to calculate the complexity for the specified provider and stores result of the calculation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TimeComplexityStorer.SaveData">
            <summary>
            Saves its internal data.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TimeComplexityStorer.Type">
            <summary>
            Gets type of the complexity ...
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.RefactoringEventArgs.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns declaration for the given element.
            </summary>
            <param name="element">The element to get declaration for.</param>
            <returns>Returns declaration for the given element.</returns>
        </member>
        <member name="M:DevExpress.Refactor.Core.RefactoringEventArgs.NewElementBuilder">
            <summary>
            Use this to create tree structure to generate code.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.TextDocument">
            <summary>
            Returns the active TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.TextView">
            <summary>
            Returns the active TextView.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.Caret">
            <summary>
            Returns SourcePoint representing the current caret position.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.TextViewCaret">
            <summary>
            Returns active TextView caret.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.Element">
            <summary>
            Returns the language element at the caret.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.CodeActive">
            <summary>
            Gets the active language element which corresponds to code, 
            rather than any markup. In source files such as C# and VB, the 
            CodeActive and Element properties are identical, however in files 
            containing markup like ASP.NET code nuggets, CodeActive gets 
            the corresponding code element inside the markup 
            rather than the code nugget itself. 
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.MethodOrProperty">
            <summary>
            Returns the active method or property at the caret. Returns null if the caret is not contained inside a method or property.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.MethodOrPropertyAccessor">
            <summary>
            Returns the active method or property accessor at the caret. Returns null if the caret is not contained inside a method or property accessor.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.ClassInterfaceOrStruct">
            <summary>
            Returns the class, interface or struct that contains the caret. Returns null if the caret is not contained inside a class, interface or struct.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.Method">
            <summary>
            Returns the active method at the caret. Returns null if the caret is not contained inside a method.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.SelectedNodes">
            <summary>
            Returns the LanguageElement nodes in active selection.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.SelectedExpression">
            <summary>
            Returns currently selected expression. Returns null if there is no expression selected.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.LeftChar">
            <summary>
            Gets the character to the left of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.RightChar">
            <summary>
            Gets the character to the right of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.ActiveLanguage">
            <summary>
            Returns the Language ID of the active source file.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.Builder">
            <summary>
            Returns an active ElementBuilder.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.SelectionExists">
            <summary>
            Returns true if text is selected in the TextView.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.InSingleFile">
            <summary>
            Returns true if currently opened files is not in the project or belongs to the Misc project.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.Selection">
            <summary>
            Returns true if currently opened files is not in the project or belongs to the Misc project.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.SelectionRange">
            <summary>
            Returns active selection range.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.TextViewRange">
            <summary>
            Returns TextView SourceRange.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringEventArgs.InMacroCall">
            <summary>
            Returns true if active element is located in macro call.
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.ApplyRefactoringEventArgs.NewExpansionBuilder">
            <summary>
            Use this to create and expand DXCore text expansions.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.ApplyRefactoringEventArgs.SelectedSubMenuItem">
            <summary>
            Gets the selected sub-menu item (if any).
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.AddSubMenuItem(System.String)">
            <summary>
            Adds a new sub-menu item for this refactoring using the specified name.
            </summary>
            <param name="name">The name of the sub-menu item to add. This will also be used as the sub-menu item's caption.</param>
        </member>
        <member name="M:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.AddSubMenuItem(DevExpress.Refactor.Core.SubMenuItem)">
            <summary>
            Adds a new sub-menu item for this refactoring.
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.AddSubMenuItem(System.String,System.String)">
            <summary>
            Adds a new sub-menu item for this refactoring using the specified name and caption.
            </summary>
            <param name="name">The name of the sub-menu item to add.</param>
            <param name="caption">The caption of the sub-menu item to add.</param>
        </member>
        <member name="M:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.AddSubMenuItem(System.String,System.String,System.String)">
            <summary>
            Adds a new sub-menu item for this refactoring using the specified name and caption.
            </summary>
            <param name="name">The name of the sub-menu item to add.</param>
            <param name="caption">The caption of the sub-menu item to add.</param>
            <param name="hintText">The text of the BigHint with description of the refactoring.</param>
        </member>
        <member name="M:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.ElementTypeIs(System.String)">
            <summary>
            Returns true if the current element has the specified type.
            </summary>
            <param name="fullTypeName">The full type name.</param>
            <returns></returns>
        </member>
        <member name="P:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.Availability">
            <summary>
            Gets or Sets Availability property. Set Availability to 
            Available if the refactoring is available, set it to Recommended if refactoring is recommended,
            otherwise set it to NotAvailable.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.MenuCaption">
            <summary>
            Gets or sets the text that will appear in the Refactor menu for this refactoring.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.HintCaption">
            <summary>
            Gets or sets the text of the caption that will appear in the Refactor hint for this refactoring.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.HintText">
            <summary>
            Gets or sets the text that will appear in the Refactor hint for this refactoring.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.Available">
            <summary>
            Gets or Sets IsAvailable property. Set IsAvailable to true
            if provider is available, otherwise set it to false.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.CheckAvailabilityEventArgs.IsAvailable">
            <summary>
            Gets or Sets IsAvailable property. Set IsAvailable to true
            if refactoring is available, otherwise set it false.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.RefactoringPreviewEventArgs.MenuRect">
            <summary>
            A rectangle representing the location (in screen coordinates) 
            and size of the active refactoring menu.
            </summary>
        </member>
        <member name="T:DevExpress.Refactor.Core.GetAvailabilityContextStringEventArgs">
            <summary>
            Contains argumets for the GetAvailabilityContextString event.
            Availability context string is used to determine command 
            order based on historic usage.
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.GetAvailabilityContextStringEventArgs.#ctor">
            <summary>
            Creates new isntance of the GetAvailabilityContextStringEventArgs class.
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.GetAvailabilityContextStringEventArgs.ClearValues">
            <summary>
            Clears all arguments.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.GetAvailabilityContextStringEventArgs.Context">
            <summary>
            Gets or sets availability context string, that will be used 
            to determine command order based on historic usage.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.PrepareRefactoringPreviewEventArgs.HintCaption">
            <summary>
            Gets or sets the text of the caption that will appear in the Refactor hint for this refactoring.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.PrepareRefactoringPreviewEventArgs.HintText">
            <summary>
            Gets or sets the text that will appear in the Refactor hint for this refactoring.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.PrepareRefactoringPreviewEventArgs.SelectedSubMenuItem">
            <summary>
            Gets the selected sub-menu item (if any).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddPreviewWindow(DevExpress.CodeRush.Core.ICodePreviewWindow)">
            <summary>
            Adds a code preview window.
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddCodePreview(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Adds a code preview window at the specified location.
            </summary>
            <param name="location">Location of the code preview window.</param>
            <param name="code">Code for the code preview window.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddCodePreview(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.Boolean)">
            <summary>
            Adds a code preview window at the specified location.
            </summary>
            <param name="location">Location of the code preview window.</param>
            <param name="code">Code for the code preview window.</param>
            <param name="moveByHalfLineUp">Adjust the location by moving by half line up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddPreviewRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Adds a preview range that will be used for drawing.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddStrikethrough(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Adds a strikethrough for a preview.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddStrikethrough(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Adds a strikethrough for a preview.
            </summary>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddInsertSymbol(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Adds an insert symbol for a preview.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddInsertSymbol(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Adds an insert symbol for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddBrushStrokeHighlighter(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Adds a BrushStrokeHighlighter for a preview.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddBrushStrokeHighlighter(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Adds a BrushStrokeHighlighter for a preview.
            </summary>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddUnderline(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Adds a Underline for a preview.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddUnderline(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Adds a Underline for a preview.
            </summary>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddArrow90(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Adds a Arrow90 for a preview.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddArrow90(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Adds a Arrow90 for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddArrow90(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a Arrow90 for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddArrow180(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Adds a Arrow180 for a preview.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddArrow180(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Adds a Arrow180 for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddArrow180(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a Arrow180 for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddCurvedCodeArrow(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection)">
            <summary>
            Adds a CurvedCodeArrow for a preview.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddCurvedCodeArrow(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection,System.Boolean)">
            <summary>
            Adds a CurvedCodeArrow for a preview.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
            <param name="mirror"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddCurvedCodeArrow(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection,System.Boolean,System.Drawing.Color)">
            <summary>
            Adds a CurvedCodeArrow for a preview.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
            <param name="mirror"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddCurvedCodeArrow(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a CurvedCodeArrow for a preview.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
            <param name="mirror"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddReverseArrows(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Adds a ReverseArrows for a preview.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddReverseArrows(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Adds a ReverseArrows for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PrepareContentPreviewEventArgs.AddReverseArrows(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a ReverseArrows for a preview.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewPainter.ShowPreviewAdornments(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Adds all preview items to the active text view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewPainter.ClearPreviewAdornments">
            <summary>
            Clears all preview items.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewPainter.AddPreviewAdornment(DevExpress.CodeRush.Core.ITextViewAdornment)">
            <summary>
            Adds preview item.
            </summary>
            <param name="preview">The preview item to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewItem.#ctor(DevExpress.CodeRush.Core.DrawPreviewItems,DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the PreviewItem class.
            </summary>
            <param name="drawItem"></param>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewItem.#ctor(DevExpress.CodeRush.Core.DrawPreviewItems,DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the PreviewItem class.
            </summary>
            <param name="drawItem"></param>
            <param name="range"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewItem.IsSet(DevExpress.CodeRush.Core.DrawPreviewItems)">
            <summary>
            Checks if the specified flag is set.
            </summary>
            <param name="flag">The flag to check.</param>
            <returns>Returns true if the specified flag is set.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow180PreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Initializes a new instance of the Arrow180PreviewItem class.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow180PreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the Arrow180PreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow180PreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the Arrow180PreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow180PreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BrushStrokeHighlighterPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Initializes a new instance of the BrushStrokeHighlighterPreviewItem class.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BrushStrokeHighlighterPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the BrushStrokeHighlighterPreviewItem class.
            </summary>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BrushStrokeHighlighterPreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow90PreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Initializes a new instance of the Arrow90PreviewItem class.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow90PreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the Arrow90PreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow90PreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the Arrow90PreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow90PreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CurvedCodeArrowPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the CurvedCodeArrowPreviewItem class.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
            <param name="mirror"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CurvedCodeArrowPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection,System.Boolean,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the CurvedCodeArrowPreviewItem class.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
            <param name="mirror"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CurvedCodeArrowPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.DXCore.Adornments.CurvedCodeArrowDirection,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the CurvedCodeArrowPreviewItem class.
            </summary>
            <param name="range"></param>
            <param name="direction"></param>
            <param name="mirror"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CurvedCodeArrowPreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReverseArrowsPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Initializes a new instance of the ReverseArrowsPreviewItem class.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReverseArrowsPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the ReverseArrowsPreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReverseArrowsPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the ReverseArrowsPreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReverseArrowsPreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnderlinePreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Initializes a new instance of the UnderlinePreviewItem class.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnderlinePreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the UnderlinePreviewItem class.
            </summary>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UnderlinePreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.InsertSymbolPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Initializes a new instance of the InsertSymbolPreviewItem class.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.InsertSymbolPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the InsertSymbolPreviewItem class.
            </summary>
            <param name="point"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.InsertSymbolPreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StrikethroughPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Initializes a new instance of the StrikethroughPreviewItem class.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StrikethroughPreviewItem.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the StrikethroughPreviewItem class.
            </summary>
            <param name="range"></param>
            <param name="color"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StrikethroughPreviewItem.CreatePreviewAdornment">
            <summary>
            Creates new preview adornment for this preview item.
            </summary>
            <returns>New preview adornment for this preview item.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Content.VSFeature">
            <summary>
            Visual Studio feature wrapper.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.PopulateContextPicker(DevExpress.CodeRush.Core.IContextPicker,System.String)">
            <summary>
            Fills out a context picker with all the registered context.
            </summary>
            <param name="contextPicker">The IContextPicker implementor to populate.</param>
            <param name="languageID">The language ID to support.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.GetContextProvider(System.String)">
            <summary>
            Returns the specified context provider.
            </summary>
            <param name="context">Name of the context provider.</param>
            <returns>Returns the context provider if found, otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.String[],System.Boolean)">
            <summary>
            Check an array of contexts to see if they are satisfied or not. 
            </summary>
            <param name="contexts">string array containing a list of context paths</param>
            <param name="satisfy">If true, any one context provider must return true;
            if false, all contexts must return false.</param>
            <returns>
            Returns true if all the contexts in the array are satisfied or 
            not satisfied, based on the value of satisfy. Returns false if any context 
            in the array is not found. 
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Check a collection of contexts to see if they are satisfied or not. 
            </summary>
            <param name="contexts">StringCollection containing a list of context paths</param>
            <param name="satisfy">If true, any one context provider must return true;
            if false, all contexts must return false.</param>
            <returns>
            Returns true if all the contexts in the collection are satisfied or 
            not satisfied, based on the value of satisfy. Returns false if any context 
            in the collection is not found. 
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.String,System.Boolean)">
            <summary>
            Check a context to see if it is satisfied. Will return the default value if the 
            context is not found. 
            </summary>
            <param name="context">Context to evaluate.</param>
            <param name="defaultValue">Default value if context is not found.</param>
            <returns>True if context is satisfied, false otherwise; or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.String)">
            <summary>
            Check a context to see if it is satisfied.
            </summary>
            <param name="context">Context to evaluate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.String[],System.Text.RegularExpressions.Match,System.Boolean)">
            <summary>
            Check an array of contexts to see if they are satisfied or not. Checks for parameter replacement 
            with named groups from the passed regular expression match.
            </summary>
            <param name="contexts">string array containing a list of context paths</param>
            <param name="match">regular expression match with possible parameter replacement values.</param> 
            <param name="shouldSatisfy">If true, any one context provider must return true;
            if false, all contexts must return false.</param>
            <returns>
            Returns true if all the contexts in the array are satisfied or 
            not satisfied, based on the value of the shouldSatisfy parameter. 
            Returns false if any context in the array is not found. 
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.Collections.Specialized.StringCollection,System.Text.RegularExpressions.Match,System.Boolean)">
            <summary>
            Check a collection of contexts to see if they are satisfied or not. 
            </summary>
            <param name="contexts">StringCollection containing a list of context paths</param>
            <param name="match">regular expression match with possible parameter replacement values.</param> 
            <param name="satisfy">If true, any one context provider must return true;
            if false, all contexts must return false.</param>
            <returns>
            Returns true if all the contexts in the collection are satisfied or 
            not satisfied, based on the value of satisfy. Returns false if any context 
            in the collection is not found. 
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.String,System.Boolean,System.Text.RegularExpressions.Match)">
            <summary>
            Check a context to see if it is satisfied. Will return the default value if the 
            context is not found. 
            </summary>
            <param name="context">Context to evaluate.</param>
            <param name="defaultValue">Default value if context is not found.</param>
            <param name="match">regular expression match with possible parameter replacement values.</param> 
            <returns>True if context is satisfied, false otherwise; or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.Satisfied(System.String,System.Text.RegularExpressions.Match)">
            <summary>
            Check a context to see if it is satisfied.
            </summary>
            <param name="context">Context to evaluate.</param>
            <param name="match">regular expression match with possible parameter replacement values.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.RegisterContextResolver(DevExpress.CodeRush.Core.IContextResolver)">
            <summary>
            Registers an implementor of IContextResolver.
            </summary>
            <param name="resolver">The IContextResolver implementor to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.BeginCheck">
            <summary>
            Marks the beginning of a sequence of context checks. A cache is maintained until 
            the EndCheck() method is called, so duplicate checks on a context will return 
            the cached value. If you call this method, be sure to call EndCheck().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.ClearCache">
            <summary>
            Clears the context cache (created inside calls to BeginCheck and EndCheck).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextServices.EndCheck">
            <summary>
            Marks the end of a sequence of context checks.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContextServices.Providers">
            <summary>
            Returns an array of all available ContextProviders
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IContextPicker.Add(DevExpress.CodeRush.Core.IContextProvider)">
            <summary>
            Adds a context provider to the context tree structure.
            </summary>
            <param name="iContextProvider">The IContextProvider implementor.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IContextResolver">
            <summary>
            Defines the IContextResolver interface which resolves missing context.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IContextResolver.Resolve(System.String,System.String)">
            <summary>
            Resolves the unknown/unregistered context, returning a 
            ContextResult. An implementor of this interface can query 
            the user the first time a context is not found, and persist 
            results across sessions.
            </summary>
            <param name="context">The context to resolve.</param>
            <param name="parameters">Parameters to context.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContractProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContractProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContractServices.AvailableContractProviders">
            <summary>
            Gets all registered contract providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContractServices.ContractProviders">
            <summary>
            Gets all registered contract providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ContractServices.Providers">
            <summary>
            Gets all registered contract providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileSetCursor(DevExpress.CodeRush.Core.Tile,DevExpress.CodeRush.Core.EditorSetCursorEventArgs)">
            <summary>
            Triggers the TileSetCursor event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileDoubleClick(DevExpress.CodeRush.Core.Tile,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileMouseDown event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileMouseDown(DevExpress.CodeRush.Core.Tile,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileMouseDown event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileMouseEnter(DevExpress.CodeRush.Core.Tile)">
            <summary>
            Triggers the TileMouseEnter event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileMouseLeave(DevExpress.CodeRush.Core.Tile)">
            <summary>
            Triggers the TileMouseLeave event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.NewTile(System.Drawing.Rectangle,System.Object)">
            <summary>
            Creates a new tile bound to this plug-in or CodeRushEvents object.
            </summary>
            <param name="bounds">The rectangular region in the edit view for this Tile.</param>
            <param name="obj">The object to associate with this Tile.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.TileIsOurs(DevExpress.CodeRush.Core.Tile)">
            <summary>
            Returns true if the specified tile is owned by this plug-in object.
            </summary>
            <param name="tile">The Tile to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileVisualDoubleClick(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileVisualDoubleClick event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileVisualMouseDown(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileMouseDown event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileVisualMouseEnter(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileVisualMouseEnter event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileVisualMouseLeave(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileVisualMouseLeave event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileVisualMouseMove(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileVisualMouseMove event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnTileVisualMouseUp(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileVisualMouseUp event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.OnMouseHover(DevExpress.DXCore.Adornments.TileVisual,DevExpress.CodeRush.Core.TileVisualEventArgs)">
            <summary>
            Triggers the TileMouseHover event.
            </summary>
            <param name="sender">Sender of the mouse hover event</param>
            <param name="ea">Tile visual event args</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CoreEventHub.TileVisualIsOurs(DevExpress.DXCore.Adornments.TileVisual)">
            <summary>
            Returns true if the specified tile is owned by this plug-in object.
            </summary>
            <param name="tile">The Tile to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CoreEventHub.HandlesTileMouseDown">
            <summary>
            Returns true if this CoreEventHub handles the TileMouseDown event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CoreEventHub.HandlesTileDoubleClick">
            <summary>
            Returns true if this CoreEventHub handles the TileSetCursor event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CoreEventHub.HandlesTileSetCursor">
            <summary>
            Returns true if this CoreEventHub handles the TileSetCursor event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CoreEventHub.HandlesTileMouseEnter">
            <summary>
            Returns true if this CoreEventHub handles the TileMouseEnter event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CoreEventHub.HandlesTileMouseLeave">
            <summary>
            Returns true if this CoreEventHub handles the TileMouseLeave event.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AddMenuButtonAttribute">
            <summary>
            Created for ToolWindowPlugins. True by default. If you don't want to place your tool window
            in a menu or on a command bar reset this attribute to false.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.RestoreOnStartUpAttribute">
            <summary>
            Created for ToolWindowPlugins. True by default. If you don't want CodeRush to restore 
            visibility, size and position of your tool window on startup reset this attribute to false.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneIDAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of this ViewPaneID attribute.
            </summary>
            <param name="id">A unique name for this ViewPane, used to store layouts (e.g., "TypeViewer") based on context.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebuggerServices.Break">
            <summary>
            Causes the current process to pause its execution. This method waits
            for the debugger to enter break mode before returning.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebuggerServices.Break(System.Boolean)">
            <summary>
            Causes the current process to pause its execution.
            </summary>
            <param name="waitForBreakMode">If true, this method will wait for the debugger 
            to enter break mode before returning. If false, it returns immediately.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebuggerServices.DetachAll">
            <summary>
            Detaches the debugger from all attached programs.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DebuggerServices.TranslateLanguage(System.String)">
            <summary>
            Translates language name used by VS debugger to name used by CodeRush.
            </summary>
            <param name="debuggerLanguage">Language name used by VS debugger.</param>
            <returns>Corresponding name used internally by CodeRush.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CheckBuiltInTypeEventHandler">
            <summary>
            typeName contains simple type name to check.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FormatUsingDirectiveEventHandler">
            <summary>
            namespaceName contains the namespace to format. Return the properly formatted using directive
            or imports statement in usingDirective (e.g., String.Format("using {0};", ea.NameSpace);).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetCodeDomProviderEventHandler">
            <summary>
            provider contains language dependent CodeDomProvider that will be used to generate code.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetSimpleTypeNameEventHandler">
            <summary>
            fullTypeName contains the full type name to convert. Set simpleTypeName to the simple type 
            name alias for the type specified in fullTypeName, if such an alias exists. Otherwise leave 
            this parameter unchanged (it is initialized to the full type name). For example, in C#, the "bool" 
            alias can be used to represent "System.Boolean".
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetFullTypeNameEventHandler">
            <summary>
            simpleTypeName contains the simple type name to convert. Set fullTypeName to the full type 
            name alias for the type specified in simpleTypeName, if such an alias exists.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DesignerServices.Activate(DevExpress.CodeRush.Core.Document)">
            <summary>
            Activates (gives focus to) or opens the form designer for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <returns>True if a form designer for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DesignerServices.Activate(EnvDTE.Document)">
            <summary>
            Activates (gives focus to) or opens the form designer for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <returns>True if a form designer for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DesignerServices.Activate(DevExpress.CodeRush.Core.Document,System.Boolean)">
            <summary>
            Activates (gives focus to) or opens the form designer for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <param name="forceOpen">If a designer for this document is not found, open it.</param>
            <returns>True if a form designer for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DesignerServices.Activate(EnvDTE.Document,System.Boolean)">
            <summary>
            Activates (gives focus to) or opens the form designer for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <param name="forceOpen">If a designer for this document is not found, open it.</param>
            <returns>True if a form designer for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DesignerServices.ShowCodeView">
            <summary>
            Shows the code view corresponding to the current designer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DesignerServices.ToggleCodeAndDesignerViews">
            <summary>
            Switches the view between code and designer views.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DesignerServices.IsActive">
            <summary>
            True if a form designer is active.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Design.TextEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Design.TextEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IDialogEngine.SelectFromList(System.Collections.ICollection,System.String,System.String,System.Boolean)">
            <summary>
            Display a dialog to allow picking an object from the passed list, and return the selected 
            object, or null for no selection (i.e., dialog cancelled)
            </summary>
            <param name="list">ICollection to select from - use ToString() on each item in the list for the string
            to display in the dialog</param>
            <param name="prompt">Text to display in the dialog as a prompt</param>
            <param name="title">Dialog caption</param>
            <param name="allowNotInList"></param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDocumentAnchor.AnchorRowDelta">
            <summary>
            Gets the row delta for the anchor point associated with this GraphicElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDocumentAnchor.AnchorColumnDelta">
            <summary>
            Gets the column delta for the anchor point associated with this GraphicElement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IDocumentAnchorable.SetAnchor(DevExpress.CodeRush.Core.IDocumentAnchor)">
            <summary>
            Associates an IDocumentAnchor with this instance.
            </summary>
            <param name="anchor">The IDocumentAnchor implementor to associate with this instance.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IDocumentAnchorable.RemoveAnchor">
            <summary>
            Removes the anchor associated with this instance.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.DocPoint">
            <summary>
            A DocPoint is a two-dimensional location inside a text document. 
            The point is stored in row and column coordinates, with additional 
            row offset and column offset percentages to allow for accurate placement 
            within a row or column.
            DocPoints may be optionally bound to the text surrounding them, ensuring 
            that they move if text before the DocPoint is inserted or removed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.#ctor">
            <summary>
            Creates a new DocPoint. The BindingOption for this 
            new DocPoint will be BindingOption.NoBinding.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.#ctor(DevExpress.CodeRush.Core.DocPoint)">
            <summary>
            Creates a new DocPoint based on an existing DocPoint. The BindingOption for this 
            new DocPoint will be BindingOption.NoBinding. Calculated Row and Column values will be 
            copied from the specified prototype DocPoint into this new DocPoint.
            </summary>
            <param name="docPoint">The prototype DocPoint to base this new one on.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates a new DocPoint based on the given SourcePoint. The BindingOption for this 
            new DocPoint will be BindingOption.NoBinding.
            </summary>
            <param name="sourcePoint">The SourcePoint to base this DocPoint on.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new DocPoint. The BindingOption for this 
            new DocPoint will be BindingOption.NoBinding.
            </summary>
            <param name="row">Row value.</param>
            <param name="column">Column value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.#ctor(System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            Creates a new DocPoint. The BindingOption for this 
            new DocPoint will be BindingOption.NoBinding.
            </summary>
            <param name="row">Row value.</param>
            <param name="rowHeightPercentage">PercentageOfRowHeight value.</param>
            <param name="column">Column value.</param>
            <param name="columnWidthPercentage">PercentageOfColumnWidth value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.BindToRow(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Binds this DocPoint to its row, so this DocPoint stays with text on the 
            same line (moving up and down in response to newly added and deleted 
            lines).
            </summary>
            <param name="textView">The TextView where this DocPoint resides.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.BindToRowAndColumn(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Binds this DocPoint to its row and column, so this DocPoint stays with its 
            surrounding text when it moves due to edits.
            </summary>
            <param name="textView">The TextView where this DocPoint resides.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.RemoveBinding">
            <summary>
            Removes the EditPoint binding associated with this DocPoint (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.SetAnchor(DevExpress.CodeRush.Core.IDocumentAnchor)">
            <summary>
            Attaches an external anchor to this DocPoint. External anchors are an efficient alternative to binding many 
            DocPoints.
            </summary>
            <param name="anchor">An IDocumentAnchor implementor.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.RemoveAnchor">
            <summary>
            Removes an external anchor bound to this DocPoint
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.ToSourcePoint">
            <summary>
            Converts this DocPoint to SourcePoint.
            </summary>
            <returns>New SourcePoint instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocPoint.From(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates a new DocPoint based on the given SourcePoint. The BindingOption for this 
            new DocPoint will be BindingOption.NoBinding.
            </summary>
            <param name="sourcePoint">The SourcePoint to base this DocPoint on.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPoint.WasBoundToColumn">
            <summary>
            Returns true if this DocPoint was bound to the row and column where it 
            was dropped.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPoint.WasBoundToRow">
            <summary>
            Returns true if this DocPoint was bound to the row and column where it 
            was dropped.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPoint.PercentageOfColumnWidth">
            <summary>
            The percentage of the Column Width. This value is multiplied by the 
            active column width to determine a precise X coordinate in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPoint.PercentageOfRowHeight">
            <summary>
            The percentage of the row height. This value is multiplied by the 
            active row height to determine a precise Y coordinate in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPoint.Row">
            <summary>
            The row number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPoint.Column">
            <summary>
            The Column number.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.DocPoint.BindingOption.NoBinding">
            <summary>
            There is no binding on this point. As text is added and removed, it will 
            always stay at the row and column where it was initially dropped.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.DocPoint.BindingOption.BindToRow">
            <summary>
            As text is added and removed from the file, this DocPoint will shift down 
            or up to stay with its surrounding text. Only the row is bound with this 
            option; the column position remains static.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.DocPoint.BindingOption.BindToRowAndColumn">
            <summary>
            As text is added and removed from the file, this DocPoint will shift down, right,  
            left, or up to stay with its surrounding text. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPointCollection.FirstRow">
            <summary>
            The first row of this DocShape.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocPointCollection.LastRow">
            <summary>
            The last row of this DocShape.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.DocRange">
            <summary>
            DocRange consists of start and end doc points.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocRange.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new DocPoint instance.
            </summary>
            <param name="range">The SourceRange for this DocRange</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocRange.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates new DocPoint instance.
            </summary>
            <param name="start">The start point</param>
            <param name="end">The end point</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocRange.#ctor(DevExpress.CodeRush.Core.DocPoint,DevExpress.CodeRush.Core.DocPoint)">
            <summary>
            Creates new DocPoint instance.
            </summary>
            <param name="start">The start point</param>
            <param name="end">The end point</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocRange.ToSourceRange">
            <summary>
            Converts this DocRange to SourceRange.
            </summary>
            <returns>New SourceRange instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocRange.From(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates DocRange from the given SourceRange.
            </summary>
            <param name="range">The range to use.</param>
            <returns>New DocRange created for the given SourceRange.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocRange.Start">
            <summary>
            Gets start doc point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocRange.End">
            <summary>
            Gets end doc point.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Document">
            <summary>
            Document is a CodeRush wrapper around EnvDTE.Document, 
            providing additional methods and properties to make it easier to 
            manipulate documents.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Document.Activated">
            <summary>
            Called with this Document is activated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Document.SetProjectElement(DevExpress.CodeRush.StructuralParser.ProjectElement)">
            <summary>
            Sets project that this document belongs to.
            </summary>
            <param name="project">The project to set.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.LanguageExtension">
            <summary>
            The CodeRush language extension (containing language-specific 
            support, like code parsing, generation, etc.) for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.Project">
            <summary>
            Returns the Project that this document belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.ProjectElement">
            <summary>
            Returns the Project that this document belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.ProjectFileName">
            <summary>
            Returns the filename of the project that this document belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.ProjectName">
            <summary>
            Returns the name of the project that this document belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.RegionStartKeyword">
            <summary>
            The keyword to start a region (e.g., "#region" in C#).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Document.RegionEndKeyword">
            <summary>
            The keyword to end a region (e.g., "#endregion" in C#).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Document.DocumentInfo">
            <summary>
            A structure filled with information about this document from VSIP.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Activate(DevExpress.CodeRush.Core.Document,DevExpress.CodeRush.Core.DocumentView)">
            <summary>
            Activates (gives focus to) or opens the specified view of the specifed document.
            </summary>
            <param name="doc">The document to activate.</param>
            <param name="view">The view of the document to activate.</param>
            <returns>True if the specified view for the document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Activate(DevExpress.CodeRush.Core.Document,DevExpress.CodeRush.Core.DocumentView,System.Boolean)">
            <summary>
            Activates (gives focus to) or opens the specified view of the specifed document.
            </summary>
            <param name="doc">The document to activate.</param>
            <param name="view">The view of the document to activate.</param>
            <param name="forceOpen">If the specified view for this document is not found, open it.</param>
            <returns>True if the specified view for the document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Activate(DevExpress.CodeRush.Core.Document,System.Boolean)">
            <summary>
            Activates (gives focus to) the specified document. See also: CodeRush.Designer.Activate and CodeRush.Editor.Activate
            </summary>
            <param name="document">The document to activate.</param>
            <param name="preferDesigner">If true, the form designer is activated (if available). Otherwise preference is 
            given to the source code view. If the preferred view is unavailable but an alternate view is available, it 
            will be activated.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Activate(DevExpress.CodeRush.Core.Document)">
            <summary>
            Activates (gives focus to) the specified document. Preference is 
            given to the source code view. If the a source code view is unavailable 
            but an alternate view is available (e.g., a form designer for this 
            document), it will be activated. See also: CodeRush.Designer.Activate and CodeRush.Editor.Activate.
            </summary>
            <param name="document">The document to activate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.AttachObject(System.String,System.Object)">
            <summary>
            Attaches a named object to the active document.
            </summary>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
            <param name="attachment">The object to attach.</param>
            <remarks>The object attached with this method can be retrieved using GetObject.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.AttachObject(DevExpress.CodeRush.Core.Document,System.String,System.Object)">
            <summary>
            Attaches a named object to a document.
            </summary>
            <param name="document">The document to attach the object to.</param>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
            <param name="attachment">The object to attach.</param>
            <remarks>The object attached with this method can be retrieved using GetObject.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.BelongsToValidProject(DevExpress.CodeRush.Core.Document)">
            <summary>
            Determines if the specified document belongs to a valid project.
            </summary>
            <param name="aDoc">The document to test.</param>
            <returns>Returns true if the specified document belongs to a valid project.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Format">
            <summary>
            Formats the active document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Format(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Formats the specified range.
            </summary>
            <param name="startLine">The starting line number of the range to format.</param>
            <param name="startOffset">The column offset on the first line of the range to format.</param>
            <param name="endLine">The ending line number of the range to format.</param>
            <param name="endOffset">The column offset on the last line of the range to format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Format(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Formats the specified range.
            </summary>
            <param name="sourceRange">The SourceRange to format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Get(System.String)">
            <summary>
            Returns the document specified by fileName.
            </summary>
            <param name="fileName">The full name of the document to retrieve.</param>
            <returns>The specified document, or null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetDesigner(System.String)">
            <summary>
            Returns the designer document specified by fileName.
            </summary>
            <param name="fileName">The full name of the document to retrieve. </param>
            <returns>The specified document, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetDesigner">
            <summary>
            Returns the designer document for the active file.
            </summary>
            <returns>The specified document, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetDocuments(DevExpress.CodeRush.Core.GetDocumentFlags)">
            <summary>
            Returns a collection of all documents based on specific criteria. For example,
            you could use this method to get a collection of all TextDocuments in the current project.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetObject(System.String)">
            <summary>
            Gets an attached object that is attached to the active document.
            </summary>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetObject(DevExpress.CodeRush.Core.Document,System.String)">
            <summary>
            Gets an attached object that is attached to a document.
            </summary>
            <param name="document">The document to get the attached object from.</param>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetTextDocument(System.String)">
            <summary>
            Returns the non-designer source document specified by fileName.
            </summary>
            <param name="fileName">The full name of the document to retrieve. </param>
            <returns>The specified document, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetTextDocument">
            <summary>
            Returns the non-designer source document for the active file.
            </summary>
            <returns>The specified document, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GdiPaintOnTextViews(DevExpress.CodeRush.Core.EditorPaintEventHandler)">
            <summary>
            Paints on all TextViews corresponding to the active document...
            </summary>
            <param name="editorPaintEventHandler">A EditorPaintEventHandler instance that will 
            be called for each view being painted on.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.Parse(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Parses the specified text document and returns the LanguageElement that represents it.
            </summary>
            <param name="textDocument">The text document to parse.</param>
            <returns>Returns the LanguageElement representing the specified text document, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.ParseActive">
            <summary>
            Parses the active text document and returns the LanguageElement that represents it.
            </summary>
            <returns>Returns the LanguageElement representing the active text document, or null if the 
            active document is not a text document or if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetProjectName(DevExpress.CodeRush.Core.Document)">
            <summary>
            Returns the name of the project for the specified document.
            </summary>
            <param name="document">The document to check.</param>
            <returns>Returns the name of the project for the specified document.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.RemoveObject(System.String)">
            <summary>
            Removes an attached object from the active document's storage.
            </summary>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.RemoveObject(DevExpress.CodeRush.Core.Document,System.String)">
            <summary>
            Removes an attached object from a document's storage.
            </summary>
            <param name="document">The document to remove the attached object from.</param>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.InsertText(System.String)">
            <summary>
            Inserts the specified text at the cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.LineStartsWith(System.Int32,System.String)">
            <summary>
            Returns true if the given line number in the current file starts with the specified prefix. Leading white space is ignored.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="prefix">The prefix to look for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetLineAt(DevExpress.CodeRush.Core.TextDocument,System.Int32)">
            <summary>
            Returns the code line at the specified line number for the specified document.
            </summary>
            <param name="document">The TextDocument to check.</param>
            <param name="line">The line number to check.</param>
            <returns>Returns the code line if found, or an empty string otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetLineAt(System.Int32)">
            <summary>
            Returns the code line at the specified line number for the active document.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns the code line if found, or an empty string otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetIndentSize(System.String)">
            <summary>
            Returns the indent size for the specified document.
            </summary>
            <param name="fileName">The file name of the document to check.</param>
            <returns>The indent size for the specified document if found. Otherwise returns 4 (the default indent size).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetLeadingWhiteSpace(System.Int32)">
            <summary>
            Returns the leading white space (tabs and spaces) for the specified line.
            </summary>
            <param name="line">The line number (in the active document) to check.</param>
            <returns>The leading white space (tabs and spaces) for the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.DeleteCharsRight(EnvDTE.EditPoint,System.Int32)">
            <summary>
            Deletes the specified number of characters to the right of the specified edit point.
            </summary>
            <param name="aCursor">The edit point marking the start of the deletion.</param>
            <param name="aNumChars">The number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.DeleteCharsLeft(EnvDTE.EditPoint,System.Int32)">
            <summary>
            Deletes the specified number of characters to the left of the specified edit point.
            </summary>
            <param name="aCursor">The edit point marking the start of the deletion.</param>
            <param name="aNumChars">The number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetText(System.String)">
            <summary>
            Retrieves the current text of the specified file. If the file is open in Visual Studio
            in a document window or in-memory, the current contents of the buffer will be returned. If
            the file is not open, the contents of the file on disk will be returned.
            </summary>
            <param name="filePath">The file whose text to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetText(System.String,System.Boolean)">
            <summary>
            Retrieves the current text of the specified file. If the file is open in Visual Studio
            in a document window or in-memory, the current contents of the buffer will be returned. If
            the file is not open, the contents of the file on disk will be returned.
            </summary>
            <param name="filePath">The file whose text to retrieve.</param>
            <param name="useDTE">Defines whether EnvDTE or should be used (VSIP is used by default).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.ShowCode(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Opens the given file and scrolls view to the specified source range.
            </summary>
            <param name="fileNode">The file to open.</param>
            <param name="range">The source range to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetLeadingWhiteSpaceCharCount(System.String)">
            <summary>
            Returns the number of leading white space characters (tabs and spaces) on the passed-in text.
            </summary>
            <param name="codeLine">The text to check.</param>
            <returns>Returns the number of leading white space characters (tabs and spaces) found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.GetLeadingWhiteSpace(System.String)">
            <summary>
            Returns the leading white space (tabs and spaces) for the specified line.
            </summary> 
            <param name="codeLine">The text to check.</param>
            <returns>The leading white space (tabs and spaces) for the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentServices.ProjectName(DevExpress.CodeRush.Core.Document)">
            <summary>
            Returns the name of the project for the specified document.
            </summary>
            <param name="document">The document to check.</param>
            <returns>Returns the name of the project for the specified document.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.Active">
            <summary>
            Returns the active Document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.ActiveTextDocument">
            <summary>
            Returns the active TextDocument, or null if the active document is 
            not a TextDocument (e.g., a designer).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.ActiveTextView">
            <summary>
            Gets the active TextView for the ActiveTextDocument. Returns null if not available.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.ActiveLanguage">
            <summary>
            Returns the programming language used in the active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.ActiveFileExt">
            <summary>
            Returns the file extension (e.g., ".cs", ".cpp", ".h", ".vb", etc.) of the active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.ActiveLine">
            <summary>
            Returns the line of source code at the cursor in the active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.AllDocuments">
            <summary>
            Returns a collection of all documents.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.AllProjectDocuments">
            <summary>
            Returns a collection of all documents in the current project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.AllProjectTextDocuments">
            <summary>
            Returns a collection of all TextDocuments in the current project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.AllSolutionDocuments">
            <summary>
            Returns a collection of all documents in the current solution.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.AllSolutionTextDocuments">
            <summary>
            Returns a collection of all TextDocuments in the current solution.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.AllTextDocuments">
            <summary>
            Returns a collection of all TextDocuments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.Count">
            <summary>
            Gets the number of documents available.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.Formatting">
            <summary>
            Returns true if code in the active document is being formatted, through a call to CodeRush.Document.Format or TextDocument.Format.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentServices.LastActive">
            <summary>
            Returns the last active document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentStatistics.LineCount(System.String)">
            <summary>
            Returns the number of lines in a given string.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DocumentStatistics.TextSet(DevExpress.CodeRush.StructuralParser.IDocument,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Fires the DocumentTextSet event. Called when lines of code are programmatically added, removed, or replaced through the TextDocument.SetText method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DynamicEntry class.
            </summary>
            <param name="name">The name (template segment) that will index this entry.</param>
            <param name="expansionText">The expansion text associated with this segment.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DynamicEntry class.
            </summary>
            <param name="name">The name (template segment) that will index this entry.</param>
            <param name="expansionText">The expansion text associated with this segment.</param>
            <param name="customData"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.CalculateLongestEntry">
            <summary>
            Calculates the longest entry (by length of the Name property) inside this DynamicList.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.Add(DevExpress.CodeRush.Core.DynamicEntry)">
            <summary>
            Adds a new entry to the list.
            </summary>
            <param name="entry">The DynamicEntry to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.Add(System.String,System.String)">
            <summary>
            Adds a new entry to the list.
            </summary>
            <param name="name">The name (template segment) that will index this entry.</param>
            <param name="expansionText">The expansion text associated with this segment.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.Remove(DevExpress.CodeRush.Core.DynamicEntry)">
            <summary>
            Removes an entry from the list.
            </summary>
            <param name="entry">The DynamicEntry to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.Clear">
            <summary>
            Clears all entries in this list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.Contains(System.String)">
            <summary>
            Returns true if this DynamicList contains the specified entry.
            </summary>
            <param name="name">The name of the entry to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.GetEntry(System.String,System.Boolean)">
            <summary>
            Gets the DynamicEntry associated with the specified mnemonic.
            </summary>
            <param name="mnemonic">The mnemonic of the entry to find (e.g., "i" for "int", "b" for "bool", "h" for Hashtable).</param>
            <param name="caseSensitive">Pass true to perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicList.GetEntry(System.String)">
            <summary>
            Gets the DynamicEntry associated with the specified mnemonic.
            </summary>
            <param name="mnemonic">The mnemonic of the entry to find (e.g., "i" for "int", "b" for "bool", "h" for Hashtable).</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.DisplayName">
            <summary>
            The name of this dynamic list, as seen by a user.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.HoldsTypes">
            <summary>
            Gets or sets a value indicating whether this list holds types or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.LongestEntry">
            <summary>
            The length of the longest name in this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.TemplateVariable">
            <summary>
            Gets or sets the name of the template variable associated with this list.
            When a template expands using an element from this list, that element's 
            value will be assigned to this template variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.Comment">
            <summary>
            Gets or sets a list comment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.Context">
            <summary>
            Gets or sets a list context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.Item(System.String)">
            <summary>
            Read/write access to DynamicEntries indexed by mnemonic.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.Entries">
            <summary>
            Returns all entries in this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicList.GenericAddition">
            <summary>
            Returns all entries in this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicListCollection.HasEntries">
            <summary>
            Returns true if this collection holds any DynamicLists with entries.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.DynamicListProviderBase">
            <summary>
            Base class for the DynamicListProvider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicListProviderServices.GetProviders(System.String)">
            <summary>
            Returns an array of DynamicListProviders matching the specified dynamicListProviderName and 
            being either in the specified language or the neutral language.
            </summary>
            <param name="dynamicListProviderName">Name of the DynamicListProvider.</param>
            <returns>Returns the DynamicListProvider if found, otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicListProviderServices.Get(System.String)">
            <summary>
            Returns a collection of DynamicLists that match the specified list name.
            </summary>
            <param name="dynamicListName">The name of the static DynamicListProvider or the name of a DynamicList's TemplateVariable property,
            inside a dynamic DynamicListProvider.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicListProviderServices.Get(System.String,System.String)">
            <summary>
            Returns a collection of DynamicLists, that match the specified dynamicListProviderName,
            dynamicListName, and languageID parameters. Throws an exception if the specified DynamicListProvider 
            is not found.
            </summary>
            <param name="languageID">The language ID of the providers to find. If a non-neutral language 
            ID is specified (e.g., "CSharp"), note that neutral Dynamic List providers with the same name 
            will also returned in the list.</param>
            <param name="dynamicListName">The name of the DynamicList.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicListProviderServices.Get(System.String,System.String,System.String)">
            <summary>
            Returns a collection of DynamicLists, that match the specified dynamicListProviderName,
            dynamicListName, and languageID parameters. Throws an exception if the specified DynamicListProvider 
            is not found.
            </summary>
            <param name="dynamicListProviderName">The name of the DynamicListProvider.</param>
            <param name="languageID">The language ID of the providers to find. If a non-neutral language 
            ID is specified (e.g., "CSharp"), note that neutral Dynamic List providers with the same name 
            will also returned in the list.</param>
            <param name="dynamicListName">The name of the DynamicList.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicListProviderServices.Providers">
            <summary>
            Returns an array of all StringProviders.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DynamicListProviderServices.ProvidersList">
            <summary>
            Returns an array of all DynamicListProviders.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicMatch.GetNumSegmentsNeeded(System.String)">
            <summary>
            Gets the number of segments	required to represent this match.
            </summary>
            <param name="templateName">The name of the template.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicMatch.BuildMatchSequence(System.String,System.Int32,System.Boolean)">
            <summary>
            Builds a match sequence from a given templateName.
            </summary>
            <param name="templateName">The template name to build the match sequence from.</param>
            <param name="firstQuestionMark">The position of the first question mark in the name.</param>
            <param name="caseSensitive">Whether this template is case-sensitive or not.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicMatch.Matches(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the specified name matches one of the dynamic names of this template.
            </summary>
            <param name="nameToCheck">The name to check.</param>
            <param name="templateName">The template name.</param>
            <param name="caseSensitiveName">Whether to perform a case-sensitive match or not.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicMatch.PrepareForExpansion">
            <summary>
            Calls the Set TextCommand once for every variable in the template name, 
            passing the matching data as the value of that expansion variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DynamicMatch.DeclareNamespaces">
            <summary>
            Declares all namespaces associated with this DynamicMatch.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorServices.ToggleCodeAndDesignerViews">
            <summary>
            Switches the view between code and designer views.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorServices.Activate(DevExpress.CodeRush.Core.Document)">
            <summary>
            Activates (gives focus to) or opens the code window for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <returns>True if a code window for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorServices.Activate(EnvDTE.Document)">
            <summary>
            Activates (gives focus to) or opens the code window for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <returns>True if a code window for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorServices.Activate(DevExpress.CodeRush.Core.Document,System.Boolean)">
            <summary>
            Activates (gives focus to) or opens the code window for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <param name="forceOpen">If a code window for this document is not found, open it.</param>
            <returns>True if a code window for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorServices.Activate(EnvDTE.Document,System.Boolean)">
            <summary>
            Activates (gives focus to) or opens the code window for the specified document.
            </summary>
            <param name="doc">The document to activate.</param>
            <param name="forceOpen">If a code window for this document is not found, open it.</param>
            <returns>True if a code window for the specified document was found and activated.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorServices.ShowDesigner">
            <summary>
            Shows the designer corresponding to the current code view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorServices.HasFocus">
            <summary>
            True if an edit window has focus.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorServices.Active">
            <summary>
            Returns the active TextWindow object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorServices.IncrementalSearchActive">
            <summary>
            Returns true if incremental searching is activated.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorServices.AllowEditsWhileDebugging">
            <summary>
            Indicates whether or not language service allows 
            writing to the active text document during debugging.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.CreateMarker(System.Int32,System.Int32)">
            <summary>
            Creates a zero-length marker at the specified line and character offset.
            </summary>
            <param name="line">The specified line number.</param>
            <param name="offset">The specified character offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.InvalidateMarker">
            <summary>
            Invalidates the current marker if one has been created. This is called 
            automatically by CreateMarker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.AnchorPosition">
            <summary>
            Used internally by the DXCore to add a single-line comment at this EditPoint if
            it is positioned on a single-line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.RemoveAnchor">
            <summary>
            Removes the single-line comment added by a previous call to AnchorPosition.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.DeleteLeft(System.Int32)">
            <summary>
            Deletes text to the left of this EditPoint.
            </summary>
            <param name="length">The number of characters to delete. It is safe to call this with a number that extends
            past the start of the document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.DeleteRight(System.Int32)">
            <summary>
            Deletes text to the right of this EditPoint.
            </summary>
            <param name="length">The number of characters to delete. It is safe to call this with a number that extends
            past the end of the document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.GetTextLeft(System.Int32)">
            <summary>
            Gets text to the left of this EditPoint.
            </summary>
            <param name="length">The length of the text to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.GetTextRight(System.Int32)">
            <summary>
            Gets text to the right of this EditPoint.
            </summary>
            <param name="length">The length of the text to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.Insert(System.String)">
            <summary>
            Inserts text at this EditPoint's location.
            </summary>
            <param name="text">The text to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.LineDown">
            <summary>
            Moves this EditPoint down one line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.LineDown(System.Int32)">
            <summary>
            Moves this EditPoint down a specified number of lines.
            </summary>
            <param name="count">The number of lines to move.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.LineUp">
            <summary>
            Moves this EditPoint up one line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.LineUp(System.Int32)">
            <summary>
            Moves this EditPoint up a specified number of lines.
            </summary>
            <param name="count">The number of lines to move.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.Move(System.Int32,System.Int32)">
            <summary>
            Moves this EditPoint to the specified location.
            </summary>
            <param name="line">The specified line number.</param>
            <param name="offset">The specified character offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.Move(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves this EditPoint to the specified location.
            </summary>
            <param name="point">The specified SourcePoint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.Move(System.Int32)">
            <summary>
            Moves this EditPoint to the specified position.
            </summary>
            <param name="position">The specified position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.MoveLeft(System.Int32)">
            <summary>
            Moves this EditPoint left in the text stream by the specified number of characters.
            </summary>
            <param name="count">The number of characters to move.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.MoveRight(System.Int32)">
            <summary>
            Moves this EditPoint right in the text stream by the specified number of characters.
            </summary>
            <param name="count">The number of characters to move.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.MoveToEndOfDocument">
            <summary>
            Moves this EditPoint to the end of its document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.MoveToEndOfLine">
            <summary>
            Moves this EditPoint to the end of the line it is currently on.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.MoveToStartOfDocument">
            <summary>
            Moves this EditPoint to the start of its document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.MoveToStartOfLine">
            <summary>
            Moves this EditPoint to the start of the line it is currently on.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPoint.Clone">
            <summary>
            Creates a new instance that is a copy of this EditPoint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.IsRestored">
            <summary>
            Returns true if current edit point was restored after replacement in the code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.AtEndOfDocument">
            <summary>
            Returns true if this EditPoint is at the end of its TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.AtEndOfLine">
            <summary>
            Returns true if this EditPoint is at the end of a line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.AtStartOfDocument">
            <summary>
            Returns true if this EditPoint is at the start of its TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.AtStartOfLine">
            <summary>
            Returns true if this EditPoint is at the start of a line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.CharLeft">
            <summary>
            Returns the System.Char to the left of this EditPoint. If there is no text to the left (e.g., 
            the EditPoint is at the start of a line), a zero-value System.Char is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.CharRight">
            <summary>
            Returns the System.Char to the right of this EditPoint. If there is no text to the right (e.g.,
            the EditPoint is at the end of a line(Length), a zero-value System.Char is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.LineLength">
            <summary>
            Returns the length of the line that this EditPoint is positioned on.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.LineTextLeft">
            <summary>
            Returns the line text to the left of the EditPoint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.LineTextRight">
            <summary>
            Returns the line text to the right of the EditPoint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.OnEmptyLine">
            <summary>
            Returns true if the EditPoint is on a line that contains only whitespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.IsDeletable">
            <summary>
            Gets or sets the EditPointOptions.Deletable option for this EditPoint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.IsPushable">
            <summary>
            Gets or sets the EditPointOptions.Pushable option for this EditPoint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.IsAnchorable">
            <summary>
            Gets or sets the EditPointOptions.Anchorable option for this EditPoint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.RecentLine">
            <summary>
            The line that this EditPoint occupied before a text change. NOTE: This value only has
            significance during the TextChanged event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.RecentOffset">
            <summary>
            The line offset that this EditPoint occupied before a text change. NOTE: This value only has
            significance during the TextChanged event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.UseStoring">
            <summary>
            Gets or sets option to restore edit points after a destructive edit.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPoint.WasStored">
            <summary>
            Defines of point was saved.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditPointManager.InvalidCount">
            <summary>
            Returns the number of invalid edit points in the manager.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.MoveAllEditPoints(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves all EditPoints in the given to TextDocument located at a specific SourcePoint to
            a different SourcePoint.
            </summary>
            <param name="document">The TextDocument to retrieve EditPoints from.</param>
            <param name="from">The SourcePoint to move EditPoints from.</param>
            <param name="to">The SourcePoint to move EditPoints to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.MoveEditPoints(DevExpress.CodeRush.Core.EditPoint[],DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves EditPoints to the specific SourcePoint 
            </summary>
            <param name="points">The points to move.</param>
            <param name="to">The SourcePoint to move EditPoints to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="line">The line number to initialize the EditPoint at.</param>
            <param name="offset">The character offset to initialize the EditPoint at.</param>
            <param name="pushable">If true, text inserted at the same position as the EditPoint will
            cause it to be moved to the end of the inserted text.</param>
            <param name="name">The name of this EditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="line">The line number to initialize the EditPoint at.</param>
            <param name="offset">The character offset to initialize the EditPoint at.</param>
            <param name="pushable">If true, text inserted at the same position as the EditPoint will
            cause it to be moved to the end of the inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="line">The line number to initialize the EditPoint at.</param>
            <param name="offset">The character offset to initialize the EditPoint at.</param>
            <param name="name">The name of this EditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="line">The line number to initialize the EditPoint at.</param>
            <param name="offset">The character offset to initialize the EditPoint at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="position">The absolute position (text stream coordinate) in the TextDocument to initialize the EditPoint at.</param>
            <param name="pushable">If true, text inserted at the same position as the EditPoint will
            cause it to be moved to the end of the inserted text.</param>
            <param name="name">The name of this EditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Boolean)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="position">The absolute position (text stream coordinate) in the TextDocument to initialize the EditPoint at.</param>
            <param name="pushable">If true, text inserted at the same position as the EditPoint will
            cause it to be moved to the end of the inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.String)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="position">The absolute position (text stream coordinate) in the TextDocument to initialize the EditPoint at.</param>
            <param name="name">The name of this EditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,System.Int32)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="position">The absolute position (text stream coordinate) in the TextDocument to initialize the EditPoint at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean,System.String)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="point">The SourcePoint to initialize the EditPoint at.</param>
            <param name="pushable">If true, text inserted at the same position as the EditPoint will
            cause it to be moved to the end of the inserted text.</param>
            <param name="name">The name of this EditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="point">The SourcePoint to initialize the EditPoint at.</param>
            <param name="pushable">If true, text inserted at the same position as the EditPoint will
            cause it to be moved to the end of the inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="point">The SourcePoint to initialize the EditPoint at.</param>
            <param name="name">The name of this EditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.New(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Initializes a new EditPoint in the given TextDocument using the specified coordinates.
            </summary>
            <param name="document">The TextDocument to initialize the EditPoint in.</param>
            <param name="point">The SourcePoint to initialize the EditPoint at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditPointServices.CreateEditPoint(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates an EditPoint at the specified location.
            </summary>
            <param name="textDoc"></param>
            <param name="line"></param>
            <param name="offset"></param>
            <param name="name"></param>
            <param name="pushable"></param>
            <returns></returns>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EditPointOptions.Pushable">
            <summary>
            If set, text inserted directly on the EditPoint pushes it to the end of the insertion.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EditPointOptions.Deletable">
            <summary>
            If set, the EditPoint can be deleted when the user deletes text that surrounds the EditPoint.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EditPointOptions.Anchorable">
            <summary>
            If set, the EditPoint will be anchored using a single-line comment during code formatting.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Embedding.Collection">
            <summary>
            Returns the collection that this embedding belongs or null if it doesn't belong to a collection.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AtStartUp">
            <summary>
            Represents the of Visual Studio's "At startup" property.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.Unknown">
            <summary>
            Indicates that the value of Visual Studio's "At startup" property is unknown. This is returned
            from CodeRush.VSSettings.GetAtStartUpValue() if the proerty value cannot be retrieved.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.ShowStartPage">
            <summary>
            Indicates that the Visual Studio Start Page is shown at start-up.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.LoadLastSolution">
            <summary>
            Indicates that the last loaded solution is loaded at start-up.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.ShowOpenProjectDialog">
            <summary>
            Indicates that the Open Project dialog is displayed at start-up.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.ShowNewProjectDialog">
            <summary>
            Indicates that the New Project dialog is displayed at start-up.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.EmptyEnvironment">
            <summary>
            Indicates that nothing is loaded or displayed at start-up.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.AtStartUp.OpenHomePage">
            <summary>
            Indicates that MSDN home page is opened in the web browser at start-up. NOTE: This value
            is only valid in Visual Studio 2005 and higher.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.DocumentView.Code">
            <summary>
            The code or text view of a document.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.DocumentView.Design">
            <summary>
            The design view of a document.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.CRLF">
            <summary>
            MS-DOS line break (carriage-return\line-feed)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.CR">
            <summary>
            Macintosh line break (carriage-return)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.LF">
            <summary>
            Unix line break (line-feed)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.UniLineSep">
            <summary>
            Unicode line separator
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.UniParaSep">
            <summary>
            Unicode paragraph separator
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.EOF">
            <summary>
            Eof of file
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.EolType.None">
            <summary>
            Artificial ending point (e.g., word-wrapped line)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FindTextFlags.Backwards">
            <summary>
            Search backwards.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FindTextFlags.MatchCase">
            <summary>
            Match the exact case of the search text.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FindTextFlags.WholeWord">
            <summary>
            Match searchText against whole words.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FindTextFlags.RegEx">
            <summary>
            Search text is a regular expression that should be matched.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.All">
            <summary>
            All collapsible regions.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.IntersectsRange">
            <summary>
            Only collapsible regions that intersect the given range.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.MatchesRange">
            <summary>
            Only collapsible regions that match the given range.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.InsideRange">
            <summary>
            Only collapsible regions that are entirely inside the given range.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.Innermost">
            <summary>
            Only the most deeply nested region.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.VisibleOnly">
            <summary>
            Only visible regions (not contained within another collapsed region).
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.PreferStartInRange">
            <summary>
            Gives a region starting within the range higher priority than on ending in the range. This
            only has effect when Innermost is specified.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.MustStartInRange">
            <summary>
            Only regions that start within the given range.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GetCollapsibleRegionFlags.CollapsedRegionsOnly">
            <summary>
            Only regions that are collapsed.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.InsertionPointOptions.Pushable">
            <summary>
            If specified, this insertion point will move after text that is inserted at the same position.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.InsertionPointOptions.Anchorable">
            <summary>
            If specified, this insertion point will be anchored during formatting so that it's position will
            not change.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.KeyPosition">
            <summary>
            Describes the individual state of a keyboard key.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.VisualStudioVersion">
            <summary>
            Represents a version of Visual Studio.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.Unknown">
            <summary>
            An unknown version of Visual Studio.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2002">
            <summary>
            Visual Studio .NET 2002
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2003">
            <summary>
            Visual Studio .NET 2003
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2005">
            <summary>
            Visual Studio 2005
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2008">
            <summary>
            Visual Studio 2008
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2010">
            <summary>
            Visual Studio 2010
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2012">
            <summary>
            Visual Studio 2012
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.VisualStudioVersion.VS2013">
            <summary>
            Visual Studio 2013
            </summary>    
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.Command">
            <summary>
            Gets the EnvDTE.Command object from Visual Studio automation for this command (if there is one).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.CommandGroup">
            <summary>
            Gets the command group GUID of the command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.CommandID">
            <summary>
            Gets the command ID of the command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.CommandName">
            <summary>
            Gets the name of the command if it has one.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.CustomIn">
            <summary>
            Gets the custom parameter passed into the command, if any.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.CustomOut">
            <summary>
            Gets the custom parameter passed out of the command, if any.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.HasCustomIn">
            <summary>
            Returns true if a custom parameter is passed into the command; otherwise, false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.HasCustomOut">
            <summary>
            Returns true if a custom parameter is passed was passed out of the command; otherwise, false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandEventArgs.IsToolsOptions">
            <summary>
            Returns true for "Tools.Options" command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.TextDocument">
            <summary>
            The TextDocument that will be parsed. Null if the input to the parser will be a file on disk.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.FileName">
            <summary>
            The name of the document that will be parsed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.NodeBefore">
            <summary>
            The sibling node preceding the range that is incrementally parsed. This 
            property may be null if the parsed range is inserted as the first child 
            node of the Parent. This property will be null if ParseType equals 
            ParseType.Full.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.NodeAfter">
            <summary>
            The sibling node following the range that is incrementally parsed. This 
            property may be null if the parsed range is appended as the last 
            child node of the Parent. This property will be null if ParseType equals 
            ParseType.Full.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.DeletedNodes">
            <summary>
            A LanguageElementCollection of deleted children of Parent. This
            collection may be empty if no nodes are deleted, which can happen during 
            an incremental parse when text is inserted between nodes. This property 
            will be null if ParseType equals ParseType.Full.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.Parent">
            <summary>
            The LanguageElement that parents the nodes to be reparsed. This 
            property will be null if ParseType equals ParseType.Full.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.ParseRange">
            <summary>
            The SourceRange that will be reparsed. This property will be 
            SourceRange.Empty if ParseType equals ParseType.Full.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeParseEventArgs.ParseType">
            <summary>
            The type of parse. This this property equals ParseType.Full, then the
            entire document is parsed. If it's ParseType.Incremental, then only
            a portion of the document is parsed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AfterParseEventArgs.ParseResult">
            <summary>
            The node containing the newly-parsed nodes. This will be a 
            FileNode if the ParseType equals ParseType.Full, and will be the 
            parent of the incrementally parsed nodes if ParseType equals 
            ParseType.Incremental.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AfterParseEventArgs.Errors">
            <summary>
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AfterParseEventArgs.LanguageElement">
            <summary>
            The node containing the newly-parsed nodes. This property is obsolete. Use
            ParseResult instead.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseTextExpansionEventArgs.GetPosition(System.String)">
            <summary>
            Retrieves an EditPoint representing a previously stored position by its unique name.
            </summary>
            <param name="name">The name of the EditPoint to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseTextExpansionEventArgs.RemovePosition(System.String)">
            <summary>
            Removes a previous stored position.
            </summary>
            <param name="name">The unique name of the position to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseTextExpansionEventArgs.StorePosition(System.String)">
            <summary>
            Stores the current position of the caret. This is generally used if something meaningful
            should happen *after* the template is fully expanded. For example, the DXCore uses this
            to select text and restore the caret position after expansion.
            </summary>
            <param name="name">A unique name by which an EditPoint representing the stored position
            can be retrieved.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseTextExpansionEventArgs.StorePosition(System.String,System.Boolean)">
            <summary>
            Stores the current position of the caret. This is generally used if something meaningful
            should happen *after* the template is fully expanded. For example, the DXCore uses this
            to select text and restore the caret position after expansion.
            </summary>
            <param name="name">A unique name by which an EditPoint representing the stored position
            can be retrieved.</param>
            <param name="anchorable">If true, the EditPoint will have its IsAnchorable property
            set to true.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncAvailabilityEventArgs.IsAborted">
            <summary>
            Defines if async check should be aborted.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AutoDeclareInfoEventArgs.UseArgs">
            <summary>
            Set to true if arguments should be used for identifier name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AutoDeclareInfoEventArgs.Type">
            <summary>
            Returns type name to get identifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseDecorateEventArgs.TextDocument">
            <summary>
            The TextDocument being painted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.ElementIsVisible(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if all or a portion of the specified LanguageElement is visible in the view.
            </summary>
            <param name="element">The LanguageElement to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.GetPoint(System.Int32,System.Int32)">
            <summary>
            Returns the point in client coordinates of the upper-left position of the specified line and 
            character offset. Line and offset parameters may specify virtual space. If the point cannot be
            retrieved, a value of CodeRush.Graphics.InvalidPoint will be returned.
            </summary>
            <param name="line">The line number to convert.</param>
            <param name="virtualOffset">The character offset to check. This value can exist in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.GetPoint(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>
            Determines the point in client coordinates of the upper-left position of the specified line and 
            column. If the requested line and character offset are hidden, false is returned; true otherwise.
            Line and offset parameters may specify virtual space.
            </summary>
            <param name="line">The line number to convert.</param>
            <param name="virtualOffset">The character offset to check. This value can exist in virtual space.</param>
            <param name="point">The Point in client coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.GetPoint(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets a Point in client coordinates based on the start of the specified LanguageElement.
            </summary>
            <param name="element">The language element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.GetPoint(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Drawing.Point@)">
            <summary>
            Gets a Point in client coordinates based on the start of the specified LanguageElement. If the
            coordinates are not visible, false is returned; otherwise, true.
            </summary>
            <param name="element">The language element to check.</param>
            <param name="point">The Point in client coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.GetPoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns a Point in client coordinates based a SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.GetPoint(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Point@)">
            <summary>
            Returns a Point in client coordinates based on a SourcePoint. If the
            coordinates are not visible, false is returned; otherwise, true.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <param name="point">The Point in client coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.InSelection(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified line and column are contained within the 
            current selection. If the line and column are at the start of the selection, 
            this method will return true. However, if the line and column are at the end
            of the selection, this method will return false.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column to check. This value can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.LineInView(System.Int32)">
            <summary>
            Determines whether a line is within the line range displayed in the editor. Note: This returns true even if the line is contained within a collapsed region.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns true if the specified line number is within the line range displayed in the editor.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.LineInCollapsedRegion(System.Int32)">
            <summary>
            Determines whether a line number is contained within a collapsed region.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns true if the specified line number is contained within a collapsed region.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.LineIsEndOfRegion(System.Int32)">
            <summary>
            Determines whether a line number is the last line of a collapsible region. Note, this does not work on regions that are inside of collapsed regions.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns true if the specified line number is the last line of a collapsible region.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.LineIsStartOfRegion(System.Int32)">
            <summary>
            Determines whether a line number is the first line of a collapsible region. Note, this does not work on regions that are inside of collapsed regions.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns true if the specified line number is the first line of a collapsible region.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.LineIsVisible(System.Int32)">
            <summary>
            Determines if the specified line number is visible. A line is considered visible if it is in the 
            line range displayed in the editor and not contained within a collapsed region.
            </summary>
            <param name="line">The line to check.</param>
            <returns>Returns true if the specified line number is visible, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.RangeIsVisible(System.Int32,System.Int32)">
            <summary>
            Returns true if all or a portion of the specified line number range is visible in the view.
            </summary>
            <param name="startLine">The starting line number of the range to check.</param>
            <param name="endLine">The ending line number of the range to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.RangeIsVisible(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if all or a portion of the specified SourceRange is visible in the view.
            </summary>
            <param name="range">The SourceRange to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SelectionEndsOnLine(System.Int32)">
            <summary>
            Determines whether the selection starts or ends on the specified line number.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns true if the selection starts or ends on the specified line number.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.StartLineIsVisible(System.Int32)">
            <summary>
            Returns true if the specified starting line number is visible. If startLine is inside a 
            collapsed region this method will return false, unless startLine is the first line of
            that collapsed region in which case this method will return true.
            </summary>
            <param name="startLine">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.ViewIsSurroundedBy(System.Int32,System.Int32)">
            <summary>
            Returns true if the TextView being painted is surrounded by the specified start and end lines.
            </summary>
            <param name="startLine">The starting line number to check. This method will 
            return false if this line number falls after the top of the view.</param>
            <param name="endLine">The ending line number to check. This method will 
            return false if this line number occurs before the bottom of the view.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.CaretViewColumn">
            <summary>
            Gets the view column that the editor caret is positioned at. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.CaretOffset">
            <summary>
            Gets the character offset that the editor caret is positioned at.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.CaretLine">
            <summary>
            Gets the line that the editor caret is positioned at.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.DisplayWidth">
            <summary>
            Gets the width of the text view we're drawing in.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.LineMetrics">
            <summary>
            Gets pre-calculated fractions of the line height.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SelectionAnchorOffset">
            <summary>
            Gets the anchor character offset of the current selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SelectionAnchorViewColumn">
            <summary>
            Gets the anchor view column of the current selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SelectionAnchorLine">
            <summary>
            Gets the anchor line of the current selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SelectionExists">
            <summary>
            True if text is selected in this view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SpaceWidth">
            <summary>
            The width of a space character in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.TextDocument">
            <summary>
            The TextDocument being painted.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.TextViewIsActive">
            <summary>
            Whether this TextView has focus.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.CaretColumn">
            <summary>
            Gets the column that the editor caret is positioned at. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseEditorPaintEventArgs.SelectionAnchorColumn">
            <summary>
            Gets the anchor column of the current selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.KeyCode">
            <summary>
            Returns the key code for this key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.KeyState">
            <summary>
            Returns the key state for this key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.OriginalKeyState">
            <summary>
            If KeyDownIsRepeated is true this property returns original KeyState.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.VirtualKey">
            <summary>
            Returns the value for the virtual key code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.VirtualKeyLeftRight">
            <summary>
            Returns the value for the virtual key code that distinguishes between left- and right-hand keys.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.RAltPressed">
            <summary>
            Return true if right Alt key pressed
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.ScanCode">
            <summary>
            Returns the scan code for this key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.RepeatCount">
            <summary>
            Returns the repeat count associated with this key down event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.KeyDownIsRepeated">
            <summary>
            Returns true if this key down message is repeated.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.ExtendedKey">
            <summary>
            Returns true if this is an extended key (e.g., keys on the right side of the keyboard, like 
            the arrow keys, the numeric keypad, etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.AltKeyDown">
            <summary>
            Returns true if the Alt key is down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.CtrlKeyDown">
            <summary>
            Returns true if the Ctrl key is down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.ShiftKeyDown">
            <summary>
            Returns true if the Shift key is down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.NoShiftKeys">
            <summary>
            Returns true if this key was pressed without shift keys (e.g., no Shift, no Alt, and no Ctrl keys pressed). 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.KeyHasSubstance">
            <summary>
            Returns true if this keystroke includes a key that is not a shift key (Ctrl, Alt, or Shift), a Windows key, a lock toggle key (Caps, Num, or Scroll), or the Prnt Scrn key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.DisplayName">
            <summary>
            Returns the display name of this key (e.g., "Ctrl + Shift + A").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.KeyShiftsInputFocus">
            <summary>
            Returns true if this key is a Tab or Shift+Tab.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.IsDelete">
            <summary>
            Returns true if this key is the delete key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.IsBackspace">
            <summary>
            Returns true if this key is the backspace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.IsEnter">
            <summary>
            Returns true if this key is the Enter key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.IsEscape">
            <summary>
            Returns true if this key is the Escape key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BaseKeyEventArgs.KeyIsContextMenuTrigger">
            <summary>
            Returns true if this key is Apps or Shift + F10
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeAutoDeclareEventArgs.SuggestedName">
            <summary>
            The name of declaration suggested by AutoDeclare.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BeforeAutoDeclareEventArgs.Cancel">
            <summary>
            Set this property to true if executing of AutoDeclare should be canceled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandExecutingEventArgs.CancelDefault">
            <summary>
            Gets or sets whether the default behavior of this command that will be performed by Visual Studio should be cancelled or not.
            NOTE: Setting this property to true does not stop other event handlers from seeing this event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CommandExecutingEventArgs.CancelEvent">
            <summary>
            Gets or sets whether this event should be cancelled. If true, no other event handlers will see this event.
            NOTE: Setting this property to true does not cancel the default behavior that Visual Studio might perform.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CaretMovedEventArgs.Reason">
            <summary>
            Gets the reason that this event was fired.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentSetTextEventArgs.Document">
            <summary>
            The text document being modified.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentSetTextEventArgs.EndLine">
            <summary>
            The ending line number in the document for the SetText method call.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentSetTextEventArgs.EndOffset">
            <summary>
            The ending line offset in the document for the SetText method call.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentSetTextEventArgs.ModifiedRange">
            <summary>
            The SourceRange of code added as a result of the SetText method call.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentSetTextEventArgs.StartLine">
            <summary>
            The starting line number in the document for the SetText method call.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentSetTextEventArgs.StartOffset">
            <summary>
            The starting line offset in the document for the SetText method call.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssuesCheckedEventArgs.ChangeItem">
            <summary>
            Gets change item for this check.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssuesCheckedEventArgs.FileNode">
            <summary>
            Gets file node checked.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssuesCheckedEventArgs.WasAborted">
            <summary>
            Shows if code issues check was aborted because of changes in the code.
            So result code issue set can contain invalid data.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssuesCheckedEventArgs.OldCodeIssues">
            <summary>
            Gets old code issues.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeIssuesCheckedEventArgs.NewCodeIssues">
            <summary>
            Gets new code issues.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ContextSatisfiedEventArgs.GetRequiredParameter(System.String,System.String)">
            <summary>
            Gets the specified string parameter if found. Otherwise returns String.Empty.
            </summary>
            <param name="context">The name of the context (appears inside a log message if the parameter is not found)</param>
            <param name="name">The name of the parameter to find.</param>
            <returns>Returns the specified string parameter if found. Otherwise returns String.Empty.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.DisableFeatureEventArgs">
            <summary>
            Summary description for DisableFeatureEventArgs.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DisableFeatureEventArgs.Description">
            <summary>
            The description of the feature to disable. This text may identifier an individual aspect of 
            the feature to disable. If this event was triggered in response to an ActionHint, this 
            property will match the ActionHint's Text property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DisableFeatureEventArgs.Feature">
            <summary>
            The name of the feature to disable. If this event was triggered in response to an ActionHint, this 
            property will match the ActionHint's Feature property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentEventArgs.SavedByCompoundAction">
            <summary>
            Returns true if document saved event send from MultiFileCompoundAction
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentOpeningEventArgs.FileName">
            <summary>
            The name of the file that is being opened.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentOpeningEventArgs.ReadOnly">
            <summary>
            Determines whether the file is being opened in a read-only or writeable state.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentRenamedEventArgs.OldName">
            <summary>
            The old file name of the document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DocumentRenamedEventArgs.NewName">
            <summary>
            The new file name of the document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorCharacterTypedEventArgs.Character">
            <summary>
            The character that was typed in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorCharacterTypingEventArgs.Character">
            <summary>
            The character that was typed in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorCharacterTypingEventArgs.Cancel">
            <summary>
            Set to true to stop the character from being typed into the editor. This also keeps other plug-ins
            that are listening to this event from hearing it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorIdleEventArgs.MillisecondsIdle">
            <summary>
            The number of milliseconds that the IDE has been idle.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorIdleEventArgs.RepeatCount">
            <summary>
            The number of times the EditorIdle event has been triggered since the IDE initially went idle.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorIdleEventArgs.TimeSinceLastMouseMove">
            <summary>
            Gets a TimeSpan representing the amount of time that has passed since the last mouse move.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorMouseEventArgs.Cancel">
            <summary>
            Set to true to stop the editor from receiving this event. This also keeps other plug-ins
            that are listening to this event from hearing it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorMouseEventArgs.Clicks">
            <summary>
            The number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorMouseEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorMouseEventArgs.X">
            <summary>
            The x-coordinate of the mouse inside the control.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorMouseEventArgs.Y">
            <summary>
            The y-coordinate of the mouse inside the control.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorMouseEventArgs.Button">
            <summary>
            Which mouse button was pressed.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ConnectionStyle.Inside">
            <summary>
            Lines will connect the inside edges of the start and end SourcePoints passed to 
            DrawConnection.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ConnectionStyle.Outside">
            <summary>
            Lines will connect the outside edges of the start and end SourcePoints passed to 
            DrawConnection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.InternalOverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle,System.Boolean)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified foreground and background colors. 
            Optionally draws a line under the text or a frame around it. The text 
            must not contain any tab characters.
            </summary>
            <param name="text">The text to draw. This text must not contain any tab characters.</param>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="backColor">The background color to behind the text. The background will be painted in this color or the highlight color if text is selected.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
            <param name="bold">True if the text should be bold.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.NewPoint(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Creates a new point based on the basePoint, shifted by the specified 
            XOffset and YOffset.
            </summary>
            <param name="basePoint">The Point to shift.</param>
            <param name="XOffset">The number of pixels to shift right.</param>
            <param name="YOffset">The number of pixels to shift down.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.MoveDown(System.Drawing.Point,System.Int32)">
            <summary>
            Creates a new point based on the basePoint, shifted down by the 
            specified YOffset.
            </summary>
            <param name="basePoint">The Point to shift.</param>
            <param name="YOffset">The number of pixels to shift down.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.MoveUp(System.Drawing.Point,System.Int32)">
            <summary>
            Creates a new point based on the basePoint, shifted up by the 
            specified YOffset.
            </summary>
            <param name="basePoint">The Point to shift.</param>
            <param name="YOffset">The number of pixels to shift up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.MoveRight(System.Drawing.Point,System.Int32)">
            <summary>
            Creates a new point based on the basePoint, shifted right by the 
            specified XOffset.
            </summary>
            <param name="basePoint">The Point to shift.</param>
            <param name="XOffset">The number of pixels to shift right.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.MoveLeft(System.Drawing.Point,System.Int32)">
            <summary>
            Creates a new point based on the basePoint, shifted left by the 
            specified XOffset.
            </summary>
            <param name="basePoint">The Point to shift.</param>
            <param name="XOffset">The number of pixels to shift left.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.DrawConnection(System.Drawing.Pen,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.ConnectionStyle,System.Boolean,System.Int32)">
            <summary>
            Draws a single line connecting the start SourcePoint to the end SourcePoint, 
            using the specified pen.
            </summary>
            <param name="pen">The Pen to use for drawing the line.</param>
            <param name="start">The start SourcePoint.</param>
            <param name="end">The end SourcePoint.</param>
            <param name="connectionStyle">The ConnectionStyle for this line. Specify 
            ConnectionStyle.Inside to have the line connect the inside edges of the start 
            and end SourcePoints, or use ConnectionStyle.Outside to connect the outside edges
            of the start and end SourcePoints.</param>
            <param name="allowDiagonalLines">If the connection is neither naturally 
            horizontal or vertical (e.g., diagonal), then setting this option to false will 
            force the connection to be composed of horizontal and vertical lines.</param>
            <param name="linePositionOffset">The number of pixels to shift horizontal lines 
            down, and vertical lines right. For example, to make a horizontal line appear 
            two pixels higher than it normally would, use -2.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.DrawConnection(System.Drawing.Pen,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.ConnectionStyle,System.Boolean)">
            <summary>
            Draws a single line connecting the start SourcePoint to the end SourcePoint, 
            using the specified pen.
            </summary>
            <param name="pen">The Pen to use for drawing the line.</param>
            <param name="start">The start SourcePoint.</param>
            <param name="end">The end SourcePoint.</param>
            <param name="connectionStyle">The ConnectionStyle for this line. Specify 
            ConnectionStyle.Inside to have the line connect the inside edges of the start 
            and end SourcePoints, or use ConnectionStyle.Outside to connect the outside edges
            of the start and end SourcePoints.</param>
            <param name="allowDiagonalLines">If the connection is neither naturally 
            horizontal or vertical (e.g., diagonal), then setting this option to false will 
            force the connection to be composed of horizontal and vertical lines.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.DrawConnection(System.Drawing.Pen,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.ConnectionStyle)">
            <summary>
            Draws a single line connecting the start SourcePoint to the end SourcePoint, 
            using the specified pen.
            </summary>
            <param name="pen">The Pen to use for drawing the line.</param>
            <param name="start">The start SourcePoint.</param>
            <param name="end">The end SourcePoint.</param>
            <param name="connectionStyle">The ConnectionStyle for this line. Specify 
            ConnectionStyle.Inside to have the line connect the inside edges of the start 
            and end SourcePoints, or use ConnectionStyle.Outside to connect the outside edges
            of the start and end SourcePoints.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.DrawConnection(System.Drawing.Pen,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Draws a single line connecting the start SourcePoint to the end SourcePoint, 
            using the specified pen in the ConnectionStyle.Outside style.
            </summary>
            <param name="pen">The Pen to use for drawing the line.</param>
            <param name="start">The start SourcePoint.</param>
            <param name="end">The end SourcePoint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.DrawLine(System.Int32,System.Int32,System.Int32,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Draws a line under the text, or a frame around the text at the specified line 
            number and column offset in the specified color. 
            </summary>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="length">The length of the line or width of the frame in characters.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.DrawLine(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a line under the text at the specified line number and column offset in the specified color. 
            </summary>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="length">The length of the line or width of the frame in characters.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.GetNextTextSegmentToDraw(System.Int32,System.Int32@,System.String@,System.Boolean@)">
            <summary>
            Gets the next TextSegment to draw. Automatically breaks overlayed text into pieces that are either inside a selection or completely outside of it.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.LineText(System.Int32,System.Int32,System.Int32,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Draws a line under the text or a frame around the text at the specified line 
            number and column offset in the specified color. 
            </summary>
            <param name="aLine">The line number, starting at one.</param>
            <param name="aOffset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="aLength">The length of the line or width of the frame in characters.</param>
            <param name="aLineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="aLineStyle">The style of a line drawn around or under the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle,System.Boolean)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified foreground and background colors. 
            Optionally draws a line under the text or a frame around it.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="backColor">The background color to behind the text. The background will be painted in this color or the highlight color if text is selected.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
            <param name="bold">Draw the test as bold</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified foreground and background colors. 
            Optionally draws a line under the text or a frame around it.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="backColor">The background color to behind the text. The background will be painted in this color or the highlight color if text is selected.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified foreground and background colors. 
            Optionally draws a line under the text or a frame around it.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="point">The SourcePoint to draw at.</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="backColor">The background color to behind the text. The background will be painted in this color or the highlight color if text is selected.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified foreground and background colors. 
            </summary>
            <param name="text">The text to draw.</param>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="backColor">The background color to behind the text. The background will be painted in this color or the highlight color if text is selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified foreground and background colors. 
            </summary>
            <param name="text">The text to draw.</param>
            <param name="point">The SourcePoint to draw at.</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="backColor">The background color to behind the text. The background will be painted in this color or the highlight color if text is selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified color. Optionally draws a line 
            under the text or a frame around it.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color,System.Drawing.Color,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified color. Optionally draws a line 
            under the text or a frame around it.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="point">The SourcePoint to draw at.</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
            <param name="lineColor">The color for a line drawn around or under the text. The line will be painted in this color or the highlight line color if text is selected.</param>
            <param name="lineStyle">The style of a line drawn around or under the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified color.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="line">The line number, starting at one.</param>
            <param name="offset">The line column offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorPaintEventArgs.OverlayText(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Color)">
            <summary>
            Draws the specified text on top of the view at the specified line 
            number and column offset in the specified color.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="point">The SourcePoint to draw at.</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color or the highlight text color if text is selected.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorPaintEventArgs.BackgroundColor">
            <summary>
            Gets the background color of the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorPaintEventArgs.SelectedLineColor">
            <summary>
            Gets the color for graphic lines painted near selected text. This color is a
            50% blend between SelectedTextForegroundColor and SelectedTextBackgroundColor,
            which results in a lower contrast line (reducing visible noise) when text is 
            selected.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorPaintEventArgs.Lines">
            <summary>
            Collection of LineInfo objects for the file.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.EditorPaintLanguageElementEventArgs">
            <summary>
            Event args for the EditorPaintLanguageElement event. Note that these event args must descend 
            from NodeIterationEventArgs, because they are passed to the IterateNodesInView method inside 
            SourceModelServices.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorPaintLanguageElementEventArgs.PaintArgs">
            <summary>
            EditorPaintEventArgs reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorScrolledEventArgs.Pixels">
            <summary>
            The number of pixels scrolled. If this number is negative, the editor was scrolled left or up; 
            if positive, right or down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorSetCursorEventArgs.Cancel">
            <summary>
            Set to true to stop the editor from receiving this event. This also keeps other plug-ins
            that are listening to this event from hearing it.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorValidateClipRegionEventArgs.ValidateRectangle(System.Drawing.Rectangle)">
            <summary>
            Keeps Visual Studio from painting the specified rectangle during the next paint. This
            is useful for highly-optimized painting.
            </summary>
            <param name="rect">The rectangle (in client coordinates relative to the editor) to be
            validated.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorValidateClipRegionEventArgs.ValidateRectangle(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Keeps Visual Studio from painting the specified rectangle during the next paint. This
            is useful for highly-optimized painting.
            </summary>
            <param name="rect">The rectangle (in client coordinates relative to the editor) to be
            validated.</param>
            <param name="excludeGutter">If true, the gutter area in the TextView will not be included 
            in the validated range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorValidateClipRegionEventArgs.ValidateText(System.String,System.Int32,System.Int32)">
            <summary>
            Calculates the rectangle for the specified text and the specified line and column, 
            and then validates that rectangle.	
            </summary>
            <param name="text">The text to validate.</param>
            <param name="line">The line where the text appears.</param>
            <param name="offset">The column offset of the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EditorValidateClipRegionEventArgs.ValidateText(System.String,System.Int32,System.Int32,DevExpress.CodeRush.Core.LineStyle)">
            <summary>
            Calculates the rectangle for the specified text and the specified line and column, 
            and then validates that rectangle.	
            </summary>
            <param name="text">The text to validate.</param>
            <param name="line">The line where the text appears.</param>
            <param name="offset">The column offset of the text.</param>
            <param name="lineStyle">The LineStyle of the border around the text to invalidate.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorValidateClipRegionEventArgs.NoGutterRectangles">
            <summary>
            An ArrayList of Rectangles that will not include the gutter region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorValidateClipRegionEventArgs.FullTextViewRectangles">
            <summary>
            An ArrayList of Rectangles that may overlap the gutter region.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.EditorValidateLanguageElementClipRegionEventArgs">
            <summary>
            Event args for the EditorValidateLanguageElementClipRegion event. Note that these event args 
            must descend from NodeIterationEventArgs, because they are passed to the IterateNodesInView 
            method inside SourceModelServices.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EditorValidateLanguageElementClipRegionEventArgs.ValidateClipRegionArgs">
            <summary>
            EditorValidateClipRegionEventArgs reference.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExecuteEventArgs.NewExpansionBuilder">
            <summary>
            Use this to create and expand DXCore text expansions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExecuteTextCommandEventArgs.NewExpansionBuilder">
            <summary>
            Use this to create and expand DXCore text expansions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExecuteTextCommandEventArgs.GetParameterValue(System.Int32)">
            <summary>
            Returns parameter value at the specified index. Returns String.Empty if there are no appropriate parameter.
            </summary>
            <param name="index">The index of the parameter to get value.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FeatureInvokedEventArgs">
            <summary>
            Arguments for the FeatureInvoked event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FeatureInvokedEventArgs.#ctor(System.String,System.String,System.Drawing.Color,System.String)">
            <summary>
            Creates a new instance of FeatureInvokedEventArgs
            </summary>
            <param name="featureCategory">The category of the feature invoked (e.g., "Navigation", etc.).</param>
            <param name="text">The text describing the feature (e.g., "Selection Increase", etc.)</param>
            <param name="color">The color associated with this feature group.</param>
            <param name="optionsPath">The path to the options page for configuring this feature.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureInvokedEventArgs.FeatureCategory">
            <summary>
            The category of the feature invoked (e.g., "Navigation", "Refactoring", etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureInvokedEventArgs.Text">
            <summary>
            The text describing the feature (e.g., "Selection Increase", etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureInvokedEventArgs.OptionsPath">
            <summary>
            The path to the options page for configuring this feature.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureInvokedEventArgs.Color">
            <summary>
            The color associated with this feature group. Color is used for Action hints and other visual cues
            to distinguish one set of features from another.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetAvailableShortcutsEventArgs.#ctor(DevExpress.CodeRush.Core.ShortcutsHintRows)">
             <summary>
            Creates a new instance of GetAvailableShortcutsEventArgs
            </summary>
             <param name="availableShortcuts">The ShortcutsHintRows to assign to this.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetAvailableShortcutsEventArgs.AvailableShortcuts">
            <summary>
            Add your ShortcutsHintRow to this AvailableShortcuts collection if your Action is available.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetDynamicListsEventArgs.Lists">
            <summary>
            Add DynamicLists to this property in your event handler as needed.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetFeatureAssistanceEventArgs">
            <summary>
            EventArgs for the GetFeatureAssistance event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetFeatureAssistanceEventArgs.HtmlFileName">
            <summary>
            The name of the HTML file that provides help on the requested feature. If this file is without a path, 
            CodeRush will look for it in the Tutorial folder of the CodeRush install directory.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetNamedDynamicListsEventArgs.LanguageID">
            <summary>
            The Language ID of the list to deliver. Set the List property of this event arg to the 
            DynamicList associated with this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetNamedDynamicListsEventArgs.Name">
            <summary>
            The name of the list to deliver. Set the List property of this event arg to the 
            DynamicList associated with this Name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HookWindowEventArgs.Control">
            <summary>
            The .net control that is activating. If the window becoming active is not a .net control, 
            then this property will be null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HookWindowEventArgs.IsModal">
            <summary>
            True if the activating window is a modal dialog.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyPressedEventArgs.EatKey">
            <summary>
            Prevents the key from reaching the IDE.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyPressedEventArgs.AlreadyHandled">
            <summary>
            Determines if another object responding to keystroke events has handled this key.
            </summary>
            <returns>Returns true if this key has already been handled.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.KeyPressedEventArgs.KeyIsBeingReleased">
            <summary>
            True if the key is being released.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.KeyPressedEventArgs.SendToDXCore">
            <summary>
            Returns true if this key should be processed by DXCore.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageElementEventArgs.Element">
            <summary>
            Gets activated LanguageElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageElementActivatedEventArgs.Document">
            <summary>
            Gets document of the activated language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageElementActivatedEventArgs.OldElement">
            <summary>
            Gets language element being deactivated.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.Language">
            <summary>
            Gets the name of the language that the options have changed for.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.AutoListMembers">
            <summary>
            Gets the value of the "Auto list members" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.HideAdvancedMembers">
            <summary>
            Gets the value of the "Hide advanced members" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.HotUrls">
            <summary>
            Gets the value of the "Enable single-click URL navigation" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.IndentSize">
            <summary>
            Gets the value of the "Indent size" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.IndentStyle">
            <summary>
            Gets the value of the "Indenting" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.InsertSpaces">
            <summary>
            Gets the value of the "Insert spaces" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.InsertTabs">
            <summary>
            Gets the value of the "Keep tabs" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.LineNumbers">
            <summary>
            Gets the value of the "Line numbers" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.NavigationBar">
            <summary>
            Gets the value of the "Navigation bar" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.ParameterInformation">
            <summary>
            Gets the value of the "Parameter information" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.TabSize">
            <summary>
            Gets the value of the "Tab size" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.VirtualSpace">
            <summary>
            Gets the value of the "Enable virtual space" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageOptionsChangedEventArgs.WordWrap">
            <summary>
            Gets the value of the "Word wrap" option for this language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiDocumentLidContainerCommittedEventArgs.#ctor(DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter,System.String,System.String)">
            <summary>
            Initializes a new instance of the MultiDocumentLidContainerCommittedEventArgs class.
            </summary>
            <param name="container">The multi document linked identifier container.</param>
            <param name="oldText"></param>
            <param name="newText"></param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MultiDocumentLidContainerCommittedEventArgs.Container">
            <summary>
            Gets multi document linked identifier container.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MultiDocumentLidContainerCommittedEventArgs.OldText">
            <summary>
            Gets old linked identifier contianer text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MultiDocumentLidContainerCommittedEventArgs.NewText">
            <summary>
            Gets new linked identifier contianer text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PopupMemberMenuEventArgs.MemberItems">
            <summary>
            A collection of MenuItems. Your PopupMemberMenu event handler should 
            add any MenuItems that are appropriate for the Element to this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoEventArgs.Description">
            <summary>
            The description of the undo/redo operation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RedoExecutingEventArgs.Cancel">
            <summary>
            Set to true to cancel this undo operation from occurring.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionChangedEventArgs.TextView">
            <summary>
            The TextView of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionChangedEventArgs.OldRange">
            <summary>
            A SourceRange representing the old selection coordinates.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionChangedEventArgs.NewRange">
            <summary>
            A SourceRange representing the new selection coordinates.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionChangedEventArgs.AnchorIsAtStart">
            <summary>
            Determines whether the anchor is at the start of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionChangedEventArgs.AnchorIsAtEnd">
            <summary>
            Determines whether the anchor is at the end of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionChangedEventArgs.Reason">
            <summary>
            Gets the reason that this event was fired.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TestEventArgs">
            <summary>
            Arguments for the test event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestEventArgs.TestInfo">
            <summary>
            Gets TestInfo.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestEventArgs.TestLogs">
            <summary>
            Gets TestLogs.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TileEventArgs">
            <summary>
            Summary description for TileEventArgs.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TileEventArgs.Tile">
            <summary>
            The Tile associated with this event.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TileMouseEventArgs">
            <summary>
            Event args for Mouse events over Tiles.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TileMouseEventArgs.MouseArgs">
            <summary>
            The EditorMouseEventArgs. Set MouseArgs.Cancel to true if you want to hide this event from the IDE.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TileSetCursorEventArgs">
            <summary>
            Event args for the TileSetCursor event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TileSetCursorEventArgs.SetCursorArgs">
            <summary>
            The EditorSetCursorEventArgs. Set SetCursorArgs.Cancel to true if your event handler changes the Cursor.Current property.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TileVisualEventArgs">
            <summary>
            Summary description for TileVisualEventArgs.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TileVisualEventArgs.Tile">
            <summary>
            The Tile associated with this event.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TileVisualMouseEventArgs">
            <summary>
            Event args for Mouse events over Tiles.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TileVisualMouseEventArgs.MouseArgs">
            <summary>
            The EditorMouseEventArgs. Set MouseArgs.Cancel to true if you want to hide this event from the IDE.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoExecutedEventArgs.IsUndoMarker">
            <summary>
            Returns true if the top-level undo unit is a CodeRush undo marker.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoExecutedEventArgs.UndoMarkerCookie">
            <summary>
            If IsUndoMarker returns true, this value will contain the cookie for that undo marker.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoExecutingEventArgs.Cancel">
            <summary>
            Set to true to cancel this redo operation from occurring.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ViewPaneAvailabilityEventArgs">
            <summary>
            Arguments for the GetAvailability event.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ViewPaneShowingEventArgs">
            <summary>
            Summary description for ViewPaneAvailabilityEventArgs.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneEventArgs.#ctor(DevExpress.CodeRush.Core.ViewPaneBase)">
            <summary>
            Creates a new instance of ViewPaneEventArgs
            </summary>
            <param name="viewPane">The ViewPaneBase triggering this event.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneEventArgs.ViewPane">
            <summary>
            The ViewPane associated with this event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneShowingEventArgs.#ctor(DevExpress.CodeRush.Core.ViewPaneBase,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Creates a new instance of ViewPaneShowingEventArgs
            </summary>
            <param name="viewPane">The ViewPane we're about to show.</param>
            <param name="activeElement">The active LanguageElement.</param>
            <param name="declaration">The declaration for the active element.</param>
            <param name="references">The references for the active element.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneShowingEventArgs.ActiveElement">
            <summary>
            The active LanguageElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneShowingEventArgs.Declaration">
            <summary>
            Gets the declaration for the active element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneShowingEventArgs.References">
            <summary>
            Gets an IElementCollection of all references to the active element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneAvailabilityEventArgs.#ctor(DevExpress.CodeRush.Core.ViewPaneBase,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Creates a new instance of ViewPaneAvailabilityEventArgs
            </summary>
            <param name="viewPane">The ViewPane we're checking availability for.</param>
            <param name="activeElement">The active LanguageElement.</param>
            <param name="declaration">The declaration for the active element.</param>
            <param name="references">The references for the active element.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneAvailabilityEventArgs.IsAvailable">
            <summary>
            Set this property to true if this ViewPane is available for the active element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ViewPaneBestSizeEventArgs">
            <summary>
            Summary description for ViewPaneAvailabilityEventArgs.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBestSizeEventArgs.#ctor(DevExpress.CodeRush.Core.ViewPaneBase,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of ViewPaneBestSizeEventArgs
            </summary>
            <param name="viewPaneBase">The ViewPaneBase to get the best size for.</param>
            <param name="idealWidth">The ideal width for this ViewPane.</param>
            <param name="idealHeight">The ideal height for this ViewPane.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneBestSizeEventArgs.IdealWidth">
            <summary>
            Gets or sets the IdealWidth for this ViewPane.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneBestSizeEventArgs.IdealHeight">
            <summary>
            Gets or sets the IdealHeight for this ViewPane.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.EnsureVSEventGroup(DevExpress.CodeRush.Core.EventNexus.VSEventGroup)">
            <summary>
            Ensures that the specified Visual Studio event group is enabled unless the EventNexus has not been started.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.FireHandler(System.Int32,System.Reflection.PropertyInfo,System.Int32,System.Object[])">
            <returns>Returns true if the event is cancelled; otherwise, false;</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.FireHandler(DevExpress.CodeRush.Core.EventNexus.EventKey,System.Int32,System.String,System.Object[])">
            <returns>Returns true if the event is cancelled; otherwise, false;</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.FireHandler(DevExpress.CodeRush.Core.EventNexus.CodeRushEventKey,System.Int32,System.String,System.Object[])">
            <returns>Returns true if the event is cancelled; otherwise, false;</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.FireHandler(System.Int32,System.Int32,System.String,System.Object[])">
            <returns>Returns true if the event is cancelled; otherwise, false;</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnCaretMoved(DevExpress.CodeRush.Core.CaretMovedEventArgs)">
            <summary>
            Triggers the CaretMoved event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnDocumentTextSet(DevExpress.CodeRush.Core.DocumentSetTextEventArgs)">
            <summary>
            Triggers the DocumentTextSet event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnSelectionChanged(DevExpress.CodeRush.Core.SelectionChangedEventArgs)">
            <summary>
            Triggers the SelectionChanged event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnEditorIdle(DevExpress.CodeRush.Core.EditorIdleEventArgs)">
            <summary>
            Triggers the EditorIdle event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnFeatureInvoked(System.String,System.String)">
            <summary>
            Triggers the FeatureInvoked event. 
            </summary>
            <param name="featureCategory">The category of the feature invoked (e.g., "Navigation", etc.).</param>
            <param name="description">The text describing the feature (e.g., "Selection Increase", etc.).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferAdded(DevExpress.DXCore.TextBuffers.TextBufferAddedEventArgs)">
            <summary>
            Triggers the TextBufferAdded event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferRemoving(DevExpress.DXCore.TextBuffers.TextBufferRemovingEventArgs)">
            <summary>
            Triggers the TextBufferRemoving event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferRemoved(DevExpress.DXCore.TextBuffers.TextBufferRemovedEventArgs)">
            <summary>
            Triggers the TextBufferRemoved event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferChanging(DevExpress.DXCore.TextBuffers.TextBufferChangingEventArgs)">
            <summary>
            Triggers the TextBufferChanging event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferChanged(DevExpress.DXCore.TextBuffers.TextBufferChangedEventArgs)">
            <summary>
            Triggers the TextBufferChanged event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferChangeCancelled(DevExpress.DXCore.TextBuffers.TextBufferChangeCancelledEventArgs)">
            <summary>
            Triggers the TextBufferChangeCancelled event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferRenamed(DevExpress.DXCore.TextBuffers.TextBufferRenamedEventArgs)">
            <summary>
            Triggers the TextBufferRenamed event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnTextBufferChangesCommitted(DevExpress.DXCore.TextBuffers.TextBufferChangesCommittedEventArgs)">
            <summary>
            Triggers the TextBufferChangesCommitted event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnUndoActionExecuting(DevExpress.DXCore.Undo.UndoRedoActionExecutingEventArgs)">
            <summary>
            Triggers the UndoActionExecuting event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnUndoActionExecuted(DevExpress.DXCore.Undo.UndoRedoActionExecutedEventArgs)">
            <summary>
            Triggers the UndoActionExecuted event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnUndoActionCancelled(DevExpress.DXCore.Undo.UndoRedoActionCancelledEventArgs)">
            <summary>
            Triggers the UndoActionCancelled event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnRedoActionExecuting(DevExpress.DXCore.Undo.UndoRedoActionExecutingEventArgs)">
            <summary>
            Triggers the RedoActionExecuting event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnRedoActionExecuted(DevExpress.DXCore.Undo.UndoRedoActionExecutedEventArgs)">
            <summary>
            Triggers the RedoActionExecuted event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnRedoActionCancelled(DevExpress.DXCore.Undo.UndoRedoActionCancelledEventArgs)">
            <summary>
            Triggers the RedoActionCancelled event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnSolutionBuildStarting(DevExpress.CodeRush.Core.SolutionBuildStartingEventArgs)">
            <summary>
            Triggers the SolutionBuildStarting event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnSolutionBuildDone(DevExpress.CodeRush.Core.SolutionBuildDoneEventArgs)">
            <summary>
            Triggers the SolutionBuildDone event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnDXCoreLoaded(DevExpress.CodeRush.Core.DXCoreLoadedEventArgs)">
            <summary>
            Triggers the DXCoreLoaded event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnDXCoreUnloading(DevExpress.CodeRush.Core.DXCoreUnloadingEventArgs)">
            <summary>
            Triggers the DXCoreUnloading event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnActiveLanguageChanged">
            <summary>
            Triggers the ActiveLanguageChanged event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnEditorContextMenuShowing(DevExpress.CodeRush.Core.EditorContextMenuShowingEventArgs)">
            <summary>
            Triggers the EditorContextMenuShowing event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnFontAndColorPrefsChanged(System.EventArgs)">
            <summary>
            Triggers the FontAndColorPrefsChanged event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterFontAndColorPrefsChanged(System.EventArgs)">
            <summary>
            Triggers the PostFontAndColorPrefsChanged event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterAddSolutionFiles(System.EventArgs)">
            <summary>
            Triggers the AfterAddSolutionFiles event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterRemoveSolutionFiles(System.EventArgs)">
            <summary>
            Triggers the AfterRemoveSolutionFiles event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterRenameSolutionFiles(System.EventArgs)">
            <summary>
            Triggers the AfterRenameSolutionFiles event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterAddSolutionDirectories(System.EventArgs)">
            <summary>
            Triggers the AfterAddSolutionDirectories event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterRemoveSolutionDirectories(System.EventArgs)">
            <summary>
            Triggers the AfterRemoveSolutionDirectories event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterRenameSolutionDirectories(System.EventArgs)">
            <summary>
            Triggers the AfterRenameSolutionDirectories event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnFeatureAdvising(DevExpress.CodeRush.Core.FeatureAdvisingEventArgs)">
            <summary>
            Triggers the FeatureAdvising event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnBeforeFeatureAdvise">
            <summary>
            Triggers the BeforeFeatureAdvise event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterFeatureAdvise">
            <summary>
            Triggers the AfterFeatureAdvise event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnMSPPTQuickFindUpdated">
            <summary>
            Triggers the MSPPTQuickFindUpdated event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnBeforeActionExecute(DevExpress.CodeRush.Core.ExecuteEventArgs)">
            <summary>
            Triggers the BeforeActionExecute event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnAfterActionExecute(DevExpress.CodeRush.Core.ExecuteEventArgs)">
            <summary>
            Triggers the AfterActionExecute event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnHintsAppearanceChanged(DevExpress.CodeRush.Core.HintsAppearanceChangedEventArgs)">
            <summary>
            Triggers the HintsAppearanceChanged event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.OnDelegateMethodGenerated(DevExpress.CodeRush.Core.DelegateMethodGeneratedEventArgs)">
            <summary>
            Triggers the DelegateMethodGenerated event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EventNexus.LogVsCommands">
            <summary>
            Enables or disables logging of Visual Studio commands to the DXCore Messages Log.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.InternalDocumentActivated">
            <summary>
            Fired just before DocumentActivated is triggered. Used by the parser to set its file cache.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.InternalDocumentDeactivated">
            <summary>
            Fired just before DocumentActivated is triggered. Used by the parser to set its file cache.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.PreTextChanged">
            <summary>
            Fired before all TextChanged events fire to plug-ins. Used by TextViewLines to refresh
            the state of each buffer line in the view.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.PostTextChanged">
            <summary>
            Fired after all TextChanged events fire to plug-ins. Used by EditPointServices to adjust
            EditPoint positions.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TemplateUndoContextOpened">
            <summary>
            Fired immediately after the undo context for a template expansion is opened.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TemplateUndoContextClosing">
            <summary>
            Fired immediately before the undo context for a template expansion is closed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.ParserResumed">
            <summary>
            Fired when the parser is no longer suspended.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.ParserSuspended">
            <summary>
            Fired when parse operations are suspended.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AllTextFieldsCommitted">
            <summary>
            Occurs when the last TextField has been committed and the associated target has been activated.
            </summary>		
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.ModifierKeyStateChanged">
            <summary>
            Occurs when the state of one of the three keys (Shift, Ctrl, Alt) is changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.LockKeyStateChanged">
            <summary>
            Occurs when the state of one of the four keys (Num Lock, Caps Lock, Scroll Lock, Function Lock) is changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FarCacheChanged">
            <summary>
            Fired when project symbols are changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FarCacheInSync">
            <summary>
            Fired when project symbols are in sync.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FileChanged">
            <summary>
            Fired when disk file is changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.MenuShown">
            <summary>
            Occurs when the Main Visual Studio menu is shown. Note that this event is not supported in Visual Studio 2010 and up.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.MenuHidden">
            <summary>
            Occurs when the Main Visual Studio menu is hidden. Note that this event is not supported in Visual Studio 2010 and up.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.LanguageOptionsChanged">
            <summary>
            Occurs immediately after the Visual Studio options for a language have changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.SetNewOptionPage">
            <summary>
            Occurs when somebody want to display another OptionPage
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.CommandExecuting">
            <summary>
            Occurs when a Visual Studio command is about to execute.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.CommandExecuted">
            <summary>
            Occurs when Visual Studio command has been executed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferAdded">
            <summary>
            Occurs when a new text buffer is opened in Visual Studio and the DXCore creates an ITextBuffer for it.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferRemoving">
            <summary>
            Occurs when a new text buffer is opened in Visual Studio and the DXCore creates an ITextBuffer for it.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferRemoved">
            <summary>
            Occurs when a new text buffer is opened in Visual Studio and the DXCore creates an ITextBuffer for it.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferChanging">
            <summary>
            Occurs when text is about to be changed in an ITextBuffer.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferChanged">
            <summary>
            Occurs when text has been changed in an ITextBuffer.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferChangeCancelled">
            <summary>
            Occurs when a text change has been cancelled in an ITextBuffer.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.TextBufferRenamed">
            <summary>
            Occurs when an ITextBuffer has been renamed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.UndoActionExecuting">
            <summary>
            Occurs immediately before an undo action is about to execute.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.UndoActionExecuted">
            <summary>
            Occurs after an undo action has been executed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.UndoActionCancelled">
            <summary>
            Occurs when an undo action has been cancelled.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.RedoActionExecuting">
            <summary>
            Occurs immediately before an redo action is about to execute.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.RedoActionExecuted">
            <summary>
            Occurs after an redo action has been executed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.RedoActionCancelled">
            <summary>
            Occurs when an redo action has been cancelled.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.SolutionBuildStarting">
            <summary>
            Occurs when a solution build is starting.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.SolutionBuildDone">
            <summary>
            Occurs after a solution build is done.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DXCoreLoaded">
            <summary>
            Occurs when the DXCore has finished loading.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DXCoreLoadedEventFired">
            <summary>
            Occurs when the DXCore has finished loading.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DXCoreUnloading">
            <summary>
            Occurs when the DXCore begins unloading.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.ActiveLanguageChanged">
            <summary>
            Occurs when DXCore language is changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.EditorContextMenuShowing">
            <summary>
            Occurs when the context menu is about to be displayed in the editor.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FontAndColorPrefsChanged">
            <summary>
            Occurs immediately after the Visual Studio options for a font and color have changed.
            Attention! This event occurs for earch changed font and color category.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterFontAndColorPrefsChanged">
            <summary>
            Occurs after the Visual Studio options for fonts and colors have changed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterAddSolutionFiles">
            <summary>
            Occurs immediately after solution files are added.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterRemoveSolutionFiles">
            <summary>
            Occurs immediately after solution files are removed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterRenameSolutionFiles">
            <summary>
            Occurs immediately after solution files are renamed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterAddSolutionDirectories">
            <summary>
            Occurs immediately after solution directories are added.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterRemoveSolutionDirectories">
            <summary>
            Occurs immediately after solution directories are removed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterRenameSolutionDirectories">
            <summary>
            Occurs immediately after solution directories are renamed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.CodeIssueChecked">
            <summary>
            Raised when code issues is checked.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FileChecked">
            <summary>
            Raised when a file is checked for code issues.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.ChangeChecked">
            <summary>
            Raised when change is analyzed for files to scan.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FilesInvalidatedAfterConfigurationChange">
            <summary>
            Raised when a source files invalidated after configuration changed
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.SolutionWideAnalysisStarted">
            <summary>
            Raised when a solution wide analysis is started.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.SolutionWideAnalysisStopped">
            <summary>
            Raised when a solution wide analysis was stopped.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.SolutionWideAnalysisDone">
            <summary>
            Raised when a solution wide analysis was done.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DecorateLanguageElement">
            <summary>
            Fired when visual items are added to language elements.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DecorateCodeIssue">
            <summary>
            Fired when visual items are added to code issue.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DecorateEditor">
            <summary>
            Fired when visual items are added to editor.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.FeatureAdvising">
            <summary>
            Fired when FeatureAdvisor makes advice
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.BeforeFeatureAdvise">
            <summary>
            Fired before FeatureAdvisor starts working
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterFeatureAdvise">
            <summary>
            Fired after FeatureAdvisor finished working
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.MSPPTQuickFindUpdated">
            <summary>
            Fired then Microsoft Productivity Power Tools Quick Find adornment updated
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.BeforeActionExecute">
            <summary>
            Fired before CodeRush action will execute
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.AfterActionExecute">
            <summary>
            Fired after CodeRush action was execute
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.HintsAppearanceChanged">
            <summary>
            Fired when hints colors have updated
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.EventNexus.DelegateMethodGenerated">
            <summary>
            Fired when a new delegate method has been generated.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.EventNexus.DelegateMethodGeneratedHasHandler">
            <summary>
            Returns true if a handler has been assigned to the DelegateMethodGenerated event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.VSEventManager.EnsureEventGroup(DevExpress.CodeRush.Core.EventNexus.VSEventGroup)">
            <summary>
            Ensures that the specified Visual Studio event group is enabled.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.EventNexus.VSEventManager.DisableAll">
            <summary>
            Disables all Visual Studio event groups.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FeatureService.#ctor">
            <summary>
            Creates a new instance of the CodeIssueServices class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHeaderRowInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ActionHeaderInfo class.
            </summary>
            <param name="rightSideText"></param>
            <param name="leftSideText"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActionLink class.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLink.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the ActionLink class.
            </summary>
            <param name="description"></param>
            <param name="targetObject"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLink.ShowActionPreview">
            <summary>
            Shows action preview.
            Triggers ShowPreview event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLink.HideActionPreview">
            <summary>
            Hides action preview.
            Triggers HidePreview event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLink.ExecuteAction">
            <summary>
            Exectutes action link.
            Triggers Execute event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ActionLink.HidePreview">
            <summary>
            Hide preview event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ActionLink.ShowPreview">
            <summary>
            Show preview event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ActionLink.Execute">
            <summary>
            Execute event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLinksWithHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActionLinksWithHeader class.
            </summary>
            <param name="header">Header of actions</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionLinksWithHeader.#ctor(System.String,System.Object,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the ActionLinksWithHeader class.
            </summary>
            <param name="header"></param>
            <param name="targetObject"></param>
            <param name="headerImage"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionWindowHint.#ctor(System.String,DevExpress.CodeRush.Core.IActionControls)">
            <summary>
            Initializes a new instance of the ActionWindowHint class.
            </summary>
            <param name="caption">Caption of window hint</param>
            <param name="actionControls">Controls to be added to form</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionWindowHint.#ctor(System.String,DevExpress.CodeRush.Core.IActionControls,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the ActionWindowHint class.
            </summary>
            <param name="caption">Caption of window hint</param>
            <param name="actionControls">Controls to be added to form</param>
            <param name="startPoint">Specific left top position of window</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionWindowHint.#ctor(System.String,System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.IActionControls},System.Drawing.Point)">
            <summary>
            Initializes a new instance of the ActionWindowHint class.
            </summary>
            <param name="caption">Caption of window hint</param>
            <param name="actionControls">Controls to be added to form</param>
            <param name="startPoint">Specific left top position of window</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionWindowHint.HandleKeys">
            <summary>
            Gets or sets value determining if keyboard should be processed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StandardFeature.#ctor(System.String,System.String,System.String,DevExpress.CodeRush.Core.FeatureProduct)">
            <summary>
            Initializes a new instance of the StandardFeature class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="optionsPage"></param>
            <param name="featureProduct"></param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextField">
            <summary>
            Marks a range in an expansion that needs further user input or confirmation. The marked 
            range has an associated description that appears when the TextField is active.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextFieldBase">
            <summary>
            Marks a range in an expansion. The marked 
            range has associated string data that 
            is exploited by descendants.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="data">Optional string data that will be displayed when the TextField is active.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String,DevExpress.CodeRush.Core.TextFieldType,System.Boolean)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="data">Optional string data that will be displayed when the TextField is active.</param>
            <param name="textFieldType">The type of this text field (one of Normal, Paren, or Bracket)</param>
            <param name="clearOnFirstActivation">Clears the contents of the text field when it is first activated</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String,DevExpress.CodeRush.Core.TextFieldType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="data">Optional string data that will be displayed when the TextField is active.</param>
            <param name="textFieldType">The type of this text field (one of Normal, Paren, or Bracket)</param>
            <param name="clearOnFirstActivation">Clears the contents of the text field when it is first activated</param>
            <param name="intellisenseProviderName">Intellisense provider name for collecting completions</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.Activate">
            <summary>
            Selects or activates this TextField in the active TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.Contains(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if this TextField contains the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.Contains(System.Int32,System.Int32)">
            <summary>
            Returns true if this TextField contains the specified line and offset.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.RecentRangeContains(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if RecentRange of this TextField contains the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.RecentRangeContains(System.Int32,System.Int32)">
            <summary>
            Returns true if RecentRange this TextField contains the specified line and offset.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.GdiInvalidate(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Invalidates the rectangle around this TextField in the specified TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.GdiInvalidate(DevExpress.CodeRush.Core.TextView,System.Int32)">
            <summary>
            Invalidates the rectangle around this TextField in the specified TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.GdiInvalidate">
            <summary>
            Invalidates the rectangle around this TextField in the active TextViews.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.GdiInvalidate(System.Int32)">
            <summary>
            Invalidates the rectangle around this TextField in the active TextViews.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.MakeEndPointPushable">
            <summary>
            Makes the end point of this TextField pushable, meaning that it will move to the 
            right as text is entered when the caret is on the end point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.MakeEndPointUnpushable">
            <summary>
            Makes the end point of this TextField pushable, meaning that it will move to the 
            right as text is entered when the caret is on the end point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.MakeStartPointPushable">
            <summary>
            Makes the start point of this TextField pushable, meaning that it will move to the 
            right as text is entered when the caret is on the start point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.SetTextFieldType(DevExpress.CodeRush.Core.TextFieldType)">
            <summary>
            Sets the TextFieldType for this TextField.
            </summary>
            <param name="textFieldType">The type of this text field (one of Normal, Paren, or Bracket)</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldBase.Clear">
            <summary>
            Clear text of the TextField.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.End">
            <summary>
            The end of this TextField.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.EndIsPushable">
            <summary>
            Gets or sets whether the end of this TextField is pushable meaning that it will move to the 
            right as text is entered when the caret is on the end point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.Range">
            <summary>
            Gets a SourceRange that represents the range of this TextField.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.RecentEnd">
            <summary>
            The end of this TextField just before any recent text change operations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.RecentStart">
            <summary>
            The start of this TextField just before any recent text change operations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.Start">
            <summary>
            The start of this TextField.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.StartIsPushable">
            <summary>
            Gets or sets whether the end of this TextField is pushable meaning that it will move to the 
            right as text is entered when the caret is on the end point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.TextFieldType">
            <summary>
            The type of this TextField. Paren and Bracket text fields can be cancelled just by 
            pressing the closing paren or bracket character when these text fields are active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldBase.WasRestored">
            <summary>
            Returns true if this TextField was restored after changes in code.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextField.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextField.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="description">An optional description that will be displayed when the TextField is active.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextField.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String,DevExpress.CodeRush.Core.TextFieldType)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="description">An optional description that will be displayed when the TextField is active.</param>
            <param name="textFieldType">The type of this text field (one of Normal, Paren, or Bracket)</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextField.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String,DevExpress.CodeRush.Core.TextFieldType,System.Boolean)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="description">An optional description that will be displayed when the TextField is active.</param>
            <param name="textFieldType">The type of this text field (one of Normal, Paren, or Bracket)</param>
            <param name="clearOnFirstActivation">Clears the contents of the text field when it is first activated</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextField.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String,DevExpress.CodeRush.Core.TextFieldType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="start">The start of this TextField.</param>
            <param name="end">The end of this TextField.</param>
            <param name="description">An optional description that will be displayed when the TextField is active.</param>
            <param name="textFieldType">The type of this text field (one of Normal, Paren, or Bracket)</param>
            <param name="clearOnFirstActivation">Clears the contents of the text field when it is first activated</param>
            <param name="intellisenseProviderName">Intellisense provider name for collecting completions</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextField.Description">
            <summary>
            A description of this TextField. The description appears inside a tooltip window 
            when this TextField is active.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextFieldFinder">
            <summary>
            Implements the IComparer interface to find a TextField containing the specified SourcePoint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldFinder.Compare(DevExpress.CodeRush.Core.TextField,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Compares a TextField with a SourcePoint, and returns an integer indicating their
            relationship (-1 means the TextField preceeds the SourcePoint, 0 means the TextField 
            contains the SourcePoint, and +1 means the TextField follows the SourcePoint). 
            </summary>
            <param name="x">The TextField to compare.</param>
            <param name="y">The SourcePoint to compare.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextFields">
            <summary>
            A sorted collection of TextFields, along with the methods 
            and properties needed to maintain that collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.GetFieldIndexAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the index of the TextField at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.SortIfNecessary">
            <summary>
            Sorts the TextFields if a field has recently been added.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.Add(DevExpress.CodeRush.Core.TextField)">
            <summary>
            Adds the specified TextField to this list.
            </summary>
            <param name="field">The TextField to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.Clear">
            <summary>
            Clears the TextFields from this list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.FindFieldAfter(System.Int32,System.Int32)">
            <summary>
            Finds the first TextField after the specified line and offset. Returns 
            null if not found.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.FindFieldAfter(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Finds the first TextField after the specified sourcePoint. Returns 
            the first TextField if not found, or null if there are no fields 
            in the list.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.FindFieldBefore(System.Int32,System.Int32)">
            <summary>
            Finds the TextField before the specified sourcePoint. Returns 
            the last TextField if not found, or null if there are no fields 
            in the list.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.FindFieldBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Finds the TextField before the specified sourcePoint. Returns 
            the last TextField if not found, or null if there are no fields 
            in the list.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.GetActiveField">
            <summary>
            Gets the active field, or returns null if there is no TextField.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.GetFieldAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the field at the specified SourcePoint, or returns null if there is no 
            TextField at the specified location.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.GetRecentFieldAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the field which has recent range containing the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.MakeEndPointsPushable">
            <summary>
            Ensures the end of each TextField in this list is pushable. This allows normal editing 
            of a collapsed TextField to expand as you type characters.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFields.Remove(DevExpress.CodeRush.Core.TextField)">
            <summary>
            Removes the specified TextField from this list.
            </summary>
            <param name="field">The TextField to remove.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFields.Count">
            <summary>
            The number of TextFields in this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFields.First">
            <summary>
            The first TextField in this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFields.Last">
            <summary>
            The last TextField in this list.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextFieldSorter">
            <summary>
            Implements the IComparer interface to sort TextFields.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldSorter.Compare(DevExpress.CodeRush.Core.TextField,DevExpress.CodeRush.Core.TextField)">
            <summary>
            Compares two TextFields and returns an integer value that describes their 
            relationship (-1 means x preceeds y, 0 means that x and y have the same 
            range, and 1 means x follows y).
            </summary>
            <param name="x">The first TextField to compare.</param>
            <param name="y">The second TextField to compare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldSorter.Compare(System.Object,System.Object)">
            <summary>
            Implements the IComparer interface.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextFieldTarget">
            <summary>
            Marks a range or point in an expansion that will be selected/activated after 
            all TextFields in a template have been accepted. Also stores a template 
            name that can be expanded upon activation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldTarget.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint)">
            <summary>
            Initializes a new instance of the TextFieldTarget class.
            </summary>
            <param name="start">The start of this TextFieldTarget.</param>
            <param name="end">The end of this TextFieldTarget.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextFieldTarget.#ctor(DevExpress.CodeRush.Core.EditPoint,DevExpress.CodeRush.Core.EditPoint,System.String)">
            <summary>
            Initializes a new instance of the TextFieldTarget class.
            </summary>
            <param name="start">The start of this TextFieldTarget.</param>
            <param name="end">The end of this TextFieldTarget.</param>
            <param name="templateName">An optional template name that will be expanded when this target is activated.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldTarget.Template">
            <summary>
            A template to expand when this TextFieldTarget is activated.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldTarget.End">
            <summary>
            The end of this TextFieldTarget.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextFieldTarget.Start">
            <summary>
            The start of this TextFieldTarget.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.Activate(System.String)">
            <summary>
            Activates the code view of the specified file name. If the code view is not available, it is opened.
            </summary>
            <param name="fileName">The name of the file to activate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ActivateHtmlView(System.String)">
            <summary>
            Activates the HTML view of the specified file name. If the HTML view is not available, the code file is opened.
            </summary>
            <param name="fileName">The name of the file to activate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.IsOpen(System.String)">
            <summary>
            Returns true if the specified file is open in any kind of view (e.g., code view, design view).
            </summary>
            <param name="fileName">The name of the file to test.</param>
            <returns>True if the specified file is open.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.IsOpen(System.String,System.String)">
            <summary>
            Returns true if the specified file is open in a specific view.
            </summary>
            <param name="fileName">The name of the file to test.</param>
            <param name="viewKind">A string representing the GUID of the view kind to test.
            The vsViewKind constants in EnvDTE.Constants should be used here.</param>
            <returns>True if the specified file is open.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ReadTextFile(System.String,System.Text.Encoding)">
            <summary>
            Reads the contents of a text file and returns the lines as an array of strings.
            </summary>
            <param name="fileName">The name of the file to read.</param>
            <param name="encoding">The encoding to use while reading the file.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ReadTextFile(System.String)">
            <summary>
            Reads the contents of a text file and returns them in a StringCollection.
            </summary>
            <param name="fileName">The name of the file to read.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.WriteTextFile(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Writes the contents of a StringCollection to a text file.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <param name="text">The StringCollection to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.WriteTextFile(System.String,System.String[])">
            <summary>
            Writes the contents of a string array to a text file.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <param name="text">The string array to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.WriteTextFile(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Writes the contents of a string array to a text file.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <param name="text">The string array to write.</param>
            <param name="encoding">The encoding to write with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.WriteTextFile(System.String)">
            <summary>
            Creates new text file.
            </summary>
            <param name="filePath">The name of the file create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.WriteTextFile(System.String,System.String)">
            <summary>
            Writes the contents of a string array to a text file.
            </summary>
            <param name="filePath">The name of the file to write to.</param>
            <param name="text">The string array to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeFile(System.String,DevExpress.CodeRush.Core.SourceRangeCollection,System.String)">
            <summary>
            Sets the text at the given ranges to the specified text.
            This can be used to delete, replace or insert text.
            </summary>
            <param name="fileName">The source file to change.</param>
            <param name="ranges">The ranges array to replace with the specified text.</param>
            <param name="text">The specified text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeFile(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String)">
            <summary>
            Sets the text at the given ranges to the specified text.
            This can be used to delete, replace or insert text.
            </summary>
            <param name="fileName">The source file to change.</param>
            <param name="ranges">The ranges array to replace with the specified text.</param>
            <param name="text">The specified text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeFile(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.Core.SourceRangeCollection,System.String)">
            <summary>
            Sets the text at the given ranges to the specified text.
            This can be used to delete, replace or insert text.
            </summary>
            <param name="fileNode">The source file to change.</param>
            <param name="ranges">The ranges array to replace with the specified text.</param>
            <param name="text">The specified text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeFile(System.String,DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Sets the text at the given ranges to the specified text.
            This can be used to delete, replace or insert text.
            </summary>
            <param name="fileName">The file name to change.</param>
            <param name="changes">The group of changes to apply.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeFile(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Sets the text at the given ranges to the specified text.
            This can be used to delete, replace or insert text.
            </summary>
            <param name="fileNode">The source file to change.</param>
            <param name="changes">The group of changes to apply.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeFile(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String)">
            <summary>
            Sets the text at the given ranges to the specified text.
            This can be used to delete, replace or insert text.
            </summary>
            <param name="fileNode">The source file to change.</param>
            <param name="ranges">The ranges array to replace with the specified text.</param>
            <param name="text">The specified text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.Boolean)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.Boolean,DevExpress.CodeRush.Core.Replacement.FileChangeProcessor)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
            /// <param name="processor">The FileChangeProcessor used for changing text buffer and processing text markers.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.String,System.Boolean)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="description">The description of the changes. The description will be used for multi undo unit.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.Boolean,System.Boolean)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="withFormat">The value determining if format should be applied.</param>
            <param name="withMultiLinks">The value determining if multi-links should be applied.
            WARNING: You need open new multi-link container group!
            </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FileServices.ChangeNewFileText(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String,System.String,System.String)">
            <summary>
            Changes newly created file text and adds appropriate undo units.
            </summary>
            <param name="project">Active project element.</param>
            <param name="activeDocumentFullName">Active document full name.</param>
            <param name="newFilePath">Newly created file path.</param>
            <param name="newFileCode">Newly created file code.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FileServices.Active">
            <summary>
            Returns the file name of the active document.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GlobalConstants">
            <summary>
            Constants for CodeRush.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.GetBitmapMask(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Returns a Bitmap that represents the mask of aBmp using the
            color represented by aTransparent
            </summary>
            <param name="image">Bitmap to create mask of</param>
            <param name="transparentColor">Transparent color to create mask from</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.GetImageFromWindow(DevExpress.CodeRush.Win32.HWND,System.Drawing.Rectangle)">
            <summary>
            Gets a bitmap copied from the specified rectangle in the specified window.
            </summary>
            <param name="handle">The window handle.</param>
            <param name="rect">The rectangle in the window to copy (in client coordinates).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.GetPathForBezierCurve(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Creates and returns a GraphicsPath that surrounds the 
            bezier curve specified by the p1, c1, c2 and p2, widened 
            by the specified radius. Returns null if the specified bezier 
            curve has no length, or if radius is less than or equal to zero.
            </summary>
            <param name="p1">The starting point of the bezier curve.</param>
            <param name="c1">The first control point.</param>
            <param name="c2">The second control point.</param>
            <param name="p2">The ending point of the bezier curve.</param>
            <param name="radius">The distance to be expand the GraphicsPath around the bezier curve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.GetScreenAt(System.Drawing.Point)">
            <summary>
            Gets the screen at the specified coordinates.
            </summary>
            <param name="position">The Point to check.</param>
            <returns>Returns the Screen which contains the specified position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.GetScreenAt(System.Int32,System.Int32)">
            <summary>
            Gets the screen at the specified coordinates.
            </summary>
            <param name="xPos">The x-coordinate to check.</param>
            <param name="yPos">The y-coordinate to check.</param>
            <returns>Returns the Screen which contains the specified position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.LoadIndependentBitmap(System.String)">
            <summary>
            Loads a bitmap into memory from a filename. This method avoids the file lock that GDI+ would normally create.
            </summary>
            <param name="fileName">The filename to load the bitmap from.</param>
            <returns>A Bitmap instance of the bitmap stored in aFileName.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.ReplaceBitmapColor(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Replaces a color in a System.Drawing.Bitmap with a new color. This method works on both
            indexed and non-indexed bitmaps.
            </summary>
            <param name="image">The System.Drawing.Bitmap to change.</param>
            <param name="oldColor">The color to replace.</param>
            <param name="newColor">The color to replace with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.IsValidBitmap(System.Drawing.Bitmap)">
            <summary>
            Returns false if all pixels of the bitmap have same color.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Gets a bounding box for an unwrapped string. This is method 
            more precise than Graphics.MeasureString, and will measure 
            right to the end of the last character (including trailing spaces).
            </summary>
            <param name="graphics">The Graphics object to measure in.</param>
            <param name="text">The text to measure.</param>
            <param name="font">The Font to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.DrawText(System.Drawing.Graphics,System.Drawing.StringFormat,System.String,System.Drawing.Font,System.Drawing.Brush,System.Int32@,System.Drawing.Rectangle@)">
            <summary>
            Draws the specified text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.GetTextWidth(System.Drawing.Graphics,System.Drawing.Font,System.String)">
            <summary>
            Gets the exact width of the specified text.
            </summary>
            <param name="graphics">The Graphics object where the string will be measured.</param>
            <param name="font">The Font to measure the string in.</param>
            <param name="text">The text to measure.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.PaintPlus(System.Drawing.Graphics,System.Drawing.Pen,System.Int32,System.Drawing.PointF)">
            <summary>
            Paints a "+" at the specified centerPt in the specified pen.
            </summary>
            <param name="graphics">The Graphics surface to paint on.</param>
            <param name="pen">The Pen to paint with.</param>
            <param name="segmentLength">The length of each of the four line segments that extend from the center.</param>
            <param name="centerPt">The center position of the "+".</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GraphicServices.SetImageOpacity(System.Drawing.Image,System.Single)">
            <summary>
            Changes the opacity of the image.
            </summary>
            <param name="image">The image.</param>
            <param name="opacity">The opacity value.</param>
            <returns></returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GUIDsServices">
            <summary>
            Summary description for GUIDs.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintBase.OnDisableFeature">
            <summary>
            Triggers the DisableFeature event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.Text">
            <summary>
            The text displayed in the hint. Keep this text very short.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.Color">
            <summary>
            The color of the hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.OptionsPath">
            <summary>
            A path to the options page where users can configure settings related to the action that triggered this hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.Feature">
            <summary>
            The name of the feature this hint is associated with. This name is displayed on the ActionHints options page where users can 
            enable or disable hints for individual features.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.DisplayLimit">
            <summary>
            The number of times hints for this feature should be displayed before they are suppressed. If you want your hint to 
            be displayed this many times every VS session, then set ResetDisplayCountOnStartup to true.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.ResetDisplayCountOnStartup">
            <summary>
            Resets the display count for this hint each time CodeRush starts. 
            If true, this hint will be shown the first DisplayLimit times that
            the feature is used in each session.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.CanDisableFeature">
            <summary>
            True if the DisableFeature event is handled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintBase.CanProvideFeatureAssistance">
            <summary>
            True if the GetFeatureAssistance event is handled.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.HintBase.DisableFeature">
            <summary>
            Occurs when the user requests to disable the feature associated with this hint.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.HintBase.GetFeatureAssistance">
            <summary>
            Occurs when the user requests assistance with the feature associated with this hint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintBase.PointTo(System.Windows.Forms.Control)">
            <summary>
            Points to the specified Control.
            </summary>
            <param name="control">The Control to point at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintBase.PointTo(System.Drawing.Point)">
            <summary>
            Points the action hint at an absolute screen position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintBase.PointTo(System.Int32,System.Int32)">
            <summary>
            Points the action hint at a specified position in the code.
            </summary>
            <param name="lineNumber">The line number to point to.</param>
            <param name="characterOffset">The character offset on the line to point to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintBase.PointToLineAndDisplayColumn(System.Int32,System.Int32)">
            <summary>
            Points the action hint at a specified line and display column.
            </summary>
            <param name="lineNumber">The line number to point to.</param>
            <param name="displayColumn">The display column on the line to point to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintBase.PointToCaret">
            <summary>
            Points the action hint at the editor insertion point (also known as the cursor).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionHintBase.Distance">
            <summary>
            The distance from the target location (pointed to by this action hint) to the tip of the arrow. A negative value positions the action hint at a default distance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.InitializeHintManager">
            <summary>
            Initializes the HintManager, loading it from storage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.SaveHintManagerSettings">
            <summary>
            Commits HintManager changes to storage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.GetHintStats(DevExpress.CodeRush.Core.FeatureGroup,DevExpress.CodeRush.Core.HintBase)">
            <summary>
            Returns the HintStats for the specified action hint text within the specified featureGroup.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.GetFeatureGroup(DevExpress.CodeRush.Core.HintBase)">
            <summary>
            Returns the FeatureGroup for the specified feature name.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.HintIsEnabled(DevExpress.CodeRush.Core.HintBase)">
            <summary>
            Returns true if we're cool displaying the specified ActionHint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.DisableHint(DevExpress.CodeRush.Core.HintBase)">
            <summary>
            Disables the specified hint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServicesBase.DisableHintFeatureGroup(DevExpress.CodeRush.Core.HintBase)">
            <summary>
            Disables the feature group of the specified hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintServicesBase.Enabled">
            <summary>
            Gets/sets the enabled state of action hinting.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Drawing.Point,System.Int32,System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing to the specified screen coordinates.
            </summary>
            <param name="screenPos">The screen coordinates to point to.</param>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="distance">The distance from the screePos, in pixels.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Drawing.Point,System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing to the specified screen coordinates.
            </summary>
            <param name="screenPos">The screen coordinates to point to.</param>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Windows.Forms.Control,System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing at the center of the specified Control.
            </summary>
            <param name="control">The control to point to.</param>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Windows.Forms.Control,System.Int32,System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing at the center of the specified Control.
            </summary>
            <param name="control">The Control to point to.</param>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="distance">The distance from the center of the Control, in pixels.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointToCaret(System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing at the editor caret.
            </summary>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointToCaret(System.String,System.Int32,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing to the caret in the code editor.
            </summary>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="distance">The distance from the caret, in pixels.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Int32,System.Int32,System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing to the specified line and column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="column">The display column to point to.</param>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.Drawing.Color)">
            <summary>
            Displays the ActionHint pointing to the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to point to.</param>
            <param name="hint">The text to display in the ActionHint arrow.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.OKToShowHint(DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Triggers the FeatureInvoked event and then returns true if this ActionHint 
            is enabled or returns false if this ActionHint is disabled.
            </summary>
            <param name="actionHint">The ActionHint to check.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Drawing.Point,DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Displays the ActionHint pointing to the specified screen coordinates.
            </summary>
            <param name="screenPos">The screen coordinates to point to.</param>
            <param name="actionHint">The ActionHint component to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Windows.Forms.Control,DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Displays the ActionHint pointing at the center of the specified control (increase the ActionHint's 
            Distance property to move the arrow back a bit).
            </summary>
            <param name="control">The control to point to.</param>
            <param name="actionHint">The ActionHint component to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(System.Int32,System.Int32,DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Displays the ActionHint pointing to the specified line and column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="characterOffset">The character offset to point to.</param>
            <param name="actionHint">The ActionHint component to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointTo(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Displays the ActionHint pointing to the specified SourcePoint in the active view.
            </summary>
            <param name="sourcePoint">The SourcePoint to point to.</param>
            <param name="actionHint">The ActionHint component to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointToLineAndDisplayColumn(System.Int32,System.Int32,DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Displays the ActionHint pointing to the specified line and display column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="displayColumn">The display column to point to.</param>
            <param name="actionHint">The ActionHint component to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ActionHintServices.PointToCaret(DevExpress.CodeRush.Core.ActionHintBase)">
            <summary>
            Displays the ActionHint pointing to the caret in the code editor.
            </summary>
            <param name="actionHint">The ActionHint component to display.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionHintServices.Opacity">
            <summary>
            Gets/sets the opacity of the action hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionHintServices.FadeIn">
            <summary>
            Determines whether the action hint will fade in (from transparent to the final Opacity setting) when it first appears. If false, action hints will simply appear.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionHintServices.FadeOut">
            <summary>
            Determines whether the action hint will fade out (from its Opacity setting to completely transparent) when it closes. If false, action hints will simply disappear.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ActionHintServices.DisplayTime">
            <summary>
            Determines how long (in milliseconds) the action hint will appear before closing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintStats.DisplayWithinLimits">
            <summary>
            Returns true if the associated ActionHint can be displayed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintStats.ExecutionCount">
            <summary>
            The number of times the associated action has been executed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintStats.ExecutionCountThisSession">
            <summary>
            Gets the number of times the associated action has been executed in this session.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintStats.DisplayLimit">
            <summary>
            The number of times this action hint will be displayed in a session.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintStats.Enabled">
            <summary>
            Whether this action hint is enabled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintStats.Name">
            <summary>
            The Text associated with this action hint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintStats.PerSessionDisplayLimits">
            <summary>
            If true, display limits are enforced on action hint appearances in the current session only.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Arrow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FeatureGroup">
            <summary>
            Maintains a collection of ActionHintStats.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FeatureGroup.Save(DevExpress.CodeRush.Core.DecoupledStorage)">
            <summary>
            Saves this FeatureGroup to the specified storage object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FeatureGroup.Load(DevExpress.CodeRush.Core.DecoupledStorage,System.String)">
            <summary>
            Creates a new FeatureGroup from a decoupled storage object with the specified feature name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureGroup.Enabled">
            <summary>
            Whether this ActionHints for this feature are enabled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureGroup.Name">
            <summary>
            The name of the feature this FeatureGroup represents.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FeatureGroup.Color">
            <summary>
            The color of action hints in this feature group.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FeatureHintManager">
            <summary>
            Maintains a collection of FeatureGroups.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FeatureHintManager.Load(DevExpress.CodeRush.Core.DecoupledStorage)">
            <summary>
            Creates a new FeatureHintManager from a decoupled storage object. Only one FeatureHintManager can be stored 
            inside a DecoupledStorage object (this is not a big deal, since FeatureHintManager is a singleton.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.RequestHint">
            <summary>
            Creates new message hint if it is allowed. Returns null
            if the hint is not allowed to show.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowAt(System.Drawing.Point)">
            <summary>
            Displays the BigHint at the specified screen coordinates.
            </summary>
            <param name="point">The screen coordinates to display at.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowAt(System.Windows.Forms.Control)">
            <summary>
            Displays the BigHint at the specified control.
            </summary>
            <param name="control">The control to display the hint at.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowAtCaret">
            <summary>
            Displays the BigHint at the editor caret.
            </summary>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowUnderCaret">
            <summary>
            Displays the BigHint at the editor caret.
            </summary>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowAt(System.Int32,System.Int32)">
            <summary>
            Displays the BigHint at the specified line and column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="column">The display column to point to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Displays the BigHint at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to point to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.ShowAtLowerRight(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Displays the BigHint at the lower right angle of the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="margin">The margin in pixels to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.SubscribeOnDismissedEvent(DevExpress.CodeRush.Core.MessageHintBase)">
            <summary>
            Subcribes on dismissed event.
            </summary>
            <param name="hint">The target hint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintBase.SetActiveHint(DevExpress.CodeRush.Core.MessageHintBase)">
            <summary>
            Sets active hint.
            </summary>
            <param name="hint">The active hint.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BigHintBase.Title">
            <summary>
            The text displayed in the title of the hint. Keep this text very short.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BigHintBase.UserGuidePage">
            <summary>
            The name of the user guide page to show when user requests assistance.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BigHintBase.IsSingleton">
            <summary>
            Set this property to true if you want only one hint to be displayed at a time.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BigHintBase.ActiveHint">
            <summary>
            Gets currently active hint. Use this property when 
            IsSingleton is set to true.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.BigHintBase.DisableOnDismiss">
            <summary>
            Set this property to true if you want to disable hint when it is dismissed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Drawing.Point,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified screen coordinates.
            </summary>
            <param name="point">The screen coordinates to display at.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Drawing.Point,System.String,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified screen coordinates.
            </summary>
            <param name="point">The screen coordinates to display at.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <param name="page">The page of the user guide to jump to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified control.
            </summary>
            <param name="control">The control to display the hint at.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Windows.Forms.Control,System.String,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified control.
            </summary>
            <param name="control">The control to display the hint at.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <param name="page">The page of the user guide to jump to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAtCaret(System.String,System.String)">
            <summary>
            Displays the BigHint at the editor caret.
            </summary>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAtCaret(System.String,System.String,System.String)">
            <summary>
            Displays the BigHint at the editor caret.
            </summary>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <param name="page">The page of the user guide to jump to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified line and column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="column">The display column to point to.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified line and column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="column">The display column to point to.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <param name="page">The page of the user guide to jump to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to point to.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.String,System.String)">
            <summary>
            Displays the BigHint at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to point to.</param>
            <param name="title">The title of the hint.</param>
            <param name="text">The text to display.</param>
            <param name="page">The page of the user guide to jump to.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.RequestHint(DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Creates new message hint if it is allowed. Returns null
            if the hint is not allowed to show.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Drawing.Point,DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the specified BigHint at the given screen coordinates.
            </summary>
            <param name="point">The screen coordinates to display at.</param>
            <param name="bigHint">The BigHint to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Windows.Forms.Control,DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the specified BigHint at the given control.
            </summary>
            <param name="control">The control to display at.</param>
            <param name="bigHint">The BigHint to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAtCaret(DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the BigHint at the editor caret.
            </summary>
            <param name="bigHint">The BigHint to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowUnderCaret(DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the BigHint at the editor caret.
            </summary>
            <param name="bigHint">The BigHint to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(System.Int32,System.Int32,DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the BigHint at the specified line and column in the active view.
            </summary>
            <param name="line">The line number to point to.</param>
            <param name="column">The display column to point to.</param>
            <param name="bigHint">The BigHint to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAt(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the BigHint at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to point to.</param>
            <param name="bigHint">The BigHint to display.</param>
            <returns>The MessageHintBase descendant.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BigHintServices.ShowAtLowerRight(System.Drawing.Rectangle,System.Int32,DevExpress.CodeRush.Core.BigHintBase)">
            <summary>
            Displays the BigHint at the lower right angle of the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="margin">The margin in pixels to use.</param>
            /// <param name="bigHint">The big hint to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintObject.Render(System.Drawing.Graphics)">
            <summary>
            Renders this object on the given graphics object.
            </summary>
            <param name="g">The graphics object to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintObject.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Name">
            <summary>
            Gets or sets the name of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Left">
            <summary>
            Gets left coordinate of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Top">
            <summary>
            Gets top coordinate of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Right">
            <summary>
            Gets right coordinate of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Bottom">
            <summary>
            Gets bottom coordinate of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.X">
            <summary>
            Gets x coordinate of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Y">
            <summary>
            Gets y coordinate of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Location">
            <summary>
            Gets the location of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Width">
            <summary>
            Gets the width of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Height">
            <summary>
            Gets the height of this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintObject.Bounds">
            <summary>
            Gets the bounds of this object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintTextAppearance.#ctor">
            <summary>
            Creates HintTextAppearance instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintTextAppearance.CreateFont">
            <summary>
            Creates font.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintTextAppearance.CreateSolidBrush">
            <summary>
            Creates solid brush.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.FontFamilyName">
            <summary>
            Gets or sets font family name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.EmSize">
            <summary>
            Gets or sets font size.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.Unit">
            <summary>
            Gets or sets font graphics unit.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.Style">
            <summary>
            Gets or sets font style.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.Color">
            <summary>
            Gets or sets font color.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.StringFormat">
            <summary>
            Gets or sets string fromatting flags.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintTextAppearance.GdiCharSet">
            <summary>
            Gets or sets gdi character set.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyImage.#ctor(System.Drawing.Point,System.Int32)">
            <summary>
            Constructs a new instance based on the specified location (in pixel coordinates) of the upper left of the 
            key image on the _AllKeyImages bitmap.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeySequence.GetBitmap(System.Drawing.Brush)">
            <summary>
            Creates and returns a new bitmap holding this key image.
            </summary>
            <param name="backgroundBrush">The Brush for painting the background of the key.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeySequence.GetLastKeyRect(System.Int32)">
            <summary>
            Returns the rectangle of the last key on this line.
            </summary>
            <param name="top">The top of this line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MessageHintBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MessageHintBase.BestLayout">
            <summary>
            Performs best layout of the window.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MessageHintBase.CloseByTimer(System.Int32)">
            <summary>
            Closes this window after specified time is elapsed.
            </summary>
            <param name="time">The time in milliseconds.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MessageHintBase.AddDragControl(System.Windows.Forms.Control)">
            <summary>
            Adds control which can be used to drag this window to inner list.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MessageHintBase.RemoveDragControl(System.Windows.Forms.Control)">
            <summary>
            Removes control which can be used to drag this window from inner list.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MessageHintBase.DragControls">
            <summary>
            Gets the ArrayList of controls that can be used to drag this window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MessageHintBase.MaxWidth">
            <summary>
            Defines maximum width of the hint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MessageHint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.BubbleHints.BubbleHintController._KillTimer">
            <summary>
            Used to allow a small amount of time after the mouse leaves a control before
            its bubble hint is hidden. This gives the user a moment to put the mouse directly
            over the bubble hint to keep it from hiding.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.BubbleHints.BubbleHintController._KillControl">
            <summary>
            Control that is being watched by _KillTimer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BubbleHints.BubbleHintForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.BubbleHints.BubbleHintForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FrmBigFeedback">
            <summary>
            The BigFeedback main form.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmBigFeedback.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmBigFeedback.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmBigFeedback.CalculateSize(System.Double)">
            <summary>
            Calculates the form size and font size for the feedback message.
            </summary>
            <param name="targetPercentage">The percentage of available space to use for the feedback message.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FrmShortcutsHint">
            <summary>
            The ShortcutsHint main form.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SlideWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SlideWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SlideWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SlideWindow.AnimationSpeed">
            <summary>
            Gets or sets the speed of animation ...
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FrmShortcutsHint.INT_CursorHintVerticalSpacing">
            <summary>
            The space between the bottom of the cursor and the hint.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FrmShortcutsHint._MouseInCloseButton">
            <summary>
            Determines whether the slide inverts direction. Set to true if this 
            hint appears at the top of a window.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmShortcutsHint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmShortcutsHint.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmShortcutsHint.CheckMousePosition(System.Int32,System.Int32)">
            <summary>
            Checks the mouse position relative to our buttons. Communicates with 
            HintServices so hints can be shown.
            </summary>
            <param name="xPos">The x-coordinate of the mouse, relative to this key hint window.</param>
            <param name="yPos">The y-coordinate of the mouse, relative to this key hint window.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.MouseDownInCloseButton">
            <summary>
            Returns true if the mouse was down in the close button.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.MouseInCloseButton">
            <summary>
            Returns true if the mouse is over the close button.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.MouseDownInHideButton">
            <summary>
            Returns true if the mouse was down in the hide button.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.MouseInHideButton">
            <summary>
            Returns true if the mouse is over the hide button.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.MouseDownInHelpButton">
            <summary>
            Returns true if the mouse was down in the help button.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.MouseInHelpButton">
            <summary>
            Returns true if the mouse is over the help button.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.FrmShortcutsHint.DesignTime">
            <summary>
            Gets or sets whether this shortcuts hint is being displayed at design-time 
            (invoked through the the ShortcutsHintDesigner). If true, then suppress
            information (caused by a click on the red X button) will not be saved,
            allowing the shortcuts hint to be closed at design-time. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmSlideHint.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmSlideHint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.FrmTooltipWindow">
            <summary>
            Displays a simple hint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.HintServices">
            <summary>
            Hinting and discoverability services.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.#ctor">
             <summary>
            Creates a new instance of HintServices
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.GetAvailableShortcuts">
            <summary>
            Collects all available shortcuts and descriptions for the current context.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.HideShortcutsHint(System.Boolean)">
            <summary>
            Hides the active ShortcutsHint.
            </summary>
            <param name="slideDown">If true, animates the close so the hint appears 
            to drop down into it's bottom line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.HideShortcutsHint(DevExpress.CodeRush.Core.ShortcutsHint)">
            <summary>
            Hides the active ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint object associated with the hint to hide. If this ShortcutsHint object 
            was responsible for the display of this hint window, then it will hide -- otherwise the shortcuts hint window will
            remain visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.HideShortcutsHint(DevExpress.CodeRush.Core.ShortcutsHint,System.Boolean)">
            <summary>
            Hides the active ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint object associated with the hint to hide. If this ShortcutsHint object 
            was responsible for the display of this hint window, then it will hide -- otherwise the shortcuts hint window will
            remain visible.</param>
            <param name="slideDown">If true, animates the close so the hint appears 
            to drop down into it's bottom line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.HideShortcutsHint">
            <summary>
            Hides the active ShortcutsHint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.HideTooltip">
            <summary>
            Hides a Tooltip previously displayed through a call to ShowTooltip().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.IsHintSuppressed(System.String)">
            <summary>
            Returns true if the user has requested to suppress future appearances of the specified ShortcutsHint.
            </summary>
            <param name="storageKey">The value of the ShortcutsHint's StorageKey property.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.IsHintSuppressed(DevExpress.CodeRush.Core.ShortcutsHint)">
            <summary>
            Returns true if the user has requested to suppress future appearances of the specified ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.IsHintHidden(DevExpress.CodeRush.Core.ShortcutsHint)">
            <summary>
            Returns true if the user has hidden the specified ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.IsShortcutsHintVisible(DevExpress.CodeRush.Core.ShortcutsHint)">
            <summary>
            Determines whether the specified ShortcutsHint is visible or not.
            </summary>
            <param name="shortcutsHint"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.IsSolutionProcessHintVisible(DevExpress.CodeRush.Core.HintWindowBase)">
            <summary>
            Determines whether the SolutionProcessHint is visible or not.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowBigFeedback(System.String)">
            <summary>
            Shows a BigFeedback message, centered in the active TextView.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowBigFeedback(DevExpress.CodeRush.Win32.HWND,System.String)">
            <summary>
            Shows a BigFeedback message, centered in the specified HWND.
            </summary>
            <param name="hWND">The handle of the window to display the message.</param>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowBigFeedback(System.Drawing.Rectangle,System.String)">
            <summary>
            Shows a BigFeedback message, centered in the specified bounds.
            </summary>
            <param name="bounds">The bounds of the window to display the message.</param>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowShortcutsHint(DevExpress.CodeRush.Core.ShortcutsHint)">
            <summary>
            Displays the specified ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowShortcutsHint(DevExpress.CodeRush.Core.ShortcutsHint,System.Boolean)">
            <summary>
            Displays the specified ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint to display.</param>
            <param name="forceDisplay">If false, the ShortcutsHint will appear as long as
            it is not suppressed. If true, the ShortcutsHint will appear even if the user
            requested to suppress it in the past.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowShortcutsHint(DevExpress.CodeRush.Core.ShortcutsHint,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Displays the specified ShortcutsHint.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint to display.</param>
            <param name="forceDisplay">If false, the ShortcutsHint will appear as long as
            it is not suppressed. If true, the ShortcutsHint will appear even if the user
            requested to suppress it in the past.</param>
            <param name="designTime">Whether this hint should be displayed as a design-time 
            preview. If true, clicking the red "X" button will close the hint list, but will 
            not suppress further showings.</param>
            <param name="key">The key header string.</param>
            <param name="behavior">The behavior header string.</param>
            <param name="undefinedText">The undefinedText string.</param>
            <param name="orText">The orText string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.SuppressFutureShortcutsHintAppearances(DevExpress.CodeRush.Core.ShortcutsHint)">
            <summary>
            Suppresses the appearance of future ShortcutsHints.
            </summary>
            <param name="shortcutsHint">The ShortcutsHint to suppress.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.SuppressFutureShortcutsHintAppearances(System.String)">
            <summary>
            Suppresses the appearance of future ShortcutsHints.
            </summary>
            <param name="shortcutsHintStorageKey">The StorageKey of the ShortcutsHint to suppress.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.ShowTooltip(System.Int32,System.Int32,System.String)">
            <summary>
            Shows the Tooltip containing the specified text at the specified 
            coordinates. Caller is responsible for hiding the Tooltip, through 
            a call to HideTooltip().
            </summary>
            <param name="xPos">The x-coordinate of the Tooltip.</param>
            <param name="yPos">The y-coordinate of the Tooltip.</param>
            <param name="hintText">The text to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintServices.SetLastTooltipControlUnderMouse(DevExpress.CodeRush.Core.ITooltipProvider,System.Windows.Forms.Control)">
            <summary>
            Allows an ITooltipProvider to specify a control under the mouse. ITooltipProviders 
            must call this method anytime the control under the mouse changes. When an 
            ITooltipProvider is destroyed, it should call SetLastTooltipControlUnderMouse(null, null)
            if it previously called SetLastTooltipControlUnderMouse; this is to prevent an 
            attempt to call back into it after the ITooltipProvider is destroyed.
            </summary>
            <param name="iTooltipProvider">The ITooltipProvider implementor.</param>
            <param name="control">The control under the mouse.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintServices.ShortcutsHintIsFocused">
            <summary>
            Gets whether a ShortcutsHint control is focused or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintServices.Settings">
            <summary>
            Settings for discoverability features, used by HintServices.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintServices.ShortcutsHintIsUp">
            <summary>
            Gets whether a ShortcutsHint has been created and displayed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintServices.AlwaysOnTop">
            <summary>
            Set hint window to be always located at the top
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintServices.ShortcutsHintBounds">
            <summary>
            Returns ShortcutsHint bounds.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.HintSettings">
            <summary>
            Settings for Hint services.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.HintSettings.FeedbackRotationAngle">
            <summary>
            The rotation angle of the BigFeedback text. Zero = normal. 
            Negative numbers spin counter-clockwise.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.HintSettings.FeedbackOpacity">
            <summary>
            The opacity of the BigFeedback, on a scale from 0 (transparent) to 100 (opaque).
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.HintSettings.FeedbackDisplayTime">
            <summary>
            The time in milliseconds that the BigFeedback will be visible.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.HintSettings.ToolTipAutomaticDelay">
            <summary>
            Sets 
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ShortcutsHintRow">
            <summary>
            Binds an Action with an optional behavioral description.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.MeasureOrPaintBehaviorText(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Font,System.Drawing.Brush,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Measures or paints the behavior text. Behavior text is not wrapped, 
            however it does support the &lt;b&gt; and &lt;/b&gt; tags to 
            emphasize text in the description. 
            </summary>
            <param name="graphics">The Graphics object to paint or measure on.</param>
            <param name="normalFont">The normal font to use for the behavior description.</param>
            <param name="emphasisFont">The bold font to use for emphasized words in the behavior description.</param>
            <param name="behaviorBrush">The Brush to use for the description text (ignored if doPaint is false).</param>
            <param name="xPos">The x position to start from (ignored if doPaint is false).</param>
            <param name="yPos">The y position to start from (ignored if doPaint is false).</param>
            <param name="doPaint">Whether to paint. If false, then the text is simply measured.</param>
            <returns>Returns the size of the behavior description text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.#ctor">
            <summary>
            Creates a new instance of ShortcutsHintRow.
            </summary>															
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.#ctor(System.String)">
            <summary>
            	Creates a new instance of ShortcutsHintRow.
             </summary>
            <param name="actionName">The name of the Action documented in this row.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.#ctor(System.String,System.String)">
            <summary>
            	Creates a new instance of ShortcutsHintRow.
             </summary>
            <param name="actionName">The name of the Action documented in this row.</param>
            <param name="behavior">The behavior performed when this key is pressed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.#ctor(System.String,System.String,DevExpress.CodeRush.Core.BehaviorIcon)">
            <summary>
            Creates a new instance of ShortcutsHintRow.
            </summary>															
            <param name="actionName">The name of the Action documented in this row.</param>
            <param name="behavior">The behavior performed when this key is pressed.</param>
            <param name="icon">The BehaviorIcon associated with this key.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.CalculateSize(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Font,System.Drawing.Font)">
            <summary>
            Calculates the Height, KeyWidth, and BehaviorWidth for this row.
            </summary>
            <param name="graphics">The Graphics object to measure in.</param>
            <param name="keyFont">The font to use for the shortcut key.</param>
            <param name="normalFont">The normal font to use for the behavior description.</param>
            <param name="emphasisFont">The bold font to use for emphasized words in the behavior description.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.GetDefaultSize(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Font,System.Drawing.Font)">
            <summary>
            Get the size of the row.
            </summary>
            <param name="graphics">The Graphics object to measure in.</param>
            <param name="keyFont">The font to use for the shortcut key.</param>
            <param name="normalFont">The normal font to use for the behavior description.</param>
            <param name="emphasisFont">The bold font to use for emphasized words in the behavior description.</param>
            <returns>Returns the size of the row.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.GetBehaviorSize(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Font)">
            <summary>
            Gets the size of the behavior text.
            </summary>
            <param name="graphics">The Graphics object to paint or measure on.</param>
            <param name="normalFont">The normal font to use for the behavior description.</param>
            <param name="emphasisFont">The bold font to use for emphasized words in the behavior description.</param>
            <returns>Returns the size of the behavior description text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRow.PaintBehaviorText(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Font,System.Drawing.Brush,System.Int32,System.Int32)">
            <summary>
            Paints the behavior text on the specified Graphics object.
            </summary>
            <param name="graphics">The Graphics object to paint or measure on.</param>
            <param name="normalFont">The normal font to use for the behavior description.</param>
            <param name="emphasisFont">The bold font to use for emphasized words in the behavior description.</param>
            <param name="brush">The Brush to use for the description text (ignored if doPaint is false).</param>
            <param name="xPos">The x position to start from (ignored if doPaint is false).</param>
            <param name="yPos">The y position to start from (ignored if doPaint is false).</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.ActionName">
            <summary>
            The name of the Action documented by this row. The shortcut(s) associated with 
            this Action will appear in the Key column of the ShortcutsHint. If you want to bypass 
            Action name look-up and specify a literal string to appear in this column, 
            precede the string with the "$" character.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.RowName">
            <summary>
            The name of the Row documented by this row.
            </summary>		
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.Behavior">
            <summary>
            The description of the behavior performed by the Action in this row.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.Icon">
            <summary>
            The Icon to show in the Behavior column of this row.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.KeyName">
            <summary>
            The shortcut key associated with ActionName.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.KeyWidth">
            <summary>
            The width of the shortcut text in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.BehaviorWidth">
            <summary>
            The width of the behavior text in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.IconWidth">
            <summary>
            The width of the shortcut text in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.IconHeight">
            <summary>
            The width of the shortcut text in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.Width">
            <summary>
            The width of the row in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.RowStyle">
            <summary>
            The style of this row. One of Normal, GroupSeparator, 
            or LastRow. (RowStyle.LastRow is set automatically for 
            the last row in the collection).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRow.Visible">
            <summary>
            True if this row is visible.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRows.AddSeparator">
            <summary>
            Ensures that the last ShortcutsHintRow added has a darker separator line for its lower cell border.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRows.Add(System.String)">
            <summary>
            	Adds a new ShortcutsHintRow instance to this collection.
             </summary>
            <param name="actionName">The name of the Action documented in this row.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRows.Add(System.String,System.String)">
            <summary>
            	Adds a new ShortcutsHintRow instance to this collection.
             </summary>
            <param name="actionName">The name of the Action documented in this row.</param>
            <param name="behavior">The behavior performed when this key is pressed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHintRows.Add(System.String,System.String,DevExpress.CodeRush.Core.BehaviorIcon)">
            <summary>
            Adds a new ShortcutsHintRow instance to this collection.
            </summary>															
            <param name="actionName">The name of the Action documented in this row.</param>
            <param name="behavior">The behavior performed when this key is pressed.</param>
            <param name="icon">The BehaviorIcon associated with this key.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHintRows.Last">
            <summary>
            Gets the last row...
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.HintWindow.ResetTimer">
            <summary>
            Resets the internal timer that hides this hint window.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Html">
            <summary>
            Html class provides methods for genrating Html pages.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.Html.GuideBackgroundColor">
            <summary>
            The background color of the page
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.Row(System.Int32@,System.Object[])">
            <summary>
            Creates a row of cells in the blue text color, with a background color specified by rowIndex. 
            </summary>
            <param name="rowIndex">The index of the row. Odd and Even rows will have slightly different background colors to increase readability. This row index is incremented inside this method.</param>
            <param name="cells">The text for each cell.</param>
            <returns>Return the HTML text that represents the newly-created row.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.ReplaceColor(DevExpress.CodeRush.Core.TransparentBitmap,System.Drawing.Color)">
            <summary>
            Replaces the transparent color in the image with replaceColor. If the image is completely transparent, then this method returns null.
            </summary>
            <param name="image"></param>
            <param name="replaceColor"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.GetImage(DevExpress.CodeRush.Core.TransparentBitmap,System.String)">
            <summary>
            Creates and saves a .jpg file (based on the passed-in image) to the Tutorial directory, and returns the Html text needed to load this image.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.ParameterTable(DevExpress.CodeRush.Core.ParameterCollection,System.String)">
            <summary>
            Creates a Table containing parameters from ParameterCollection. If there are no parameters in this list, 
            returns an empty string.
            </summary>
            <param name="paramList">The parameters to build the table from.</param>
            <param name="ownerName">The name of the class that has the Parameters property (e.g., "Action", "TextCommand", etc.) </param>
            <returns>Returns the HTML table, or an empty string if there are no parameters to document.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.GetDescription(System.String,System.String)">
            <summary>
            Returns a description. If the description parameter is null or an empty string, this method 
            returns a message stating that the description does not exist (in Red text).
            </summary>
            <param name="description">The text that is the description.</param>
            <param name="ownerName">The name of the class that owns this description/tooltip/hint property (e.g., "Action", "TextCommand", etc.) </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.GetDescription(System.String)">
            <summary>
            Returns a description. If the description parameter is null or an empty string, this method 
            returns a short message stating that the description does not exist (in Red text).
            </summary>
            <param name="description">The text that is the description.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.Cell(System.String,System.Int32)">
            <summary>
            Creates HTML for a cell with a background color calculated by the rowIndex.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Html.BoldCell(System.String,System.Int32)">
            <summary>
            Creates HTML for a cell with a background color calculated by the rowIndex and bolded text.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ICodeMetricComparer">
            <summary>
            Implements spcific code metric comparision algorithm.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICodeMetricProvider.GetValue(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets a code metric value for the given LanguageElement using this code metric provider.
            </summary>
            <param name="element">The LanguageElement to retrieve a code metric value for.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeMetricProvider.Description">
            <summary>
            Gets a description of this code metric provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeMetricProvider.DisplayName">
            <summary>
            Gets the display name of this code metric provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeMetricProvider.Comparer">
            <summary>
            Gets an IComparer implementer for this code metric provider.
            The comparer contains implementation dependent operations for 
            the code metric provider, and can be used to sort elements 
            by code metric value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeMetricProvider.WarningValue">
            <summary>
            A threshold value indicating an excessively complex member when measured by 
            this metric. This value is used for graphing member metrics.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICodeMetricProvider.Name">
            <summary>
            Gets the name of this code metric provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ICommandKeyBinding.Execute">
            <summary>
            Executes binding command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.Key1">
            <summary>
            Gets binding first key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.Key2">
            <summary>
            Gets binding second key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.Command">
            <summary>
            Gets binding command name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.Parameters">
            <summary>
            Get binding parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.Comments">
            <summary>
            Gets binding comments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.MouseBindingName">
            <summary>
            Gets mouse binding name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.DisplayShortcut">
            <summary>
            Gets string representation of the binding shortcut.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.VisualStudioBindingName">
            <summary>
            Gets name of the binding shortcut used by Visual Studio for command bindings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.DisplayCommand">
            <summary>
            Gets string representation of the binding command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.KeyName">
            <summary>
            Gets binding key name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.ShiftKeyDown">
            <summary>
            Returns true if this binding needs Shift key down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.AltKeyDown">
            <summary>
            Returns true if this binding needs Alt key down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ICommandKeyBinding.CtrlKeyDown">
            <summary>
            Returns true if this binding needs Ctrl key down.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IDEMonitor.SetModalWindow(DevExpress.CodeRush.Win32.HWND)">
            <summary>
            Called internally by the DXCore hook monitor to set the handle of the modal window
            when Visual Studio has entered a modal state.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEMonitor.ModalWindowHandle">
            <summary>
            Used internally by the DXCore HookWindowEventArgs to determine the value of its 
            IsModal property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEMonitor.IsMenuActive">
            <summary>
            Gets whether or not a menu is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEMonitor.IsModal">
            <summary>
            Gets whether or not the IDE is a modal state.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IdentifierEnumerator">
            <summary>
            Summary description for IdentifierEnumerator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IdentifierEnumerator.#ctor(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the IdentifierEnumerator
            </summary>
            <param name="aStartNode">The starting language element for the identifier iteration.</param>
            <param name="aStartLine">The starting line number for this iteration.</param>
            <param name="aStartColumn">The starting column offset for this iteration.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IdentifierList">
            <summary>
            Implements the IEnumerable interface for iterating through identifiers visible to the constructor-specified 
            start node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEServices.Handle">
            <summary>
            Handle of the main window in the IDE. Satisfies the IWin32Window interface. 
            Forms displayed modally should pass CodeRush.IDE as a parameter to their
            ShowDialog method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEServices.IsActive">
            <summary>
            Returns true if the IDE is the active (foreground) application.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEServices.IsMenuActive">
            <summary>
            Returns true if a menu is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEServices.IsSysMenuActive">
            <summary>
            Returns true if a system menu is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEServices.IsModal">
            <summary>
            Gets whether or not the IDE is a modal state.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IDEServices.WindowState">
            <summary>
            Returns the window state of the IDE.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILoaderEngine.StartUp">
            <summary>
            Starts the loader engine. Called internal by the DXCore shell.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IIntellassistEngine.Cancel">
            <summary>
            Cancels Intellassist if it is active.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IIntellassistEngine.Suspend">
            <summary>
            Puts Intellassist in a suspended state so that it will not activate. To end this suspended state, call Resume.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IIntellassistEngine.Resume">
            <summary>
            Call after CodeRush.Intellassist.Suspend is called to end the suspended state.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IIntellassistEngine.Active">
            <summary>
            Determines whether Intellassist is displaying or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IIntellassistEngine.Suspended">
            <summary>
            Determines whether Intellassist is in a suspended state.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IntellassistServices.Cancel">
            <summary>
            Cancels Intellassist if it is active.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IntellassistServices.Suspend">
            <summary>
            Puts Intellassist in a suspended state so that it will not activate. To end this suspended state, call Resume.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IntellassistServices.Resume">
            <summary>
            Call after CodeRush.Intellassist.Suspend is called to end the suspended state.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IntellassistServices.Active">
            <summary>
            Determines whether Intellassist is displaying or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IntellassistServices.Suspended">
            <summary>
            Determines whether Intellassist is in a suspended state.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.Alt">
            <summary>
            Returns true if this shortcut needs Alt key down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.Shift">
            <summary>
            Returns true if this shortcut needs Shift key down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.Ctrl">
            <summary>
            Returns true if this shortcut needs Ctrl key down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.Extended">
            <summary>
            Returns true if this shortcut is extended.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.KeyState">
            <summary>
            Gets key state of this shortcut.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.KeyCode">
            <summary>
            Gets key code of this shortcut.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.DisplayName">
            <summary>
            Gets shortcut display name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.VisualStudioBindingName">
            <summary>
            Gets shortcut name used by Visual Studio for command bindings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IShortcut.RightSide">
            <summary>
            Returns true if this shortcut is on the keyboard right side.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.ActionToKeyNames(System.String)">
            <summary>
            Returns a list of key names associated with the passed Action.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.GetAllBindings(System.String)">
            <summary>
            Returns a NameValueCollection of key names and bindings associated with the passed command.
            If the command specifies no parameters, and bindings exist to the command that accept parameters, 
            all key bindings will be returned. The Name field holds the key name, and the Value field holds
            the command with any parameters (e.g., "Embed(try/finally)").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.GetAllBindings(System.Predicate{DevExpress.CodeRush.Core.ICommandKeyBinding})">
            <summary>
            Returns bindings satisfied to the provided predicate.    
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.GetAllContextMatchBindings(System.String)">
            <summary>
            Returns a NameValueCollection of key names and context satisfied bindings associated with the passed command.    
            If the command specifies no parameters, and bindings exist to the command that accept parameters, 
            all key bindings will be returned. The Name field holds the key name, and the Value field holds
            the command with any parameters (e.g., "Embed(try/finally)").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.GetAllContextAvailableBindings(System.String)">
            <summary>
            Returns context satisfied and available for executing bindings associated with the passed command.    
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.GetAllBindings">
            <summary>
            Returns an array of all registered command key bindings.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.HasEnabledShortcut(System.String,System.String,System.Boolean)">
            <summary>
            Determines if the specified command has at least one DXCore shortcut that is enabled.
            </summary>
            <param name="command">The name of the command to check.</param>
            <param name="parameters">The parameter values to check. This value can be NULL to indicate that the shortcut shouldn't have any parameters set.</param>
            <param name="ignoreCase">If true, the command and parameters will be searched in a case-insentive manner.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IShortcutEngine.CommandToKeyNames(System.String)">
            <summary>
            Returns a list of key names associated with the passed Command.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ITemplateEngine">
            <summary>
            Implementors of this interface are able to insert text encoded with StringProviders and TextCommands 
            into the editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.AddTemplate(System.String,System.String)">
            <summary>
            Adds new template to the specified category for the neutral language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.AddTemplate(System.String,System.String,System.String)">
            <summary>
            Adds new template to the specified category for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RemoveTemplate(System.String,System.String)">
            <summary>
            Removes template from the specified category for the neutral language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RemoveTemplate(System.String,System.String,System.String)">
            <summary>
            Removes template from the specified category for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RenameTemplate(System.String,System.String,System.String)">
            <summary>
            Renames template in the specified category for the neutral language.
            </summary>
            <param name="name">The name of the template to rename.</param>
            <param name="newName">The new name of the template.</param>
            <param name="category">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RenameTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            Renames template in the specified category for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="newName">The new name of the template.</param>
            <param name="category">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.FindTemplate(System.String,System.String)">
            <summary>
            Searches for the specified template inside the given category for the neutral language.
            </summary>
            <param name="name">The name of the template to find.</param>
            <param name="category">The name of the parent category to search in.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.FindTemplate(System.String,System.String,System.String)">
            <summary>
            Searches for the specified template inside the given category for the given language.
            </summary>
            <param name="name">The name of the template to find.</param>
            <param name="category">The name of the parent category to search in.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.AddCategory(System.String,System.String)">
            <summary>
            Adds new template category with the given name for the neutral language.
            </summary>
            <param name="name">The name of the category to add.</param>
            <param name="parent">The name of the parent category.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.AddCategory(System.String,System.String,System.String)">
            <summary>
            Adds new template category with the given name.
            </summary>
            <param name="name">The name of the category to add.</param>
            <param name="parent">The name of the parent category.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RemoveCategory(System.String,System.String)">
            <summary>
            Removes category from the specified parent for the neutral language.
            </summary>
            <param name="name">The category name to remove.</param>
            <param name="parent">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RemoveCategory(System.String,System.String,System.String)">
            <summary>
            Removes category from the specified parent for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="parent">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RenameCategory(System.String,System.String,System.String)">
            <summary>
            Renames category in the specified parent for the neutral language.
            </summary>
            <param name="name">The name of the category to rename.</param>
            <param name="newName">The new name of the category.</param>
            <param name="parent">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.RenameCategory(System.String,System.String,System.String,System.String)">
            <summary>
            Renames category in the specified parent for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="newName">The new name of the template.</param>
            <param name="parent">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.GetCategories">
            <summary>
            Returns all root template categories for the neutral language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.GetCategories(System.String)">
            <summary>
            Returns all root template categories for the specified language.
            </summary>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.FindCategory(System.String)">
            <summary>
            Returns template category by it's path.
            </summary>		
            <param name="name">The name of the category to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.FindCategory(System.String,System.String)">
            <summary>
            Returns template category by it's path.
            </summary>
            <param name="name">The name of the category to find.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.Save">
            <summary>
            Saves all templates.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.ExpandAtCursor(System.Boolean)">
            <summary>
            Expands the template at the cursor. Returns true if expansion was successful. 
            Returns false if the template wasn't found, if code is selected, or if the 
            expansion was cancelled by a text command or a plug-in.
            </summary>
            <param name="isSecondaryTrigger">Determines whether the secondary expansion 
            trigger was invoked.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.ExpandTemplate(System.String)">
            <summary>
            Expands the given template at the current cursor location. 
            </summary>
            <param name="name">Name of template to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.ExpandTemplate(System.String,System.Boolean)">
            <summary>
            Expands the given template at the current cursor location. 
            </summary>
            <param name="name">Name of template to expand.</param>
            <param name="isSecondaryTrigger">Set to true if the secondary template expansion key is triggering this expansion.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.FilterTemplates(System.String)">
            <summary>
            Filters the Primary and Secondary template lists based on the specified programming language.
            </summary>
            <param name="language">The programming language ID (e.g., "CSharp", "Basic", "C/C++", etc.) to filter on.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.Find(System.String,System.Boolean)">
            <summary>
            Finds a specified template in the list.
            </summary>
            <param name="name">The name of the template to find.</param>
            <param name="isSecondaryTrigger">If the secondary trigger is invoking this template.</param>
            <returns>The template corresponding to name, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.GetExpansion(DevExpress.CodeRush.Core.TemplateData,System.String,System.Boolean)">
            <summary>
            Gets the template expansion text based on the specified TemplateData instance. Nested 
            templates are recursively expanded, while StringProviders and TextCommands are left in place.
            </summary>
            <param name="templateData">The TemplateData object containing the expansion.</param>
            <param name="templateName">The name of the template to expand. This is used to log errors and to also 
            set the TemplateName variable, which can affect the expansions of some templates.</param>
            <param name="isSecondaryTrigger">Set to true if the secondary template expansion key is triggering this expansion.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.GetTemplateAtCursor(System.Boolean,DevExpress.CodeRush.Core.Template@,DevExpress.CodeRush.Core.TemplateData@)">
            <summary>
            Gets the Template and TemplateItem corresponding to the text to the left of the cursor. Multiple template possibilities are evaluated. The best (longest) template wins.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.GetPossibleTemplateNames(System.String)">
            <summary>
            Returns a collection of possible template names matching the given text.
            This method doesn't check any context or if a template exists.
            </summary>
            <param name="text">The text to get possible template names.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplateEngine.Reload">
            <summary>
            Reloads the language-neutral and language-specific template lists and divides them into two categories; one
            that responds to the primary template expansion key, and the other which responds to the secondary expansion
            key (available through the Primary and Secondary TemplateList properties).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITemplateEngine.PossibleTemplateAtCursor">
            <summary>
            Returns true if there is possible template at the cursor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITemplateEngine.LeftText">
            <summary>
            Returns the document text to the left of the currently expanding template.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITemplateEngine.Primary">
            <summary>
            Returns a list of templates triggered by the primary key (typically the space bar).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITemplateEngine.RightText">
            <summary>
            Returns the document text to the right of the currently expanding template.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITemplateEngine.Secondary">
            <summary>
            Returns a list of templates triggered by the secondary key (typically Shift+space).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITemplateEngine.TemplateStoragePath">
            <summary>
            Gets the path (rooted from the CodeRush settings path) where templates are stored.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.GetAllBindings(System.String)">
            <summary>
            Returns a NameValueCollection of key names and bindings associated with the passed command.
            If the command specifies no parameters, and bindings exist to the command that accept parameters, 
            all key bindings will be returned. The Name field holds the key name, and the Value field holds
            the command with any parameters (e.g., "Embed(try/finally)").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.GetAllContextMatchBindings(System.String)">
            <summary>
            Returns a NameValueCollection of key names and context satisfied bindings associated with the passed command.    
            If the command specifies no parameters, and bindings exist to the command that accept parameters, 
            all key bindings will be returned. The Name field holds the key name, and the Value field holds
            the command with any parameters (e.g., "Embed(try/finally)").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.GetAllContextAvailableBindings(System.String)">
            <summary>
            Returns context satisfied and available for executing bindings associated with the passed command.    
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.GetAllBindings(System.Predicate{DevExpress.CodeRush.Core.ICommandKeyBinding})">
            <summary>
            Returns bindings satisfied to the provided predicate.    
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.GetAllBindings">
            <summary>
            Returns an array of all registered command key bindings.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.ActionToKeyNames(System.String)">
            <summary>
            Returns a list of key names associated with the passed Action.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.HasEnabledShortcut(System.String)">
            <summary>
            Determines if the specified command has at least one DXCore shortcut that is enabled.
            </summary>
            <param name="command">The name of the command to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.HasEnabledShortcut(System.String,System.String)">
            <summary>
            Determines if the specified command has at least one DXCore shortcut that is enabled.
            </summary>
            <param name="command">The name of the command to check.</param>
            <param name="parameters">The parameter values to check. This value can be NULL to indicate that the shortcut shouldn't have any parameters set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.HasEnabledShortcut(System.String,System.Boolean)">
            <summary>
            Determines if the specified command has at least one DXCore shortcut that is enabled.
            </summary>
            <param name="command">The name of the command to check.</param>
            <param name="ignoreCase">If true, the command and parameters will be searched in a case-insentive manner.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.HasEnabledShortcut(System.String,System.String,System.Boolean)">
            <summary>
            Determines if the specified command has at least one DXCore shortcut that is enabled.
            </summary>
            <param name="command">The name of the command to check.</param>
            <param name="parameters">The parameter values to check. This value can be NULL to indicate that the shortcut shouldn't have any parameters set.</param>
            <param name="ignoreCase">If true, the command and parameters will be searched in a case-insentive manner.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.KeyboardServices.CommandToKeyNames(System.String)">
            <summary>
            Returns a list of key names associated with the passed Command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.KeyboardServices.SendShortcutToIDE">
            <summary>
            Command event handlers can change this property to determine whether the key
            bound to their CodeRush command should go on to the IDE for further processing.
            This property is initialized by CodeRush before calling the CodeRushCommand's DoExecute()
            method. The initialized value is determined by the user-specified binding option 
            established in the Shortcuts option dialog. This property is checked immediately after
            calling DoExecute(), so if your event handler doesn't touch it, it will respect the 
            user's settings.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.KeyStateEventsManager">
            <summary>
            Manager for the ModifierKeyStateChanged and LockKeyStateChanged events.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.LanguageServices">
            <summary>
            Provides language-dependant services.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ehDocumentLanguageChangeHandler(DevExpress.CodeRush.Core.DocumentLanguageChangedEventArgs)">
            <summary>
            Sets the ActiveLanguage and ActiveExtension properties.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ehDocumentOpened(DevExpress.CodeRush.Core.DocumentEventArgs)">
            <summary>
            Changes active parser on document open.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.LoadMiscProject(EnvDTE.Project)">
            <summary>
            Loads misc project from the given EnvDTE.Project .
            </summary>
            <param name="project">The project to load.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageServiceId(System.String)">
            <summary>
            Gets a <see cref="T:System.Guid"/> representing the Visual Studio language service ID for the given language name.
            </summary>
            <param name="languageName">The language name to use.</param>
            <returns>Returns the <see cref="T:System.Guid"/> representing the request Visual Studio language service ID if it exists; otherwise, an empty Guid.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsComment(DevExpress.CodeRush.Core.CaretLocation)">
            <summary>
            Determines if the specified CaretLocation is a comment.
            </summary>
            <param name="location">The location to test. You can get a new CaretLocation from CodeRush.Language.</param>
            <returns>Returns true if aCaretLocation is inside a comment.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsString(DevExpress.CodeRush.Core.CaretLocation)">
            <summary>
            Determines if the specified CaretLocation is a string.
            </summary>
            <param name="location">The location to test. You can get a new CaretLocation from CodeRush.Language.</param>
            <returns>Returns true if aCaretLocation is inside a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsCode(DevExpress.CodeRush.Core.CaretLocation)">
            <summary>
            Determines if aCaretLocation is in code.
            </summary>
            <param name="location">The location to test. You can get a new CaretLocation from CodeRush.Language.</param>
            <returns>Returns true if aCaretLocation is inside code.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeLinkClient">
            <summary>
            Gets an ITypeLinkClient from the active language. If there isn't a 
            registered extension for the active language, a default implementor is returned.
            
            NOTE: This method is used internally by the DXCore and is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTextLinkClient">
            <summary>
            Gets an ITextLinkClient from the active language. If there isn't a 
            registered extension for the active language, a default implementor is returned.
            
            NOTE: This method is used internally by the DXCore and is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLinkClient">
            <summary>
            Gets an ILinkClient from the active language. If there isn't a 
            registered extension for the active language, a default implementor is returned.
            
            NOTE: This method is used internally by the DXCore and is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsTrailingIdentifierChar(System.Char)">
            <summary>
            Returns true if testChar qualifies as a character that can follow the first character of an identifier.
            </summary>
            <param name="testChar">The character to test.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsLeadingIdentifierChar(System.Char)">
            <summary>
            Returns true if testChar qualifies as a character that can start an identifier.
            </summary>
            <param name="testChar">The character to test.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsSimpleIdentifier(System.String)">
            <summary>
            Returns true if the specified string is a legal simple identifier for the active language.
            A simple identifier typically starts with an alpha character, and can include numbers 
            and the underscore character. Parens, brackets, and internal whitespace around member access 
            operators (e.g., "A . B . C" instead of "A.B.C") are not included in this evaluation.
            </summary>
            <param name="testIdentifier">The identifier to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsKeyword(System.String)">
            <summary>
            Returns true if the specified string is a legal keyword for the active language.
            </summary>
            <param name="s">The string to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsNumber(System.String)">
            <summary>
            Returns true if the specified string is a legal number for the active language.
            </summary>
            <param name="s">The string to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsBaseInstanceKeyword(System.String)">
            <summary>
            Returns true if the given string equals to base instance keyword for the active language.
            </summary>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsBaseInstanceKeyword(System.String,System.String)">
            <summary>
            Returns true if the given string equals to base instance keyword for the active language.
            </summary>
            <param name="language">The language id to use.</param>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsBaseInstanceKeyword(DevExpress.CodeRush.Core.LanguageExtensionBase,System.String)">
            <summary>
            Returns true if the given string equals to base instance keyword for the active language.
            </summary>
            <param name="language">The language extension.</param>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsClassInstanceKeyword(System.String)">
            <summary>
            Returns true if the given string equals to class instance keyword for the active language.
            </summary>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsClassInstanceKeyword(System.String,System.String)">
            <summary>
            Returns true if the given string equals to class instance keyword for the active language.
            </summary>
            <param name="language">The language id to use.</param>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsClassInstanceKeyword(DevExpress.CodeRush.Core.LanguageExtensionBase,System.String)">
            <summary>
            Returns true if the given string equals to class instance keyword for the active language.
            </summary>
            <param name="language">The language extension.</param>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ToFileExt(System.String)">
            <summary>
            Converts a specified language ID to a file extension by replacing all illegal chars with appropriate strings and adding the dot before the first symbol.
            If the language ID is null or empty, the method returns an empty string.
            </summary>
            <param name="languageID">The language ID (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The file extension, keeping legal file name characters and preceded by the leading ".".</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ImplementInterface(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.StructuralParser.Interface)">
            <summary>
            Implements interface for the given type.
            </summary>
            <param name="type">The type to implement interface</param>
            <param name="newInterface">The interface to implement</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.InheritType(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Inherits specified type for the given type (makes given type a descendant of the specified type).
            </summary>
            <param name="type">The type to make a descendant.</param>
            <param name="ancestor">The ancestor type to inherit.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeInheritanceArgs(DevExpress.CodeRush.StructuralParser.TypeDeclaration,System.String,DevExpress.CodeRush.StructuralParser.SourcePoint@,System.String@)">
            <summary>
            Returns the parameters (an insertion point and code) required for the type inheritance.
            </summary>
            <param name="type">The type to make a descendant.</param>
            <param name="ancestorName">The ancestor name to inherit.</param>
            <param name="insertionPoint">The insertion point.</param>
            <param name="code">The code for inheritance.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageExtension(System.String)">
            <summary>
            Gets language extension object for the given languageID.
            </summary>
            <param name="languageID">The languageID to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageExtensionFromFileExt(System.String)">
            <summary>
            Gets language extension object for the given file extension.
            </summary>
            <param name="fileExt">The file extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageExtensionFromDotNetLanguageType(DevExpress.CodeRush.StructuralParser.DotNetLanguageType)">
            <summary>
            Gets language extension object for the given DotNetLanguageType.
            </summary>
            <param name="type">The DotNetLanguageType.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageID(System.String)">
            <summary>
            Gets languageID for the given file extension.
            </summary>
            <param name="fileExt">The file extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageID(DevExpress.CodeRush.StructuralParser.DotNetLanguageType)">
            <summary>
            Gets languageID for the given DotNetLanguageType.
            </summary>
            <param name="type">The DotNetLanguageType.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.OverrideElementBuilder(DevExpress.CodeRush.StructuralParser.ElementBuilder)">
            <summary>
            Sets the _OverrideElementBuilder, which will be used in place of 
            the default element builder. This is used primarily for testing 
            new versions of the ElementBuilder.
            </summary>
            <param name="overrideBuilder">The ElementBuilder to override with. Set this to null
            if you want to return to default operation.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBuiltInTypeWideningConversionTable">
            <summary>
            Gets implicit conversion table for the builtin types.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBuiltInTypeWideningConversionTable(System.String)">
            <summary>
            Gets conversion table for the builtin types.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBuiltInTypeWideningConversionTable(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Gets conversion table for the builtin types.
            </summary>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBuiltInTypeNarrowingConversionTable">
            <summary>
            Gets explicit conversion table for the builtin types.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBuiltInTypeNarrowingConversionTable(System.String)">
            <summary>
            Gets implicit conversion table for the builtin types.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBuiltInTypeNarrowingConversionTable(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Gets explicit conversion table for the builtin types.
            </summary>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetFullTypeName(DevExpress.CodeRush.StructuralParser.PrimitiveType)">
            <summary>
            Returns full type name for the given built in type.
            </summary>
            <param name="type">The built in type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetElementFullName(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets language specific full name for the given element.
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetElementFullName(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Gets language specific full name for the given element.
            </summary>
            <param name="element">The element to use.</param>
            <param name="languageID">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetElementFullName(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Gets language specific full name for the given element.
            </summary>
            <param name="element">The element to use.</param>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeSuffix(System.String)">
            <summary>
            Returns type suffix for the given type name.
            E.g. "*" or "^" for C++ language.
            </summary>
            <param name="type">The type name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeSuffix(DevExpress.CodeRush.StructuralParser.Expression,System.String)">
            <summary>
            Returns type suffix for the given type name.
            E.g. "*" or "^" for C++ language.
            </summary>
            <param name="expression">The target expression.</param>
            <param name="type">The type name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeSuffix(System.String,System.String)">
            <summary>
            Returns type suffix for the given type name.
            E.g. "*" or "^" for C++ language.
            </summary>
            <param name="type">The type name to use.</param>
            <param name="language">The language ID to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeSuffix(DevExpress.CodeRush.StructuralParser.Expression,System.String,System.String)">
            <summary>
            Returns type suffix for the given type name.
            E.g. "*" or "^" for C++ language.
            </summary>
            <param name="expression">The target expression.</param>
            <param name="type">The type name to use.</param>
            <param name="language">The language ID to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeSuffix(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns type suffix for the given type name.
            E.g. "*" or "^" for C++ language.
            </summary>
            <param name="type">The type name to use.</param>
            <param name="extension">The language extension to use.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeSuffix(DevExpress.CodeRush.StructuralParser.Expression,System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns type suffix for the given type name.
            E.g. "*" or "^" for C++ language.
            </summary>
            <param name="expression">The target expression.</param>
            <param name="type">The type name to use.</param>
            <param name="extension">The language extension to use.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSimpleName(System.String)">
            <summary>
            Returns simple name for the given string.
            </summary>
            <param name="name">The name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSimpleName(System.String,System.String)">
            <summary>
            Returns simple name for the given string.
            </summary>
            <param name="name">The name to use.</param>
            <param name="language">The language id to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSimpleName(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns simple name for the given string.
            </summary>
            <param name="name">The name to use.</param>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.CheckSimpleName(System.String,System.String)">
            <summary>
            Returns simple name for the given string.
            </summary>
            <param name="name">The name to use.</param>
            <param name="operators">The delimiter operators.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsNativeType(DevExpress.CodeRush.StructuralParser.TypeDeclaration,System.String)">
            <summary>
            Returns true if the given type declaration is native code.
            </summary>
            <param name="type">The type declaration to check.</param>
            <param name="languageID">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsNativeType(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given type declaration is native code.
            </summary>
            <param name="type">The type declaration to check.</param>
            <param name="extension">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsNativeType(DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Returns true if the given type declaration is native code.
            </summary>
            <param name="type">The type declaration to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsDefaultPrimitiveValue(DevExpress.CodeRush.StructuralParser.ITypeElement,DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Checks if given expression is primitive and has default value for the specified type. 
            </summary>
            <param name="typeElement">The type element to check.</param>
            <param name="expression">The expression to check.</param>
            <returns>Returns true if given expression is primitive and has default value for the specified type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsFileBuildAction(DevExpress.CodeRush.StructuralParser.ISourceFile)">
            <summary>
            Returns true if build action can be checked for the file.
            </summary>
            <param name="fileNode">The file to check.</param>
            <returns>True if build action can be checked.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsFileBuildAction(System.String)">
            <summary>
            Returns true if build action can be checked for the language.
            </summary>
            <param name="language">The language to check.</param>
            <returns>True if build action can be checked.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsFileBuildAction(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if build action can be checked for the language extension.
            </summary>
            <param name="extension">The language extension to check.</param>
            <returns>True if build action can be checked.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetOverloadableOperatorName(DevExpress.CodeRush.StructuralParser.OperatorType,System.Int32)">
            <summary>
            Returns operator name for the given operator type.
            </summary>
            <param name="op">The operator type.</param>
            <param name="count">Operator parameter count.</param>
            <returns>Operator name for the given operator type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetOverloadableOperatorName(DevExpress.CodeRush.StructuralParser.OperatorType,System.Int32,System.String)">
            <summary>
            Returns operator name for the given operator type.
            </summary>
            <param name="op">The operator type.</param>
            <param name="count">Operator parameter count.</param>
            <param name="language">Language extension to use.</param>
            <returns>Operator name for the given operator type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetOverloadableOperatorName(DevExpress.CodeRush.StructuralParser.OperatorType,System.Int32,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns operator name for the given operator type.
            </summary>
            <param name="op">The operator type.</param>
            <param name="count">Operator parameter count.</param>
            <param name="extension">Language extension to use.</param>
            <returns>Operator name for the given operator type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsExtensionMethod(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Returns true if method is extension method.
            </summary>
            <param name="method">The method to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsExtensionMethod(DevExpress.CodeRush.StructuralParser.IMethodElement,System.String)">
            <summary>
            Returns true if method is extension method.
            </summary>
            <param name="method">The method to check</param>
            <param name="languageID">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsExtensionMethod(DevExpress.CodeRush.StructuralParser.IMethodElement,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if method is extension method.
            </summary>
            <param name="method">The method to check</param>		
            <param name="extension">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsExtensionMethod(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Returns true if method is extension method.
            </summary>
            <param name="resolver">The method to check</param>		
            <param name="method">The method to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsExtensionMethod(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IMethodElement,System.String)">
            <summary>
            Returns true if method is extension method.
            </summary>
            <param name="resolver">The method to check</param>		
            <param name="method">The method to check</param>
            <param name="languageID">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsExtensionMethod(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IMethodElement,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if method is extension method.
            </summary>
            <param name="resolver">The method to check</param>		
            <param name="method">The method to check</param>		
            <param name="extension">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsQualifiedName(System.String)">
            <summary>
            Returns true if the given name is qualified.
            </summary>
            <param name="name">The name to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsQualifiedName(System.String,System.String)">
            <summary>
            Returns true if the given name is qualified.
            </summary>
            <param name="name">The name to check.</param>
            <param name="language">The language id to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsQualifiedName(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given name is qualified.
            </summary>
            <param name="name">The name to check.</param>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.CheckQualifiedName(System.String,System.String)">
            <summary>
            Returns true if the given name is qualified.
            </summary>
            <param name="name">The name to check.</param>
            <param name="operators">The delimiter operators.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetDefaultValueExpression(DevExpress.CodeRush.StructuralParser.PrimitiveExpression)">
            <summary>
            Returns default value expression using given primitive expression.
            </summary>
            <param name="primitive">The primitive expression to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetDefaultValueExpression(DevExpress.CodeRush.StructuralParser.PrimitiveExpression,System.String)">
            <summary>
            Returns default value expression using given primitive expression.
            </summary>
            <param name="primitive">The primitive expression to use.</param>
            <param name="language">The language ID to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetDefaultValueExpression(DevExpress.CodeRush.StructuralParser.PrimitiveExpression,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns default value expression using given primitive expression.
            </summary>
            <param name="primitive">The primitive expression to use.</param>
            <param name="extension">The language extension to use.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IdentifiersMatch(System.String,System.String)">
            <summary>
            Returns true if the specified identifiers are equivalent.
            </summary>
            <param name="identifier1">The first identifier to compare.</param>
            <param name="identifier2">The second identifier to compare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.TypesMatch(System.String,System.String)">
            <summary>
            Returns true if the specified types are equivalent. This method converts the specified 
            types to simple equivalents if they exist in the active language (e.g., "System.Boolean" 
            becomes "bool" in C#).
            </summary>
            <param name="type1">The first type to compare.</param>
            <param name="type2">The second type to compare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ExtractFirstIdentifier(System.String@)">
            <summary>
            Removes the first identifier from qualifiedName and returns that identifier. 
            For example, if qualifiedName is "System.Boolean", this method will return 
            "System" and will set qualifiedName to "Boolean".
            </summary>
            <param name="qualifiedName">The identifier to evaluate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility,System.String@)">
            <summary>
            Returns visibility name.
            </summary>
            <param name="visibility">The MemberVisibility to get name</param>
            <param name="name">The visibility name</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility,System.String,System.String@)">
            <summary>
            Returns visibility name.
            </summary>
            <param name="visibility">The MemberVisibility to get name</param>
            <param name="language">The language ID to use.</param>
            <param name="name">The visibility name</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility,DevExpress.CodeRush.Core.LanguageExtensionBase,System.String@)">
            <summary>
            Returns visibility name.
            </summary>
            <param name="visibility">The MemberVisibility to get name</param>
            <param name="extension">The language extension to use.</param>
            <param name="name">The visibility name</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetUsingDirective(System.String)">
            <summary>
            Returns a properly-formatted using directive (C#) or Imports statement (VB) for the specified namespace. Returns an empty string if an error occurs. This method is identical to GetImportsStatement.
            </summary>
            <param name="namespaceName">The namespace to format.</param>
            <returns>Returns the formatted using directive for the specified namespace, or an empty string if an error occurs.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetUsingDirective(System.String,System.String)">
            <summary>
            Returns a properly-formatted using directive (C#) or Imports statement (VB) for the specified namespace. Returns an empty string if an error occurs.
            </summary>
            <param name="namespaceName">The namespace to format.</param> 
            <param name="language">The language id to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetUsingDirective(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns a properly-formatted using directive (C#) or Imports statement (VB) for the specified namespace. Returns an empty string if an error occurs.
            </summary>
            <param name="namespaceName">The namespace to format.</param> 
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetImportsStatement(System.String)">
            <summary>
            Returns a properly-formatted Imports statement (VB) or using directive (C#) for the specified namespace. Returns an empty string if an error occurs. This method is identical to GetUsingDirective.
            </summary>
            <param name="namespaceName">The namespace to format.</param>
            <returns>Returns the formatted Imports statement for the specified namespace, or an empty string if an error occurs.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetEscapedString(System.String,System.String,System.Boolean)">
            <summary>
            Returns an escaped version of the passed string. E.g., in C# this would convert all \r's to carriage-returns,
            all \n's to line-feeds, etc.
            </summary>
            <param name="language">The language to use when converting the string.</param>
            <param name="value">The string to convert.</param>
            <param name="isVerbatim">Whether the string is a verbatim string. E.g., in C#, verbatim strings
            begin with an '@' character.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetEscapedString(System.String,System.Boolean)">
            <summary>
            Returns an escaped version of the passed string. E.g., in C# this would convert all \r's to carriage-returns,
            all \n's to line-feeds, etc.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="isVerbatim">Whether the string is a verbatim string. E.g., in C#, verbatim strings
            begin with an '@' character.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetRegionHeader(System.String)">
            <summary>
            Returns a properly-formatted region header using the passed caption.
            </summary>
            <param name="caption">The caption to format</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetRegionFooter">
            <summary>
            Returns a properly-formatted region footer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetRegionHeaderAndFooter(System.String,System.String@,System.String@)">
            <summary>
            Gets properly-formatted region header and footer using the passed caption.
            </summary>
            <param name="caption">The caption format.</param>
            <param name="header">Returns the formatted header</param>
            <param name="footer">Returns the formatted footer</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetContinueStatement">
            <summary>
            Returns continue statement for the active language if supported.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetContinueStatement(System.String)">
            <summary>
            Returns continue statement for the given language if supported.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetContinueStatement(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns continue statement for the given language if supported.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSealedKeyword">
            <summary>
            Returns the sealed keyword (e.g. 'sealed' in C#, 'NotInheritable' in VB) for the active language if supported.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSealedKeyword(System.String)">
            <summary>
            Returns the sealed keyword (e.g. 'sealed' in C#, 'NotInheritable' in VB) for the given language if supported.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSealedKeyword(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns the sealed keyword (e.g. 'sealed' in C#, 'NotInheritable' in VB)t for the given language if supported.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsAutoImplementedPropertyAccessorVisibility">
            <summary>
            Returns true if the given language supports a visibility keyword for auto-implemented properties.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsAutoImplementedPropertyAccessorVisibility(System.String)">
            <summary>
            Returns true if the given language supports a visibility keyword for auto-implemented properties.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsAutoImplementedPropertyAccessorVisibility(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports a visibility keyword for auto-implemented properties.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsNestedNamespaceSearch">
            <summary>
            Returns true if the given language supports searching of the nested namespaces.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsNestedNamespaceSearch(System.String)">
            <summary>
            Returns true if the given language supports searching of the nested namespaces.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsNestedNamespaceSearch(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports searching of the nested namespaces.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsTypes">
            <summary>
            Returns true if the given language supports type declarations.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsTypes(System.String)">
            <summary>
            Returns true if the given language supports type declarations.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsTypes(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports type declarations.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsRootNamespace">
            <summary>
            Returns true if the given language supports root namespace feature.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsRootNamespace(System.String)">
            <summary>
            Returns true if the given language supports root namespace feature.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsRootNamespace(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports root namespace feature.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsParenslessCalls">
            <summary>
            Returns true if the given language supports method calls without parens.
            </summary>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsParenslessCalls(System.String)">
            <summary>
            Returns true if the given language supports method calls without parens.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsParenslessCalls(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports method calls without parens.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsMultiLineComments">
            <summary>
            Returns true if the given language supports multi line comments.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsMultiLineComments(System.String)">
            <summary>
            Returns true if the given language supports multi line comments.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsMultiLineComments(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports multi line comments.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsObjectCreationFromMethod">
            <summary>
            Returns true if the given language supports creation of new objects using method declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsObjectCreationFromMethod(System.String)">
            <summary>
            Returns true if the given language supports creation of new objects using method declaration.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsObjectCreationFromMethod(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports creation of new objects using method declaration.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsRootMembers">
            <summary>
            Returns true if members can be placed directly to the file or namespace.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsRootMembers(System.String)">
            <summary>
            Returns true if members can be placed directly to the file or namespace.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsRootMembers(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if members can be placed directly to the file or namespace.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsOutParameters">
            <summary>
            Returns true if the given language supports out parameters.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsOutParameters(System.String)">
            <summary>
            Returns true if the given language supports out parameters.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsOutParameters(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports out parameters.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsImplicitImplementationRename">
            <summary>
            Returns true if the given language supports implicit implementation rename.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsImplicitImplementationRename(System.String)">
            <summary>
            Returns true if the given language supports implicit implementation rename.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsImplicitImplementationRename(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports implicit implementation rename.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsNestedLanguages">
            <summary>
            Returns true if current language supports nested languages.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsNestedLanguages(System.String)">
            <summary>
            Returns true if current language supports nested languages.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsNestedLanguages(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if current language supports nested languages.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsMacroses">
            <summary>
            Returns true if current language supports macroses.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsMacroses(System.String)">
            <summary>
            Returns true if current language supports macross.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsMacroses(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if current language supports macroses.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.HasSerialMembersOrder">
            <summary>
            Returns true if current language has serial members order.
            </summary>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.HasSerialMembersOrder(System.String)">
            <summary>
            Returns true if current language has serial members order.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.HasSerialMembersOrder(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if current language has serial members order.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.CheckBaseMemberVirtualModifier">
            <summary>
            Returns true if virtual modifier should be checked when searching for a base member.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.CheckBaseMemberVirtualModifier(System.String)">
            <summary>
            Returns true if virtual modifier should be checked when searching for a base member.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.CheckBaseMemberVirtualModifier(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if current language has serial members order.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.HasManagedPointers">
            <summary>
            Returns true if current language uses managed pointers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.DeclaresTypeBeforeName">
            <summary>
            Returns true if current language declares type before name in declarations (variables, parameters ...).
            </summary>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.DeclaresTypeBeforeName(System.String)">
            <summary>
            Returns true if current language declares type before name in declarations (variables, parameters ...).
            </summary>    
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.DeclaresTypeBeforeName(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if current language declares type before name in declarations (variables, parameters ...).
            </summary>    
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsDecoupledForeachDeclaration">
            <summary>
            Returns true if the given language supports a decoupled declaration of the foreach iteration variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsDecoupledForeachDeclaration(System.String)">
            <summary>
            Returns true if the given language supports a decoupled declaration of the foreach iteration variable.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsDecoupledForeachDeclaration(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports a decoupled declaration of the foreach iteration variable.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPrototypesAndImplementations">
            <summary>
            Returns true if the given language supports prototypes and implementations.
            (E.g. C++ does support prototypes)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPrototypesAndImplementations(System.String)">
            <summary>
            Returns true if the given language supports prototypes and implementations.
            (E.g. C++ does support prototypes)
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPrototypesAndImplementations(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language suSupportsPrototypesAndImplementations(LanguageExtensionBase language)pports prototypes and implementations.
            (E.g. C++ does support prototypes)
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPartialClasses">
            <summary>
            Returns true if active language supports partial classes.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsImplicitPointers">
            <summary>
            Returns true if active language supports implicit pointer declarations, e.g. C# or VB language.
            C++ language requires explicit pointers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsImplicitPointers(System.String)">
            <summary>
            Returns true if the given language supports implicit pointer declarations, e.g. C# or VB language.
            C++ language requires explicit pointers.
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsImplicitPointers(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports implicit pointer declarations, e.g. C# or VB language.
            C++ language requires explicit pointers.
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.AddTypeSuffix(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Adds type suffix for the specified full type name and element.
            This method will try to obtain simple type name with namespace stripped off.
            </summary>
            <param name="element">The element to use.</param>
            <param name="fullTypeName">The full type name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.AddTypeSuffix(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Adds type suffix for the specified full type name and element.
            This method will try to obtain simple type name with namespace stripped off.
            </summary>
            <param name="language">The language ID.</param>
            <param name="element">The element to use.</param>
            <param name="fullTypeName">The full type name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.AddTypeSuffix(DevExpress.CodeRush.Core.LanguageExtensionBase,DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Adds type suffix for the specified full type name and element.
            This method will try to obtain simple type name with namespace stripped off.
            </summary>
            <param name="language">The language extension.</param>
            <param name="element">The element to use.</param>
            <param name="fullTypeName">The full type name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetParserFromLanguageID(System.String)">
            <summary>
            Returns a parser that is capable of parsing text documents matching the specified Language ID.
            </summary>
            <param name="languageID">The Language ID to get parser support for (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The parser that can parse files of this type, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.CreateParserFromLanguageID(System.String)">
            <summary>
            Create new parser that is capable of parsing text documents matching the specified Language ID.
            </summary>
            <param name="languageID">The Language ID to get parser support for (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The parser that can parse files of this type, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetParserFromFileExt(System.String)">
            <summary>
            Returns a parser that is capable of parsing files matching the specified file extension.
            </summary>
            <param name="fileExt">The file extension to get parser support for (including the leading ".").</param>
            <returns>The parser that can parse files of this type, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetActiveCodeDomProvider">
            <summary>
            Gets a descendant of CodeDomProvider for the active language if possible.
            </summary>
            <returns>The CodeDomProvider descendant for the active language or null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetCodeDomProvider(System.String)">
            <summary>
            Gets a descendant of CodeDomProvider for the specified language if possible.
            </summary>
            <param name="language">The language for which to return CodeDomProvider.</param>
            <returns>The CodeDomProvider descendant for the specified language or null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetExpressionParser(System.String)">
            <summary>
            Returns expression parser for the given language.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetActiveExpressionParser">
            <summary>
            Returns expression parser for the active language
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetCodeGenerator(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns code generator for the given language extension.
            </summary>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetCodeGenerator(System.String)">
            <summary>
            Returns code generator for the given language.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetActiveCodeGenerator">
            <summary>
            Returns active code generator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetIdentifierFromKeyword(System.String)">
            <summary>
            Returns identifier from keyword for active language extension.
            If passed string is not keyword then method does not process it.
            </summary>
            <param name="keyword">The keyword to process.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetIdentifierFromKeyword(System.String,System.String)">
            <summary>
            Returns identifier from keyword for the given language extension.
            If passed string is not keyword then method does not process it.
            </summary>
            <param name="keyword">The keyword to process.</param>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetIdentifierFromKeyword(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns identifier from keyword for the given language extension.
            If passed string is not keyword then method does not process it.
            </summary>
            <param name="keyword">The keyword to process.</param>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetImplementsCode(DevExpress.CodeRush.StructuralParser.Interface,DevExpress.CodeRush.StructuralParser.Member,System.Boolean)">
            <summary>
            Returns code to implement member.
            </summary>
            <param name="element">The interface</param>
            <param name="member">The member to implement</param>
            <param name="isFirstImplement">The value determining if implement should be the first in list</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetImplementsCode(DevExpress.CodeRush.StructuralParser.Interface,DevExpress.CodeRush.StructuralParser.Member,System.Boolean,System.String)">
            <summary>
            Returns code to implement member.
            </summary>
            <param name="element">The interface</param>
            <param name="member">The member to implement</param>
            <param name="isFirstImplement">The value determining if implement should be the first in list</param>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetImplementsCode(DevExpress.CodeRush.StructuralParser.Interface,DevExpress.CodeRush.StructuralParser.Member,System.Boolean,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns code to implement member.
            </summary>
            <param name="element">The interface</param>
            <param name="member">The member to implement</param>
            <param name="isFirstImplement">The value determining if implement should be the first in list</param>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetHexadecimalValuePresentation(System.Byte)">
            <summary>
            Returns hexadecimal value presentation (e.g. "0xFF" in C#, "&amp;HFF" in VB).
            </summary>
            <param name="value">The byte to convert.</param>
            <returns>The hexadecimal value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetHexadecimalValuePresentation(System.Byte,System.String)">
            <summary>
            Returns hexadecimal value presentation (e.g. "0xFF" in C#, "&amp;HFF" in VB).
            </summary>
            <param name="value">The byte to convert.</param>
            <param name="languageId">The language ID.</param>
            <returns>The hexadecimal value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetHexadecimalValuePresentation(System.Byte,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns hexadecimal value presentation (e.g. "0xFF" in C#, "&amp;HFF" in VB).
            </summary>
            <param name="value">The byte to convert.</param>
            <param name="extension">The LanguageExtension instance.</param>
            <returns>The hexadecimal value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetElementBuilder(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns ElementBuilder for the given language extension.
            </summary>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetElementBuilder(System.String)">
            <summary>
            Returns ElementBuilder for the given language.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetActiveElementBuilder">
            <summary>
            Returns active ElementBuilder.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetVariableModifier(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns variable modifier for the given language extension.
            </summary>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetVariableModifier(System.String)">
            <summary>
            Returns variable modifier for the given language.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetVariableModifier">
            <summary>
            Returns variable modifier for the active language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeKindKeyword(DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Returns keyword that defines specified type declaration.
            </summary>		
            <param name="type">The TypeDeclaration to get keyword</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetMacroExpansion(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns string which contains full expansion of the specified macro.
            <param name="file">The file where macro situated</param>
            <param name="document">The current TextDocument</param>
            <param name="range">The full range of macro</param>
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetMacroExpansion(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Returns string which contains full expansion of the specified macro.
            </summary>		
            <param name="file">The file where macro situated</param>
            <param name="document">The current TextDocument</param>
            <param name="range">The full range of macro</param>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetMacroExpansion(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns string which contains full expansion of the specified macro. 
            </summary>		
            <param name="file">The file where macro situated</param>
            <param name="document">The current TextDocument</param>
            <param name="range">The full range of macro</param>
            <param name="extension">The language extension</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeParameterInitializer(System.String)">
            <summary>
            Returns default initializer for the specified TypeParameter name.
            </summary>
            <param name="name">The name of TypeParameter</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeParameterInitializer(System.String,System.String)">
            <summary>
            Returns default initializer for the specified TypeParameter name.
            </summary>
            <param name="name">The name of TypeParameter</param>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeParameterInitializer(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns default initializer for the specified TypeParameter name.
            </summary>
            <param name="name">The name of TypeParameter</param>
            <param name="extension">The language extension</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetNullReferenceExpression">
            <summary>
            Returns null reference expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetNullReferenceExpression(System.String)">
            <summary>
            Returns null reference expression.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetNullReferenceExpression(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns null reference expression.
            </summary>
            <param name="extension">The language extension</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetObjectTypeReferenceExpression">
            <summary>
            Returns object type reference expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetObjectTypeReferenceExpression(System.String)">
            <summary>
            Returns object type reference expression.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetObjectTypeReferenceExpression(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns object type reference expression.
            </summary>
            <param name="extension">The language extension</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetExpressionCodeGenerator(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns expression code generator for the given language extension.
            </summary>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetExpressionCodeGenerator(System.String)">
            <summary>
            Returns expression code generator for the given language.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetActiveExpressionCodeGenerator">
            <summary>
            Returns expression code generator for the active language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetXmlCodeGenerator(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns XmlDocComments generator for the given language extension.
            </summary>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetXmlCodeGenerator(System.String)">
            <summary>
            Returns XmlDocComments generator for the given language extension.
            </summary>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageElementCodeGenerator(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns LanguageElement generator for the given language extension.
            </summary>
            <param name="element">The LanguageElement to generate.</param>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageElementCodeGenerator(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Returns LanguageElement generator for the given language extension.
            </summary>
            <param name="element">The LanguageElement to generate.</param>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetBlockNecessityInformation(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns information about the block for the given element after inserting the new LanguageElement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetCodeBlockStart(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Returns start of code block for the given language element.
            </summary>
            <param name="element">Element to get start of code block source point.</param>
            <param name="start">Code block start source point of given element</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetCodeBlockStart(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns start of code block for the given language element.
            </summary>
            <param name="element">Element to get start of code block source point.</param>
            <returns>Returns start of code block for the given language element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsCollapsible(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Determines whether or not the specified LanguageElement is collapsible for the active language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetCollapsibleRange(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets a SourceRange representing the range of the specified LanguageElement that can be collapsed for the active language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseActiveDocument">
            <summary>
            Parses the active text document and returns the LanguageElement that represents it.
            </summary>
            <returns>Returns the LanguageElement representing the active text document, or null if the 
            active document is not a text document or if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Parses the specified text document and returns the LanguageElement that represents it.
            </summary>
            <param name="textDoc">The text document to parse.</param>
            <returns>Returns the LanguageElement representing the specified text document, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Parses the specified source range of the given text document with the given context and returns the LanguageElement that represents it.
            </summary>
            <param name="context">The context being invalidated.</param>
            <param name="textDoc">The text document to parse.</param>
            <param name="range">The source range to parse.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.ParserContext)">
            <summary>
            Parses the specified source range of the given text document with the 
            given context and returns the LanguageElement that represents it. Nodes 
            parsed in the specified range will be appended to the end of the 
            context's nodes. Does not trigger the BeforeParse or AfterParse events, 
            nor does this method call BindToCode -- calling client code must do that 
            (this allows the calling code to bind only the nodes within the parse range, 
            and also append any trailing nodes to the end of the newly-parsed nodes).
            </summary>
            <param name="parserContext">The parser context to use.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.RegionDirective,DevExpress.CodeRush.StructuralParser.TextStringCollection,DevExpress.CodeRush.StructuralParser.CompilerDirective,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Parses the specified source range of the active text document with the given context and returns the LanguageElement that represents it.
            </summary>
            <param name="context">The context being invalidated.</param>
            <param name="regionDirectives">The RegionDirective to add region directives.</param>
            <param name="strings">The TextStringCollection to add strings.</param>
            <param name="compilerDirectives">The CompilerDirective to add compiler directives.</param>
            <param name="range">The source range to parse.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Parses the specified source range of the active text document with the given context and returns the LanguageElement that represents it.
            </summary>
            <param name="context">The context being invalidated.</param>
            <param name="range">The source range to parse.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.ParserContext,System.Boolean)">
            <summary>
            Parses the specified source range of the given text document with the 
            given context and returns the LanguageElement that represents it. Nodes 
            parsed in the specified range will be appended to the end of the 
            context's nodes. Does not trigger the BeforeParse or AfterParse events, 
            nor does this method call BindToCode -- calling client code must do that 
            (this allows the calling code to bind only the nodes within the parse range, 
            and also append any trailing nodes to the end of the newly-parsed nodes).
            </summary>
            <param name="parserContext">The parser context to use.</param>
            <param name="postponedParse">Pass true to allow on demand parsing.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.RegionDirective,DevExpress.CodeRush.StructuralParser.TextStringCollection,DevExpress.CodeRush.StructuralParser.CompilerDirective,DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Parses the specified source range of the given text document with the 
            given context and returns the LanguageElement that represents it. Nodes 
            parsed in the specified range will be appended to the end of the 
            context's nodes. Does not trigger the BeforeParse or AfterParse events, 
            nor does this method call BindToCode -- calling client code must do that 
            (this allows the calling code to bind only the nodes within the parse range, 
            and also append any trailing nodes to the end of the newly-parsed nodes).
            </summary>
            <param name="context">The context being invalidated.</param>
            <param name="regionDirectives">The RegionDirective to add region directives.</param>
            <param name="strings">The TextStringCollection to add strings.</param>
            <param name="compilerDirectives">The CompilerDirective to add compiler directives.</param>
            <param name="textDoc">The text document to parse.</param>
            <param name="range">The source range to parse.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.StructuralParser.ParserContext,DevExpress.CodeRush.Core.LanguageServices.PostponedParseOption)">
            <summary>
            Parses the specified source range of the given text document with the 
            given context and returns the LanguageElement that represents it. Nodes 
            parsed in the specified range will be appended to the end of the 
            context's nodes. Does not trigger the BeforeParse or AfterParse events, 
            nor does this method call BindToCode -- calling client code must do that 
            (this allows the calling code to bind only the nodes within the parse range, 
            and also append any trailing nodes to the end of the newly-parsed nodes).
            </summary>
            <param name="parserContext">The parser context to use.</param>
            <param name="option">Pass options for demand parsing.</param>
            <returns>Returns the LanguageElement representing the specified source range, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.Core.TextDocument,System.Boolean)">
            <summary>
            Parses the specified text document and returns the LanguageElement that represents it.
            </summary>
            <param name="textDoc">The text document to parse.</param>
            <param name="postponedParse">Pass true to allow on demand parsing.</param>
            <returns>Returns the LanguageElement representing the specified text document, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.ParsingMode)">
            <summary>
            Parses the specified text document and returns the LanguageElement that represents it.
            </summary>
            <param name="textDoc">The text document to parse.</param>
            <param name="mode">Pass parsing mode.</param>
            <returns>Returns the LanguageElement representing the specified text document, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(System.String)">
            <summary>
            Parses the specified source file on disk and returns the LanguageElement that represents it.
            </summary>
            <param name="fileName">The name of the file on disk to parse.</param>
            <returns>Returns the LanguageElement representing the specified file, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.Parse(System.String,System.Text.Encoding)">
            <summary>
            Parses the specified source file on disk and returns the LanguageElement that represents it.
            </summary>
            <param name="fileName">The name of the file on disk to parse.</param>
            <param name="encoding"> The code page of the file on disk to parse.</param>
            <returns>Returns the LanguageElement representing the specified file, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseDocument(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Parses the specified text document.
            </summary>
            <param name="document">The text document to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseString(System.String,System.String)">
            <summary>
            Parses the specified string and returns the LanguageElement that represents it.
            </summary>
            <param name="code">The code to parse.</param>
            <param name="languageID">The language of the code.</param>
            <returns>Returns the LanguageElement representing the specified code, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseExpression(System.String)">
            <summary>
            Parses an expression from the given string.
            </summary>
            <param name="expression">The string to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseExpression(System.String,System.Int32,System.Int32)">
            <summary>
            Parses an expression from the given string.
            </summary>
            <param name="expression">The string to parse.</param>
            <param name="startLine">The line where this expression text starts. Ensures LanguageElement Ranges are correct.</param>
            <param name="startColumn">The column offset where this expression text starts. Ensures LanguageElement Ranges are correct.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseExpression(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Parses an expression from the given string.
            </summary>
            <param name="expression">The string to parse.</param>
            <param name="startLine">The line where this expression text starts. Ensures LanguageElement Ranges are correct.</param>
            <param name="startColumn">The column offset where this expression text starts. Ensures LanguageElement Ranges are correct.</param>
            <param name="languageID">The language to use.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ParseTypeReferenceExpression(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Parses an expression from the given string.
            </summary>
            <param name="expression">The string to parse.</param>
            <param name="startLine">The line where this expression text starts. Ensures LanguageElement Ranges are correct.</param>
            <param name="startColumn">The column offset where this expression text starts. Ensures LanguageElement Ranges are correct.</param>
            <param name="languageID">The language to use.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.RemoveKeywordEscapeCharactersFromIdentifier(System.String@)">
            <summary>
            Removes keyword escape characters (like @ in C#) from identifier for active language extension.
            </summary>
            <param name="identifier">The identifier to process.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.RemoveKeywordEscapeCharactersFromIdentifier(System.String@,System.String)">
            <summary>
            Removes keyword escape characters (like @ in C#) from identifier for the given language extension.
            </summary>
            <param name="identifier">The identifier to process.</param>
            <param name="languageID">The language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.RemoveKeywordEscapeCharactersFromIdentifier(System.String@,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Removes keyword escape characters (like @ in C#) from identifier for the given language extension.
            </summary>
            <param name="identifier">The identifier to process.</param>
            <param name="extension">The language extension.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateExpressionCode(DevExpress.CodeRush.StructuralParser.Expression,System.String)">
            <summary>
            Generates code for the given expression in the specified language.
            </summary>
            <param name="expression">The expression to generate.</param>
            <param name="languageID">The language to generate code in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateExpressionCode(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Generates code for the given expression in the active language.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateXmlCode(DevExpress.CodeRush.StructuralParser.XmlDocComment,System.String)">
            <summary>
            Generates code for the given XmlDocComment in the specified language.
            </summary>
            <param name="xmlComment">The XmlDocComment to generate.</param>
            <param name="languageID">The language to generate code in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateXmlCode(DevExpress.CodeRush.StructuralParser.XmlDocComment)">
            <summary>
            Generates code for the given XmlDocComment in the active language.
            </summary>
            <param name="xmlComment">The XmlDocComment to generate.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for the given LanguageElement in the active language.
            </summary>
            <param name="element">The LanguageElement to generate.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Generates code for the given LanguageElement in the specified language.
            </summary>
            <param name="element">The LanguageElement to generate.</param>
            <param name="languageID">The language to generate code in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Generates code for the given LanguageElement in the specified language.
            </summary>
            <param name="element">The LanguageElement to generate.</param>
            <param name="language">The language to generate code in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IntroduceComments(DevExpress.CodeRush.StructuralParser.ParserContext)">
            <summary>
            Adds collected Comments to the SourceFile, both held in the specified ParserContext.
            </summary>
            <param name="parserContext">The ParserContext holding valid Document.Parser, SourceFile, and Comments properties.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IntroduceComments(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.CommentCollection)">
            <summary>
            Adds comments in the given comment collection to the specified language element node.
            </summary>
            <param name="context">The element to receive comments.</param>
            <param name="comments">The comments to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IntroduceComments(DevExpress.CodeRush.StructuralParser.ParserBase,DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.CommentCollection)">
            <summary>
            Adds comments in the given comment collection to the specified language element node.
            </summary>
            <param name="parser">The ParserBase descendant associated with the collected comments.</param>
            <param name="context">The element to receive comments.</param>
            <param name="comments">The comments to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsCaseSensitiveLanguage(System.String)">
            <summary>
            Returns true if the language is case-sensitive.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsLanguageCaseSensitive(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given node's language is case sensitive.
            </summary>
            <param name="node">The node to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTokens(System.String)">
            <summary>
            Get a collection of tokens from the given text.
            </summary>
            <param name="text">The text to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTokens(System.String,System.String)">
            <summary>
            Get a collection of tokens from the given text.
            </summary>
            <param name="text">The text to use.</param>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTokens(System.String,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Get a collection of tokens from the given text.
            </summary>
            <param name="text">The text to use.</param>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTokenCategory(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Returns token category string.
            </summary>
            <param name="token">The token to get category for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTokenCategory(DevExpress.CodeRush.StructuralParser.Token,System.String)">
            <summary>
            Returns token category string.
            </summary>
            <param name="token">The token to get category for.</param>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTokenCategory(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns token category string.
            </summary>
            <param name="token">The token to get category for.</param>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetSupportedFileExtensions(System.String)">
            <summary>
            Gets supported file extensions for the specified language.
            </summary>
            <param name="languageID">The language id.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetProjectLanguageID(EnvDTE.Project)">
            <summary>
            Returns languageID for the given project.
            </summary>
            <param name="project">The project to get language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetProjectLoader(EnvDTE.Project)">
            <summary>
            Returns project loader for the given project.
            </summary>
            <param name="project">The project to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetProjectLoader(System.String)">
            <summary>
            Returns project loader for the given language.
            </summary>
            <param name="languageID">The languageID to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetProjectLoader(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns project loader for the given language extension.
            </summary>
            <param name="extension">The language extension to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.LoadProject(EnvDTE.Project)">
            <summary>
            Loads ProjectElement from the given EnvDTE.Project.
            </summary>
            <param name="project">The project to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetComment(System.String)">
            <summary> 
            Gets a single-line comment for the specified text in the active language. 
            </summary> 
            <param name="text">The text to comment.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetComment(System.String,System.String)">
            <summary> 
            Gets a single-line comment for the specified text in the specified language. 
            </summary> 
            <param name="text">The text to comment.</param> 
            <param name="languageID">The ID of the language to get the comment for.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsCSharpLanguage(System.String)">
            <summary>
            Returns true if specified language is CSharp.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsCssLanguage(System.String)">
            <summary>
            Returns true if specified language is CSS.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsBasicLanguage(System.String)">
            <summary>
            Returns true if specified language is Basic.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsJavaScriptLanguage(System.String)">
            <summary>
            Returns true if specified language is JavaScript.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsCPlusPlusLanguage(System.String)">
            <summary>
            Returns true if specified language is C/C++.
            </summary>
            <param name="languageID">The ID of the language.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsHTML_XMLLanguage(System.String)">
            <summary>
            Returns true if specified language is HTML/XML.
            </summary>
            <param name="languageID">The ID of the language.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsXMLLanguage(System.String)">
            <summary>
            Returns true if specified language is XML.
            </summary>
            <param name="languageID">The ID of the language.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsXAMLLanguage(System.String)">
            <summary>
            Returns true if specified language is XAML.
            </summary>
            <param name="languageID">The ID of the language.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsHtmlLanguage(System.String)">
            <summary>
            Returns true if specified language is HTML.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsHtmlOrXmlLanguage(System.String)">
            <summary>
            Returns true if specified language is HTML/XML.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsPlainTextLanguage(System.String)">
            <summary>
            Returns true if specified language is plain text.
            </summary>
            <param name="languageID">The ID of the language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsVisualJSharpLanguage(System.String)">
            <summary>
            Returns true if specified language is Visual JSharp.
            </summary>
            <param name="languageID">The ID of the language.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeAccessOperator(System.String)">
            <summary>
            Returns the character that allow access to the nested elements of type.
            </summary>
            <param name="languageID">The target language</param>
            <returns>Returns the character that allow access to the nested elements of type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetTypeAccessOperator(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns the character that allow access to the nested elements of type.
            </summary>
            <param name="extension">The target language</param>
            <returns>Returns the character that allow access to the nested elements of type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetLanguageID(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets languageID for the given element.
            </summary>
            <param name="element">The element to get languageID.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.GetFileLanguageID(DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Gets languageID for the given element.
            </summary>
            <param name="element">The element to get languageID.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.EnableLanguage(System.String)">
            <summary>
            Enables parsing for language extension.
            </summary>
            <param name="languageId">Language ID of language extension ("CSharp", "C/C++" etc.).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.DisableLanguage(System.String)">
            <summary>
            Disables parsing for language extension.
            </summary>
            <param name="languageId">Language ID of language extension ("CSharp", "C/C++" etc.).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.EnableAllLanguages">
            <summary>
            Enables parsing for all language extension.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.IsLanguageDisabled(System.String)">
            <summary>
            Checks if parsing is disabled for language extension.
            </summary>
            <param name="languageId">Language ID of language extension ("CSharp", "C/C++" etc.).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.DevExpress#CodeRush#StructuralParser#ILanguageService#RegisterParsers(DevExpress.CodeRush.StructuralParser.ParserBase[])">
            <summary>
            Registers given parsers.
            </summary>
            <param name="parsers">The parsers to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.ImplementInteface(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.StructuralParser.Interface)">
            <summary>
            Implements interface for the given type.
            </summary>
            <param name="type">The type to implement interface</param>
            <param name="newInterface">The interface to implement</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPrototypesAndImplementions">
            <summary>
            Returns true if the given language supports prototypes and implementations.
            (E.g. C++ does support prototypes)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPrototypesAndImplementions(System.String)">
            <summary>
            Returns true if the given language supports prototypes and implementations.
            (E.g. C++ does support prototypes)
            </summary>
            <param name="language">The language to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPrototypesAndImplementions(DevExpress.CodeRush.Core.LanguageExtensionBase)">
            <summary>
            Returns true if the given language supports prototypes and implementations.
            (E.g. C++ does support prototypes)
            </summary>
            <param name="language">The language extension to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageServices.SupportsPopulatingAnArrayWithInitialValues(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the language of given element supports populating an Array with Initial Values.
            (E.g. Visual Basic 10 does support populating)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.Extensions">
            <summary>
            Returns an array of known language extensions. Language extensions are used internally by 
            the DXCore to manage language-specific data and services. NOTE: the first access of this property
            can be expensive because it will demand-load all language plug-ins.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.StatementTerminator">
            <summary>
            Gets the statement terminator for the active language. For example, in C#, statements are terminated with a semi-colon.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.Active">
            <summary>
            Returns the Language ID of the active source file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.ActiveExtension">
            <summary>
            Returns the active CodeRush LanguageExtension or null if no language extension is available 
            for the active programming language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.ActiveParser">
            <summary>
            Returns the active language parser, or null if no parser is available for the 
            active programming language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsCaseSensitive">
            <summary>
            Returns true if the active file contains a case-sensitive language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsCSharp">
            <summary>
            Returns true if the active file contains CSharp source code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsBasic">
            <summary>
            Returns true if the active file contains Basic source code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsJavaScript">
            <summary>
            Returns true if the active file contains JavaScript source code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsCPlusPlus">
            <summary>
            Returns true if the active file contains C/C++ source code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsCSS">
            <summary>
            Returns true if the active is CSS.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsNativeCPlusPlus">
            <summary>
            Returns true if the active file is inside native C++ project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsHTML_XML">
            <summary>
            Returns true if the active file has HTML/XML language id.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsXML">
            <summary>
            Returns true if the active file has XML language id.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsXAML">
            <summary>
            Returns true if the active file has XAML language id.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsHtml">
            <summary>
            Returns true if the active file has HTML language id.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsHtmlOrXml">
            <summary>
            Returns true if the active file has HTML/XML language id or HTML language id.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsRazorView">
            <summary>
            Returns true if the active file is MVC Razor View.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsPlainText">
            <summary>
            Returns true if the active file contains plain text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.IsVisualJSharp">
            <summary>
            Returns true if Visual JSharp is the language used in the active file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.AllKnownLanguages">
            <summary>
            Returns a list of all known languages opened in the IDE.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.ClassInstanceKeyword">
            <summary>
            Returns the keyword for accessing the current instance of the class in a method (e.g. "this" for C#). 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.MemberAccessOperator">
            <summary>
            Returns the member access operator (e.g., "." in C# and VB) for the active language. Returns an empty string if the active language does not support a member access operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.LineContinuationCharacter">
            <summary>
            Returns line continuation character for the active language (e.g., "_" in VB).
            Returns an empty string if the active language does not support line continuation character.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.PointerAccessOperator">
            <summary>
            Returns the character that allow access via pointer to members of a struct, class or interface.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.TypeAccessOperator">
            <summary>
            Returns the character that allow access to the nested elements of type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.SupportedFileExtensions">
            <summary>
            Gets supported file extensions for the active language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.SupportsTernaryExpressions">
            <summary>
            Determines whether or not the active language supports ternary expressions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.SupportsWithStatement">
            <summary>
            Determines whether or not the active language supports with statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.SupportsConstantDeclarations">
            <summary>
            Determines whether or not the active language supports constant declarations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.SupportsCLRSettings">
            <summary>
            Determines whether or not the active language supports CLR settings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageServices.DisabledLanguages">
            <summary>
            Returns language ID's of all language extensions disabled from parsing
            </summary>    
        </member>
        <member name="F:DevExpress.CodeRush.Core.LineInfo.LineNumber">
            <summary>
            The line number of this line.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.LineInfo.LineLength">
            <summary>
            The length, in characters of the line.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.LineInfo.Visible">
            <summary>
            True if this line is visible; False if it is inside of a collapsed hidden region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LineInfoCollection.Contains(System.Int32)">
            <summary>
            Determines whether or not this LineInfoCollection contains the specified line number.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LineInfoCollection.LineIsVisible(System.Int32)">
            <summary>
            Determines if the specified line is visible.
            </summary>
            <param name="lineNumber">The line to check.</param>
            <returns>Returns true if the specified line is visible, false otherwise.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LineInfoCollection.Item(System.Int32)">
            <summary>
            Returns line information for the line number represented by aLineNumber. 
            Note that the line number should be one-based and that only lines currently
            displayed in the editor are available. If the line number does not meet these
            criteria, null is returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LineTextRenderer.Render(System.Drawing.Graphics)">
            <summary>
            Renders the text. Returns true is rendering took place.
            </summary>
            <param name="aGraphics">
            The Graphics object on which the line should be rendered.
            </param>
        </member>
        <member name="F:DevExpress.CodeRush.Core.LinkedIdentifierFindOptions.IncludeIntersecting">
            <summary>
            If specifed, the search will also return linked identifiers that intersect with the
            given range in addition to linked identifiers that are entirely contained within the
            given range.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.LinkedIdentifierListOptions.AllowsOne">
            <summary>
            If specified, the list can exist with only one linked identifier in it. Normally, if
            a list contains only one linked identifier, it will be destroyed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.Disable">
            <summary>
            Disables this ILinkedIdentifierInfo.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.Enable">
            <summary>
            Enables this ILinkedIdentifierInfo.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.Range">
            <summary>
            Gets the range of this <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierInfo">ILinkedIdentifierInfo</see>.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.Text">
            <summary>
            Gets or sets the Text of this <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierInfo">ILinkedIdentifierInfo</see>. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.CanPropagate">
            <summary>
            Defines if this <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierInfo">ILinkedIdentifierInfo</see> 
            can propagate its changes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.PropagationGroup">
            <summary>
            Gets the name of group where current link can propagate its changes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierInfo.IsEnabled">
            <summary>
            Defines if active link is enabled or not.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifier.Invalidate">
            <summary>
            Refreshes the state of this <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifier</see>. 
            This may be needed after creating any new 
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> to ensure that they are 
            properly highlighted.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifier.List">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> that this
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifier</see> belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifier.TextDocument">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> that this
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifier</see> is
            associated with.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifier.IsNavField">
            <summary>
            Defines if current link is used only for navigation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifier.Affix">
            <summary>
            Defines prefix or suffix text to insert on commit.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.LinkedIdentifierAffix">
            <summary>
            Linked identifier affix class is used to insert prefix or suffix text for
            linked identifier on first commit.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierAffix.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of the LinkedIdentifierAffix class.
            </summary>
            <param name="prefix">Prefix text.</param>
            <param name="suffix">Suffix text.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierAffix.Prefix">
            <summary>
            Gets or sets prefix text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierAffix.PrefixOffset">
            <summary>
            Gets prefix offset
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierAffix.Suffix">
            <summary>
            Gets or sets suffix text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierAffix.SuffixOffset">
            <summary>
            Gets suffix offset
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.Find(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.LinkedIdentifierFindOptions)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            from the specified <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> using the 
            given range and options.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> to search.</param>
            <param name="range">The range to search.</param>
            <param name="options">The options to use in the search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.Find(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see>
            for the specified <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> entirely 
            contained inside the given range.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> to search.</param>
            <param name="range">The range to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.GetStorage(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Returns the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see> 
            instance for the specified <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see>.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> from which
            to return an <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.Invalidate(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Refreshes the state of all <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            in the given <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see>. This may be needed after
            creating any new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> to ensure 
            that they are properly highlighted.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.LockDelete">
            <summary>
            Call this to keep linked identifiers from being deleted while making text changes. Generally,
            this will not be needed. When finished, call <see cref="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.UnlockDelete">UnlockDelete</see>.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.UnlockDelete">
            <summary>
            Call this after <see cref="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.LockDelete">LockDelete</see> is to allow linked identifiers to be deleted again.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.BeginLidChangeRollback">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.EndLidChangeRollback">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.BeginChanges">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.EndChanges">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.SetOriginalText(System.String)">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.CancelSelectionRestoring">
            <summary>
            This method is testing only.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.UpdateShortcutHints(System.Boolean)">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.Active">
            <summary>
            Returns true if there are any linked identifiers that are currently active (being edited).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.ActiveStorage">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see> 
            instance for the active <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see>.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.ActiveLink">
            <summary>
            The linked identifier that are currently active (being edited).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.DeleteLocked">
            <summary>
            Determines whether or not linked identifiers will be deleted when making text changes.
            </summary>
            <seealso cref="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.LockDelete"/>
            <seealso cref="M:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.UnlockDelete"/>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.RollingBackLidChanges">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.Changing">
            <summary>
            Defines if text in the links is changing now.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierEngine.IntellisenseWasPropogated">
            <summary>
            This method is testing only.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Add(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and adds a new ILinkedIdentifier to this list with the given range.
            </summary>
            <param name="range">The range of the new ILinkedIdentifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Add(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String)">
            <summary>
            Creates and adds a new ILinkedIdentifier to this list with the given range. In 
            addition, the names of two StringProviders can be specified which will force the 
            linked identifier to format itself properly when it is changed.
            </summary>
            <param name="range">The range of the new ILinkedIdentifier.</param>
            <param name="formatIn">The name of a StringProvider that will be used to format 
            the text of the ILinkedIdentifier when it is changed.</param>
            <param name="formatOut">The name of a StringProvider that will be used to format 
            the text of other ILinkedIdentifiers in the list when this ILinkedIdentifier is changed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Add(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Creates and adds a new ILinkedIdentifier to this list with the given range and
            optionally allows the link to be removed on undo.
            </summary>
            <param name="range">The range of the new ILinkedIdentifier.</param>
            <param name="undoable">If true, an undo operation is added to the undo stack that
            will remove the linked identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Clear">
            <summary>
            Clears the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> in this list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.GetLinksAtPoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            from the current <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> 
            using the given point.
            </summary>
            <param name="point">The point to search.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Find(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.LinkedIdentifierFindOptions)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            from the current <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> 
            using the given range and options.
            </summary>
            <param name="range">The range to search.</param>
            <param name="options">The options to use in the search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Find(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see>
            from the current <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> 
            entirely contained inside the given range.
            </summary>
            <param name="range">The range to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Invalidate">
            <summary>
            Refreshes the state of all <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            in the current <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see>. This may be needed after
            creating any new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> to ensure 
            that they are properly highlighted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierList.Remove(DevExpress.CodeRush.Core.ILinkedIdentifier)">
            <summary>
            Removes the specified <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifier</see>
            from this list.
            </summary>
            <param name="value">The <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifier</see>
            to remove.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.AllowsOne">
            <summary>
            Determines whether or not the LinkedIdentifierListOptions.AllowsOne option is set. 
            If true, the list can exist with only one linked identifier in it. If a list 
            contains only one linked identifier and this AllowsOne property is false, 
            the list will be destroyed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.Count">
            <summary>
            Gets the number of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> in 
            the current <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see>.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.Hint">
            <summary>
            Reference to a LIDHint descendant that will enhance the LID user experience.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.ID">
            <summary>
            Gets or sets the id assigned to this list. This should be a unique string in its associated 
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.MultiDocumentContainer">
            <summary>
            Returns multi document linked identifier container.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.Options">
            <summary>
            Gets or sets the options for this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.Storage">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>
            associated with this list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierList.TextDocument">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> that this
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> is
            associated with.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.Find(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.LinkedIdentifierFindOptions)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            using the given range and options.
            </summary>
            <param name="range">The range to search.</param>
            <param name="options">The options to use in the search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.Find(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            entirely contained inside the given range.
            </summary>
            <param name="range">The range to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.Invalidate">
            <summary>
            Refreshes the state of all <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            in the current <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>. 
            This may be needed after creating any new 
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> to ensure that they are 
            properly highlighted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.NewList(System.String,DevExpress.CodeRush.Core.LinkedIdentifierListOptions)">
            <summary>
            Creates a new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see>
            with the given id and options.
            </summary>
            <param name="id">The id to assign to the new list.</param>
            <param name="options">The options to create the list with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.NewList(System.String)">
            <summary>
            Creates a new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see>
            with the given id.
            </summary>
            <param name="id">The id to assign to the new list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.NewList(DevExpress.CodeRush.Core.LinkedIdentifierListOptions)">
            <summary>
            Creates a new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see>
            with the given options. A unique ID will be generated for the new list.
            </summary>
            <param name="options">The options to create the list with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.NewList">
            <summary>
            Creates a new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see>.
            A unique ID will be generated for the new list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.TextDocument">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> that this
            <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see> is
            associated with.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> by index
            from this <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ILinkedIdentifierStorage.Item(System.String)">
            <summary>
            Returns an <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierList">ILinkedIdentifierList</see> by ID
            from this <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.Add(DevExpress.CodeRush.StructuralParser.FileSourceRange)">
            <summary>
            Adds the specified file range into the container.
            </summary>
            <param name="range">The range to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.Add(DevExpress.CodeRush.StructuralParser.FileSourceRange,DevExpress.CodeRush.Core.LinkType,DevExpress.CodeRush.Core.Propagation)">
            <summary>
            Adds new link into the container.
            </summary>
            <param name="range">The range to add</param>
            <param name="type">Defines the type of ILinkedIdentifier</param>
            <param name="propagation">Defines the way which current ILinkedIdentifier will proparate its changes to other links</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.Add(DevExpress.CodeRush.StructuralParser.FileSourceRange,DevExpress.CodeRush.Core.LinkType,DevExpress.CodeRush.Core.Propagation,System.String)">
            <summary>
            Adds new link into the container.
            </summary>
            <param name="range">The range to add</param>
            <param name="type">Defines the type of ILinkedIdentifier</param>
            <param name="propagation">Defines the way which current ILinkedIdentifier will proparate its changes to other links</param>		
            <param name="propagationGroup">Defines the group name where current ILinkedIdentifier will be proparated</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.Add(DevExpress.CodeRush.StructuralParser.FileSourceRange,DevExpress.CodeRush.Core.LinkType,DevExpress.CodeRush.Core.Propagation,System.String,System.Boolean)">
            <summary>
            Adds new link into the container.
            </summary>
            <param name="range">The range to add</param>
            <param name="type">Defines the type of ILinkedIdentifier</param>
            <param name="propagation">Defines the way which current ILinkedIdentifier will proparate its changes to other links</param>		
            <param name="propagationGroup">Defines the group name where current ILinkedIdentifier will be proparated</param>
            <param name="undoable">If true, an undo operation is added to the undo stack that will remove the linked identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.AddNavField(DevExpress.CodeRush.StructuralParser.FileSourceRange,DevExpress.CodeRush.Core.LinkType)">
            <summary>
            Adds new navigation field into the container.
            </summary>
            <param name="range">The range to add</param>
            <param name="type">Defines the type of ILinkedIdentifier</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.AddRange(DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection)">
            <summary>
            Adds the specified collection of ranges into the container.
            </summary>
            <param name="collection">The ranges to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.AddRange(DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection,DevExpress.CodeRush.Core.LinkType,DevExpress.CodeRush.Core.Propagation)">
            <summary>
            Adds the specified collection of ranges into the container.
            </summary>
            <param name="collection">The ranges to add.</param>
            <param name="type">Defines the type of ILinkedIdentifiers</param>
            <param name="propagation">Defines the way which ILinkedIdentifiers will proparate its changes to other links</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.AddNavFields(DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection,DevExpress.CodeRush.Core.LinkType)">
            <summary>
            Adds the specified collection of ranges as navigation fields into the container.
            </summary>
            <param name="collection">The ranges to add.</param>
            <param name="type">Defines the type of ILinkedIdentifiers</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.GetPreviousList(DevExpress.CodeRush.Core.ILinkedIdentifierList)">
            <summary>
            Returns previous ILinkedIdentifierList.
            </summary>
            <param name="list">The current ILinkedIdentifierList to get previous</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.GetNextList(DevExpress.CodeRush.Core.ILinkedIdentifierList)">
            <summary>
            Returns next ILinkedIdentifierList.
            </summary>
            <param name="list">The current ILinkedIdentifierList to get next</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.GetLinksInGroup(System.String)">
            <summary>
            Returns linked identifiers from the specified propagation group.
            </summary>
            <param name="propagationGroup">The propagation group to search</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.BreakAllLinks">
            <summary>
            Breaks all linked identifiers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.BreakLink(DevExpress.CodeRush.Core.ILinkedIdentifier,System.Int32)">
            <summary>
            Breaks current linked identifier.
            </summary>
            <param name="link">The link to break</param>
            <param name="linkIndex">The link index in the list</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.EnableLink(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Enables the link from specified location.
            </summary>
            <param name="filePath">The file path to check</param>
            <param name="range">The range to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.DisableLink(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Disables the link from specified location.
            </summary>
            <param name="filePath">The file path to check</param>
            <param name="range">The range to check</param>
        </member>
        <member name="E:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierContainter.ContainterCommit">
            <summary>
            Fired when multi document linked identifier container is committed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierEngine.NewContainer">
            <summary>
            Creates new multi document linked identifier container.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierEngine.OpenMultiLidContainerGroup">
            <summary>
            Opens new IMultiLidContainerGroup.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierEngine.CloseMultiLidContainerGroup">
            <summary>
            Closes IMultiLidContainerGroup opened by OpenMultiLidContainerGroup method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierEngine.FindLinkRanges(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierInfo">ILinkedIdentifiers</see> 
            from the specified file using the given range.
            </summary>
            <param name="filePath">The file to search.</param>
            <param name="range">The range to search.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierEngine.BreakAllLinksInRange(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Breaks all linked identifiers located in the specified range.
            </summary>
            <param name="filePath">The file to search.</param>
            <param name="range">The range to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiDocumentLinkedIdentifierEngine.BreakAllLinksInRange(System.String,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.LinkedIdentifierFindOptions)">
            <summary>
            Breaks all linked identifiers located in the specified range.
            </summary>
            <param name="filePath">The file to search.</param>
            <param name="range">The range to search.</param>
            <param name="options">The options to use in the search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMultiLidContainerGroup.Close">
            <summary>
            Closes this group.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMultiLidContainerGroup.Containers">
            <summary>
            Gets all containers stored inside this group.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.LidHint">
            <summary>
            Ancestor class providing default implementations for methods that 
            descendants can override. The LidHint descendant enhances the LID
            experience, optionally controlling color of the LID. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.Find(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.LinkedIdentifierFindOptions)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            from the specified <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> using the 
            given range and options.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> to search.</param>
            <param name="range">The range to search.</param>
            <param name="options">The options to use in the search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.Find(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see>
            for the specified <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> entirely 
            contained inside the given range.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> to search.</param>
            <param name="range">The range to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.GetStorage(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Returns the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see> 
            instance for the specified <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see>.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> from which
            to return an <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see>.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.Invalidate(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Refreshes the state of all <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> 
            in the given <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see>. This may be needed after
            creating any new <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifier">ILinkedIdentifiers</see> to ensure 
            that they are properly highlighted.
            </summary>
            <param name="textDoc">The <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see> to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.LockDelete">
            <summary>
            Call this to keep linked identifiers from being deleted while making text changes. Generally,
            this will not be needed. When finished, call <see cref="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.UnlockDelete">UnlockDelete</see>.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.UnlockDelete">
            <summary>
            Call this after <see cref="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.LockDelete">LockDelete</see> is to allow linked identifiers to be deleted again.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.BeginLidChangeRollback">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.EndLidChangeRollback">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.BeginChanges">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.EndChanges">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.SetOriginalText(System.String)">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.DevExpress#CodeRush#Core#IMultiDocumentLinkedIdentifierEngine#NewContainer">
            <summary>
            Creates and returns new multi document linked identifier container.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.NewMultiDocumentContainer">
            <summary>
            Creates and returns new multi document linked identifier container.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.OpenMultiLidContainerGroup">
            <summary>
            Opens new IMultiLidContainerGroup.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.CloseMultiLidContainerGroup">
            <summary>
            Closes IMultiLidContainerGroup opened by OpenMultiLidContainerGroup method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.CancelSelectionRestoring">
            <summary>
            This method is testing only.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.UpdateShortcutHints(System.Boolean)">
            <summary>
            This method is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.Active">
            <summary>
            Returns true if there are any linked identifiers that are currently active (being edited).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.ActiveStorage">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierStorage">ILinkedIdentifierStorage</see> 
            instance for the active <see cref="T:DevExpress.CodeRush.Core.TextDocument">TextDocument</see>.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.ActiveLink">
            <summary>
            Gets the <see cref="T:DevExpress.CodeRush.Core.ILinkedIdentifierInfo">ILinkedIdentifierInfo</see> 
            for the linked identifier that are currently active (being edited).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.DeleteLocked">
            <summary>
            Determines whether or not linked identifiers will be deleted when making text changes.
            </summary>
            <seealso cref="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.LockDelete"/>
            <seealso cref="M:DevExpress.CodeRush.Core.LinkedIdentifierServices.UnlockDelete"/>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.RollingBackLidChanges">
            <summary>
            This property is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.Changing">
            <summary>
            Defines if text in the links is changing now.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LinkedIdentifierServices.IntellisenseWasPropogated">
            <summary>
            This method is testing only.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.LoadOnDemandType">
            <summary>
            Summary description for LoadOnDemandType.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LoadOnDemandType.#ctor(System.Type)">
            <summary>
            Creates a new instance of LoadOnDemandType
            </summary>
            <param name="type">The real type associated with this load-on-demand type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LoadOnDemandType.#ctor">
            <summary>
            Creates a new instance of LoadOnDemandType
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LoadOnDemandType.RealType">
            <summary>
            Returns the real System.Type wrapped in this instance, triggering demand if necessary.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.GetLocationNearPoint(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary> 
            Gets the best location to display a form (represented by formRect), given a container rectangle and a suggested targetPoint. 
            </summary> 
            <param name="formRect">The rectangle of the form.</param> 
            <param name="containerRect">The container rectangle to hold the form.</param> 
            <param name="targetPoint">The suggested point where the form should be positioned close to.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.GetLocationNearRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary> 
            Gets the best location to display a form (represented by formRect), given a container rectangle and a rectangle that must be visible. 
            </summary> 
            <param name="formRect">The rectangle of the form.</param> 
            <param name="containerRect">The container rectangle to hold the form.</param> 
            <param name="targetRect">The rectangle which should not be covered</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.PositionFormNearCaret(System.Windows.Forms.Form)">
            <summary>
            Locates custom form near caret.
            </summary>
            <param name="form">The form to locate</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.PositionFormInVSCorner(System.Windows.Forms.Form)">
            <summary>
            Locates custom form in the corner of Visual Studio
            </summary>
            <param name="form">The form to locate</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.GetPositionInVSCorner(System.Drawing.Rectangle)">
            <summary>
            Locates custom form in the corner of Visual Studio
            </summary>
            <param name="bounds">The bounds to locate</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.PositionFormInViewCorner(DevExpress.CodeRush.Core.TextView,System.Windows.Forms.Form)">
            <summary>
            Locates custom form in the corner of TextView
            </summary>
            <param name="view">The view where custom form should be placed</param>
            <param name="form">The form to locate</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.PositionFormInViewCorner(System.Windows.Forms.Form)">
            <summary>
            Locates custom form in the corner of TextView
            </summary>
            <param name="form">The form to locate</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.PositionForm(System.Windows.Forms.Form)">
            <summary>
            Locates custom form near caret or in center of VS.
            </summary>
            <param name="form">The form to locate</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.MoveToBestPosition(System.Windows.Forms.Form,DevExpress.CodeRush.Core.TextView,DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.Core.PreviewPosition)">
            <summary>
            locates custom control near element.
            </summary>
            <param name="form">The Control to locate</param>
            <param name="view">The TextView to calculate location</param>
            <param name="element">The LanguageElement to calculate location</param>
            <param name="previewPosition">The PreviewPosition which describes rules for location</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LocationHelper.MoveToBestPosition(System.Windows.Forms.Form,DevExpress.CodeRush.Core.TextView,System.Int32,DevExpress.CodeRush.Core.PreviewPosition)">
            <summary>
            locates custom control near line
            </summary>
            <param name="form">The Control to locate</param>
            <param name="view">The TextView to calculate location</param>
            <param name="lineNumber">The line number to calculate location</param>
            <param name="previewPosition">The PreviewPosition which describes rules for location</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LocationServices.Current">
            <summary>
            Returns the current SourceLocation in the editor.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Margins.MarginSet">
            <summary>
            Margin set contains lists of margins.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Margins.MarginSet.#ctor">
            <summary>
            Creates new instance of the margin set.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Margins.MarginSet.Add(DevExpress.DXCore.Margins.IComplexMarginPart)">
            <summary>
            Adds new margin to the set.
            </summary>
            <param name="margin">The margin to add.</param>
        </member>
        <member name="M:DevExpress.DXCore.Margins.MarginSet.Remove(DevExpress.DXCore.Margins.IComplexMarginPart)">
            <summary>
            Removes margin from the set.
            </summary>
            <param name="margin">The margin to remove.</param>
        </member>
        <member name="M:DevExpress.DXCore.Margins.MarginSet.Remove(System.String)">
            <summary>
            Removes margin from the set.
            </summary>
            <param name="name">The margin name to remove.</param>
        </member>
        <member name="M:DevExpress.DXCore.Margins.MarginSet.Contains(DevExpress.DXCore.Margins.IComplexMarginPart)">
            <summary>
            Defines if current set contains specified margin.
            </summary>
            <param name="margin">The margin to check</param>
        </member>
        <member name="M:DevExpress.DXCore.Margins.MarginSet.Clear">
            <summary>
            Clears this set.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Margins.MarginSet.MarginNames">
            <summary>
            Gets string array with names of all margins.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Margins.MarginSet.Count">
            <summary>
            Gets count of all margins.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Margins.MarginSet.Item(System.String)">
            <summary>
            Gets the margin by the given name.
            </summary>
            <param name="name">The name of margin to get.</param>
            <returns>IComplexMarginPart implementor with the given name.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.Column">
            <summary>
            The column offset that this marker was dropped at.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.FileName">
            <summary>
            Returns the file name of the document that this marker was dropped in.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.Hidden">
            <summary>
            Gets or sets whether this marker is displayed in the editor. By default, markers are visible.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.LifeRemaining">
            <summary>
            Returns the percentage of life remaining for a marker that is temporal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.Line">
            <summary>
            Gets the line number that this marker was dropped at.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.Offset">
            <summary>
            Gets the character offset that this marker was dropped at.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.SecondsRemaining">
            <summary>
            The number of seconds of life remaining for a temporal marker. When this time 
            drops to zero, the marker is removed from the stack.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.Style">
            <summary>
            The style of this marker. One of Standard, Transient, or System. Standard 
            markers stay until they are picked up by the user. Transient markers stay 
            on the stack until they are picked up or the line they reside on is edited 
            by the user. System markers are like Transient markers, and are dropped 
            automatically by DXCore plug-ins that offer navigation services.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.Temporal">
            <summary>
            Determines whether this marker is removed after its life span expires. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.TextDocument">
            <summary>
            Gets the TextDocument that this marker was dropped in. NOTE: This may be null
            if the TextDocument is not open.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarker.VirtualSpaces">
            <summary>
            Gets the number of virtual spaces from the character offset that this marker was dropped at.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection anchor.</param>
            <param name="anchorColumn">The column offset of the selection anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.AddBookmark(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32)">
            <summary>
            Add a bookmark in the specified document at the given line and column.
            </summary>		
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.ToggleBookmark(System.String,DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32)">
            <summary>
            Toggle a bookmark in the specified index name.
            </summary>
            <param name="indexName">The index name of bookmark</param>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.GotoBookmark(System.String)">
            <summary>
            Goto a bookmark in the specified number
            </summary>
            <param name="indexName">The index name of bookmark</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.GotoNextBookmark">
            <summary>
            Goto next bookmark
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.GotoPreviousBookmark">
            <summary>
            Goto previous bookmark
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IMarkerEngine.RemoveBookmark(System.String)">
            <summary>
            Remove a bookmark in the specified index name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IMarkerEngine.Top">
            <summary>
            Returns the top marker on the marker stack.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ISelectionMarker">
            <summary>
            A marker that can store the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISelectionMarker.AnchorColumn">
            <summary>
            Gets the column offset of this marker's anchor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISelectionMarker.AnchorLine">
            <summary>
            Gets the line number of this marker's anchor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISelectionMarker.AnchorOffset">
            <summary>
            Gets the character offset of this marker's anchor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISelectionMarker.HasAnchor">
            <summary>
            Gets whether this marker has an anchor. Markers with anchors can restore ranged selections.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISelectionMarker.HasSelection">
            <summary>
            Gets whether this marker stores a selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Clear">
            <summary>
            Clears all markers and invalidates all text views of the active text document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Drops a marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Drops a marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,System.Int32)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Int32)">
            <summary>
            Drops a marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Drops a marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32,System.Boolean)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Int32)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(System.Boolean)">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop">
            <summary>
            Drops a marker in the active document at the current caret position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection anchor.</param>
            <param name="anchorColumn">The column offset of the selection anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Drops a selection marker in the specified document at the given SourcePoint.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Drops a selection marker in the specified document at the current caret position.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Drops a selection marker in the active document at the given line and column.
            </summary>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection's anchor.</param>
            <param name="anchorColumn">The column offset of the selection's anchor. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Drops a selection marker in the active document at the given SourcePoint.
            </summary>
            <param name="point">The SourcePoint to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorPoint">This SourcePoint marks the anchor of the selection. This value can be inside virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.MarkerStyle,System.Int32)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.MarkerStyle,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.MarkerStyle)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="style">The MarkerStyle of the marker to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32,System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Int32)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(System.Boolean)">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
            <param name="hidden">If true, the marker will not be painted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection">
            <summary>
            Drops a selection marker in the active document at the current caret position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Collect">
            <summary>
            Moves the editor cursor to the topmost marker on the stack, and removes that marker from the stack.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.Drop(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MarkerServices.DropSelection(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.MarkerStyle,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Drops a selection marker in the specified document at the given line and column.
            </summary>
            <param name="document">The TextDocument to drop the marker in.</param>
            <param name="line">The line number to drop the marker at.</param>
            <param name="column">The column offset to drop the marker at. This value can be inside virtual space.</param>
            <param name="anchorLine">The line number of the selection anchor.</param>
            <param name="anchorColumn">The column offset of the selection anchor. This value can be inside virtual space.</param>
            <param name="style">The MarkerStyle of the marker to create.</param>
            <param name="lifeSpan">The lifetime of this marker (in seconds). If the marker's lifespan
            elapses before the document is closed, it will be removed from the marker stack.</param>
            <param name="hidden">If true, the marker will not be painted.</param>
            <param name="undoable">If true, this marker drop is added to the undo stack.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MarkerServices.Count">
            <summary>
            Returns the total number of markers in this session.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MarkerServices.Top">
            <summary>
            Returns the top marker on the marker stack.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MarkerServices.TemporalMarkerLifeInSeconds">
            <summary>
            The life of a temporal marker, in seconds.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MenuServices.SetNewPlugInButtonEnabled(System.Boolean)">
            <summary>
            Sets the Enabled property of the "New Plug-in Project..." menu item.
            </summary>
            <param name="value">The value to set the Enabled property to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MenuServices.GetMenuBar(System.String)">
            <summary>
            Returns menu bar with the given name.
            </summary>
            <param name="name">The name of the menu bar to get.</param>
            <returns>Returns menu bar with the given name.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MenuServices.SetPopupMember(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Sets the LanguageElement associated with the Member popup menu.
            </summary>
            <param name="PopupMember">The LanguageElement associated with the Member popup menu.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MenuServices.GetMemberPopupMenuItems(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets a list of MenuItems appropriate for the specified LanguageElement.
            </summary>
            <param name="element">The LanguageElement to check.</param>
            <returns>Returns a MenuItemCollection populated with MenuItems 
            appropriate for the specified LanguageElement.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.DXCore">
            <summary>
            Retrieves the DXCore top-level menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.PopupMember">
            <summary>
            Gets the LanguageElement associated with the active Member popup menu. 
            The Member popup menu is a context menu which appears when a member 
            icon is clicked.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.ToolWindows">
            <summary>
            Retrieves the Tool Windows sub-menu inside the DXCore top-level menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.Support">
            <summary>
            Retrieves the Support sub-menu inside the DXCore top-level menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.DXCoreMenuName">
            <summary>
            Gets the name of the DevExpress menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.ToolWindowsMenuName">
            <summary>
            Gets the name of the DevExpress Tool Windows menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MenuServices.SupportMenuName">
            <summary>
            Gets the name of the DevExpress Support menu.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MixedNamespaceCollection.CollectNamespaces(System.String,DevExpress.CodeRush.StructuralParser.NamespaceCollection)">
            <summary>
            Collects all namespaces matching the specified namespaceName, placing matching namespaces inside namespaceCollection.
            </summary>
            <param name="namespaceName">The namespace to find. Nested namespaces should be dot-delimited (e.g., "DevExpress.CodeRush.Core").</param>
            <param name="namespaceCollection">The NamespaceCollection to hold matching namespaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MixedNamespaceCollection.GetNamespaces(System.String)">
            <summary>
            Returns a newly-created NamespaceCollection of Namespaces that match the specified namespaceName.
            </summary>
            <param name="namespaceName">The namespace to find. Nested namespaces should be dot-delimited (e.g., "DevExpress.CodeRush.Core").</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.MultiSelect.ISelectionHighlighter">
            <summary>
            Manages the highlighting of multi-selection intances.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.GetHighlightRange(DevExpress.CodeRush.Core.TextView,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns a range of code to highlight, which may be different from the actual code selected. This is done to 
            work around a cosmetic display bug in the 11.1 version of the BlockHighlighter control when highlighting 
            leading white space, and also to be more consistent with user expectations (users think of a member as starting
            and ending with code, not white space, but a cut or copy should include leading and trailing white space).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.AddSelection(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Adds the selection in the specified TextView (or the active member if there is no selection) to this MultiSelect instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.AddSelection(DevExpress.CodeRush.Core.TextView,DevExpress.CodeRush.Core.MultiSelect.PartialSelection)">
            <summary>
            Adds the specified PartialSelection to this MultiSelect instance, highlighting the selection onscreen, and clears the Visual Studio selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.Clear">
            <summary>
            Clears all selections from this MultiSelect instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.CopyToClipboard">
            <summary>
            Copies this MultiSelect instance to the clipboard.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.Delete(System.String)">
            <summary>
            Deletes all the multi-selections from the document 
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.FromClipboard">
            <summary>
            Gets the MultiSelect instance from the clipboard.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.GetSelectionAt(System.Int32)">
            <summary>
            Gets the selection at the specified index. Selections are indexed by the order in which they are added.
            </summary>
            <param name="index">The index order in which this selection was added (0 is the first added selection). </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.IsOnClipboard">
            <summary>
            Returns true if the clipboard holds a MultiSelect instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.PrepareToGenerate">
            <summary>
            Call before generating code based on this MultiSelect instance. Clears the _Generated field inside each PartialSelection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.RefreshHighlighting(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Refreshes the block highlighting on screen for the specified TextView. Call this if the multi-select highlight options change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.RemoveSelectionAt(System.Int32)">
            <summary>
            Removes the selection at the specified index. Selections are indexed by the order in which they are added.
            </summary>
            <param name="index">The index order in which this selection was added (0 is the first added selection). </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.Sort">
            <summary>
            Sorts the selections by the order in which they appear in the file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.ToString">
            <summary>
            Converts this multi-select instance into a string with single-line comments (in the active language) marking properties.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelect.ToText">
            <summary>
            Renders this MultiSelect instance as a continuous text string (all the partial selections appended together), suitable for pasting into a document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.Remove(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Removes the MultiSelect object from the specified TextView.
            </summary>
            <param name="textView">The TextView from which to remove the MultiSelect object.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.Set(DevExpress.CodeRush.Core.TextView,DevExpress.CodeRush.Core.MultiSelect.MultiSelect)">
            <summary>
            Sets the MultiSelect object for the specified TextView.
            </summary>
            <param name="textView">The TextView to work with.</param>
            <param name="multiSelect">The MultiSelect instance to assign to the TextView.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.Add(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Adds the selection in the specified TextView to this view's MultiSelect list.
            </summary>
            <param name="textView">The TextView containing the MultiSelect list to add to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.Clear(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Clears the multi-selection and removes it from the specified TextView.
            </summary>
            <param name="textView">The TextView containing the multi-selection to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.CopyToClipboard(DevExpress.CodeRush.Core.MultiSelect.MultiSelect)">
            <summary>
            Copies the specified MultiSelect object to the clipboard.
            </summary>
            <param name="multiSelect">The MultiSelect object to copy to the clipboard.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.CopyToClipboard(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Copies the MultiSelect object from the specified TextView to the clipboard.
            </summary>
            <param name="textView">The TextView containing the MultiSelect object to copy.</param>
            <returns>The MultiSelect object from the active TextView.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.CutToClipboard(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Copies the MultiSelect object from the specified TextView to the clipboard and removes all selections.
            </summary>
            <param name="textView">The TextView containing the MultiSelect object to cut.</param>
            <returns>The MultiSelect object from the active TextView.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.Get(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Gets the MultiSelect object associated with the specified TextView. Returns null if no multi-selection exists.
            </summary>
            <param name="textView">The TextView to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.RedoIsAvailable(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Returns true if a multi-select Redo operation is available for the specified TextView.
            </summary>
            <param name="textView">The TextView to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.RefreshAllHighlighting">
            <summary>
            Refreshes highlighting for all multi-select instances.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.SelectionExists(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Returns true if the specified TextView contains a MultiSelect object with at least one selection defined.
            </summary>
            <param name="textView">The TextView to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.SetHighlightColor(System.Drawing.Color)">
            <summary>
            Sets the highlight color for multi-select instances.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.SetHighlighter(DevExpress.CodeRush.Core.MultiSelect.ISelectionHighlighter)">
            <summary>
            Sets the selection highlighter to paint multi-select instances.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.UndoIsAvailable(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Returns true if a multi-select Undo operation is available for the specified TextView.
            </summary>
            <param name="textView">The TextView to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MultiSelect.MultiSelectServices.Highlighter">
            <summary>
            Gets the selection highlighter to paint multi-select instances.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.PartialSelection.AddHighlighter(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Adds a selection highlighter to the specified TextView (removing any previous highlighting associated with this selection).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.PartialSelection.RemoveHighlighter">
            <summary>
            Removes any highlighting associated with this selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.PartialSelection.ToString(DevExpress.CodeRush.StructuralParser.CommentBuilder)">
            <summary>
            Converts this PartialSelection instance into a string with single-line comments (in the active language) marking properties.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.MultiSelect.PartialSelection.ToText">
            <summary>
            Renders this PartialSelection instance as a continuous text string (all the partial selections appended together), suitable for pasting into a document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NamespaceReferenceHelper.GetAspImportedNamespaces">
            <summary>
            Returns list of the imported namespaces for the active asp project.
            </summary>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.NamespaceReferenceHelper.GetAspImportedNamespaces(DevExpress.CodeRush.StructuralParser.ProjectElement)">
            <summary>
            Returns list of the imported namespaces for specified asp project.
            </summary>
            <param name="project">The ProjectElement to get imported namespaces</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NamespaceReferenceHelper.DeclareReference(System.String)">
            <summary>
            Declares the specified reference (e.g., inside a using statement for C# or an imports statement for VB) if not already declared.
            </summary>
            <param name="namespaceName">The namespace to declare</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NamespaceReferenceHelper.DeclareReference(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Declares the specified reference (e.g., inside a using statement for C# or an imports statement for VB) if not already declared.
            </summary>
            <param name="document">The TextDocument to declare new namespace reference.</param>
            <param name="namespaceName">The namespace to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NavigationServices.#ctor">
            <summary>
            Initializes a new instance of the NavigationServices class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NavigationServices.Get(System.String)">
            <summary>
            Returns navigation provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
            <returns>NavigationProviderBase instance if found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NavigationServices.Execute(System.String)">
            <summary>
            Executes navigation provider with the given name.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NavigationServices.ExecuteIfAvailable(System.String)">
            <summary>
            Executes navigation provider with the given name if it is available.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NavigationServices.ResolveAddress(System.String)">
            <summary>
            Converts an XML-encoded source code address into a TargetPosition, 
            useful for navigating to a previously-saved location. Use the method 
            GetCurrentAddress to get an XML-encoded source code address.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.NavigationServices.GetCurrentAddress">
            <summary>
            Returns the current selection or caret position as an XML-encoded 
            source code address designed to survive significant changes to the 
            document (e.g., refactorings or edits performed outside of Visual 
            Studio). Use this method to mark a position or range, and later use 
            the ResolveAddress method to recover the position in the document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.NavigationServices.Providers">
            <summary>
            Gets all registered navigation providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.NavigationServices.AvailableProviders">
            <summary>
            Gets all available navigation providers in the active context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.NavigationServices.LastExecutedProvider">
            <summary>
            Return the last applied navigation provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPage.#ctor">
            <summary>
            Constructs the OptionsPage. Remember that OptionsPage descendent's constructors must call base.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPage.OnCommitChanges(System.Boolean@)">
            <summary>
            Return false in closeAfterCommitChanges if OptionPage must stay in active state after
            key Enter was pressed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPage.OnLanguageChange(System.String)">
            <summary>
            Triggers the LanguageChange event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPage.OnCustomInitialization(System.String)">
            <summary>
            Triggers the CustomInitialization event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPage.OnGetTechSupportText">
            <summary>
            Triggers the GetTechSupportText event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPage.LanguageID">
            <summary>
            Gets the language identifier (e.g., "C/C++", "CSharp", "Basic", etc.) currently selected in the Options 
            dialog. If the user is working in a language-neutral state, this property returns an empty string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPage.FullName">
            <summary>
            The category and page name of this options page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPage.Title">
            <summary>
            The title for your options page. The CodeRush options dialog will use the page name if this property is empty.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.MessageLogOptions.LogToDisk">
            <summary>
            Gets or sets value determining if message log is written to disk.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPageType.CreateInstance">
            <summary>
            Creates an instance of this options page.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsPageType.GetStorage">
            <summary>
            Gets a DecoupledStorage object for this options page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPageType.Category">
            <summary>
            Returns the category of this options page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPageType.PageName">
            <summary>
            Returns the page name of this options page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPageType.FullName">
            <summary>
            Returns the full name (E.g., Category\Page Name) for this options page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsPageType.Level">
            <summary>
            Gets the user level for this options page.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.CreateRegisteredCategoryList">
            <summary>
            Returns an array of categories of the currently registered options pages. NOTE: Do not call this
            method if the core is not initialized.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.LoadRegisteredCategoryList">
            <summary>
            Returns an array of categories of the *last loaded* registered options pages. NOTE: Only call this method
            if CodeRush is not initialized.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.SaveRegisteredCategoryList">
            <summary>
            Saves the categories of the currently registered options pages. These can be retrieved later by calling
            LoadRegisteredCategoryList. NOTE: Do not call this method if CodeRush is not initialized.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Reload(System.String)">
            <summary>
            Reloads options by triggering the OptionsChanged event.
            </summary>
            <param name="fullName">The full name of the options to reload.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Reload(System.String[])">
            <summary>
            Reloads options by triggering the OptionsChanged event.
            </summary>
            <param name="fullNames">The full names of the options to reload.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Reload(System.Type)">
            <summary>
            Reloads options by triggering the OptionsChanged event.
            </summary>
            <param name="type">The System.Type of the options page to reload.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Reload(System.Type[])">
            <summary>
            Reloads options by triggering the OptionsChanged event.
            </summary>
            <param name="types">The System.Types of the options pages to reload.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.ReloadAll">
            <summary>
            Reloads all DXCore options by triggering the OptionsChanged event, causing event listeners to read data 
            from decoupled storage. You can set the directory where DXCore reads settings by changing the SettingsPath 
            property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.GetStorageFile(System.Type)">
            <summary>
            Returns the file name used by the specified Options class for language-neutral storage.
            </summary>
            <param name="page">Your OptionsPage descendant.</param>
            <returns>The file name used for storage.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.GetStorageFile(DevExpress.CodeRush.Core.OptionsPage)">
            <summary>
            Returns the file name used by the specified options page for language-neutral storage.
            </summary>
            <param name="page">An instance of your options page.</param>
            <returns>The file name used for storage.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Register(System.Type)">
            <summary>
            Registers an OptionsPage. This method is used internally by the plug-in loader and should not be called by plug-ins. 
            </summary>
            <param name="pageType">pageType is of type System.Type. Use the typeof operator to retrieve this.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.IsRegistered(System.Type)">
            <summary>
            Determines whether an options page is registered.
            </summary>
            <param name="pageType">pageType is of type System.Type. Use the typeof operator to retrieve this.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.IsRegistered(System.String)">
            <summary>
            Determines whether an options page is registered.
            </summary>
            <param name="fullName">The full name of the options page to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.GetRegisteredCategories">
            <summary>
            Returns a list of all registered options page categories. If this method
            is called when CodeRush is not loaded, it uses the last known list of
            registered categories.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.GetLevel(System.Type)">
            <summary>
            Returns the user level for an options page.
            </summary>
            <param name="page">System.Type of the OptionsPage descendent.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.GetFullName(System.Type)">
            <summary>
            Returns the full name of an options page.
            </summary>
            <param name="pageType">System.Type of the OptionsPage descendent.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.GetFullName(DevExpress.CodeRush.Core.OptionsPage)">
            <summary>
            Returns the full name of an options page.
            </summary>
            <param name="page">OptionsPage instance.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.CollectFullNames">
            <summary>
            Returns a string array containing the full names of all registered
            options pages.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.CollectFullNames(DevExpress.CodeRush.Core.UserLevel)">
            <summary>
            Returns a string array containing the full names of all registered
            options pages whose UserLevel is equal to or less than the specified level.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Show">
            <summary>
            Displays the DXCore options dialog.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Show(System.Type)">
            <summary>
            Displays the DXCore options dialog and selects the specified page.
            </summary>
            <param name="pageType">System.Type of the OptionsPage descendent to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Show(System.String)">
            <summary>
            Displays the DXCore options dialog and selects the specified page.
            </summary>
            <param name="fullName">The full name (category\page name -- E.g., IDE\Shortcuts) of the options page to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.Show(System.String,System.String)">
            <summary>
            Displays the DXCore options dialog and selects the specified page.
            </summary>
            <param name="category">The category of the options page to show.</param>
            <param name="pageName">The name of the options page to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptionsServices.SetSettingsPath(System.String)">
            <summary>
            Changes the Settings path to the specified folder. After changing this path, you may want to call 
            CodeRush.Options.ReloadAll() to reload settings from the new location.
            </summary>
            <param name="newSettingsPath">The folder to derive settings from.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.PagesByIndex">
            <summary>
            Returns an ArrayList containing all OptionsPageTypes stored in the order that they were registered.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.PagesByName">
            <summary>
            Returns a Hashtable containing all OptionsPageTypes stored using the pages' full names as keys.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.PageCount">
            <summary>
            Gets the number of registered options pages.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.Paths">
            <summary>
            Provides access to various CodeRush paths.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.Item(System.Int32)">
            <summary>
            Gets an options page by index.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.Item(System.String)">
            <summary>
            Gets an options page by full name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.Item(System.String,System.String)">
            <summary>
            Gets an options page by category and page name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.DialogHasFocus">
            <summary>
            Returns true if options dialog has focus.
            </summary>
            <returns>Returns true if options dialog has focus.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.InstallPath">
            <summary>
            Returns the CodeRush installation path.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptionsServices.SettingsPath">
            <summary>
            Returns the CodeRush settings path.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.OptProviderCatalogBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptProviderCatalogBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptProviderCatalogBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OptProviderCatalogBase.Show">
            
             Displays the DXCore options dialog and selects this page.
            
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptProviderCatalogBase.Storage">
            
             Gets a DecoupledStorage instance for this options page.
            
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptProviderCatalogBase.Category">
            
             Returns the category of this options page.
            
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptProviderCatalogBase.PageName">
            
             Returns the page name of this options page.
            
        </member>
        <member name="P:DevExpress.CodeRush.Core.OptProviderCatalogBase.FullPath">
            
             Returns the full path (Category + PageName) of this options page.
            
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.Toggle">
            <summary>
            Toggles the expansion on the outline at the cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.ToggleAll">
            <summary>
            Expands collapsed outlines, or collapses top-level outlines (if nothing is collapsed).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.CollapseToDefinitions">
            <summary>
            Collapses all outlines to their definitions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.StartAutomatic">
            <summary>
            Starts automatic outlining.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.CollapseSelection">
            <summary>
            Collapses the current selection if automatic outlining is turned off. 
            Call ExpandCurrent() to restore the collapsed region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.ExpandCurrent">
            <summary>
            Expands the collapsed region at the cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.OutliningServices.Stop">
            <summary>
            Stops all outlining (expanding all collapsed text).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiArrow135">
            <summary>
            Paints an arrow that does a 135-degree turn around, pointing South West.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiBaseArrow">
            <summary>
            Base class for an arrow that starts at the middle of a given SourcePoint (about halfway between the baseline
            and the top of the letters).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiPointHighlighter">
            <summary>
            Ancestor class for graphic elements that paint over code specified by a SourcePoint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiCoordinateHighlighter">
            <summary>
            Ancestor class for graphic elements that paint over code specified by a SourcePoint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiPathPainter">
            <summary>
            Base abstract class for TextView objects that paint one or more GraphicsPaths.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiBasePainter">
            <summary>
            Base class for painting custom graphic items on the TextView. Descendants with fields and 
            properties that store custom scaling values must call InvalidateScaling() in this base 
            class whenever those scaling properties change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.InvalidateScaling">
            <summary>
            Descendants should call this method whenever any 
            properties change that impact scaling. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.OnScalingValuesCalculating">
            <summary>
            Descendants can override and add any code that initializes fields prior to 
            calculating scaling fields or properties. Be sure to call the inherited 
            implementation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.CalculateScalingValues">
            <summary>
            Descendants can override and add any code that calculates fields or properties
            used for scale the graphic to the line height or character width. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.OnScalingValuesCalculated">
            <summary>
            Descendants can override and add any code that responds to 
            recalculated scaling fields or properties.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.InvalidateCoordinates">
            <summary>
            Descendants can override and add code invalidates any coordinates calculated 
            from line and column offset fields.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.Invalidate">
            <summary>
            Invalidates the region occupied by this graphic in the TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBasePainter.Invalidate(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Invalidates the region occupied by this graphic on the specified TextView.
            </summary>
            <param name="textView">The TextView to invalidate.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiBasePainter.Bounds">
            <summary>
            The bounding rectangle for this graphic in client coordinates of the TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiBasePainter.LineHeight">
            <summary>
            The line height in the editor. Used to determine the scaling values for the graphic. 
            You do not need to assign a value to this property if you assign a valid TextView to 
            the TextView property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiBasePainter.TextView">
            <summary>
            Associates a TextView with this CurvedCodeArrow. If you assign a valid TextView to 
            this property, you do not need to assign a value to the LineHeight property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.DisposePath">
            <summary>
            Disposed the _Path field and sets it to null.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.RebuildExistingPath">
            <summary>
            Rebuilds the path if it has already been built. Called after scaling fields have changed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.NewPoint(System.Drawing.PointF@,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaX and deltaY are scaled 
            appropriately before offsetting the point.
            </summary>
            <param name="point">The reference point. This point will be adjusted to the return value of this method.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.NewPoint(System.Drawing.PointF,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaX and deltaY are scaled 
            appropriately before offsetting the point.
            </summary>
            <param name="point">The reference point.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.NewCharPoint(System.Drawing.PointF@,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaY are scaled 
            appropriately before offsetting the point. deltaX is scaled by the 
            _HorizontalCharScale value.
            </summary>
            <param name="point">The reference point. This point will be adjusted to the return value of this method.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.NewCharPoint(System.Drawing.PointF,System.Int32,System.Int32)">
            <summary>
            Creates and returns a new PointF structure, based on an existing 
            point and deltaX and deltaY values. deltaY are scaled 
            appropriately before offsetting the point. deltaX is scaled by the 
            _HorizontalCharScale value.
            </summary>
            <param name="point">The reference point.</param>
            <param name="deltaX">The amount to shift the X coordinate (will be scaled).</param>
            <param name="deltaY">The amount to shift the Y coordinate (will be scaled).</param>
            <returns>Returns the new point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.RotatePoint(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the control point around the pivot point.
            </summary>
            <param name="pivot">The point around which the control point is rotated.</param>
            <param name="control">The control point to rotate and extend.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated control point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.RotateAndExtendPoint(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Extends the control point and rotates it around the pivot point.
            </summary>
            <param name="pivot">The point around which the control point is rotated.</param>
            <param name="control">The control point to rotate and extend.</param>
            <param name="multiplier">The amount to extend the control point.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated and extended control point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.InvalidateCoordinates">
            <summary>
            Called when the editor scrolls.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPathPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints this CurvedCodeArrow on the specified Graphics surface using the outline 
            and fill colors specified by this instance's OutlineColor and FillColor 
            properties.
            </summary>
            <param name="graphics">The Graphics surface to paint.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiPathPainter.Path">
            <summary>
            The GraphicsPath that represents this graphic.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiPathPainter.FillColor">
            <summary>
            The color of the brush used to fill the path associated with this instance. 
            Set this property to Color.Empty to prevent the graphic from being drawn filled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiPathPainter.OutlineColor">
            <summary>
            The color of the outline pen used to draw the path associated with this instance. 
            Set this property to Color.Empty to prevent an outline from being drawn.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiCoordinateHighlighter.GetPoints(System.Drawing.PointF)">
            <summary>
            Create and return a PointF array based on the specified startPt. 
            Scaling has been precalculated when this method is called.
            </summary>
            <param name="startPt">The upper left corner of the start of the code to 
            highlight on this line.</param>
            <returns>Returns an array of PointF structures.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiCoordinateHighlighter.GetPoints(System.Drawing.Point)">
            <summary>
            Create and return a PointF array based on the specified startPt. 
            Scaling has been precalculated when this method is called.
            </summary>
            <param name="startPt">The upper left corner of the start of the code to 
            highlight on this line.</param>
            <returns>Returns an array of PointF structures.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPointHighlighter.SetScalingDenominators(System.Single,System.Single)">
            <summary>
            Sets the denominators used to calculate _HorizontalScale, _HorizontalCharScale, and 
            _VerticalScale (defined in PathPainter). Descendants should call this in their 
            constructor to specify the scale at which the coordinates they send to NewPt and 
            NewCharPt were determined. For PointHighlighter descendants, _HorizontalScale and
             _HorizontalCharScale will be identical, meaning that there will be no difference 
             between calling NewPt and NewCharPt.
            </summary>
            <param name="charWidth">The value for the _CharWidthDenominator. The _HorizontalCharScale 
            field will be set to the TextView's SpaceWidth divided by this amount.</param>
            <param name="lineHeight">The value for the _LineHeightDenominator. The _VerticalScale 
            field will be set to the TextView's LineHeight divided by this amount.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiPointHighlighter.CalculateScale(DevExpress.CodeRush.Core.TextView)">
            <summary>
            This method is called before calling GetPoints in descendant classes.
            </summary>
            <param name="textView">The TextView to paint in.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiPointHighlighter.Point">
            <summary>
            The SourcePoint where this graphic element will paint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBaseArrow.#ctor">
            <summary>
            Creates a new instance of BaseArrow
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiArrow180">
            <summary>
            Paints an arrow that does a 180-degree turn around, pointing left.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiArrow90">
            <summary>
            Paints an arrow that does a 90-degree turn around, pointing South West.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiBrushStrokeHighlighter">
            <summary>
            Paints a brush stroke across the specified source code.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiRangeHighlighter">
            <summary>
            Ancestor class for graphic elements that paint over code specified by a SourceRange.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiRangeHighlighter.CalculateScale(DevExpress.CodeRush.Core.TextView,System.Int32)">
            <summary>
            This method is called before calling GetPoints in descendant classes.
            </summary>
            <param name="textView">The TextView to paint in.</param>
            <param name="wordWidthInPixels">The width of the code line we're highlighting.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiRangeHighlighter.SetScalingDenominators(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the denominators used to calculate _HorizontalScale, _HorizontalCharScale, and 
            _VerticalScale (defined in PathPainter). Descendants should call this in their 
            constructor to specify the scale at which the coordinates they send to NewPt and 
            NewCharPt were determined.
            </summary>
            <param name="wordWidth">The value for the _WordWidthDenominator. The _HorizontalScale field 
            will be set to the sum of the width of the range to highlight (in pixels) plus 
            TextView.SpaceWidth times _WordWidthExtraChars, all divided by this amount.</param>
            <param name="wordWidthExtraChars">The value for the _WordWidthExtraChars field. This value is 
            the number of extra character widths that should be added to the range width (that we're going 
            to highlight) before dividing by _WordWidthDenominator. The _HorizontalScale field will be set 
            to the sum of the width of the range to highlight (in pixels) plus TextView.SpaceWidth times 
            this value, all divided by this _WordWidthDenominator.</param>
            <param name="charWidth">The value for the _CharWidthDenominator. The _HorizontalCharScale 
            field will be set to the TextView's SpaceWidth divided by this amount.</param>
            <param name="lineHeight">The value for the _LineHeightDenominator. The _VerticalScale 
            field will be set to the TextView's LineHeight divided by this amount.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiRangeHighlighter.Range">
            <summary>
            The range associated with this graphic element. All code within this range will be 
            highlighted, with this graphic element repeated once per line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBrushStrokeHighlighter.#ctor">
            <summary>
            Creates a new instance of BrushStrokeHighlighter
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiArrowCap">
            <summary>
            Summary description for ArrowCapPath.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiArrowCap.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Creates a new instance of ArrowCap.
            </summary>
            <param name="endPoint">The PointF the arrow cap should point to.</param>
            <param name="controlPoint">The PointF that the arrow cap should point away from.</param>
            <param name="length">The length of the arrow cap.</param>
            <param name="angleOut">The angle out (from the line between controlPoint and endPoint) that the 
            edge of the arrow cap should follow.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiBezierArrow">
            <summary>
            A curved arrow connecting two points.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiBezierArrow.GetLinePath(System.Single)">
            <summary>
            Returns a GraphicsPath that surrounds the line that is this BezierArrow.
            </summary>
            <param name="hitRadius">The distance to extend the path beyond the arrow.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiBezierArrow.ArrowHeadBounds">
            <summary>
            Returns a Rectangle that surrounds the arrow head.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiBezierArrow.PenWidth">
            <summary>
            The width of the pen.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiMath2D">
            <summary>
            Summary description for Math2D.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiMath2D.MovePointTo(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Creates and returns a point translated along the line between 
            startPoint and targetPoint, moved by the specified distance.
            </summary>
            <param name="startPoint">The starting point of the move.</param>
            <param name="targetPoint">The direction to move toward, relative to startPoint.</param>
            <param name="distance">The distance to move.</param>
            <returns>Returns a point moved along the line (connecting startPoint and targetPoint), by the 
            specified distance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiMath2D.RotatePoint(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Returns a new point, at the location of the control point when rotated 
            around the pivot point by the specified rotation.
            </summary>
            <param name="pivot">The center of rotation.</param>
            <param name="point">The point to rotate.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated point.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiRangeArrow">
            <summary>
            Summary description for RangeArrow.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GdiRangeArrow.FLT_BezierControlPointRotation">
            <summary>
            This is the number of degrees that bezier control points are rotated to create the curve for the arrows.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.GdiRangeArrow.INT_InnerVerticalBorder">
            <summary>
            The amount of vertical space the start and end rectangles are inflated before calculating arrow intersection points.
            Set to less than 0 to allow immdediately adjacent (stacked) rectangles to still have a decent arrow connecting 
            the two.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiRangeArrow.DisposePath">
            <summary>
            Disposes the _Path field, if it's assigned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiRangeArrow.Contains(System.Drawing.Point)">
            <summary>
            Returns true if the specified point is over the main curve of this RangeArrow. 
            Returns false otherwise.
            </summary>
            <param name="pt">The Point to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiRangeArrow.PaintMainOnly(System.Drawing.Graphics)">
            <summary>
            Paints only the main arrow, no highlight/shadow. Useful for flashing or otherwise
            calling attention to this arrow.
            </summary>
            <param name="graphics">The Graphics object to paint on.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiRangeArrow.HitRadius">
            <summary>
            A value that determines the distance to extend the Path around this curve. The Path is 
            used in the Contains method, which is useful for hit testing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiRangeArrow.Path">
            <summary>
            Gets a GraphicsPath that surrounds the curved line represented by this RangeArrow. The path
            is extended by the value of the HitRadius property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiRangeArrow.PreviewRect">
            <summary>
            A tighter rect than Bounds, used to avoid collisions with other on-screen elements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiCurvedCodeArrow">
            <summary>
            Class for drawing curved arrows connecting points in the editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.HeadControlPoint(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Extends the control point and rotates it around the pivot point in the opposite direction of the TailControlPoint method.
            </summary>
            <param name="pivot">The point around which the control point is rotated.</param>
            <param name="control">The control point to rotate and extend.</param>
            <param name="multiplier">The amount to extend the control point.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated and extended control point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.TailControlPoint(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Extends the control point and rotates it around the pivot point in the opposite direction of the HeadControlPoint method.
            </summary>
            <param name="pivot">The point around which the control point is rotated.</param>
            <param name="control">The control point to rotate and extend.</param>
            <param name="multiplier">The amount to extend the control point.</param>
            <param name="deltaRotation">The amount to rotate the control point.</param>
            <returns>Returns the rotated and extended control point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.GetArrowPointArray">
            <summary>
            Returns an array of points that represent this curved arrow.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.BuildPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Constructs the _ArrowPath, and also calculates _BoundsRect.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.Head">
            <summary>
            The end of this arrow (the arrow's head).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.Inverted">
            <summary>
            Gets whether this curved arrow is inverted top to bottom. If true, then the head is above the tail (pointing up).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.Mirror">
            <summary>
            Determine whether this curved arrow arcs to the left 
            (pointing to the right), or if it arcs to the right 
            (pointing to the left).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.RangeIndex">
            <summary>
            What range index we're in (Ultra-Low, Low, Medium-Low, Medium,
            Medium-High, High, Ultra-High). Ranges determine which set of 
            extension and rotation data we use to shape the curved arrow.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GdiCurvedCodeArrow.Tail">
            <summary>
            The start of this arrow (the arrow's tail).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiInsertSymbol">
            <summary>
            Paints an insert symbol at the specified point in the source code.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiInsertSymbol.#ctor">
            <summary>
            Creates a new instance of InsertSymbol
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiStrikeThrough">
            <summary>
            Paints a brush stroke across the specified source code.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiStrikeThrough.#ctor">
            <summary>
            Creates a new instance of StrikeThrough
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GdiUnderline">
            <summary>
            Paints a curved brush stroke under the specified source code range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GdiUnderline.#ctor">
            <summary>
            Creates a new instance of Underline
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SimpleViewAdornmentGroup">
            <summary>
            Code preview adornment manager.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SimpleViewAdornmentGroup.#ctor">
            <summary>
            Creates new instance of the CodePreviewAdornmentManager class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SimpleViewAdornmentGroup.AddPreview(DevExpress.CodeRush.Core.ITextViewAdornment)">
            <summary>
            Adds code preview adornment to the manager.
            Visual elemnets are not created at this moment.
            </summary>
            <param name="adornemnt">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SimpleViewAdornmentGroup.Add(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Adds visual elements for each code preview adornment stored
            inside the manager.
            </summary>
            <param name="textView">The text view to add code preview.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SimpleViewAdornmentGroup.Remove">
            <summary>
            Removes visual elements for each code preview adornment stored
            inside the manager. Note that code preview adornments are not
            removed from the manager, call Clear method if you need
            to remove all visual elements and clear the manager.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SimpleViewAdornmentGroup.Clear">
            <summary>
            Clears this manager. All code preview visuals will be removed
            from appropriate text view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.Name">
            <summary>
            Name of the parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.Type">
            <summary>
            Type of the parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.Optional">
            <summary>
            Determines whether this parameter is optional or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.DefaultValue">
            <summary>
            The default value for this parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.Description">
            <summary>
            Hint for this parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.Value">
            <summary>
            The value of the parameter as specified by the user.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.ValueAsStr">
            <summary>
            The value of the parameter as specified by the user, converted to a System.String.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.ValueAsInt">
            <summary>
            The value of the parameter as specified by the user, converted to an System.Int32.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.ValueAsBool">
            <summary>
            The value of the parameter as specified by the user, converted to a System.Boolean.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Parameter.ValueAsFloat">
            <summary>
            The value of the parameter as specified by the user, converted to a System.Single.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.Contains(System.String)">
            <summary>
            Returns true if the parameter exists and contains a non-null value.
            </summary>
            <param name="name">The name of the parameter to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetString(System.String,System.String)">
            <summary>
            Gets the text passed for the specified parameter. If the text is surrounded by double-quotes, the quote characters
            are removed. Returns the defaultValue if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as a string.</param>
            <param name="defaultValue">The default value if this parameter is not specified.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetString(System.String)">
            <summary>
            Gets the text passed for the specified parameter. Returns an empty string if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as a string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetInt(System.String,System.Int32)">
            <summary>
            Gets the integer passed for the specified parameter. Returns the defaultValue if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as an int.</param>
            <param name="defaultValue">The default value if this parameter is not specified.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetInt(System.String)">
            <summary>
            Gets the integer passed for the specified parameter. Returns zero if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as an int.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetFloat(System.String,System.Single)">
            <summary>
            Gets the float passed for the specified parameter. Returns the defaultValue if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as a float.</param>
            <param name="defaultValue">The default value if this parameter is not specified.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetFloat(System.String)">
            <summary>
            Gets the double passed for the specified parameter. Returns zero if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as a float.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetBool(System.String,System.Boolean)">
            <summary>
            Gets the bool passed for the specified parameter. Returns the defaultValue if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as an bool.</param>
            <param name="defaultValue">The default value if this parameter is not specified.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.GetBool(System.String)">
            <summary>
            Gets the bool passed for the specified parameter. Returns false if not found.
            </summary>
            <param name="parameterName">The name of the parameter to get as an bool.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ParameterCollection.Remove(DevExpress.CodeRush.Core.Parameter)">
            <summary>
            Removes the specified parameter from the list.
            </summary>
            <param name="value">The parameter to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.OnDispose">
            <summary>
            Override to clean up of any sensitive resources when this picker is disposed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.OnInit">
            <summary>
            Override to provide additional initialization steps for this picker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.OnActivate">
            <summary>
            Override to perform steps when this picker is activated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.OnDeactivate">
            <summary>
            Override to perform steps when this picker is deactivated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.SetActiveView(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Sets the ActiveView and ActiveDocument properties using the specified TextView.
            NOTE: Passing null will set the properties to null.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Activate">
            <summary>
            Call when the picker is activated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Deactivate">
            <summary>
            Call when the picker is deactivated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveDown">
            <summary>
            Moves Refactor Target down.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveDown(System.Int32)">
            <summary>
            Moves Refactor Target down.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveUp">
            <summary>
            Moves Refactor Target up.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveUp(System.Int32)">
            <summary>
            Moves Refactor Target up.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveLeft">
            <summary>
            Moves Refactor Target left.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveRight">
            <summary>
            Moves Refactor Target right.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MovePageDown">
            <summary>
            Moves Refactor Target on page down.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MovePageUp">
            <summary>
            Moves Refactor Target on page up.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveEnd">
            <summary>
            Moves Refactor Target to the far end position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.MoveHome">
            <summary>
            Moves Refactor Target to the far start position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.FocusPrevious">
            <summary>
            Moves the focus to the previous Refactor Target.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.FocusNext">
            <summary>
            Moves the focus to the next Refactor Target.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Check">
            <summary>
            Checks Refactor Target
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Accept">
            <summary>
            Accepts currently selected target.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Cancel">
            <summary>
            Cancels target picker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Start">
            <summary>
            Starts target picker using active text view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Start(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Starts target picker using specified text view.
            </summary>
            <param name="view">TextView where to paint target picker.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.Stop">
            <summary>
            Stops target picker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.JumpUp(System.Int32)">
            <summary>
            Moves Refactor Target up on the specified number of elements.
            </summary>
            <param name="step">The number of elements to move the picker.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PickerBase.JumpDown(System.Int32)">
            <summary>
            Moves Refactor Target down on the specified number of elements.
            </summary>
            <param name="step">The number of elements to move the picker.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.Initialized">
            <summary>
            Determines whether this picker has been initialized.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.SupportsVerticalMoves">
            <summary>
            Override to return true if the picker supports vertical movement. Otherwise, the OnMoveDown 
            and OnMoveUp methods will not be executed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.SupportsHorizontalMoves">
            <summary>
            Override to return true if the picker supports horizontal movement. Otherwise, the OnMoveLeft 
            and OnMoveRight methods will not be executed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.SupportsChecks">
            <summary>
            Override to return true if the picker supports checking. Otherwise, the OnCheck method will not
            be executed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.SupportsFocusing">
            <summary>
            Override to return true if the picker supports focus. Otherwise, the OnFocusPrevious
            and OnMoveNext methods will not be executed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.IsActive">
            <summary>
            Gets the status of the target picker.
            Returns true if this target picker is active, otherwise returns false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.IsVisible">
            <summary>
            Gets or sets if current selector is displayed on the TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PickerBase.IsModalMode">
            <summary>
            Gets the mode of the picker. Returns true if target picker is in modal mode.
            This means that all pressed keys except for target picker actions will not 
            go to VS editor.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AsyncFarEngine">
            <summary>
            Asynchronous reference search manager.
            Used internally.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarEngine.#ctor">
            <summary>
            Initializes a new instance of the AsyncFarManager class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarEngine.FindReferencesAsync(DevExpress.CodeRush.Core.AsyncFarRequest)">
            <summary>
            Starts asynchronous reference search for the given request.
            </summary>
            <param name="request">The asynchronous reference search request.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarEngine.Abort">
            <summary>
            Aborts active asynchronous search process.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncFarEngine.Instance">
            <summary>
            Gets manager singleton instance.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AsyncFarProvider">
            <summary>
            Asynchronous reference search provider.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IAsyncFarListener">
            <summary>
            Asynchronous reference search events listener.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IAsyncFarListener.OnStart(System.ComponentModel.ISynchronizeInvoke,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Called when asynchronous reference search is started.
            </summary>
            <param name="sync"></param>
            <param name="declaration">The target declaration to search for references.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IAsyncFarListener.OnReferenceFound(System.ComponentModel.ISynchronizeInvoke,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Called when new reference is found.
            </summary>
            <param name="sync"></param>
            <param name="reference">The reference found.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IAsyncFarListener.OnStop(System.ComponentModel.ISynchronizeInvoke,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Called when asynchronous search is finished.
            </summary>
            <param name="sync"></param>
            <param name="references">The references found.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IAsyncFarListener.OnAbort(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Called when asynchronous search is aborted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarProvider.#ctor">
            <summary>
            Initializes a new instance of the AsyncFarProvider class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarProvider.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the AsyncFarProvider class.
            </summary>
            <param name="container">The container to add this provider.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarProvider.FindReferencesAsync(System.ComponentModel.ISynchronizeInvoke,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Starts asynchronous search for the specified declaration at the given scope.
            </summary>
            <param name="sync">The sync object to use.</param>
            <param name="scope">The scope to search in.</param>
            <param name="declaration">The declaration to search for references.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarProvider.FindReferencesAsync(System.ComponentModel.ISynchronizeInvoke,DevExpress.CodeRush.StructuralParser.IElementCollection,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Starts asynchronous search for the specified declaration at the given scope list.
            </summary>
            <param name="sync">The sync object to use.</param>
            <param name="scopes">The list of scopes to search in.</param>
            <param name="declaration">The declaration to search for references.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarProvider.IsLanguageSupported(System.String)">
            <summary>
            Checks if the given language is supported by this provider.
            </summary>
            <param name="languageID">The languageID to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncFarProvider.ExtensionCategory">
            <summary>
            Returns provider extension category.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.AsyncFarProvider.Start">
            <summary>
            Fired when asynchronous search is started.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.AsyncFarProvider.Stop">
            <summary>
            Fired when asynchronous search is stopped.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.AsyncFarProvider.ReferenceFound">
            <summary>
            Fired when new reference is found.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.AsyncFarProvider.Abort">
            <summary>
            Fired when asynchronous search is aborted.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.AsyncFarProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your string provider to one or more programming languages. If you do not handle this event, the DXCore makes your string provider available in all programming languages.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AsyncFarRequest">
            <summary>
            Request for asynchronous reference search.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarRequest.#ctor">
            <summary>
            Initializes a new instance of the AsyncFarRequest class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AsyncFarRequest.#ctor(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Initializes a new instance of the AsyncFarRequest class.
            </summary>
            <param name="target">The target declaration to search for references.</param>
            <param name="scopes">The list of reference search scopes.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncFarRequest.Target">
            <summary>
            Gets or sets reference search target.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncFarRequest.Scopes">
            <summary>
            Gets a collection of reference search scopes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncFarRequest.Listener">
            <summary>
            Gets or sets asynchronous search events listener.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.AsyncFarRequest.SyncObject">
            <summary>
            Gets or sets synchronization object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeEditorServices.RegisterTextSelectorHelper(DevExpress.CodeRush.Core.ITextSelectorHelper)">
            <summary>
            Registers ITextSelectorHelper implementer.
            </summary>
            <param name="service">The ITextSelectorHelper implementer.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.CodeEditorServices.UnRegisterTextSelectorHelper">
            <summary>
            Unregisters TextSelectorHelper.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeEditorServices.HasTextSelectorHelper">
            <summary>
            Checks if text selector service was registered.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeEditorServices.ActiveSelector">
            <summary>
            Gets currently active selector.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeEditorServices.SelectorIsActive">
            <summary>
            Returns true if selector is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.CodeEditorServices.TextSelectorHelper">
            <summary>
            Gets ITextSelectorHelper implementer. Will throw exception if helper is not registered.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ExtensionBase">
            <summary>
            ExtensionBase is the ancestor for all extensions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsFileExtension(System.String)">
            <summary>
            Determines if the specified file extension is supported by the parser in this language extension.
            </summary>
            <param name="fileExt">The file extension to check, with a leading ".".</param>
            <returns>Returns true if the specified file extension is supported.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTypeLinkClient">
            <summary>
            Gets the ITypeLinkClient implementor for this language extension. 
            If the language extension does not provide one, a default impletor is used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTextLinkClient">
            <summary>
            Gets the ITextLinkClient implementor for this language extension. 
            If the language extension does not provide one, a default impletor is used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.GetLinkClient">
            <summary>
            Gets the ILinkClient implementor for this language extension. If the 
            language extension does not provide one, a default impletor is used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.OnNeedChangeLanguage(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean@)">
            <summary>
            Checks for current language need to be changed.
            </summary>
            <param name="activeElement">The active language element.</param>
            <param name="caret">The caret point.</param>
            <param name="result">The returned  value, which shows if current language should be changed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.OnNeedPopulateArrayWithInitialValues(System.Boolean@)">
            <summary>
            Checks for current language need to populate array with initial values.
            </summary>
            <param name="result">The returned  value, which shows if for current language need to populate array with initial values.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.OnGetActiveLanguageID(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String@)">
            <summary>
            Gets LanguageID for active language element.
            </summary>
            <param name="activeElement">The active element.</param>
            <param name="caret">The source point of the caret position.</param>
            <param name="result">Active language ID.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.OnGetElementFullName(DevExpress.CodeRush.StructuralParser.IElement,System.String@)">
            <summary>
            Gets element full name.
            </summary>
            <param name="element">The element to use.</param>
            <param name="fullName">The returned full name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.OnGetTypeSuffix(DevExpress.CodeRush.StructuralParser.Expression,System.String,System.String@)">
            <summary>
            Gets element full name.
            </summary>
            <param name="expression">The target expression.</param>
            <param name="type"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LanguageExtensionBase.OnGetDefaultValueExpression(DevExpress.CodeRush.StructuralParser.PrimitiveExpression,DevExpress.CodeRush.StructuralParser.Expression@)">
            <summary>
            Gets default value expression from the given primitive expression.
            </summary>
            <param name="primitive">The primitive expression to use.</param>
            <param name="defaultValue">The returned default value expression.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.LanguageID">
            <summary>
            The ID string for the programming language represented by this LanguageExtension. This
            ID string must match the language ID string returned by CodeRush.Language.Active when 
            a document that works with this language is open (e.g., "CSharp", "C/C++", "Basic").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportedFileExtensions">
            <summary>
            Gets or sets the file extensions supported by the parser (e.g., ".cs", ".vb", etc.). 
            Separate two or more file extensions with semi-colons (";"). This property is consulted when a plug-in needs to parse a file on disk.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.DotNetLanguageType">
            <summary>
            Gets or sets the file DotNetLanguageType for the current language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.StatementTerminator">
            <summary>
            Gets or sets the character that terminates statements in this language. 
            For example, in C#, the statement terminator would be ";", for VB this field would be empty.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.MemberAccessOperator">
            <summary>
            Gets or sets the character(s) that allow access to members of a struct, class or interface. 
            For example, in C# and VB, the member access operator is ".".
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.LineContinuationCharacter">
            <summary>
            Gets or sets line continuation character for the active language (e.g., "_" in VB).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.PointerAccessOperator">
            <summary>
            Gets or sets the character(s) that allow access via pointer to members of a struct, class or interface.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.TypeAccessOperator">
            <summary>
            Gets or sets the character(s) that allow access to the nested elements of type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.ClassInstanceKeyword">
            <summary>
            Gets or sets the keyword that allow access to the current instance of a class inside methods. 
            For example, in C# the class instance keyword is "this".
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.BaseInstanceKeyword">
            <summary>
            Gets or sets the keyword that allow access to the base instance of a class inside methods. 
            For example, in C# the class instance keyword is "base".
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.IsCaseSensitive">
            <summary>
            Gets or sets the case-sensitive state of this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsVisibilitySections">
            <summary>
            Set this to true if this language supports visibility sections.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.RegionKeywords">
            <summary>
            Gets or sets the keywords that delimit the start and end of a hidden region in this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SingleLineCommentBegin">
            <summary>
            The character or characters used to delimit a single-line comment. If this language does not support single-line comments, leave this property blank.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.XMLDocCommentBegin">
            <summary>
            The character or characters used to delimit a XML doc comment. If this language does not support XML doc comments, leave this property blank.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.XMLMultilineDocCommentBegin">
            <summary>
            The character or characters used to delimit a multiline XML doc comment. If this language does not support multiline XML doc comments, leave this property blank.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.XMLMultilineDocCommentEnd">
            <summary>
            The character or characters used to delimit the end of multiline XML doc comment. If this language does not support multiline XML doc comments, leave this property blank.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsNestedNamespaceSearch">
            <summary>
            Set this to true if language supports searching of the nested namespaces.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsTypes">
            <summary>
            Set this to true if language supports type declarations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsParenslessCalls">
            <summary>
            Set this to true if language supports method calls without parens.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsRootNamespace">
            <summary>
            Set this to true if language supports root namespace feature.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsMultiLineComments">
            <summary>
            Set this to true if language supports multi line comments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsTernaryExpressions">
            <summary>
            Set this to true if this language supports ternary expressions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsDecoupledForeachDeclaration">
            <summary>
            Set this to true if language supports a decoupled declaration of the foreach iteration variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsOutParameters">
            <summary>
            Set this to true if language supports out parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsImplicitImplementationRename">
            <summary>
            Set this to true if language supports implicit implementation rename.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsObjectCreationFromMethod">
            <summary>
            Set this to true if language supports creation of the new objects using method declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsRootMembers">
            <summary>
            Set this to true if language supports location of the methods directly inside of the files and namespaces.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsNestedLanguages">
            <summary>
            Set this to true if language supports nested languages.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsPrototypesAndImplementations">
            <summary>
            Returns true if the given language supports prototypes and implementations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsAutoImplementedPropertyAccessorVisibility">
            <summary>
            Returns true if the given language supports a visibility keyword for auto-implemented properties.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsMacroses">
            <summary>
            Returns true if the given language supports work with macroses.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsWithStatement">
            <summary>
            Returns true if the given language supports with statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsConstantDeclarations">
            <summary>
            Returns true if the given language supports constant declarations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsCLRSettings">
            <summary>
            Returns true if the given language supports CLR settings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsImplicitPointers">
            <summary>
            Returns true if the given language supports implicit pointer declarations, e.g. C# or VB language.
            C++ language requires explicit pointers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsIncrementalParsing">
            <summary>
            Returns true if the given language supports incremental parsing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.HasSerialMembersOrder">
            <summary>
            Set this to true if language has serial members order.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.VariableModifier">
            <summary>
            Defines modifier for the variable declaraions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.DeclaresTypeBeforeName">
            <summary>
            Set this to true if language declares type before name in declarations (variables, parameters ...).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckBaseMemberVirtualModifier">
            <summary>
            Returns true if current language has serial members order.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsFileBuildAction">
            <summary>
            Returns true if current language supports file build action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsGetElementFullName">
            <summary>
            Returns true if language extension handles get element full name event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsGetTypeSuffix">
            <summary>
            Returns true if language extension handles get type suffix event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageExtensionBase.SupportsGetDefaultValueExpression">
            <summary>
            Returns true if language extension handles get default value expression event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.ChangeElementSectionVisibility">
            <summary>
            Handle this event when language supports visibility sections.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckKeyword">
            <summary>
            Handle this event to check if the passed string is a legal keyword.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckNumber">
            <summary>
            Handle this event to check if the passed string is a legal number.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckBuiltInType">
            <summary>
            Handle this event to check if the passed string is a legal built in simple type name.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckProject">
            <summary>
            "Handle this event to check if the passed project is supported by language extension."
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.FormatRegion">
            <summary>
            Handle this event to format a region header and footer given its caption.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.FormatUsingDirective">
            <summary>
            Handle this event to return a using directive (C#) or imports statement (VB) for the specified namespace (e.g., \"using System.IO;\" or \"Imports System.IO\").
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetEscapedString">
            <summary>
            Handle this event to process a string value and return an escaped string value. E.g., in C#, turn \\r characters into carriage-returns.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetParser">
            <summary>
            Handle this event to return a descendant of DevExpress.CodeRush.StructuralParser.ParserBase capable of parsing this extension's language.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetCodeDomProvider">
            <summary>
            Handle this event to return a descendant of CodeDomProvider for this language extension.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetSimpleTypeName">
            <summary>
            Handle this event to convert a full type name (e.g., \"System.Boolean\") to a simple type alias defined by this language (e.g., \"bool\" in C# or \"Boolean\" in VB).
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetBinaryOperatorType">
            <summary>
            Handle this event to return binary operator type name for the given left and right types.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetBuiltInTypeNarrowingConversionTable">
            <summary>
            Handle this event to get narrowing conversion table for the builtin types.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetBuiltInTypeWideningConversionTable">
            <summary>
            Handle this event to get widening conversion table for the builtin types.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetFullTypeName">
            <summary>
            Handle this event to convert a simple type name (e.g., \"boolean\") to a full type alias defined by this language (e.g., \"System.Boolean\").
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetVisibility">
            <summary>
            Handle this event to specify the names of visibilities (e.g., \"public\") and whether or not they are supported by this language.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetCaretLocation">
            <summary>
            Handle this event to specify where the caret is located: in comment, in string etc.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CreateLanguageElement">
            <summary>
            Handle this event to create language element for particular language.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetVariableRemoveRanges">
            <summary>
            Handle this event to specify the source range of the variable.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetCodeGenerator">
            <summary>
            Handle this event to return a descendant of DevExpress.CodeRush.StructuralParser.CodeGen capable of generating code for language elements.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetElementBuilder">
            <summary>
            Handle this event to return a custom descendant of DevExpress.CodeRush.StructuralParser.ElementBuilder capable of generating LanguageElement trees.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetExpressionCodeGenerator">
            <summary>
            Handle this event to return a descendant of DevExpress.CodeRush.StructuralParser.ExpressionCodeGenBase capable of generating code for language expressions.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetXmlCodeGenerator">
            <summary>
            Handle this event to return a descendant of DevExpress.CodeRush.StructuralParser.XmlCodeGenBase capable of generating code for language expressions.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetLanguageElementCodeGenerator">
            <summary>
            Handle this event to return a descendant of DevExpress.CodeRush.StructuralParser.LanguageElementCodeGenBase capable of generating code for language expressions.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetCodeBlockStart">
            <summary>
            Handle this event to return a start point of code block for the given element.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetBlockNecessityInformation">
            <summary>
            Handle this event to return information about the block adding nesessity for the given statement after inserting the new LanguageElement.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetLanguageElementIsCollapsible">
            <summary>
            Handle this event to inform the DXCore if a LanguageElement can be collapsed or not. Don't handle event if your language does not support code-folding.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetLanguageElementCollapsibleRange">
            <summary>
            Handle this event to return a DevExpress.CodeRush.StructuralParser.SourceRange representing the block of code that is collapsible for the specified LanguageElement.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetDefaultAssemblyReferences">
            <summary>
            Handle this event to supply a collection of assembly names that should be referenced into a project by default.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetIdentifierFromKeyword">
            <summary>
            Handle this event to get identifier from the given keyword.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.RemoveKeywordEscapeCharactersFromIdentifier">
            <summary>
            Handle this event to remove keyword escape characters from the given identifier.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetImplementsCode">
            <summary>
            Handle this to implement code from the given interface.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetHexadecimalValuePresentation">
            <summary>
            Handle this event to get a hexadecimal value presentation.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetMacroExpansion">
            <summary>
            Handle this to get macro expansion in the specified file.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetContinueStatement">
            <summary>
            Handle this event to supply continue statement code.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetSealedKeyword">
            <summary>
            Handle this event to supply sealed keyword code.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTokens">
            <summary>
            Handle this event to supply tokens for the given text.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTokenCategory">
            <summary>
            Handle this event to supply token category for the given token.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetNullReferenceExpression">
            <summary>
            Handle this event to return a null expression for reference type.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetObjectTypeReferenceExpression">
            <summary>
            Handle this event to return an onject type reference expression.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTypeParameterInitializer">
            <summary>
            Handle this event to return a default type parameter initializer.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetProjectLoader">
            <summary>
            Handle this event to supply token category for the given token.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.ImplementInterface">
            <summary>
            Handle this event to implement given interface for the given type.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.InheritType">
            <summary>
            Handle this event to inherit specified type for the given type.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTypeInheritanceArgs">
            <summary>
            Handle this event to the get parameters (an insertion point and code) required for the type inheritance.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetElementFullName">
            <summary>
            Handle this event to provide full name for the given element.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.ProvideLinkClient">
            <summary>
            Handle this event to provide an instance of an object implementing ILinkClient that is used to support standard linked identifiers.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.ProvideTypeLinkClient">
            <summary>
            Handle this event to provide an instance of an object implementing ITypeLinkClient that is used to support type-aware linked identifiers.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.ProvideTextLinkClient">
            <summary>
            Handle this event to provide an instance of an object implementing ITextLinkClient that is used to support text linked identifiers.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetTypeSuffix">
            <summary>
            Handle this event to provide suffix for the given type.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetDefaultValueExpression">
            <summary>
            Handle this event to provide default value expression for the given primitive expression.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetNullCheckExpression">
            <summary>
            Handle this event to provide expression for empty reference check.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckNativeType">
            <summary>
            Handle this event to check if the passed type declaration is native.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckExtensionMethod">
            <summary>
            Handle this event to check if the passed method is extension.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.CheckIsExtensionMethod">
            <summary>
            Handle this event to check if the passed method is extension.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.NeedChangeLanguage">
            <summary>
            Handle this event to determine if it is necessary to change active language.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetActiveLanguageID">
            <summary>
            Handle this event to get active language ID.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.AddTypeSuffix">
            <summary>
            "Handle this event to add type suffix for the given element and full type name."
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.GetOverloadableOperatorName">
            <summary>
            Handle this event to return overloadable operator name for the given operator type.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.LanguageExtensionBase.NeedPopulateArrayWithInitialValues">
            <summary>
            Handle this event to determine if it is necessary to populate array with initial values.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionCollection.ToArray">
            <summary>
            Returns an array of the plug-in extensions in this collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionCollection.FindFirst(System.String)">
            <summary>
            Returns the first extension found matching the name provided.
            </summary>
            <param name="name">The name of the extension to find.</param>
            <returns>The first extension found matching the specified name, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionCollection.ByLanguage(System.String)">
            <summary>
            Returns a collection of extensions in this collection that handles the specified language. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtensionCollection.Names">
            <summary>
            Returns a string array representing the names of all extensions in this collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionServices.BeginLoad">
            <summary>
            This method suspends plugin extension unregistration, all plugin extensions to be 
            unregistered are collected and then processed when EndLoad method is called, you must guarantee a 
            call to EndLoad() (e.g., placed in a finally block).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionServices.EndLoad">
            <summary>
            Marks the end of an load session. You must call this once for every call to BeginLoad().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionServices.Find(System.String,DevExpress.CodeRush.Core.PropertyValue)">
            <summary>
            Searches for a plug-in extension based on a stored property value. Stored properties are used
            by the plug-in loader to retrieve information without demand-loading the plug-in this extension
            is contained in. This should only be used in special circumstances.
            </summary>
            <param name="category">The category name of the plug-in extension to search for.</param>
            <param name="prop">The stored property value to search for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.PlugInExtensionServices.Find(System.String,DevExpress.CodeRush.Core.PropertyValue,System.Boolean)">
            <summary>
            Searches for a plug-in extension based on a stored property value. Stored properties are used
            by the plug-in loader to retrieve information without demand-loading the plug-in this extension
            is contained in. This should only be used in special circumstances.
            </summary>
            <param name="category">The category name of the plug-in extension to search for.</param>
            <param name="prop">The stored property value to search for.</param>
            <param name="matchPartialValue">If true, partial matches of the property value are accepted.
            For example, searching for "car" will match "cartoon".</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtensionServices.IsLoading">
            <summary>
            Gets or sets value indicating that plugin extensions are being loaded.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtensionServices.Item(System.String)">
            <summary>
            Returns an array of plug-in extensions by category. NOTE: This call can be expensive
            because it demands that all plug-ins containing the specified category of plug-in extension
            be loaded.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.PlugInExtensionServices.Item(System.String,System.String)">
            <summary>
            Returns an array of plug-in extensions by category and language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegionKeywords.Start">
            <summary>
            The keyword(s) that delimit the start of a collapsable region in this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegionKeywords.End">
            <summary>
            The keyword(s) that delimit the end of a collapsable region in this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegionKeywords.Supported">
            <summary>
            Determines whether collapsable regions (using keywords) is supported in this language.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.StateProviderBase">
            <summary>
            Summary description for StateProviderBase.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.StateProviderBase.IsActive">
            <summary>
            Gets true if state is active
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.StringProviderBase">
            <summary>
            Base class for the StringProvider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.StringProviderBase.Parameters">
            <summary>
            A collection of expected parameters for this string provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringProviderServices.GetProvider(System.String)">
            <summary>
            Returns the specified StringProvider.
            </summary>
            <param name="aStringProviderName">Name of the StringProvider.</param>
            <returns>Returns the StringProvider if found, otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringProviderServices.Get(System.String,System.String)">
            <summary>
            Returns a string supplied by the specified StringProvider. Throws an exception if 
            the specified string provider is not found.
            </summary>
            <param name="aStringProviderName">The name of the StringProvider.</param>
            <param name="aParameters">Optional parameters to pass to the StringProvider.</param>
            <returns>The string returned by the StringProvider's GetString event.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringProviderServices.Format(System.String)">
            <summary>
            Formats string provider using its name.
            </summary>
            <param name="name">Strig provider name.</param>
            <returns>String representation of the string provider.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringProviderServices.Format(System.String,System.String[])">
            <summary>
            Formats string provider using its name and given list of parameters.
            </summary>
            <param name="name">Strig provider name.</param>
            <param name="args">The list of string provider parameters.</param>
            <returns>String representation of the string provider.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringProviderServices.Format(DevExpress.CodeRush.Core.StringProviderBase)">
            <summary>
            Formats string provider using its name.
            </summary>
            <param name="provider">The string provider to format.</param>
            <returns>String representation of the string provider.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringProviderServices.Format(DevExpress.CodeRush.Core.StringProviderBase,System.String[])">
            <summary>
            Formats string provider using its name and given list of parameters.
            </summary>
            <param name="provider">The string provider to format.</param>
            <param name="args">The list of string provider parameters.</param>
            <returns>String representation of the string provider.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.StringProviderServices.Providers">
            <summary>
            Returns an array of all StringProviders.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileEvent(DevExpress.CodeRush.Core.EventNexus.CodeRushEventKey)">
            <summary>
            Defines if specified event should be profiled and results should be loogged.
            </summary>
            <param name="key">The event key to profile</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IProfilingEngine.StartTask(System.String)">
            <summary>
            Starts the profiling task.
            </summary>
            <param name="name">The name of the profiling task</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IProfilingEngine.EndTask(DevExpress.CodeRush.Common.IProfilingTask)">
            <summary>
            Ends the profiling task.
            </summary>
            <param name="task">The task to end</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileContentProviders">
            <summary>
            Returns true if content providers should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileParsing">
            <summary>
            Returns true if parsing should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileResolving">
            <summary>
            Returns true if resolving should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileTemplates">
            <summary>
            Returns true if template expansion should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileDocumentClosing">
            <summary>
            Returns true if document closing should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileTrainingWindow">
            <summary>
            Returns true if Training Window should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.NeedProfileDebugVisualizer">
            <summary>
            Returns true if Debug Visualizer should be profiled
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IProfilingEngine.LogToDisk">
            <summary>
            Returns true if disk logging is enabled.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingTask.#ctor(System.Double)">
            <summary>
            Create instance of ProfilingTask
            </summary>
            <param name="timeTolerance">Time tolerance in seconds</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingTask.Start(System.String)">
            <summary>
            Starts the profiling task.
            </summary>
            <param name="title">This one will be displayed as title of the task in the log file</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingTask.End">
            <summary>
            Ends the profiling task and logs the result.		
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingTask.End(System.Boolean)">
            <summary>
            Ends the profiling task.		
            </summary>
            <param name="logData">Defines if the result of profiling should be logged</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingTask.LogData">
            <summary>
            Logs the profiling data.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingTask.WorkTime">
            <summary>
            The time of the task working.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingTask.AllocatedMemory">
            <summary>
            The memory in bytes which was allocated by current task.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingTask.Stack">
            <summary>
            The call stack for the current task.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileEvent(DevExpress.CodeRush.Core.EventNexus.CodeRushEventKey)">
            <summary>
            Defines if specified event should be profiled and results should be loogged.
            </summary>
            <param name="key">The event key to profile</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingServices.Task(System.String)">
            <summary>
            Starts the profiling task.
            </summary>
            <param name="name">The name of the profiling task</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingServices.StartTask(System.String)">
            <summary>
            Starts the profiling task.
            </summary>
            <param name="name">The name of the profiling task</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProfilingServices.EndTask(DevExpress.CodeRush.Common.IProfilingTask)">
            <summary>
            Ends profiling task.
            </summary>
            <param name="task">The task to end</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileContentProviders">
            <summary>
            Returns true if content providers should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileParsing">
            <summary>
            Returns true if parsing should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileResolving">
            <summary>
            Returns true if resolving should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileTemplates">
            <summary>
            Returns true if template expansions should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileDocumentClosing">
            <summary>
            Returns true if document closing should be profiled.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.NeedProfileDebugVisualizer">
            <summary>
            Returns true if Debug Visualizer should be profiled
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProfilingServices.LogToDisk">
            <summary>
            Returns true if disk logging is enabled.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProgressService.#ctor">
            <summary>
            Initializes a new instance of the ProgressService class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ProjectItemServices.Active">
            <summary>
            Returns the project item for the active document
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Project.AddReference(System.String)">
            <summary>
            Adds an assembly reference to this project.
            </summary>
            <param name="assemblyName">The name of the assembly to add a reference to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Project.AddFile(System.String)">
            <summary>
            Adds the specified file to the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="filePath">The path of the file to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Project.RemoveFile(System.String)">
            <summary>
            Removes the specified file from the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="filePath">The path of the file to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Project.RenameFile(System.String,System.String)">
            <summary>
            Renames the specified file in the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="filePath">The path of the file to rename.</param>
            <param name="newName">New name of the file.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Project.ProjectObject">
            <summary>
            Returns the EnvDTE.Project used internally by DevExpress.CodeRush.Core.Project.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.AddProject(EnvDTE.Project)">
            <summary>
            Adds an EnvDTE.Project to CodeRush's internal tracking.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.ClearProjects">
            <summary>
            Clears CodeRush's internal tracking of VS .NET's open projects.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.GetProjectKey(EnvDTE.Project)">
            <summary>
            Returns a unique key for a VS .NET project suitable for using in a Hashtable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.GetProjectKey(EnvDTE.Project,System.String)">
            <summary>
            Returns a unique key for a VS .NET project suitable for using in a hashtable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.GetProjectKey(System.String,System.String)">
            <summary>
            Returns a unique key for a VS .NET project suitable for using in a hashtable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.RemoveProject(EnvDTE.Project)">
            <summary>
            Removes a project from CodeRush's internal tracking and disposes it.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.RenameProject(EnvDTE.Project,System.String)">
            <summary>
            Renames an EnvDTE.Project in CodeRush's internal tracking.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.RefreshProjects">
            <summary>
            Refreshes CodeRush's internal tracking of VS .NET's open projects.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.HookWebSiteEvents(DevExpress.CodeRush.Core.Project)">
            <summary>
            Subscribes to WebSite project events.
            </summary>
            <param name="project">The project to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.UnhookWebSiteEvents(DevExpress.CodeRush.Core.Project)">
            <summary>
            Removes subscription to WebSite project events.
            </summary>
            <param name="project">The project to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.GetProject(EnvDTE.Project)">
            <summary>
            Returns a CodeRush Project instance from a VS .NET automation project.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.GetProjectForElement(DevExpress.CodeRush.StructuralParser.ProjectElement)">
            <summary>
            Returns Project for the given ProjectElement.
            </summary>
            <param name="projectElement">The project element to use.</param>
            <returns>Project for the given ProjectElement.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.AddReference(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String)">
            <summary>
            Adds an assembly reference to the project.
            </summary>
            <param name="projectElement">The project element to add a reference.</param>
            <param name="assemblyName">The name of the assembly to add a reference to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.AddFile(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String)">
            <summary>
            Adds the specified file to the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="projectElement">The project element to use.</param>
            <param name="filePath">The path of the file to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.RemoveFile(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String)">
            <summary>
            Removes the specified file from the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="projectElement">The project element to use.</param>
            <param name="filePath">The path of the file to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ProjectServices.RenameFile(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String,System.String)">
            <summary>
            Renames the specified file in the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="projectElement">The project element to use.</param>
            <param name="filePath">The path of the file to rename.</param>
            <param name="newName">New name of the file.</param>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ReferenceType.Unknown">
            <summary>
            Unknown reference
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ReferenceType.Assembly">
            <summary>
            .NET assembly
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ReferenceType.ActiveX">
            <summary>
            COM component
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Reference.Remove">
            <summary>
            Removes this reference from its containing project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Name">
            <summary>
            Returns the name of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.BuildNumber">
            <summary>
            Returns the build number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.CopyLocal">
            <summary>
            Gets or sets whether the reference is copied to the local bin path.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Culture">
            <summary>
            Returns the culture of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Description">
            <summary>
            Returns a description of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Identity">
            <summary>
            Returns the unique identity of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.MajorVersion">
            <summary>
            Returns the major version number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.MinorVersion">
            <summary>
            Returns the minor version number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Path">
            <summary>
            Returns the path of the reference's binary file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.PublicKeyToken">
            <summary>
            Returns the public key token of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.RevisionNumber">
            <summary>
            Returns the revision number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.StrongName">
            <summary>
            Specifies whether or not the reference has been signed with a private/public key pair.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Type">
            <summary>
            Returns the type of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.Version">
            <summary>
            Returns the version of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.SupportsSpecificVersion">
            <summary>
            Returns true if the specified Reference supports SpecificVersion property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Reference.SpecificVersion">
            <summary>
            Gets or sets the value of the SpecificVersion property of the specified reference.
            Note: This method can throw a null ref exception if specified reference does 
            not represent a VSLangProj80.Reference3 instance. You can call HasReference3
            to determine if this reference represents a VSLangProj80.Reference3.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.VCProjectEngineEventsMonitor">
            <summary>
            Monitors VC project engine specific events
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VCProjectEngineEventsMonitor.HookEvents">
            <summary>
            Hooks VCProject events.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VCProjectEngineEventsMonitor.UnHookEvents">
            <summary>
            Unhooks VCProject events.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSProject.HasReference(System.String)">
            <summary>
            Returns true if the specified assembly or project is referenced.
            </summary>
            <param name="referenceName"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSProject.AddReference(System.String)">
            <summary>
            Adds an assembly reference to this project.
            </summary>
            <param name="assemblyName">The name of the assembly to add a reference to. E.g., System.Windows.Forms.dll.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSProject.AddProjectReference(System.String)">
            <summary>
            Adds a project reference to this project.
            </summary>
            <param name="projectName">The name of the project reference to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSProject.RemoveReference(System.String)">
            <summary>
            Removes an assembly reference from this project.
            </summary>
            <param name="assemblyName">The name of the assembly to remove. E.g., System.Windows.Forms.dll.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSProject.RemoveProjectReference(System.String)">
            <summary>
            Removes a project reference from this project.
            </summary>
            <param name="projectName">The name of the project reference to remove.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSProject.VSProjectObject">
            <summary>
            Returns the VSLangProj.VSProject used internal by DevExpress.CodeRush.Core.VSProject.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSProject.OutputFileName">
            <summary>
            Returns the output file name of the project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSProject.OutputPath">
            <summary>
            Return the output build path for the project.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSReference.Remove">
            <summary>
            Removes this reference from its containing project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.ReferenceObject">
            <summary>
            Returns the VSLangProj.Reference internally used by DevExpress.CodeRush.Core.Reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Name">
            <summary>
            Returns the name of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.BuildNumber">
            <summary>
            Returns the build number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.CopyLocal">
            <summary>
            Gets or sets whether the reference is copied to the local bin path.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Culture">
            <summary>
            Returns the culture of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Description">
            <summary>
            Returns a description of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Identity">
            <summary>
            Returns the unique identity of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.MajorVersion">
            <summary>
            Returns the major version number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.MinorVersion">
            <summary>
            Returns the minor version number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Path">
            <summary>
            Returns the path of the reference's binary file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.PublicKeyToken">
            <summary>
            Returns the public key token of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.RevisionNumber">
            <summary>
            Returns the revision number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.StrongName">
            <summary>
            Specifies whether or not the reference has been signed with a private/public key pair.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Type">
            <summary>
            Returns the type of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.Version">
            <summary>
            Returns the version of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.SupportsSpecificVersion">
            <summary>
            Returns true if the specified Reference supports SpecificVersion property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSReference.SpecificVersion">
            <summary>
            Gets or sets the value of the SpecificVersion property of the specified reference.
            Note: This method can throw a null ref exception if specified reference does 
            not represent a VSLangProj80.Reference3 instance. You can call HasReference3
            to determine if this reference represents a VSLangProj80.Reference3.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteEventsListener.#ctor">
            <summary>
            Initializes a new instance of the WebSiteEventsListener class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteEventsListener.HookWebSiteEvents(DevExpress.CodeRush.Core.Project)">
            <summary>
            Subscribes to WebSite project events.
            </summary>
            <param name="project">The project to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteEventsListener.UnhookWebSiteEvents(DevExpress.CodeRush.Core.Project)">
            <summary>
            Removes subscription to WebSite project events.
            </summary>
            <param name="project">The project to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteEventsListener.ReferenceAdded(DevExpress.DXCore.WebProjectInfo.WebSiteReferenceInfo)">
            <summary>
            ReferenceAdded is called when new reference is added to the project.
            </summary>
            <param name="reference">The reference added.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteEventsListener.ReferenceRemoved(DevExpress.DXCore.WebProjectInfo.WebSiteReferenceInfo)">
            <summary>
            ReferenceRemoved is called when new reference is removed from the project.
            </summary>
            <param name="reference">The reference removed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteReference.Remove">
            <summary>
            Removes this reference from its containing project.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteReference.SetName(System.String)">
            <summary>
            Sets reference name.
            </summary>
            <param name="name">The reference name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WebSiteReference.SetPath(System.String)">
            <summary>
            Sets reference path.
            </summary>
            <param name="path">The reference path.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Name">
            <summary>
            Returns the name of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.BuildNumber">
            <summary>
            Returns the build number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.CopyLocal">
            <summary>
            Gets or sets whether the reference is copied to the local bin path.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Culture">
            <summary>
            Returns the culture of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Description">
            <summary>
            Returns a description of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Identity">
            <summary>
            Returns the unique identity of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.MajorVersion">
            <summary>
            Returns the major version number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.MinorVersion">
            <summary>
            Returns the minor version number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Path">
            <summary>
            Returns the path of the reference's binary file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.PublicKeyToken">
            <summary>
            Returns the public key token of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.RevisionNumber">
            <summary>
            Returns the revision number of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.StrongName">
            <summary>
            Specifies whether or not the reference has been signed with a private/public key pair.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.StrongNameString">
            <summary>
            Gets or sets reference strong name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Type">
            <summary>
            Returns the type of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.Version">
            <summary>
            Returns the version of the reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.SourceProjectFullName">
            <summary>
            Gets source project full name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.SupportsSpecificVersion">
            <summary>
            Returns true if the specified Reference supports SpecificVersion property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WebSiteReference.SpecificVersion">
            <summary>
            Gets or sets the value of the SpecificVersion property of the specified reference.
            Note: This method can throw a null ref exception if specified reference does 
            not represent a VSLangProj80.Reference3 instance. You can call HasReference3
            to determine if this reference represents a VSLangProj80.Reference3.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileFormattingCollection.Add(DevExpress.CodeRush.Core.Replacement.FileFormatting)">
            <summary>
            Adds new file formatting to the collection.
            </summary>
            <param name="formatting">The file formatting to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileFormattingCollection.Clear">
            <summary>
            Clears all data from collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileFormattingCollection.Item(System.String)">
            <summary>
            Gets or sets file formatting at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RemoveParameterInstruction.#ctor(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the RemoveParameterInstruction class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllReferences(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Searches for references to the given declaration inside the specified scope.
            </summary>
            <param name="scope">The scope to search in.</param>
            <param name="declaration">The declaration to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CalculateRequiredParameters(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Calculates parameters that should be passed into the selected range of code
            if the code is extracted from the given method or property accessor.
            </summary>
            <param name="target">The target method or property accessor.</param>
            <param name="range">The source range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CollectLocalDeclarations(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Collects all local declarations within given LanguageElement.
            Local declaration may be Const, Variable, InitializedVariable or Param.
            </summary>
            <param name="scope">Element where to find local declarations.</param>
            <returns>Returns an ArrayList of local declarations.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CollectAssignments(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Collects all assignments to the given local variable.
            </summary>
            <param name="local">Local for which to find assignments</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CollectExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Collects all expressions in the given scope.
            </summary>
            <param name="scope">The scope to collect expressions</param>
            <param name="drillDown">Pass true if you want to drill down into the experssion nodes.</param>
            <returns>The ExpressionCollection with the found expressions.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CollectExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Collects all expressions in the given scope.
            </summary>
            <param name="scope">The scope to collect expressions</param>
            <returns>The ExpressionCollection with the found expressions.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindLocalDeclaration(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds local declaration for specified element reference if it is possible.
            The language element passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="element">The element for which to find declaration.</param>
            <returns>Returns declaration for the element reference.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindLocalDeclaration(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Finds local declaration with the given name, starting from the specified element 
            reference if it is possible.
            The language element passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="start">The start element.</param>
            <param name="name">The name of the declaration to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindFieldDeclaration(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds field declaration for specified element reference if it is possible.
            The language element passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="element">Element for which to find declaration.</param>
            <returns>Returns declaration for the element reference.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllLocalReferences(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all referecnes to a local declaration by it's name within the given scope.
            The language elements passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="scope">Scope where to find refereneces to declaration.</param>
            <param name="declaration">Declaration for which to find references.</param>
            <returns>Returns an ArrayList of ElementReference objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllFieldReferences(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all referecnes to a field declaration by it's name within the given scope.
            The language elements passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="scope">Scope where to find refereneces to declaration.</param>
            <param name="declaration">Declaration for which to find references.</param>
            <returns>Returns an ArrayList of ElementReference objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllMethodReferences(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.Int32)">
            <summary>
            Finds all references to a method by it's name and parameters count within the given scope.
            The language elements passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="scope">Scope where to find refereneces to a method.</param>
            <param name="name">The name of the method.</param>
            <param name="count">The number of parameters.</param>
            <returns>Returns an ArrayList of MethodCall objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllMethodReferences(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all references to a method by it's name and parameters count within the given scope.
            The language elements passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="scope">Scope where to find refereneces to a method.</param>
            <param name="method">The method to find references.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllNamespaceReferences(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all NamespaceReferences (with nested NamespaceReferences) within the given scope.		
            </summary>
            <param name="scope">Scope where to find namespace references.</param>
            <returns>Returns a LanguageElementCollection of NamespaceReference objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllNamespaceReferences(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Finds all NamespaceReferences within the given scope.		
            </summary>
            <param name="scope">Scope where to find namespace references.</param>
            <param name="recursive">Search for nested namespace references.</param>
            <returns>Returns a LanguageElementCollection of NamespaceReference objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllLocalDeclarations(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all local declarations within the given scope.		
            </summary>
            <param name="scope">Scope where to find local declarations.</param>
            <returns>Returns a LanguageElementCollection of local declarations.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllObjectCreationExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.Int32)">
            <summary>
            Finds all ObjectCreationExpressions by it's ObjectName and parameters count within the given scope.		
            </summary>
            <param name="scope">Scope where to find references to a method.</param>
            <param name="name">The name of the object.</param>
            <param name="count">The number of parameters.</param>
            <returns>Returns an ArrayList of ObjectCreationExpressions objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllPrimitiveExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Finds all PrimitiveExpressions by it's name within the given scope.		
            </summary>
            <param name="scope">Scope where to find primitive expressions.</param>
            <param name="name">The name of the primitive expression.</param>
            <returns>Returns an ArrayList of PrimitiveExpressions.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllTypeReferenceExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all TypeReferenceExpressions by it's level within the given scope.
            </summary>
            <param name="scope">Scope where to find TypeReferenceExpressions.</param>
            <returns>Returns an ArrayList of TypeReferenceExpressions objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllTypeReferenceExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32)">
            <summary>
            Finds all TypeReferenceExpressions by it's level within the given scope.
            </summary>
            <param name="scope">Scope where to find TypeReferenceExpressions.</param>
            <param name="level">Monimal level of the TypeReferenceExpression to find.</param>
            <returns>Returns an ArrayList of TypeReferenceExpressions objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllTypeReferenceExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Boolean)">
            <summary>
            Finds all TypeReferenceExpressions by it's level within the given scope.
            </summary>
            <param name="scope">Scope where to find TypeReferenceExpressions.</param>
            <param name="level">Monimal level of the TypeReferenceExpression to find.</param>
            <param name="includeSubReferences">Include sub TypeReferenceExpressions from DetailNodes of the TypeReferenceExpression.</param>
            <returns>Returns an ArrayList of TypeReferenceExpressions objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllRelationalOperations(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all RelationalOperations within the given scope.		
            </summary>
            <param name="scope">Scope where to find RelationalOperations.</param>
            <returns>Returns LanguageElementCollection of RelationalOperation objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllReturnStatements(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all RetusnStatements within the given scope.		
            </summary>
            <param name="scope">Scope where to find ReturnStatements.</param>
            <returns>Returns a LanguageElementCollection of ReturnStatement objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllReturnStatements(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Finds all RetusnStatements within the given scope.		
            </summary>
            <param name="scope">Scope where to find ReturnStatements.</param>
            <param name="skipDelegates">Skip ReturnStatements inside delegates.</param>
            <returns>Returns a LanguageElementCollection of ReturnStatement objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllDelegateCreationExpressions(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Finds all delegate initializations by it's method name passing as parameter within the given scope.		
            </summary>
            <param name="scope">Scope where to find refereneces to a method.</param>
            <param name="methodName">The name of the passing method.</param>		
            <returns>Returns an ArrayList of ObjectCreationExpressions objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllDefineDirectives(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all DefineDirectives within the given scope.		
            </summary>
            <param name="scope">Scope where to find DefineDirectives.</param>
            <returns>Returns LanguageElementCollection of DefineDirective objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllTypeDeclarations(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds all TypeDeclarations within the given scope.
            </summary>
            <param name="scope">Scope where to find TypeDeclarations.</param>
            <returns>Returns an ArrayList of TypeDeclaration objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllTypeDeclarations(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Finds all TypeDeclarations within the given scope.		
            </summary>
            <param name="scope">Scope where to find TypeDeclarations.</param>
            <param name="addNestedTypes">Pass true to collect nested types.</param>
            <returns>Returns an ArrayList of TypeDeclaration objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllTypeDeclarations(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean,System.Boolean)">
            <summary>
            Finds all TypeDeclarations within the given scope.		
            </summary>
            <param name="scope">Scope where to find TypeDeclarations.</param>
            <param name="addNestedTypes">Pass true to collect nested types.</param>
            <param name="addDelegates">Pass true to delegates.</param>
            <returns>Returns an ArrayList of TypeDeclaration objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllLanguageElements(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementType)">
            <summary>
            Finds all language elements of the specified type within the given scope.		
            </summary>
            <param name="scope">Scope where to find LanguageElements.</param>
            <param name="type">Type of the LanguageElement to find.</param>
            <returns>Returns a LanguageElementCollection of ReturnStatement objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllLanguageElements(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementType,System.Boolean)">
            <summary>
            Finds all language elements of the specified type within the given scope.		
            </summary>
            <param name="scope">Scope where to find LanguageElements.</param>
            <param name="type">Type of the LanguageElement to find.</param>
            <param name="findNested">Search for nested elements inside found elements.</param>
            <returns>Returns a LanguageElementCollection of ReturnStatement objects.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetElementExpression(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns element expression.
            </summary>
            <param name="element">The element to get expression from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetElementExpressionTypeName(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns type name that element expression should match.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetElementExpressionTypeName(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns type name that element expression should match.
            </summary>
            <param name="simplify"></param>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionTypeFromContext(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Returns the type name of the given expression by analyzing expression context.
            </summary>
            <param name="expression">The Expression descendant.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionTypeFromContext(DevExpress.CodeRush.StructuralParser.Expression,System.Boolean)">
            <summary>
            Returns the type name of the given expression by analyzing expression context.
            </summary>
            <param name="simplify"></param>
            <param name="expression">The Expression descendant.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionTypeFromContext(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the type name that the given element expression should match by analyzing expression context.
            </summary>
            <param name="element">The language element to start from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionTypeFromContext(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns the type name that the given element expression should match by analyzing expression context.
            </summary>
            <param name="simplify"></param>
            <param name="element">The language element to start from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionType(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Returns type of the given expression.
            </summary>
            <param name="expression">The Expression descendant.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionTypeName(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Returns the type name of the given expression.
            </summary>
            <param name="expression">The Expression descendant.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetExpressionFullTypeName(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Returns the full type name of the given expression.
            </summary>
            <param name="expression">The Expression descendant.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetElementTypeName(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the type name of the given element.
            </summary>
            <param name="element">The LanguageElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetElementTypeName(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns the type name of the given element.
            </summary>
            <param name="element">The LanguageElement.</param>
            <param name="simplify"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.FindAllReferences(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Searches for references to the given declaration inside the specified scope.
            </summary>
            <param name="scope">The scope to search in.</param>
            <param name="declaration">The declaration to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetLanguageElement(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets LanguageElement from the given IElement instance.
            This method will return null, if IElement instance doesn't have
            corresponding LanguageElement available (e.g. when IElement instance is declared inside referenced assembly).
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetLanguageElementCollection(DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Gets LanguageElementCollection from the given IElementCollection instance.
            This method will return empty collection, if IElementCollection instance doesn't have
            corresponding elements available.
            </summary>
            <param name="elements">The elements to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetUniqueName(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Returns unique element name in the class.
            </summary>
            <param name="element">Element to find name for (e.g. method, const).</param>
            <param name="name">Current name to find unique name for (e.g. "Variable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetUniqueName(DevExpress.CodeRush.StructuralParser.LanguageElementType,System.String)">
            <summary>
            Returns unique element name in the class.
            </summary>
            <param name="type">Type of the element to find name for (e.g. method, const).</param>
            <param name="name">Current name to find unique name for (e.g. "Variable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetUniqueName(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Returns unique element name in the scope.
            </summary>
            <param name="scope">Scope to find element in (e.g. class, method).</param>
            <param name="element">Element to find name for (e.g. method, const).</param>
            <param name="name">Current name to find unique name for (e.g. "Variable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetUniqueName(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementType,System.String)">
            <summary>
            Returns unique element name.
            </summary>
            <param name="scope">Scope to find element in (e.g. class, method).</param>
            <param name="type">Type of the element to find name for (e.g. method, const).</param>
            <param name="name">Current name to find unique name for (e.g. "Variable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetUniqueNameInsideScope(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Returns unique element name.
            </summary>
            <param name="scope">Scope to find element in (e.g. class, method).</param>
            <param name="name">Current name to find unique name for (e.g. "Variable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetUniqueNameInsideScope(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.Boolean)">
            <summary>
            Returns unique element name.
            </summary>
            <param name="scope">Scope to find element in (e.g. class, method).</param>
            <param name="name">Current name to find unique name for (e.g. "Variable").</param>
            <param name="caseSensitive">Pass true to perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.Get(System.String)">
            <summary>
            Returns refactoring provider with the given name if it exists.
            </summary>
            <param name="name">The name of the refactoring provider to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetAvailability(System.String)">
            <summary>
            Returns the availability of the specified refactoring.
            </summary>
            <param name="name">The name of the refactoring provider to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.IsAvailable(System.String)">
            <summary>
            Returns true if the specified refactoring provider is available.
            </summary>
            <param name="name">The name of the refactoring provider to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.HasExpression(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Checks if the passed element has an expression. This method
            will return true for the following elements: if, while, do and
            initialized variable element.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.SimplifyExpression(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Simplifies the given expression.
            </summary>
            <param name="expression">The Expression to simplify.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.InjectFakeElement(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Injects fake element into SourceTree.
            </summary>
            <param name="path">The path of file to inject element</param>
            <param name="point">The point to inject element</param>
            <param name="element">The element to inject</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.InjectFakeElement(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementType,DevExpress.CodeRush.StructuralParser.LanguageElementType[])">
            <summary>
            Injects fake element into SourceTree.
            </summary>
            <param name="path">The path of file to inject element</param>
            <param name="point">The point to inject element</param>
            <param name="element">The element to inject</param>
            <param name="parentType">Parent element type for element injection</param>
            <param name="parentTypes">Parent element types for element injection</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ProcessInnerTypes(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Converts simple type references to full type references taking into account nested types of the active type.
            </summary>
            <param name="source"></param>
            <param name="sourceClone"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ResolveShortTypesToFullTypesIfNeeded(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Converts short type names to full type names in the target element that can be located in a different type. e.g. "String" -> "System.String" if "System" namespace isn't referenced.
            </summary>
            <param name="targetElement">Target element, e.g. target type where "sourceClone" goes.</param>
            <param name="source"></param>
            <param name="sourceClone"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedByRefOrOutArgument(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument to a reference parameter or an out parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedByRefOrOutArgument(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument to a reference parameter or an out parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedByRefArgument(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument to a reference parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedByRefArgument(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument to a reference parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedAsOutArgument(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument to an out parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedAsOutArgument(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument to an out parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedAsAnArgument(DevExpress.CodeRush.StructuralParser.ScopeResolveResult,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.ReferenceIsPassedAsAnArgument(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the specified element reference is passed as an argument.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CanShowSmartTagAsync(DevExpress.CodeRush.Core.AsyncAvailabilityEventArgs)">
            <summary>
            Return true if there's at least one refactoring provider available.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.HideSmartTag">
            <summary>
            Hides smart tag if it is active.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.StoreInsertionPoint(EnvDTE.EditPoint)">
            <summary>
            Stores insertion point, that can be used later to move to it's location.
            You should create insertion point manually before calling this method.
            </summary>
            <param name="point">EnvDTE.EditPoint to store.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.GetInsertionPoint">
            <summary>
            Provides access to previously stored insertion point by call to StoreInsertionPoint.
            </summary>
            <returns>Returns previously stored EnvDTE.EditPoint.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RefactoringServices.CleanUpInsertionPoint">
            <summary>
            Clean ups previously stored insertion point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.Active">
            <summary>
            Gets currently active refactoring.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.IsActive">
            <summary>
            Returns true if a refactoring is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.Providers">
            <summary>
            Returns an array of all registered refactorings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.AvailableRefactorings">
            <summary>
            Returns an ArrayList of all available in the current context refactorings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.CanShowSmartTag">
            <summary>
            Return true if there's at least one refactoring provider available.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.ActivePicker">
            <summary>
            Gets currently active target picker.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.IsMenuActive">
            <summary>
            Returns true if the refactoring menu is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.PickerIsActive">
            <summary>
            Returns true if current target picker is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.SuppressActionHints">
            <summary>
            Gets or sets property that control refactoring action hints.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.IsSmartTagActive">
            <summary>
            Returns true if smart tag is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.RefactoringIsActive">
            <summary>
            Returns true if some refactoring is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RefactoringServices.RefactoringMenuIsActive">
            <summary>
            Returns true if refactoring menu is active.
            </summary>
        </member>
        <member name="M:DevExpress.Refactor.Core.SubMenuItem.AddSubMenuItem(DevExpress.Refactor.Core.SubMenuItem)">
            <summary>
            Adds a sub menu item into this sub menu item.
            </summary>
            <param name="subMenuItem">The item to add.</param>
        </member>
        <member name="P:DevExpress.Refactor.Core.SubMenuItem.SubMenuItems">
            <summary>
            Gets an array of sub menu items.
            </summary>
        </member>
        <member name="P:DevExpress.Refactor.Core.SubMenuItem.HasSubMenuItems">
            <summary>
            Gets the value indicating whether this sub menu item has other sub menu items.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SearcherProvider.ActiveFileOnly">
            <summary>
            Set ActiveFileOnly to true if the scope for this searcher provider is only active file (e.g. Local Searcher).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SearcherProvider.AffectProjectItems">
            <summary>
            Set AffectProjectItems to true if this searcher provider needs to rename project items(files and folders) while working in the Rename mode.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SearcherProvider.UseForRenaming">
            <summary>
            Set UseForRenaming to true if this searcher provider should be used in the refactoring "Rename".
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SearcherProvider.UseForNavigation">
            <summary>
            Set UseForNavigation to true if this searcher provider should be used in the "Tab to Next Reference" plug-in.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SearcherProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your sercher to one or more programming languages.
            If you do not handle this event, your sercher will be available in all programming languages.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SearcherProvider.CheckAvailability">
            <summary>
            Handle this event to indicate what conditions this provider is available or recommended
            under.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SearcherProvider.SearchReferences">
            <summary>
            Handle this event to search all references.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SearcherProvider.SearchPreviewReferences">
            <summary>
            Handle this event to search all references.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SearcherProvider.GetRangeToSelect">
            <summary>
            Handle this event to get range which to need select after searching.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SearcherProvider.CollectAffectedProjectItems">
            <summary>
            Handle this event if searcher provider need to rename project items.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.TypesMatch(System.Type,System.String,System.Boolean)">
            <summary>
            Determines whether specified types are equivalent.
            </summary>
            <param name="aType">The type to check.</param>
            <param name="aMatchType">The fully-qualified name (e.g., "System.Boolean") of the type to check against.</param>
            <param name="aDescendantsAreValid">Whether descendants of aMatchType qualify as match.</param>
            <returns>Returns true if the specified types match.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.HasProperty(System.Object,System.String,System.String)">
            <summary>
            Determines where the specified object has the specified property.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropertyType">The fully-qualified name (e.g., "System.Boolean") of the type to check. Descendants of this type will be included in the search.</param>
            <param name="aPropertyName">The name of the property to look for.</param>
            <returns>Returns true if the specified object has the specified property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.HasProperty(System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Determines where the specified object has the specified property.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropertyType">The fully-qualified name (e.g., "System.Boolean") of the type to check.</param>
            <param name="aPropertyName">The name of the property to look for.</param>
            <param name="aDescendantsAreValid">Whether descendants of aPropertyType can be included in this check.</param>
            <returns>Returns true if the specified object has the specified property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.HasProperty(System.Object,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Determines where the specified object has the specified property.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropertyType">The fully-qualified name (e.g., "System.Boolean") of the type to check.</param>
            <param name="aPropertyName">The name of the property to look for.</param>
            <param name="aDescendantsAreValid">Whether descendants of aPropertyType can be included in this check.</param>
            <param name="aMustBeBrowsable">Whether the property found must support browsing in the Property Inspector.</param>
            <returns>Returns true if the specified object has the specified property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.HasBrowsableProperty(System.Object,System.String)">
            <summary>
            Determines whether a given object has a specified property that is browsable.
            </summary>
            <param name="aObject">The object to check.</param>
            <param name="aPropName">The name of the property.</param>
            <returns>Returns true if the specified property exists and is browsable; returns false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.InheritsFrom(System.Type,System.String)">
            <summary>
            Returns true if aTestType is of type aTypeName.
            </summary>
            <param name="aTestType">The type to test</param>
            <param name="aTypeName">Fully-qualified type name (including namespace)</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.InheritsFrom(System.Type,System.Type)">
            <summary>
            Returns true if aTestType inherits from aAncestorType.
            </summary>
            <param name="aTestType">The type to test</param>
            <param name="aAncestorType">The ancestor class to check against</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.CallStaticVirtualMethod(System.Type,System.String,System.Object[])">
            <summary>
            Calls a static method inside aType (or an ancestor class)
            </summary>
            <param name="aType">The class (or a descendant) containing the method you want to call.</param>
            <param name="aMethodName">The name of the static method to call.</param>
            <param name="aArgs">Arguments to aMethodName.</param>
            <returns>Returns the result of the method call as an object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.CallStaticVirtualMethod(System.Type,System.String)">
            <summary>
            Calls a static method inside aType (or an ancestor class)
            </summary>
            <param name="aType">The class (or a descendant) containing the method you want to call.</param>
            <param name="aMethodName">The name of the static method to call.</param>
            <returns>Returns the result of the method call as an object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.CallInheritedStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Calls a static method inside an ancester of aType.
            </summary>
            <param name="aType">The class descending from an ancestor class containing the method you want to call.</param>
            <param name="aMethodName">The name of the static method to call.</param>
            <param name="aArgs">Arguments to aMethodName.</param>
            <returns>Returns the result of the method call as an object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetDefaultMembers(System.Object)">
            <summary>
            Finds the default members for an object.
            </summary>
            <param name="aObject">The object to query.</param>
            <returns>An array of MemberInfo instances representing the default default in the specified object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetDefaultProperty(System.Object)">
            <summary>
            Returns a PropertyInfo instance representing the specified default property.
            </summary>
            <param name="aObject">The object to test.</param>
            <returns>A PropertyInfo instance representing the specified default property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetPropertyInfo(System.Object,System.String)">
            <summary>
            Returns a PropertyInfo instance representing the specified public property.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropName">The name of the public property to find.</param>
            <returns>A PropertyInfo instance representing the specified public property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetPropertyDescriptor(System.Object,System.String)">
            <summary>
            Gets a PropertyDescriptor for a specified object and property name.
            </summary>
            <param name="aObject">The object to check.</param>
            <param name="aPropName">The name of the property.</param>
            <returns>A PropertyDescriptor if found, or null if the property was not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetPropertyDescriptor(System.Object,System.String,System.Boolean)">
            <summary>
            Gets a PropertyDescriptor for a specified object and property name.
            </summary>
            <param name="aObject">The object to check.</param>
            <param name="aPropName">The name of the property.</param>
            <param name="aIgnoreCase">True if you want to ignore the case of the property name; false otherwise.</param>
            <returns>A PropertyDescriptor if found, or null if the property was not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetNonPublicPropertyInfo(System.Object,System.String)">
            <summary>
            Returns a PropertyInfo instance representing the specified non-public (e.g., private, protected, etc.) property.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropName">The name of the non-public property to find.</param>
            <returns>A PropertyInfo instance representing the specified non-public property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetDefaultPropertyInfo(System.Object,System.String,System.Object@)">
            <summary>
            Returns a PropertyInfo instance for the default property specified by aPropName
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetValue(System.Object,System.String)">
            <summary>
            Gets a value for a public property in an object.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropName">The public property to query.</param>
            <returns>The value for the public property in the specified object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetValue(System.Object,System.String,System.Object[])">
            <summary>
            Gets a value for an indexed default property in an object.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropName">The default property to query.</param>
            <param name="aIndexes">An array of indexes into a default property indexer.</param>
            <returns>The value for the default property in the specified object.</returns>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetNonPublicValue(System.Object,System.String)">
            <summary>
            Returns a value for a non-public property in an object.
            </summary>
            <param name="aObject">The object to test.</param>
            <param name="aPropName">The non-public property to query.</param>
            <returns>The value for the non-public property in the specified object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.GetPropertyValueList(System.Object)">
            <summary>
            Gets a list of properties and values for the specified object. This method can be useful in debugging objects.
            </summary>
            <param name="aObject">The object to test.</param>
            <returns>A string separated by carriage returns containing the properties 
            and the values for the specified object.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a value for a public property in a component. Use this method to change component properties at design-time. The document will be automatically marked as being modified, and undo will be automatically supported.
            </summary>
            <param name="aObject">The object to manipulate.</param>
            <param name="aPropName">The public property to change.</param>
            <param name="aValue">The value to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a value for a specified property in an object.
            </summary>
            <param name="aObject">The object to manipulate.</param>
            <param name="aPropName">The public property to change.</param>
            <param name="aValue">The value to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.SetValue(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            Sets a value for an indexed default property in an object.
            </summary>
            <param name="aObject">The object to manipulate.</param>
            <param name="aPropName">The default property to change.</param>
            <param name="aValue">The new value.</param>
            <param name="aIndexes">An array of indexes into a default property indexer.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.SetNonPublicValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a value for a non-public property in an object.
            </summary>
            <param name="aObject">The object to manipulate.</param>
            <param name="aPropName">The non-public property to change.</param>
            <param name="aValue">The value to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReflectionServices.StringToEnum(System.Type,System.String)">
            <summary>
            Converts a named enum value to its enum equivalent.
            </summary>
            <param name="enumType">A System.Enum descendant (your enumeration)</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AliasCollection.#ctor">
            <summary>
            Construct a new instance of AliasCollection with default delimiters ('%')
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AliasCollection.#ctor(System.String,System.String)">
            <summary>
            Construct a new instance of AliasCollection with the specified delimiters. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AliasCollection.#ctor(System.String,System.String,System.Char)">
            <summary>
            Construct a new instance of AliasCollection with the specified delimiters and escape character. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AliasCollection.MakeDelimitedName(System.String)">
            <summary>
            Applies delimiters to the passed name
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AliasReplaceOption">
            <summary>
            Options used when replacing aliases in a string with AliasCollection.ReplaceAliases
            
            aroDiscard : delete any unrecognized aliases
            aroKeep : leave unrecognized aliases in the string
            aroThrowException : throw an exception on finding an unrecognized alias 
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.AliasReplaceException">
            <summary>
            Thrown when an unrecognized alias is found in AliasCollection.ReplaceAliases
            when the aroThrowException flag is used
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AliasReplacer.ReplaceAliases(System.String)">
            <summary>
            Replace all aliases in the passed string with the matching values from the collection,
            discarding any unrecognized aliases.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.AliasReplacer.ReplaceAliases(System.String,DevExpress.CodeRush.Core.AliasReplaceOption)">
            <summary>
            Replace all aliases in the passed string with the matching values from the collection, 
            handling unrecognized aliases as specified by the passes AliasReplaceOption
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IRegExEngine.GetSystemAliases(System.String)">
            <summary>
            Retrieve an array of system aliases for the specified language
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IRegExEngine.GetAliases(System.String)">
            <summary>
            Retrieve an array of regular aliases for the specified language
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the regular expression finds a match in the 
            input string, using the regular expression specified in the 
            pattern parameter and the matching options supplied in the options parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the regular expression finds a match in 
            the input string using the regular expression specified in 
            the pattern parameter.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for an occurrence of the regular 
            expression supplied in a pattern parameter with matching options 
            supplied in an options parameter.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for an occurrence of the 
            regular expression supplied in the pattern parameter.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of the 
            regular expression supplied in a pattern parameter with matching 
            options supplied in an options parameter.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Matches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of the 
            regular expression specified in the pattern parameter.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Replaces all occurrences of a character pattern defined by a specified 
            regular expression with a replacement character string starting at the 
            first character. Options can be specified to modify matching behavior 
            and a MatchEvaluator delegate is called at each match to evaluate the replacement.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Replaces all occurrences of a pattern defined by a specified regular 
            expression with a specified replacement character string, starting at 
            the first character in the input string. Options can be specified to 
            modify matching behavior.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Replaces all occurrences of a character pattern defined by a 
            regular expression with a replacement character string starting at 
            the first character. A MatchEvaluator delegate is called at each 
            match to evaluate the replacement.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of matches defined by the regular expression 
            with a replacement string, starting at the first character in the input string.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.ReplaceRegexAliases(System.String,System.Boolean)">
            <summary>
            Replace aliases in the passed string, using first Aliases then SystemAliases, and
            optionally throwing an exception if an unrecognized alias is found.
            </summary>
            <param name="text">String in which to replace aliases</param>
            <param name="throwError">If true, will throw an AliasNotFound
            exception if an unrecognized alias is found. If false, will discard the unrecognized
            alias.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.ReplaceRegexAliases(System.String)">
            <summary>
            Replace aliases in the passed string, using first Aliases then SystemAliases.
            Discards unrecognized aliases.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegExServices.Split(System.String,System.String)">
            <summary>
            Splits the input string at the positions defined by a regular expression 
            pattern.
            Replaces aliases in the pattern before calling the Regex object. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegExServices.Aliases">
            <summary>
            Regular expression aliases - language neutral
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegExServices.AliasesLang">
            <summary>
            Regular expression aliases - language specific
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegExServices.SystemAliases">
            <summary>
            Regular expression aliases for internal system use only - language neutral
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegExServices.SystemAliasesLang">
            <summary>
            Regular expression aliases for internal system use only - language specific
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.RegionExpander">
            <summary>
            Summary description for RegionExpander.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegionExpander.Initialize(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Initializes this region expander with the given
            text document object.
            </summary>
            <param name="textDocument">The text document to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegionExpander.CleanUp">
            <summary>
            Cleans up this region expander.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RegionExpander.ExpandParentRegions(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Expands all regions that hide the given point.
            Collapses all regions that were expanded at the previous
            call to ExpandParentRegions.
            </summary>
            <remarks>
            Note that if there will be a parse between two sequencial
            calls to ExpandParentRegions, then this method could fail.
            </remarks>
            <param name="sourcePoint">The source point to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegionExpander.OuterRegions">
            <summary>
            Gets the collection of outer regions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegionExpander.ExpandedRegions">
            <summary>
            Gets the collection of expanded regions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RegionExpander.TextDocument">
            <summary>
            Gets text document that is used by this regions expander
            instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.ClearLinks">
            <summary>
            Clears all links in the SourceRange of this change
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.GetEditPoints">
            <summary>
            Get all EditPoints used by this change
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.SavePushOptions">
            <summary>
            Saves push options of EditPoints for this change
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.MakeTotallyPushable">
            <summary>
            Change PushOptions of EditPoints for this change to make it totally pushable
            You need use RestoreDefaultPushOptions to restore default push options
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.RestoreDefaultPushOptions">
            <summary>
            Restores default push options for EditPoints
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.Execute">
            <summary>
            Executes this change in TextDocument
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.Execute(DevExpress.CodeRush.Core.Replacement.DocChangeContext)">
            <summary>
            Executes this change in TextDocument		
            </summary>
            <param name="context">The context for change</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.Change.BindToCode">
            <summary>
            Regenerates EditPoints for bounds in TextDocument
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.ApplyChanges">
            <summary>
            Applyes the changes for current DocChangeElement
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.ApplyChanges(DevExpress.CodeRush.Core.Replacement.DocChangeContext)">
            <summary>
            Applies the changes for current DocChangeElement
            </summary>
            <param name="context">Context for current change.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.RefreshDocument(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Refreshes information about TextDocument for current DocChangeElement
            </summary>
            <param name="newDocument"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.GetEditPoints">
            <summary>
            Returns all EditPoints created by current DocChangeElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.GetTextChangeArgs">
            <summary>
            Gets TextChangeArgs for current DocChangeElement
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.FormFileChanges(DevExpress.CodeRush.Core.Replacement.DocChangeContext)">
            <summary>
            Forms file change from current element.
            </summary>
            <param name="context">Context for current change</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.Document">
            <summary>
            Gets TextDocument where changes will be applied
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.FileNode">
            <summary>
            Gets FileNode where changes will be applied
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.IsDiscChange">
            <summary>
            Returns true if current DocChangeElement describes changes in closed file (not in TextDocument)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.DocumentFullName">
            <summary>
            Returns full name for document where changes will be applied
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.IDocChangeElement.DocumentIsValid">
            <summary>
            Returns true is TextDocument is valid
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.DocChangeElement.FormFileChanges(DevExpress.CodeRush.Core.Replacement.DocChangeContext)">
            <summary>
            Forms file change from current element.
            </summary>
            <param name="context">Context for current change</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.DocChangeElement.GetEditPoints">
            <summary>
            Return list of EditPoints using bu this element
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChange.#ctor">
            <summary>
            Initializes a new instance of the FileChange class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChange.#ctor(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Initializes a new instance of the FileChange class.
            </summary>
            <param name="path">The path to the file to change.</param>
            <param name="point">The source point of the change.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChange.#ctor(System.String,DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Initializes a new instance of the FileChange class.
            </summary>
            <param name="path">The path to the file to change.</param>
            <param name="range">The source range of the change.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChange.Path">
            <summary>
            Gets or sets file path for the change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChange.File">
            <summary>
            Gets or sets file path for the change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChange.Range">
            <summary>
            Gets or sets source range for the change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChange.Text">
            <summary>
            Gets or sets text for the change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChange.Order">
            <summary>
            Gets or sets order of changes. 
            This will be used in order of change executing when group of changes occur in equal place.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChange.Data">
            <summary>
            Gets or sets associated data.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Apply">
            <summary>
            Applies all changes from this collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Add(DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Adds file change to the collection.
            </summary>
            <param name="fileChange">The file change to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.AddRange(DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Adds file changes to the collection.
            </summary>
            <param name="changes">The file changes to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.IndexOf(DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Returns index of the spcified file change.
            </summary>
            <param name="fileChange">The file change to get index.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Insert(System.Int32,DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Inserts the specified file change into this collection at the given index.
            </summary>
            <param name="index">The index to insert.</param>
            <param name="fileChange">The file change to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Remove(DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Removes file change from the collection.
            </summary>
            <param name="fileChange">The file change to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Contains(DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Returns true if this collection contains the specified file change.
            </summary>
            <param name="fileChange">The file change to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.GetRanges">
            <summary>
            Returns an array of source ranges.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Clone">
            <summary>
            Clones this collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts this collection.
            </summary>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.CreateInstance(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String)">
            <summary>
            Creates a new instance of the FileChangeCollection class.
            </summary>
            <param name="fileNode">The file for changes.</param>
            <param name="ranges">The array of ranges.</param>
            <param name="text">The text for changes.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileChangeCollection.Item(System.Int32)">
            <summary>
            Gets or sets file change at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ChangeFile(System.String,DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Changes the specified file using the collection of changes.
            </summary>
            <param name="path">The file to chage.</param>
            <param name="changes">The group of changes to apply.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ChangeFile(System.String,DevExpress.CodeRush.Core.Replacement.FileChangeCollection,DevExpress.CodeRush.Core.Replacement.FileChangeProcessor)">
            <summary>
            Changes the specified file using the collection of changes.
            </summary>
            <param name="path">The file to chage.</param>
            <param name="changes">The group of changes to apply.</param>
            <param name="processor">The FileChangeProcessor used for changing text buffer and processing text markers.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.Boolean)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.Boolean,DevExpress.CodeRush.Core.Replacement.FileChangeProcessor)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
            <param name="processor">The FileChangeProcessor used for changing text buffer and processing text markers.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.String,System.Boolean)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="description">The description of the changes. The description will be used for multi undo unit.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.String,System.Boolean,DevExpress.CodeRush.Core.Replacement.FileChangeProcessor)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="description">The description of the changes. The description will be used for multi undo unit.</param>
            <param name="withUndo">The value determining if multi undo unit should be applied.</param>
            <param name="processor">The FileChangeProcessor used for changing text buffer and processing text markers.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileChangeExecutor.ApplyChanges(DevExpress.CodeRush.Core.Replacement.FileChangeCollection,System.Boolean,System.Boolean)">
            <summary>
            Applies the specified group of changes.
            </summary>
            <param name="changes">The group of changes to apply.</param>
            <param name="withFormat">The value determining if format should be applied.</param>
            <param name="withMultiLinks">The value determining if multi-links should be applied.
            WARNING: You need open new multi-link container group!
            </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddFormatRanges(DevExpress.CodeRush.Core.SourceRangeCollection)">
            <summary>
            Add format ranges from collection
            </summary>
            <param name="ranges">Format ranges collection</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddFormatRanges(DevExpress.CodeRush.StructuralParser.SourceRange[])">
            <summary>
            Add format ranges from array
            </summary>
            <param name="ranges">Format ranges array</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddFormatRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Add format range
            </summary>
            <param name="range">Range for format</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddLinkRanges(DevExpress.CodeRush.Core.SourceRangeCollection)">
            <summary>
            Add multilink ranges from collection
            </summary>
            <param name="ranges">Links range collection</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddLinkRanges(DevExpress.CodeRush.StructuralParser.SourceRange[])">
            <summary>
            Add multilink ranges from array
            </summary>
            <param name="ranges">Link ranges array</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddLinkRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Add multilink range
            </summary>
            <param name="range">Link range</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.Format">
            <summary>
            Format ranges
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.AddMultiLinks">
            <summary>
            Link ranges
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.LinkRanges">
            <summary>
            Get link ranges or null if don't exist
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.FormatRanges">
            <summary>
            Get format ranges or null if don't exist
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileBindedRanges.File">
            <summary>
            Get file name
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.Add(DevExpress.CodeRush.Core.Replacement.FileBindedRanges)">
            <summary>
            Add new FileBindedRanges
            </summary>
            <param name="bindedRanges">Object to add</param>
            <returns>index in collection</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddFormatRanges(System.String,DevExpress.CodeRush.Core.SourceRangeCollection)">
            <summary>
            Add format ranges to specified file from collection
            </summary>
            <param name="file">File name</param>
            <param name="ranges">Format ranges collection</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddFormatRanges(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[])">
            <summary>
            Add format ranges to specified file from array
            </summary>
            <param name="file">File name</param>
            <param name="ranges">Format ranges array</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddFormatRange(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Add format ranges to specified file from source range
            </summary>
            <param name="file">File name</param>
            <param name="range">Format range</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddLinkRanges(System.String,DevExpress.CodeRush.Core.SourceRangeCollection)">
            <summary>
            Add link ranges to specified file from collection
            </summary>
            <param name="file">File name</param>
            <param name="ranges">Link ranges collection</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddLinkRanges(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[])">
            <summary>
            Add link ranges to specified file from array
            </summary>
            <param name="file">File name</param>
            <param name="ranges">Link ranges array</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddLinkRange(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Add link ranges to specified file from source range
            </summary>
            <param name="file">File name</param>
            <param name="range">Link range</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.Format">
            <summary>
            Format all ranges
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.AddMultiLinks">
            <summary>
            Add multilinks from ranges
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.Item(System.String)">
            <summary>
            Get FileBindedRanges by file name
            </summary>
            <param name="file">File name</param>
            <returns>File binded ranges or null if don't exist</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.FileBindedRangesCollection.Item(System.Int32)">
            <summary>
            Get FileBindedRanges by index
            </summary>
            <param name="index">File index</param>
            <returns>File binded ranges or null if don't exist</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.GroupedFileChanges.#ctor">
            <summary>
            Initializes a new instance of the SolutionChanges class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.GroupedFileChanges.Add(DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Adds the specified file change.
            </summary>
            <param name="change">The change to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.GroupedFileChanges.AddRange(DevExpress.CodeRush.Core.Replacement.FileChangeCollection)">
            <summary>
            Adds the specified file change collection.
            </summary>
            <param name="changes">The changes to add.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Replacement.GroupedFileChanges.Groups">
            <summary>
            Gets a hastable of file changes hashed by file path as a key and FileChangeCollection as a value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.SetTextChange.ClearLinks">
            <summary>
            Breaks all links from the range where replvements occurs.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.ReverseFileChangeSorter.#ctor">
            <summary>
            Initializes a new instance of the ReverseFileChangeSorter class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Replacement.ReverseFileChangeSorter.Compare(DevExpress.CodeRush.Core.Replacement.FileChange,DevExpress.CodeRush.Core.Replacement.FileChange)">
            <summary>
            Compares the specified two file changes.
            </summary>
            <param name="x">The first chagne.</param>
            <param name="y">The second change.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.UseColorImages">
            <summary>
            Uses color source model images
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.UseMonochromeImages">
            <summary>
            Uses monochrome (blue and white) source model images
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.DrawSourceModelImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the image at the specified index onto a Graphics location. 
            Clipping rects are checked and the image is only drawn if the 
            center of the graphic is inside the clipping rect/region.
            </summary>
            <param name="graphics">The graphics object to draw on.</param>
            <param name="x">The horizontal coordinate of the image.</param>
            <param name="y">The vertical coordinate of the image.</param>
            <param name="imageIndex">The index into the shared images list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.DrawSourceModelImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Draws the image at the specified index onto a Graphics location. 
            Clipping rects are checked and the image is only drawn if the 
            center of the graphic is inside the clipping rect/region.
            </summary>
            <param name="graphics">The graphics object to draw on.</param>
            <param name="x">The horizontal coordinate of the image.</param>
            <param name="y">The vertical coordinate of the image.</param>
            <param name="imageIndex">The index into the shared images list.</param>
            <param name="opacity">The opacity value of the image.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.HighlightSourceModelImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Highlights the image at the specified index onto a Graphics location. 
            Clipping rects are checked and the image is only drawn if the 
            center of the graphic is inside the clipping rect/region.
            </summary>
            <param name="graphics">The graphics object to draw on.</param>
            <param name="x">The horizontal coordinate of the image.</param>
            <param name="y">The vertical coordinate of the image.</param>
            <param name="imageIndex">The index into the shared images list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.HighlightSourceModelImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Highlights the image at the specified index onto a Graphics location. 
            Clipping rects are checked and the image is only drawn if the 
            center of the graphic is inside the clipping rect/region.
            </summary>
            <param name="graphics">The graphics object to draw on.</param>
            <param name="x">The horizontal coordinate of the image.</param>
            <param name="y">The vertical coordinate of the image.</param>
            <param name="imageIndex">The index into the shared images list.</param>
            <param name="opacity">The opacity value of the image.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.GetSourceModelImage(System.Int32)">
            <summary>
            Returns source model image with the given index.
            </summary>
            <param name="index">The index of the image to get.</param>
            <returns>Returns source model image with the given index.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Resources.GetSourceModelHighlightImage(System.Int32)">
            <summary>
            Returns highlighted source model image with the given index.
            </summary>
            <param name="index">The index of the image to get.</param>
            <returns>Returns highlighted source model image with the given index.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Resources.SourceModelImages">
            <summary>
            Shared images for representing elements of the source model.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Resources.SourceModelHighlightImages">
            <summary>
            Shared images for representing highlighted elements (e.g., bright images to be painted on a dark background) of the source model.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Resources.VisualStudioIcon">
            <summary>
            Returns the Visual Studion icon (2008 or 2010 - depending on the current version loaded).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Resources.VisualStudio2008Icon">
            <summary>
            Returns the Visual Studion 2008 icon (16x16).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Resources.VisualStudio2010Icon">
            <summary>
            Returns the Visual Studion 2010 icon (16x16).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SearcherServices">
            <summary>
            Reference search services.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SearcherServices.#ctor">
            <summary>
            Creates a new instance of the SearcherServices class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SearcherServices.Get(System.String)">
            <summary>
            Returns search provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
            <returns>SearcherProvider instance if found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SearcherServices.GetFirstAvailableRenamingSearcher">
            <summary>
            Returns first available search provider which it is possible to use for renaming.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SearcherServices.GetAllAvailableRenamingSearchers">
            <summary>
            Returns all available search providers which it is possible to use for renaming.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SearcherServices.GetFirstAvailableNavigationSearcher">
            <summary>
            Returns first available search provider which it is possible to use for navigation.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SelectionServices">
            <summary>
            Provides services for manipulating selected text in the editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.Collapse">
            <summary>
            Collapses the current selection if automatic outlining is turned off. 
            Call CodeRush.Outline.ExpandCurrent() to restore the collapsed region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.GetPoints(DevExpress.CodeRush.StructuralParser.SourcePoint@,DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Outputs the anchor and active points of the active selection via the
            anchorPoint and activePoint parameters. If no text is selected, activePoint will
            represent the active caret position. If no document is open, aActivePoint 
            and anchorPoint will be set to empty SourcePoints. This method returns true if
            a selection exists; otherwise, false.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectWord">
            <summary>
            Selects the word at the cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectToMarker">
            <summary>
            Selects from the cursor to the topmost marker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectRange(EnvDTE.TextPoint,EnvDTE.TextPoint)">
            <summary>
            Selects the range between the specified TextPoints in the active document.
            </summary>
            <param name="anchorPoint">The anchor of the selection.</param>
            <param name="activePoint">The cursor position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified range in the active document.
            </summary>
            <param name="anchorLine">The starting line number of the range to select.</param>
            <param name="anchorColumn">The view column on the first line of the range to select.</param>
            <param name="activeLine">The last line number of the range to select.</param>
            <param name="activeColumn">The view column on the last line of the range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectRange(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Selects the specified range in the active document.
            </summary>
            <param name="anchorPoint">The starting SourcePoint of the range to select.</param>
            <param name="activePoint">The ending SourcePoint of the range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Selects the specified range in the active document.
            </summary>
            <param name="range">The range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.Delete">
            <summary>
            Deletes the selected text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.GetPoints(EnvDTE.VirtualPoint@,EnvDTE.VirtualPoint@)">
            <summary>
            Outputs the anchor and active points of the active selection via parameters 
            aAnchorPoint and aActivePoint. If no text is selected, aActivePoint will
            represent the active caret position. If no document is open, aActivePoint 
            and aAnchorPoint will be set to null.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectRange(EnvDTE.TextPoint,EnvDTE.TextPoint,DevExpress.CodeRush.Core.TextSelection)">
            <summary>
            Selects the range between the specified TextPoints.
            </summary>
            <param name="anchorPoint">The anchor of the selection.</param>
            <param name="activePoint">The cursor position.</param>
            <param name="textSelection">The TextSelection object to select. If null, the active selection is used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.SelectRange(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.TextSelection)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="startLine">The starting line number of the range to select.</param>
            <param name="startOffset">The column offset on the first line of the range to select.</param>
            <param name="endLine">The ending line number of the range to select.</param>
            <param name="endOffset">The column offset on the last line of the range to select.</param>
            <param name="textSelection">The TextSelection object to select. If null, the active selection is used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.Restore(DevExpress.CodeRush.Core.SelectionState)">
            <summary>
            Restores a previously-saved selection.
            </summary>
            <param name="selectionState">The SelectionState object to restore. You can create a new SelectionState object by calling "CodeRush.Selection.Save()".</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.Save(DevExpress.CodeRush.Core.TextSelection)">
            <summary>
            Creates and returns a SelectionState object. You can call Restore() on this object at a later time to restore the selection.
            </summary>
            <param name="textSelection">The TextSelection to save.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionServices.Save">
            <summary>
            Creates and returns a SelectionState object. You can call Restore() on this object at a later time to restore the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionServices.Active">
            <summary>
            Returns the TextSelection object for the active document, or 
            null if no document is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionServices.Exists">
            <summary>
            Returns true if text is selected in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionServices.Height">
            <summary>
            Returns the number of lines in the current selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionServices.Text">
            <summary>
            Sets or gets the text selected in the editor, as a string.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectionState.Restore">
            <summary>
            Restores this selection, scrolling the editor if necessary to ensure it is in view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionState.TextSelection">
            <summary>
            The TextSelection object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectionState.TextView">
            <summary>
            The active TextView at the time this SelectionState was created.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Start">
            <summary>
            Starts selector using active text view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Start(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Starts selector using specified text view.
            </summary>
            <param name="view">TextView where to paint target picker.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Stop">
            <summary>
            Stops selector.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.FocusNext">
            <summary>
            Moves selector to the next call.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.FocusPrevious">
            <summary>
            Moves selector to the previous call.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Accept">
            <summary>
            Accepts currently selected target.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.AcceptAll">
            <summary>
            Accepts all targets.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Cancel">
            <summary>
            Cancels selector.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Suspend">
            <summary>
            Suspends selector.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SelectorBase.Resume">
            <summary>
            Resumes selector.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectorBase.IsActive">
            <summary>
            Gets the status of selector.
            Returns true if this selector is active, otherwise returns false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectorBase.IsVisible">
            <summary>
            Gets or sets if current selector is displayed on the TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectorBase.InSuspendState">
            <summary>
            Gets the suspend state of selector.
            Returns true if this selector was suspended.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SelectorBase.IsModalMode">
            <summary>
            Gets the mode of selector. Returns true if selector is in modal mode.
            This means that all pressed keys except for selector actions will not 
            go to VS editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Category.#ctor">
            <summary>
            Initializes a new instance of the Category class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Category.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Category class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Language.#ctor">
            <summary>
            Initializes a new instance of the Language class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Language.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Language class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Settings.Page">
            <summary>
            Represents a settings file (usially an option page).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Page.#ctor">
            <summary>
            Initializes a new instance of the Page class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Page.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Page class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Section.#ctor">
            <summary>
            Initializes a new instance of the Section class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Section.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Section class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Setting.#ctor">
            <summary>
            Initializes a new instance of the Setting class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Setting.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the Setting class.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingFullNode.#ctor(System.String,System.String,System.String,System.String,DevExpress.CodeRush.Core.Settings.Setting)">
            <summary>
            Initializes a new instance of the SettingDiffNode class.
            </summary>
            <param name="category"></param>
            <param name="page"></param>
            <param name="language"></param>
            <param name="section"></param>
            <param name="setting"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Settings.Save">
            <summary>
            Saves all settings to appropriate files.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Settings.Save(System.Boolean)">
            <summary>
            Saves all settings to appropriate files.
            </summary>
            <param name="clear">Clear after save.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Settings.Save(System.Boolean,System.Exception@)">
            <summary>
            Saves all settings to appropriate files.
            </summary>
            <param name="clear">Clear after save.</param>
            <param name="error">An exception thrown during the save process if any.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.Settings.Clear">
            <summary>
            Clears all settings stored in this object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.Compare(DevExpress.CodeRush.Core.Settings.Settings,DevExpress.CodeRush.Core.Settings.Settings,System.Boolean)">
            <summary>
            Compares two sets of settings.
            </summary>
            <param name="mainSet">The first set of settings. Has a priority on the second set of settings.</param>
            <param name="secondSet">The second set of settings.</param>
            <param name="merge">If true than difference of two sets of settings will be merged with the main set of settings. If false the only the difference betweeen two sets will be returned.</param>
            <returns>The difference of two sets of settings: merged or different settings set.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.GetSettingsTargetFileReadPath(System.String,System.String)">
            <summary>
            Returns user or useroverride or install base file name for reading.
            </summary>
            <param name="category"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.GetSettingsInstallBaseReadPath(System.String,System.String)">
            <summary>
            Returns install base file name for reading.
            </summary>
            <param name="category"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.GetSettingsTargetFileWritePath(System.String,System.String)">
            <summary>
            Returns user path for writing settings.
            </summary>
            <param name="category"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.BeginUpdate">
            <summary>
            Call BeginUpdate to supress auto loading of settings when accessing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.EndUpdate">
            <summary>
            Call EndUpdate to restore auto loading of settings when accessing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.Serialize(DevExpress.CodeRush.Core.Settings.Settings)">
            <summary>
            Saves all settings in appropriate "Category" folder and "Page" file.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.Serialize(DevExpress.CodeRush.Core.Settings.Settings,System.Exception@)">
            <summary>
            Saves all settings in appropriate "Category" folder and "Page" file.
            </summary>
            <param name="settings"></param>
            <param name="error">An exception thrown during the save process if any.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.Deserialize(System.String)">
            <summary>
            Loads all settings found in the specified path.
            </summary>
            <param name="settingsPath"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.GetDifference(DevExpress.CodeRush.Core.Settings.Settings,DevExpress.CodeRush.Core.Settings.Settings)">
            <summary>
            Compares two sets of Settings, the result will contain missing settings from the
            mainSet and the secondSet. The mainSet has a priority on the secondSet, so the setting value
            of the mainSet is used instead of the secondSet setting value.
            </summary>
            <param name="mainSet"></param>
            <param name="secondSet"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.HasConvertedSettings(System.String)">
            <summary>
            Returns true if there's at least one DXCore settings xml file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.CopyNonXmlSettingFiles(System.String,System.String,System.Boolean)">
            <summary>
            Copies all non-xml settings files to the target path.
            </summary>
            <param name="sourcePath"></param>
            <param name="targetPath"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.Merge(DevExpress.CodeRush.Core.Settings.Settings,DevExpress.CodeRush.Core.Settings.Settings)">
            <summary>
            Merges two sets of settings.
            </summary>
            <param name="mainSet"></param>
            <param name="secondSet"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Settings.SettingsManager.ConvertOldSettings(System.String,System.String,System.Boolean)">
            <summary>
            Converts old ".ini" files into new xml format.
            </summary>
            <param name="settingsPath">Source path where settings are located.</param>
            <param name="targetPath">Target path where to write result settings.</param>
            <param name="copyUnconvertable">Copy files that can't be converted (e.g. bin files).</param>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Settings.SettingsManager.SettingsPath">
            <summary>
            Returns the user preffered settings path.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ShortcutBase">
            <summary>
            Representation of a simple shortcut.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ShortcutsHint">
            <summary>
            A design-time component for DXCore plug-ins with properties that 
            determine how a Shortcuts Hint window will appear.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ShortcutsHint.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHint.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHint.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHint.Hide">
            <summary>
            Hides this shortcut hint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHint.Hide(System.Boolean)">
            <summary>
            Hides this shortcut hint.
            </summary>
            <param name="slideDown">If true, animates the close so the hint appears 
            to drop down into it's bottom line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHint.Show">
            <summary>
            Shows this ShortcutsHint (if it isn't suppressed)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ShortcutsHint.Show(System.Boolean)">
            <summary>
            Shows this ShortcutsHint (if it isn't suppressed)
            </summary>
            <param name="forceDisplay">If true, the Shortcut Hint will be displayed even if the user has requested to suppress it.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHint.AnimationSpeed">
            <summary>
            Determines whether this ShortcutsHint will slide into view 
            smoothly, fast, or simply appear immediately without animation. 
            For performance-intensive hints, set this property to None.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHint.UserGuidePage">
            <summary>
            A path to the user guide page (or a page file name) containing more information 
            about the feature this ShortcutsHint documents.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHint.Title">
            <summary>
            The title for the ShortcutsHint window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHint.FeatureDetail">
            <summary>
            The detail string to uniquely identify the feature this ShortcutsHint documents. 
            If left empty, the Title of your ShortcutsHint will be used to determine 
            persistence options, like whether this ShortcutsHint should be displayed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHint.Key">
            <summary>
            The title for the ShortcutsHint key header.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ShortcutsHint.Behavior">
            <summary>
            The title for the ShortcutsHint key header.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ReadOnlySmartTagItemCollection.#ctor(DevExpress.CodeRush.Core.SmartTagItemCollection)">
            <summary>
            Initializes a new instance of the ReadOnlySmartTagItemCollection class.
            </summary>
            <param name="items">The items to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ReadOnlySmartTagItemCollection.Item(System.Int32)">
            <summary>
            Gets or smart tag item at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItemCollection.Add(DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Adds smart tag item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItemCollection.IndexOf(DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Returns index of the specified item.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItemCollection.Insert(System.Int32,DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Inserts the specified smart tag item into the given index.
            </summary>
            <param name="index">The index to insert new item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItemCollection.Remove(DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Removes smart tag item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItemCollection.Contains(DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Returns true if the collection contains the specified item.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItemCollection.ToArray">
            <summary>
            Creates and returns SmartTagItem array.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets smart tag item at the specified index.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetSmartTagItemsEventHandler">
            <summary>
            Smart tag provider event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SmartTagShowPreviewEventHandler">
            <summary>
            Smart tag show preview event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SmartTagHidePreviewEventHandler">
            <summary>
            Smart tag hide preview event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SmartTagItemSelectedEventHandler">
            <summary>
            Smart tag item selected event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetSmartTagItemColorsEventHandler">
            <summary>
            Smart tag item event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CheckSmartTagAvailabilityEventHandler">
            <summary>
            Smart tag item event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CheckSmartTagAvailabilityAsyncEventHandler">
            <summary>
            Smart tag item event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.CanShowInContextMenuEventHandler">
            <summary>
            Smart tag item event handler.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs">
            <summary>
            Contains smart tag menu items.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.#ctor">
            <summary>
            Initializes a new instance of the GetSmartTagMenuItemsEventArgs class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.Add(DevExpress.CodeRush.Core.ISmartTagItem)">
            <summary>
            Adds menu item to the internal collection.
            </summary>
            <param name="item">The menu item to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.AddRange(DevExpress.CodeRush.Core.ISmartTagItem[])">
            <summary>
            Adds the specified menu items range into event args.
            </summary>
            <param name="items">The range of items to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.Remove(DevExpress.CodeRush.Core.ISmartTagItem)">
            <summary>
            Removes the specified menu item from event args.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.RemoveAt(System.Int32)">
            <summary>
            Removes menu item with the specified intex from the event args.
            </summary>
            <param name="index">The index to remove.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.Items">
            <summary>
            Get menu items stored inside the event args.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.Count">
            <summary>
            Gets menu item count.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.GetSmartTagItemsEventArgs.Item(System.Int32)">
            <summary>
            Gets menu item with the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagPreviewEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the ShowPreviewEventArgs class.
            </summary>
            <param name="rect">The preview rectangle.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagPreviewEventArgs.Rectangle">
            <summary>
            Gets preview rectangle.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagShowPreviewEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the ShowPreviewEventArgs class.
            </summary>
            <param name="rect">The preview rectangle.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagShowPreviewEventArgs.AddRectangle(System.Drawing.Rectangle)">
            <summary>
            Adds preview rectangle to the event args.
            </summary>
            <param name="rect">The rectangle to add.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagShowPreviewEventArgs.Rectangles">
            <summary>
            Gets rectagles affected by preview.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagShowPreviewEventArgs.HintLegend">
            <summary>
            Gets or sets hint legend to be shown inside preview hint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ISmartTagEngine">
            <summary>
            Smart tag engine functionality.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.ShowSmartTag(DevExpress.CodeRush.Core.SmartTagProviderBase[])">
            <summary>
            Displays smart tag with the specified smart tag providers.
            </summary>
            <param name="providers">The smart tag providers to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.HideSmartTag">
            <summary>
            Hides smart tag.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase[])">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="providers">The smart tag providers to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase[],System.Boolean)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="providers">The smart tag providers to use.</param>
            <param name="showNotification">Shows notification hint when there are no content providers available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase[],System.Boolean,System.Boolean)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="providers">The smart tag providers to use.</param>
            <param name="handleKeys">Specifies whether the keyboard key events should be handled.</param>
            <param name="showNotification">Shows notification hint when there are no content providers available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.HidePopupMenu">
            <summary>
            Hides popup menu.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.ClosePopupMenu">
            <summary>
            Closes popup menu.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.GetPopupMenuPoint">
            <summary>
            Get the best point for popup menu location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISmartTagEngine.GetBigHintLocation">
            <summary>
            Gets the best location of the BigHint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagEngine.IsSmartTagVisible">
            <summary>
            Returns true if smart tag is visible.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISmartTagEngine.IsPopupMenuVisible">
            <summary>
            Returns true if R!/CR popup menu is visible.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SmartTagItemType">
            <summary>
            Menu item element type.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SmartTagItemType.Default">
            <summary>
            Default item.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SmartTagItemType.Special">
            <summary>
            Special item.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagContext.Update">
            <summary>
            Updates data in current context.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagContext.Clear">
            <summary>
            Clear data in current context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.TextDocument">
            <summary>
            Returns the active TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.TextView">
            <summary>
            Returns the active TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.Caret">
            <summary>
            Returns the TextView caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.CaretPoint">
            <summary>
            Returns a SourcePoint representing the current caret position.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.Element">
            <summary>
            Returns the language element at the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.MethodOrProperty">
            <summary>
            Returns the active method or property at the caret. Returns null if the caret is not contained inside a method or property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.MethodOrPropertyAccessor">
            <summary>
            Returns the active method or property accessor at the caret. Returns null if the caret is not contained inside a method or property accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.ClassInterfaceOrStruct">
            <summary>
            Returns the class, interface or struct that contains the caret. Returns null if the caret is not contained inside a class, interface or struct.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.Method">
            <summary>
            Returns the active method at the caret. Returns null if the caret is not contained inside a method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.SelectedNodes">
            <summary>
            Returns the LanguageElement nodes in active selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.SelectedExpression">
            <summary>
            Returns currently selected expression. Returns null if there is no expression selected.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.LeftChar">
            <summary>
            Gets the character to the left of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.RightChar">
            <summary>
            Gets the character to the right of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.ActiveLanguage">
            <summary>
            Returns the Language ID of the active source file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.Builder">
            <summary>
            Returns an active ElementBuilder.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.SelectionExists">
            <summary>
            Returns true if text is selected in the TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.InSingleFile">
            <summary>
            Returns true if currently opened files is not in the project or belongs to the Misc project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.Selection">
            <summary>
            Returns active selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.SelectionRange">
            <summary>
            Returns active selection range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.TextViewRange">
            <summary>
            Returns TextView SourceRange.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagContext.InMacroCall">
            <summary>
            Returns true if active element is located in macro call.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagHidePreviewEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the ShowPreviewEventArgs class.
            </summary>
            <param name="rect">The preview rectangle.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SmartTagItem">
            <summary>
            Provides default smart tag item functionality.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.#ctor">
            <summary>
            Initializes a new instance of the SmartTagItem class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SmartTagItem with the given name.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.OnShowPreview(DevExpress.CodeRush.Core.SmartTagShowPreviewEventArgs)">
            <summary>
            Triggers ShowPreview event.
            </summary>
            <param name="args">The args for the ShowPreview event.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.OnHidePreview(DevExpress.CodeRush.Core.SmartTagHidePreviewEventArgs)">
            <summary>
            Triggers HidePreview event.
            </summary>
            <param name="args">The args for the ShowPreview event.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.OnItemSelected(DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Triggers ItemSelected event.
            </summary>
            <param name="item">The item selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.OnExecute">
            <summary>
            Triggers Execute event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.AddItem(DevExpress.CodeRush.Core.SmartTagItem)">
            <summary>
            Adds the specified smart tag sub item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagItem.FindItem(System.String)">
            <summary>
            Finds and returns sub item with the given name.
            </summary>
            <param name="name">The name of the item to get.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.DevExpress#CodeRush#Core#ISmartTagItem#HasSubMenuItems">
            <summary>
            Returns true if this item has sub items.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.Name">
            <summary>
            Gets or sets name of this item.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.Caption">
            <summary>
            Gets or sets caption of this item.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.HintCaption">
            <summary>
            Gets or sets hint caption for this item.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.HintText">
            <summary>
            Gets or sets hint text for this item.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.ParentMenu">
            <summary>
            The name of the parent menu where this content provider should be moved.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.ShowBigHint">
            <summary>
            Gets or sets the value indicating whether or not show the BigHint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.HasSubItems">
            <summary>
            Returns true if this item has sub items.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.Items">
            <summary>
            Gets a read only collection of sub items.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.ItemType">
            <summary>
            Gets or sets smart tag item type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.Image">
            <summary>
            Sets the bitmap image for this this smart tag item. 
            Action images are optional, but can 
            be useful for displaying in the context menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagItem.ImageBackColor">
            <summary>
            Sets the image background color for this smart tag item. It is used to determine which
            color is to be treated as transparent in the bitmap assigned to the Image property.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagItem.ShowPreview">
            <summary>
            ShowPreview event is triggered when item is selected for preview.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagItem.HidePreview">
            <summary>
            HidePreview event is triggered when it is time to hide the preview.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagItem.ItemSelected">
            <summary>
            ItemSelected event is trigged when smart tag item is selected.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagItem.Execute">
            <summary>
            Execute event is trigged when smart tag item was clicked.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SmartTagProviderBase">
            <summary>
            Base class for smart tag providers.
            Provides base smart tag functionallity for plugins.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.#ctor">
            <summary>
            Initializes a new instance of the SmartTagProviderBase class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.ShowSmartTag">
            <summary>
            Shows smart tag.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.HideSmartTag">
            <summary>
            Hides smart tag.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.ShowPopupMenu(System.Drawing.Point)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.ShowPopupMenu(System.Drawing.Point,System.Boolean)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="showNotification">Shows notification hint when there are no content providers available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.HidePopupMenu">
            <summary>
            Hides popup menu.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.GetItem(System.String)">
            <summary>
            Gets menu item with the given name.
            </summary>
            <param name="name">The name of the menu item to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.GetItems">
            <summary>
            Gets all menu items for this smart tag provider.
            Menu items are cached to improve performance,
            call ClearMenuItems to clear cached values.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.GetItems(System.Boolean)">
            <summary>
            Gets all menu items for this smart tag provider.
            Menu items are cached to improve performance,
            call ClearMenuItems to clear cached values.
            </summary>
            <param name="breakOnFirstAvailable"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.GetAllContentProviders">
            <summary>
            Gets all content providers for this smart tag provider without checking their availability.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProviderBase.ClearMenuItems">
            <summary>
            Clears cached menu items.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagProviderBase.MenuOrder">
            <summary>
            Smart tag provider order.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagProviderBase.ShowInContextMenu">
            <summary>
            Gets or sets value indicating if smart items should
            be shown in VS editor context menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagProviderBase.ShowInPopupMenu">
            <summary>
            Gets or sets value indicating if smart items should
            be shown in smart tag popup menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagProviderBase.SupportsAsyncMode">
            <summary>
            Returns true if CheckSmartTagAvailabilityAsync event is assigned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagProviderBase.Image">
            <summary>
            Sets the bitmap image for this this provider. 
            Action images are optional, but can 
            be useful for displaying in the context menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagProviderBase.ImageBackColor">
            <summary>
            Sets the image background color for this provider. It is used to determine which
            color is to be treated as transparent in the bitmap assigned to the Image property.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.GetSmartTagItems">
            <summary>
            Handle this event to provider smart tag menu items.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.GetSmartTagItemColors">
            <summary>
            Handle this event to get smart tag item colors.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.GetSmartTagContentProviders">
            <summary>
            Handle this event to return all content providers for this smart tag without checking their availability.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.CheckSmartTagAvailability">
            <summary>
            Handle this event to define if SmartTag is available.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.CheckSmartTagAvailabilityAsync">
            <summary>
            Handle this event to define if SmartTag is available.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.CanShowInContextMenu">
            <summary>
            Handle this event to define if this provider can be added to the VS editor context menu.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.ContextMenuShow">
            <summary>
            Raised when editor context menu is shown and smart tag items are added.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.ContextMenuInvalidate">
            <summary>
            Raised when editor context menu is invalidated.
            This event is raised for each smart tag
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProviderBase.ItemExecute">
            <summary>
            Raised when item execute event is triggered via OnItemExecute.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProvider.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagProvider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.SmartTagProvider.LanguageSupported">
            <summary>
            Handle this optional event if you want to restrict your smart tag to one or more 
            programming languages.
            If you do not handle this event, your smart tag will be available in all programming languages.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.#ctor">
            <summary>
            Creates a new instance of the SmartTagServices class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowSmartTag">
            <summary>
            Displays smart tag inside currently active code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowSmartTag(DevExpress.CodeRush.Core.SmartTagProviderBase)">
            <summary>
            Displays specified smart tag inside currently active code editor.
            </summary>
            <param name="provider">The smart tag provider to display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowSmartTag(DevExpress.CodeRush.Core.SmartTagProviderBase[])">
            <summary>
            Displays smart tag with the specified providers inside currently active code editor.
            </summary>
            <param name="providers">The smart tag providers to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.HideSmartTag">
            <summary>
            Hides smart tag.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.GetPopupMenuPoint">
            <summary>
            Get the best point for popup menu location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.GetBigHintLocation">
            <summary>
            Gets the best location of the BigHint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="provider">The smart tag provider to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase,System.Boolean)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="provider">The smart tag provider to use.</param>
            <param name="showNotification">Shows notification hint when there are no content providers available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase[])">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="providers">The smart tag providers to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase[],System.Boolean)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="providers">The smart tag providers to use.</param>
            <param name="showNotification">Shows notification hint when there are no content providers available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ShowPopupMenu(System.Drawing.Point,DevExpress.CodeRush.Core.SmartTagProviderBase[],System.Boolean,System.Boolean)">
            <summary>
            Displays popup menu inside currently active code editor.
            </summary>
            <param name="location">The location of the popup.</param>
            <param name="providers">The smart tag providers to use.</param>
            <param name="handleKeys">Specifies whether the keyboard key events should be handled.</param>
            <param name="showNotification">Shows notification hint when there are no content providers available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.HidePopupMenu">
            <summary>
            Hides popup menu.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.ClosePopupMenu">
            <summary>
            Closes popup menu.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.Get(System.String)">
            <summary>
            Returns smart tag provider with the specified name.
            </summary>
            <param name="name">The name of the provider to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.GetSmartTagItem(System.String)">
            <summary>
            Returns smart tag menu item with the specified path.
            </summary>
            <param name="path">The path of the smart tag provider menu item to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTagServices.UpdateContext">
            <summary>
            Updates the SmartTag context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagServices.Context">
            <summary>
            Gets context for the smart tag.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagServices.CodeFixContext">
            <summary>
            Gets context for the CodeIssues fixes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagServices.AvailableProviders">
            <summary>
            Returns an array of all available providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagServices.IsSmartTagVisible">
            <summary>
            Returns true if smart tag is visible.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagServices.Providers">
            <summary>
            Returns an array of all registered providers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SmartTagServices.IsPopupMenuVisible">
            <summary>
            Returns true if R!/CR popup menu is visible.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CreateReference(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates text reference within this buffer.
            Text reference is used to access and modify text within the buffer.
            </summary>
            <param name="range">The SourceRange of the text reference.</param>
            <returns>The TextReference instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CreateLink(System.Int32,System.Int32,DevExpress.CodeRush.Core.ILinkedIdentifierList)">
            <summary>
            Creates link reference within this buffer.		
            </summary>
            <param name="startIndex">Position in the buffer of the link reference start.</param>
            <param name="endIndex">Position in the buffer of the link reference end.</param>
            <param name="list">Information about the ILinkedIdentifierList of the link reference end.</param>
            <returns>The LinkReference instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CreateLink(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.ILinkedIdentifierList)">
            <summary>
            Creates link reference within this buffer.		
            </summary>
            <param name="startLine">The line of the link reference start.</param>
            <param name="startOffset">The offset of the link reference start.</param>
            <param name="endLine">The line of the link reference end.</param>
            <param name="endOffset">The offset of the link reference end.</param>
            <param name="list">Information about the ILinkedIdentifierList of the link reference end.</param>
            <returns>The LinkReference instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CreateLink(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.ILinkedIdentifierList)">
            <summary>
            Creates link reference within this buffer.		
            </summary>
            <param name="startPoint">The SourcePoint of the link reference start.</param>
            <param name="endPoint">The SourcePoint of the link reference end.</param>
            <param name="list">Information about the ILinkedIdentifierList of the link reference end.</param>
            <returns>The LinkReference instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CreateLink(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.ILinkedIdentifierList)">
            <summary>
            Creates link reference within this buffer.		
            </summary>
            <param name="range">The SourceRange of the link reference.</param>		
            <param name="list">Information about the ILinkedIdentifierList of the link reference end.</param>
            <returns>The LinkReference instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CreateEditPointReference(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.EditPoint)">
            <summary>
            Creates EditPoint reference within this buffer.		
            </summary>
            <param name="point">The SourcePoint of the reference in the SmartTextBuffer.</param>		
            <param name="editPoint">The EditPoint of the EditPointReference.</param>		
            <returns>The EditPointReference instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.RemoveReference(DevExpress.CodeRush.Core.TextReference)">
            <summary>
            Removes the given reference from this text buffer.
            </summary>
            <param name="reference">The reference to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.RemoveLinks">
            <summary>
            Removes the all link references from this text buffer.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.DestroyReference(DevExpress.CodeRush.Core.TextReference)">
            <summary>
            Removes the given reference from this text buffer destroying it's text
            and inner text references. Text references intersecting with the given 
            one will be adjusted.
            </summary>
            <param name="reference">The reference to destroy.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.RemoveReferencesFromRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Removes the references from range in this text buffer 		
            </summary>		
            <param name="range">The SourceRange for removing.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CloneReferences(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Clones text references in the range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CloneReferences(System.Collections.ArrayList)">
            <summary>
            Clones all the text references in the ArrayList.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.CloneLinks(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Clones link references in the range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SmartTextBuffer.MoveReferencesToPoint(System.Collections.ArrayList,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves the references to the custom SourcePoint. Moves on the distance between the point and the nearest reference in the ArrayList		
            </summary>
            <param name="references">ArrayList of the TextReferences for moving.</param>		
            <param name="point">SourcePoint for moving.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.AddFileToProject(System.String,System.String)">
            <summary>
            Adds the specified file to the project with the given name. The project must be open in Visual
            Studio and part of the active solution.
            </summary>
            <param name="projectName">The name of the project to add to.</param>
            <param name="filePath">The path of the file to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.AddDirectoryToProject(System.String,System.String)">
            <summary>
            Adds the specified directory to a project with a given name. The project must be opened in Visual
            Studio and partially in an active solution.
            </summary>
            <param name="projectName">The name of the project to add the directory to.</param>
            <param name="directoryName">The path to the directory to be added. If directoryName is only a name without a path, then
            the directory will be added to the root of the project.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.ProjectDirectoryIsExist(System.String,System.String)">
            <summary>
            Checks whether or not the specified directory exists in a project with a given name. The project must be opened in Visual
            Studio and partially in an active solution.
            </summary>
            <param name="projectName">The name of the project to check directory existence.</param>
            <param name="directoryName">The path to the directory.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.AddProject(System.String,System.String)">
            <summary>
            Adds a new project with the given name and template (e.g. "ClassLibrary.zip").
            </summary>
            <param name="templateName">The project template name.</param>
            <param name="projectName">The project name.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.FindEnvDTEProject(System.String)">
            <summary>
            Locates the EnvDTE.Project with the specified name in the active solution. If not found,
            null is returned.
            </summary>
            <param name="name">The name to search with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.RemoveFileFromProject(System.String,System.String)">
            <summary>
            Removes the specified file with the given name from the project and physically deletes it.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="projectName">The name of the project to remove from.</param>
            <param name="filePath">The path of the file to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.RenameFileInProject(System.String,System.String,System.String)">
            <summary>
            Renames the specified file from the project with the given path. The project must be open in Visual
            Studio and part of the active solution.
            </summary>
            <param name="projectName">The name of the project to remove from.</param>
            <param name="filePath">The path of the file to rename.</param>
            <param name="newName">New name of the file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.ExcludeFileFromProject(System.String,System.String)">
            <summary>
            Removes the specified file with the given name from the project.
            The project must be open in Visual Studio and part of the active solution.
            </summary>
            <param name="projectName">The name of the project to remove from.</param>
            <param name="filePath">The path of the file to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.FindProjectItemByPathEnding(EnvDTE.Project,System.String)">
            <summary>
            Searches recursively among the items of the project and returns an item with a path, which ends with a given string.
            </summary>
            <param name="envDTEProject">The project that is searched for.</param>
            <param name="path">the string - a part of the path that must end with the full path to the searched item.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.FindProjectItemByPathEnding(EnvDTE.ProjectItems,System.String)">
            <summary>
            Searches recursively among items of the collection and returns an item with a path that ends with a given string.
            </summary>
            <param name="projectItems">The collection of project items that is searched for.</param>
            <param name="path">the string - a part of the path that must end with a full path to a searched item.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionServices.AddProjectReference(System.String,System.String)">
            <summary>
            Adds a project reference to the specified project.
            </summary>
            <param name="targetProjectName">The name of the target project to which to add a reference.</param>
            <param name="referenceProjectName">The name of the project reference to add.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SolutionServices.AllProjects">
            <summary>
            Gets all projects enumerator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.LockFileHint.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SCCImagesContainer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SCCUtils.FilterFilesUnderSourceControl(System.String[])">
            <summary>
            Filters array of files. Returns only files under SourceControl
            </summary>
            <param name="filesPaths">list of files</param>
            <returns>list of files</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SCCUtils.FilterFilesUnderSourceControl(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Filters NodeList of SourceFiles. Returns only files under SourceControl
            </summary>
            <param name="files">list of SourceFiles</param>
            <returns>NodeList of SourceFiles</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SCCUtils.FilterCheckOutAbleFiles(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Filters NodeList of SourceFiles. Returns only files which can be checked out
            </summary>
            <param name="files">list of SourceFiles</param>
            <returns>NodeList of SourceFiles</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SCCUtils.CheckOutFiles(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Check Out NodeList of SourceFiles
            </summary>
            <param name="files">NodeList of SourceFiles</param>		
            <returns>true if check out was finished successfully</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SCCUtils.CheckOutFiles(DevExpress.CodeRush.StructuralParser.NodeList,System.Boolean)">
            <summary>
            Check Out NodeList of SourceFiles
            </summary>
            <param name="files">NodeList of SourceFiles</param>
            <param name="usePrompting">use VS modal dialog for confirmation of check out</param>
            <returns>true if check out was finished successfully</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SourceLocation">
            <summary>
            Holds information describing a location in source code.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.SolutionName">
            <summary>
            Name of the active solution.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.ProjectName">
            <summary>
            Name of the active project.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.FileName">
            <summary>
            Name of the active file.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.NamespaceName">
            <summary>
            Name of the active namespace.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.ClassName">
            <summary>
            Name of the active class.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.MethodName">
            <summary>
            Name of the active method.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.LocationDescription">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.CaretLine">
            <summary>
            The line number of the editor caret.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.CaretColumn">
            <summary>
            The column position of the editor caret.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.AnchorLine">
            <summary>
            The line number of the block anchor.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.SourceLocation.AnchorColumn">
            <summary>
            The column position of the block anchor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceLocation.Clone">
            <summary>
            Returns a copy of this SourceLocation
            </summary>
            <returns>Returns a copy of this SourceLocation.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceLocation.IsCurrent">
            <summary>
            Returns true if this SourceLocation matches the current one (represented by the cursor and the block anchor).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceLocation.CursorColumn">
            <summary>
            The column position of the cursor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceLocation.CursorLine">
            <summary>
            The line number of the cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelCache.ClearFields">
            <summary>
            Clears all fields in the cache with the exception of the FileNode.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelCache.PositionMatches(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified position matches the last line and column checked in this cache.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelCache.DiposeCache">
            <summary>
            Disposes all cahced langauge elements.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HandleCodeRushLoaded">
            <summary>
            Opens new solution and assigns project elements to all opened text documents.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.CanChangeVisibility(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement)">
            <summary>
            Checks whether the visibility of specified element in the active TextDocument can be changed.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True when visibility can be changed to other value. False otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetSupportedVisibilities(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement)">
            <summary>
            Gets list of valid visibilities for specified element.
            </summary>
            <param name="element">The element to check.</param>
            <returns>List of valid visibilities for specified element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ChangeVisibility(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement,DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Changes the visibility in specified element in the active TextDocument.
            </summary>
            <param name="element">The element to change.</param>
            <param name="newVisibility">The new visibility.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ChangeVisibility(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement[],DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Changes the visibility in an array of elements in the active TextDocument.
            </summary>
            <param name="elementList">An array of elements to change.</param>
            <param name="newVisibility">The new visibility for each element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DeclareReference(System.String)">
            <summary>
            Declares the specified reference (e.g., inside a using statement for C# or an imports statement for VB) if not already declared.
            </summary>
            <param name="aNamespace">The namespace to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.InMacroCall(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Defines if element is located in macro call.
            </summary>
            <param name="element">The element to define.</param>
            <returns>Returns true if element is located in macro call.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.AssemblyReferenced(System.String)">
            <summary>
            Returns true if the specified assembly is referenced in the active project.
            </summary>
            <param name="assemblyName">The name of the assembly to check (e.g., "System.Xml").</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DeclareNamespaceReference(System.String)">
            <summary>
            Declares the specified reference (e.g., inside a using statement for C# or an imports statement for VB) if not already declared.
            </summary>
            <param name="namespaceName">The namespace to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DeclaresLocal(System.String)">
            <summary>
            Returns true if the specified identifier is declared locally inside 
            the method or property at the caret. Refactor! must be installed for 
            this method to work.
            </summary>
            <param name="identifier">The name of the identifier to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DeclaresLocalOfType(System.String)">
            <summary>
            Returns true if a local variable of the specified type is declared inside 
            the method or property at the caret. Refactor! must be installed for 
            this method to work.
            </summary>
            <param name="fullName">The full type name (e.g., System.Drawing.Pen) of the local to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DeclaresMember(System.String)">
            <summary>
            Returns true if the active type (at the caret) declares a member with the specified name.
            </summary>
            <param name="memberName">The name of the member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DescendsFrom(System.String)">
            <summary>
            Returns true if the active class at the caret descends from the specified ancestor.
            </summary>
            <param name="ancestorClassName">The full type name (e.g., System.Drawing.GraphicsPath) of the ancestor class to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DoParse">
            <summary>
            Performs a forced parse on the active TextDocument. This is a low-level 
            method that should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.DoParse(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Performs a forced parse on the specified TextDocument. This is a low-level 
            method that should not need to be called by plug-in writers.
            </summary>
            <param name="textDocument">The TextDocument to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ElementFromLocation(System.String)">
            <summary>
            Returns a language element corresponding to the specified location.
            </summary>
            <param name="location">The location of the language element. This string corresponds to the Location property of a LanguageElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindType(System.String)">
            <summary>
            Finds and returns the ITypeElement for the specified typeToFind. The 
            type returned will be in the scope of the active LanguageElement at the 
            caret.
            </summary>
            <param name="typeName">The name of the Module, Enumeration, Class, Struct or Interface to find.</param>
            <returns>Returns a LanguageElement that represents the type declaration, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindType(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds and returns the ITypeElement for the specified typeToFind.
            </summary>
            <param name="typeToFind">The name of the Module, Enumeration, Class, Struct or Interface to find.</param>
            <param name="startNode">The LanguageElement to start the search from. The type found will be visible from this node.</param>
            <returns>Returns a LanguageElement that represents the type declaration, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindTypes(System.String)">
            <summary>
            Finds and returns the ITypeElement instances for all types found.
            </summary>
            <param name="typeToFind">The name of the Module, Enumeration, Class, Struct or Interface to find.</param>
            <returns>Returns a LanguageElement that represents the type declaration, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindTypes(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds and returns the ITypeElement instances for all types found.
            </summary>
            <param name="typeToFind">The name of the Module, Enumeration, Class, Struct or Interface to find.</param>
            <param name="startNode">The LanguageElement to start the search from. The type found will be visible from this node.</param>
            <returns>Returns a LanguageElement that represents the type declaration, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetProperty(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String)">
            <summary>
            Finds the and returns the specified property in the specified type or inside an 
            ancestor class. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="propertyName">The name of the property to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetProperty(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String,System.Boolean)">
            <summary>
            Finds the and returns the specified property in the specified type. Optionally searches 
            ancestor classes. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="propertyName">The name of the property to find.</param>
            <param name="searchInBaseTypes">If true, ancestor classes will be searched for the member.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMethod(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String)">
            <summary>
            Finds the and returns the specified method in the specified type or inside an 
            ancestor class. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="methodName">The name of the method to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMethod(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String,System.Boolean)">
            <summary>
            Finds the and returns the specified method in the specified type. Optionally searches 
            ancestor classes. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="methodName">The name of the method to find.</param>
            <param name="searchInBaseTypes">If true, ancestor classes will be searched for the member.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMember(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String)">
            <summary>
            Finds and returns the specified member in the specified type or an 
            ancestor class. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="name">The name of the member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMember(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String,System.Boolean)">
            <summary>
            Finds and returns the specified member in the specified type. Optionally searches 
            ancestor classes. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="name">The name of the member to find.</param>
            <param name="searchInBaseTypes">If true, ancestor classes will be searched for the member.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMember(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String,DevExpress.CodeRush.StructuralParser.IElementFilter,System.Boolean)">
            <summary>
            Finds and returns the specified member in the specified type. Optionally searches 
            ancestor classes, and also allows you to pass an IElementFilter to filter out 
            possible elements. Returns null if not found.
            </summary>
            <param name="type">The ITypeElement to search through.</param>
            <param name="name">The name of the member to find.</param>
            <param name="filter">The IElementFilter implementor to use to find the member (e.g., ElementFilters.Member, ElementFilters.Method, ElementFilters.Event, 
            ElementFilters.Property, ElementFilters.Type, ElementFilters.NonPrivateMember, etc.).</param>
            <param name="searchInBaseTypes">If true, ancestor classes will be searched for the member.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetBlockNecessityAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the necessity of the start block after adding
            the new code to the custom SourcePoint
            </summary>
            <param name="point">The point for insertion of the new code</param>
            <returns>True if the some of the parent Statements needs adding the blocks</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetCommonParent(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Gets the common parent of the two specified nodes. Returns null if the two nodes do not have a common parent.
            If checkNodes is true, this method will also check the LanguageElements passed to this method to see if one parents the other.
            If the first node parents the second one, then the first will be returned, and if
            the second node parents the first one, then the first will be returned.
            </summary>
            <param name="firstElement">The first of two nodes to check for a common parent.</param>
            <param name="secondElement">The second of two nodes to check for a common parent.</param>
            <param name="checkNodes">The option to check first and second passed nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetCommonParent(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the common parent of the two specified nodes. Returns null if the two nodes do not have a common parent.
            </summary>
            <param name="firstElement">The first of two nodes to check for a common parent.</param>
            <param name="secondElement">The second of two nodes to check for a common parent.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetFileNode(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Returns the source file language element for the specified text document.
            </summary>
            <param name="textDocument">The document to check.</param>
            <returns>Returns the source file language element for the specified text document, or null if the file node is not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetIdentifierList(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32)">
            <summary>
            Returns an IdentifierList suitable for iterating through nodes visible to the specified location.
            </summary>
            <param name="startNode">A starting point from which all nodes must be visible. If null, the active element is used.</param>
            <param name="startLine">A starting line from which all nodes must be visible. </param>
            <param name="startOffset">A starting column offset from which all nodes must be visible. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNamespaces(System.String)">
            <summary>
            Gets a collection of all known Namespaces for the specified namespaceName.
            </summary>
            <param name="namespaceName">The name of the namespace to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetAspImportedNamespaces(DevExpress.CodeRush.StructuralParser.ProjectElement)">
            <summary>
            Gets imported namespaces for ASP.NET project.
            </summary>
            <param name="project">The project to get namespaces for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Returns the node at the specified line and column position in the active document.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeAt(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32)">
            <summary>
            Returns the node at the specified line and column position in the specified file node.
            </summary>
            <param name="fileNode">The LanguageElement parenting the nodes you want to search through.</param>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeAt(EnvDTE.TextPoint)">
            <summary>
            Returns the node at the specified TextPoint.
            </summary>
            <param name="textPoint">The TextPoint to check.</param>
            <returns>Returns the node at the specified TextPoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeAt(DevExpress.CodeRush.Core.EditPoint)">
            <summary>
            Returns the node at the specified EditPoint.
            </summary>
            <param name="editPoint">The EditPoint to check.</param>
            <returns>Returns the node at the specified EditPoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the node at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the node at the specified SourcePoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeBefore(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the node that ends prior to the specified SourcePoint in the active document.
            </summary>
            <param name="point">The SourcePoint to check.</param>
            <param name="topNode">A parent node to start the search from. If you pass null, 
            the node at the specified SourcePoint will be used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNodeBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the node that ends prior to the specified SourcePoint in the active document.
            </summary>
            <param name="point">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNonBorderingParent(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets a parent of the specified SourceRange that does not immediately border 
            the SourceRange's Start or End. There must be at least one character between the parent's 
            boundaries and the specified SourceRange.
            </summary>
            <param name="range">The SourceRange to find a parent for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetActiveOrNodeBeforeCaret">
            <summary>
            Retunrs langauge element that ends before caret.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetActiveOrNodeBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Retunrs langauge element that ends before the specified point.
            </summary>
            <param name="point">The source point to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetParentsThatAreSiblings(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Gets the parent nodes to the specified nodes that are siblings to each other. This method is
            useful when you need to select a range of code that spans two sibling nodes, and you have two
            non-sibling nodes that must be included in that selection.
            </summary>
            <param name="startNode">One of two nodes that must be contained in the selection. This node must be closer to the top of the file.</param>
            <param name="aEndNode">One of two nodes that must be contained in the selection. This node must be closer to the end of the file.</param>
            <param name="aParentStartNode">The parent node to startNode that is a sibling to aParentEndNode.</param>
            <param name="aParentEndNode">The parent node to aEndNode that is a sibling to aParentStartNode.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetRegionChildNodeAt(System.Int32,System.Int32)">
            <summary>
            Returns the region child node (could be a RegionDirective -- could also be a comment) at the specified line and column position.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetRegionChildNodeAt(DevExpress.CodeRush.Core.TextDocument,System.Int32,System.Int32)">
            <summary>
            Returns the region child node (could be a RegionDirective -- could also be a comment) at the specified line and column position.
            </summary>
            <param name="textDocument">The TextDocument to check.</param>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetRegionAt(System.Int32,System.Int32)">
            <summary>
            Returns the region directive at the specified line and column position in the active TextDocument.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetRegionAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the region directive at the specified SourcePoint in the active TextDocument.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetReturnTypeName">
            <summary>
            Returns the name of the Type returned by the active method or property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetTypeName(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the type (as a string) of the specified language element.
            </summary>
            <param name="element">The LanguageElement to check.</param>
            <returns>Returns the type of the specified language element, providing it represents a declaration.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStringAt(System.Int32,System.Int32)">
            <summary>
            Returns the TextString at the specified line and column position.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the TextString at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStringAt(EnvDTE.EditPoint)">
            <summary>
            Returns the TextString at the specified EditPoint.
            </summary>
            <param name="editPoint">The EditPoint to check.</param>
            <returns>Returns the TextString at the specified EditPoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStringAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the TextString at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the TextString at the specified SourcePoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetTypeName(System.String)">
            <summary>
            Gets the type (as a string) of the specified identifier.
            </summary>		
            <param name="identifier">The name of the identifier to check.</param>
            <returns>Returns the type (as a string) of the specified identifier, providing it's declaration can be found. Returns an empty string otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetSimpleTypeName(System.String)">
            <summary>
            Gets the simple type (as a string) of the specified expression full name.
            </summary>
            <param name="typeFullName">The full name of the expression to get simple type for.</param>
            <returns>Returns the simple type (as a string) of the specified type, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetSimpleTypeName(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="typeElement">The type element to get simple type for.</param>
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(System.String)">
            <summary>
            Gets the simple type (as a string) of the specified expression full name.
            </summary>
            <param name="typeFullName">The full name of the expression to get simple type for.</param>
            <returns>Returns the simple type (as a string) of the specified type, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(System.String,System.Boolean)">
            <summary>
            Gets the simple type (as a string) of the specified expression full name.
            </summary>
            <param name="typeFullName">The full name of the expression to get simple type for.</param>
            <param name="checkForBuiltInType">Defines if keywords for primitive types should be taken into account.</param>
            <returns>Returns the simple type (as a string) of the specified type, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(System.String,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="typeName">The name of the type to strip.</param>
            <param name="typeElement">The type element to get simple type for.</param>		
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="typeElement">The type element to get simple type for.</param>		
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.ITypeElement,System.Boolean)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="typeElement">The type element to get simple type for.</param>
            <param name="checkForBuiltInType">Defines if keywords for primitive types should be taken into account.</param>
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.SourceFile,System.String)">
            <summary>
            Gets the simple type (as a string) of the specified expression full name.
            </summary>
            <param name="targetFile"></param>
            <param name="typeFullName">The full name of the expression to get simple type for.</param>
            <returns>Returns the simple type (as a string) of the specified type, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.SourceFile,System.String,System.Boolean)">
            <summary>
            Gets the simple type (as a string) of the specified expression full name.
            </summary>
            <param name="targetFile"></param>
            <param name="typeFullName">The full name of the expression to get simple type for.</param>
            <param name="checkForBuiltInType">Defines if keywords for primitive types should be taken into account.</param>
            <returns>Returns the simple type (as a string) of the specified type, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="targetFile">The target file to use.</param>		
            <param name="typeElement">The type element to get simple type for.</param>		
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.SourceFile,System.String,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="targetFile"></param>
            <param name="typeName">The name of the type to strip.</param>
            <param name="typeElement">The type element to get simple type for.</param>
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.ITypeElement,System.Boolean)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="targetFile"></param>
            <param name="typeElement">The type element to get simple type for.</param>
            <param name="checkForBuiltInType">Defines if keywords for primitive types should be taken into account.</param>
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StripNamespace(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.Namespace,DevExpress.CodeRush.StructuralParser.ITypeElement,System.String,System.Boolean)">
            <summary>
            Gets the simple type (as a string) of the specified type element.
            </summary>
            <param name="targetFile"></param>
            <param name="targetNamespace">The namespace where new type will be declared.</param>
            <param name="typeElement">The type element to get simple type for.</param>
            <param name="typeName">The name of the type to strip.</param>
            <param name="checkForBuiltInType">Defines if keywords for primitive types should be taken into account.</param>
            <returns>Returns the type (as a string) of the specified type element, takes into account all imported namespaces.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.CutNamespaceFromFullTypeName(System.String,System.String)">
            <summary>
            Removes namespace from the full type name.
            </summary>
            <param name="fullTypeName"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetSelectedNodes">
            <summary>
            Retrieves an array containing the currently selected nodes of the active document's parse tree.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetExpressionInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns expression inside of the specified element and restricted within
            the given source range.
            </summary>
            <param name="element">The element that contains the expression.</param>
            <param name="range">The selection source range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasMember(System.String)">
            <summary>
            Returns true if the active type (at the caret) or an ancestor class declares a member with the specified name.
            </summary>
            <param name="memberName">The name of the member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasMethod(System.String)">
            <summary>
            Returns true if the active type (at the caret) or an ancestor class declares a method with the specified name.
            </summary>
            <param name="methodName">The name of the method to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasMethod(System.String,System.String)">
            <summary>
            Returns true if the specified identifier (whose declaration is visible from the caret 
            position) has the specified method.
            </summary>
            <param name="identifier">The name of an identifier declaration is visible from the caret 
            position.</param>
            <param name="methodName">The name of the method to verify exists inside the type of the specified identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasMethod(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns true if the specified IElement is a type that declares the specified method.
            </summary>
            <param name="declaration">The IElement declaration to check.</param>
            <param name="methodName">The name of the method to verify exists inside specified type declaration.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasProperty(System.String,System.String)">
            <summary>
            Returns true if the specified identifier (whose declaration is visible from the caret 
            position) has the specified property.
            </summary>
            <param name="identifier">The name of an identifier declaration is visible from the caret 
            position.</param>
            <param name="propertyName">The name of the property to verify exists inside the type of the specified identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasProperty(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns true if the specified IElement is a type that declares the specified property.
            </summary>
            <param name="declaration">The IElement declaration to check.</param>
            <param name="propertyName">The name of the property to verify exists inside specified type declaration.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.HasStaticInitializer(System.String)">
            <summary>
            Returns true if the specified type is a value type and has a static property 
            of the same type (e.g., Empty, MinValue, etc.).
            </summary>
            <param name="fullTypeName">The full type name (e.g. System.Drawing.Color) to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.Implements(System.String,System.String)">
            <summary>
            Returns true if the specified type implements the specified interface.
            </summary>
            <param name="fullTypeName">The full name of the type to check (e.g., "System.Drawing.GraphicsPath").</param>
            <param name="interfaceName">The full name of the interface to find (e.g., "System.IDisposable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.Implements(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String)">
            <summary>
            Returns true if the specified type implements the specified interface.
            </summary>
            <param name="type">The ITypeElement to check.</param>
            <param name="interfaceName">The full name of the interface to find (e.g., "System.IDisposable").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.Is(System.String,System.String)">
            <summary>
            Returns true if the specified type is or descends from the specified ancestor class.
            </summary>
            <param name="fullTypeName">The full name of the type to check (e.g., "System.Drawing.GraphicsPath").</param>
            <param name="ancestorName">The full name of the ancestor class to find (e.g., "System.Windows.Forms.Control").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.Is(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String)">
            <summary>
            Returns true if the specified type is or descends from the specified ancestor class.
            </summary>
            <param name="type">The ITypeElement to check.</param>
            <param name="ancestorName">The full name of the ancestor class to find (e.g., "System.Windows.Forms.Control").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IsLocal(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified language element is a local variable.
            </summary>
            <param name="languageElement">The language element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IsStatic(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified language element is a static method or property.
            </summary>
            <param name="languageElement">The language element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IsType(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified language element is a class, struct, or interface.
            </summary>
            <param name="languageElement">The language element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IsXmlDocNode(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Checks if the given element is xml doc node (xml element, xml attribute or xml text).
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IsStatement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the given element is statement and can be executed.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IsAnonymousType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is anonymous type or anonymous type reference.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ContainsAnonymousType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element contains at least one anonymous type or anonymous type reference inside
            it's children.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ContainsAnonymousType(System.Collections.ICollection)">
            <summary>
            Returns true if the given collection contains at least one anonymous type or anonymous type reference.
            </summary>
            <param name="elements">The elements to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNextStatementToExecute(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns next statement that will be executed.
            Returns null if the control flow will leave current method or
            property accessor.
            </summary>
            <param name="statement">The current statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetFirstStatement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the first statement inside the given one.
            </summary>
            <param name="statement">The statement to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.StatementCount(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the number of statements inside the given element.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ImplementInteface(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.StructuralParser.Interface)">
            <summary>
            Implements interface for the given type.
            </summary>
            <param name="type">The type to implement interface</param>
            <param name="newInterface">The interface to implement</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ImplementInterface(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.StructuralParser.Interface)">
            <summary>
            Implements interface for the given type.
            </summary>
            <param name="type">The type to implement interface</param>
            <param name="newInterface">The interface to implement</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.InheritType(DevExpress.CodeRush.StructuralParser.TypeDeclaration,DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Inherits specified type for the given type (makes given type a descendant of the specified type).
            </summary>
            <param name="type">The type to make a descendant.</param>
            <param name="ancestor">The ancestor type to inherit.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.NodeIterationEventHandler)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="startLine">The starting line number of the range.</param>
            <param name="startColumn">The starting column offset of the range.</param>
            <param name="stopLine">The ending line number of the range.</param>
            <param name="stopColumn">The ending column offset of the range.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.NodeIterationEventHandler)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="start">The starting SourcePoint of the range.</param>
            <param name="stop">The ending SourcePoint of the range.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.NodeIterationEventHandler)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="range">The SourceRange representing the range to iterate.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="startNode">The file node to iterate through. If null, the active file node is used.</param>
            <param name="start">The starting SourcePoint of the range.</param>
            <param name="stop">The ending SourcePoint of the range.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="startNode">The file node to iterate through. If null, the active file node is used.</param>
            <param name="range">The SourceRange representing the range to iterate.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs,DevExpress.CodeRush.Core.CollapsibleRegion[])">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="startNode">The file node to iterate through. If null, the active file node is used.</param>
            <param name="startLine">The starting line number of the range.</param>
            <param name="startColumn">The starting column offset of the range.</param>
            <param name="stopLine">The ending line number of the range.</param>
            <param name="stopColumn">The ending column offset of the range.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
            <param name="skipRegions">An optional array of collapsed regions to skip.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the range will be included in the iteration.
            </summary>
            <param name="startNode">The file node to iterate through. If null, the active file node is used.</param>
            <param name="startLine">The starting line number of the range.</param>
            <param name="startColumn">The starting column offset of the range.</param>
            <param name="stopLine">The ending line number of the range.</param>
            <param name="stopColumn">The ending column offset of the range.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInSelection(DevExpress.CodeRush.Core.NodeIterationEventHandler)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the selection will be included in the iteration.
            </summary>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInView(DevExpress.CodeRush.Core.TextView,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs,System.Boolean)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the view will be included in the iteration.
            </summary>
            <param name="textView">The TextView representing the view information to iterate through.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
            <param name="includeHiddenNodes">If true, hidden nodes (inside collapsed regions) will be included in the iteration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInView(DevExpress.CodeRush.Core.TextView,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the view will be included in the iteration.
            </summary>
            <param name="textView">The TextView representing the view information to iterate through.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInView(DevExpress.CodeRush.Core.BaseEditorPaintEventArgs,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs,System.Boolean)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the view will be included in the iteration.
            </summary>
            <param name="editorPaintEventArgs">The BaseEditorPaintEventArgs representing the view information to iterate through.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
            <param name="includeHiddenNodes">If true, hidden nodes (inside collapsed regions) will be included in the iteration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateNodesInView(DevExpress.CodeRush.Core.BaseEditorPaintEventArgs,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs)">
            <summary>
            Iterates through the nodes in the specified range. Parent nodes that overlap the view will be included in the iteration.
            </summary>
            <param name="editorPaintEventArgs">The BaseEditorPaintEventArgs representing the view information to iterate through.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.IterateVisibleNodesInRange(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32,System.Int32,System.Int32,DevExpress.CodeRush.Core.NodeIterationEventHandler,DevExpress.CodeRush.Core.NodeIterationEventArgs)">
            <summary>
            Iterates through the visible nodes in the specified range. Parent nodes that overlap the range will be included in the iteration, however nodes contained inside collapsed regions will not.
            </summary>
            <param name="textDocument">The TextDocument to iterate through.</param>
            <param name="startNode">The file node to iterate through. If null, the active file node is used.</param>
            <param name="startLine">The starting line number of the range.</param>
            <param name="startColumn">The starting column offset of the range.</param>
            <param name="stopLine">The ending line number of the range.</param>
            <param name="stopColumn">The ending column offset of the range.</param>
            <param name="nodeIterator">The NodeIterationEventHandler. You can use
            "new NodeIterationEventHandler(MyIteratorProc)" as the parameter for this method.
            In this example, MyIteratorProc would accept a single parameter of type NodeIterationEventArgs.</param>
            <param name="ea">The NodeIterationEventArgs to pass to each handler. If null, a default NodeIterationEventArgs will be constructed for you.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.Parse">
            <summary>
            Parses the active document. Plug-in authors should never need to call this method as parsing is handled automatically by CodeRush.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ParseIfNeeded(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Parses the active document if changes have been committed since the 
            last parse of the active file. This is a low-level method that normally 
            should not need to be called by plug-in writers.
            </summary>
            <param name="textDocument">The TextDocument to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ParseIfNeeded">
            <summary>
            Parses the active document if changes have been committed since the last 
            parse of the active file. This is a low-level method that normally 
            should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ParseIfTextChanged(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Parses the specified TextDocument if the text has been changed (but 
            not necessarily committed) since the last parse. Plug-in authors can 
            call this method to ensure that the CodeRush structural image is in 
            sync with the file.
            </summary>
            <param name="textDocument">The TextDocument to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ParseIfTextChanged">
            <summary>
            Parses the active document if the text has been changed (but not 
            necessarily committed) since the last parse. Plug-in authors can 
            call this method to ensure that the CodeRush structural image is 
            in sync with the file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.PromoteToSiblings(DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Converts firstElement and secondElement non-siblings to their closest parents which are 
            siblings. Returns true if successful, or false if firstElement and 
            secondElement do not share a common parent. Note that if one of these elements
            parents the other, then both of these LanguageElements will point to the same 
            parent. If the specified elements are already siblings, they will leave this method 
            unchanged. If one element is a detail node and the other is a child node, each will be 
            set to the common parent.
            </summary>
            <param name="firstElement">The first LanguageElement to check.</param>
            <param name="secondElement">The second LanguageElement to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ReferenceDeclared(System.String)">
            <summary>
            Determines whether the specified namespace exists in a namespace reference (e.g., a using reference in C#, or an imports statement in VB).
            </summary>
            <param name="aNamespace">The namespace to check.</param>
            <returns>Returns true if the specified namespace exists in a using reference (or imports statement), false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.RegionNodeIsValid(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified node is a valid region node. This method is useful for iterating through parent nodes of regions.
            The topmost region node is used simply as a container for all other regions in the file, and if that node is passed, this method
            will return false.
            </summary>
            <param name="regionNode">The node to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ResetSourceUpdate">
            <summary>
            Resets internal source update counter, so parsing can be normally resumed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.BeginUpdate">
            <summary>
            This method suspends parsing and is useful if you plan to make several 
            repeated changes to the code. If you call this inside plug-in, you must guarantee a 
            call to EndUpdate() (e.g., placed in a finally block) so normal parsing can resume. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.EndUpdate">
            <summary>
            Marks the end of an update session. You must call this once for every call to BeginUpdate().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.EndUpdate(System.Boolean)">
            <summary>
            Marks the end of an update session. You must call this once for every call to BeginUpdate().
            </summary>
            <param name="changesMade">True if changes were made during the update.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDeclarationAtCaret(System.String)">
            <summary>
            Returns declaration for the given identifier starting 
            from the caret position.
            </summary>
            <param name="identifier">The identifier to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDeclaration(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Returns declaration for the given identifier starting 
            from the caret position.
            </summary>
            <param name="start">The source point to start from.</param>
            <param name="identifier">The identifier to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns declaration for the given language element.
            Language element is restored for declaration.
            </summary>
            <param name="element">The element to find declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean)">
            <summary>
            Returns declaration for the given language element.
            </summary>
            <param name="element">The element to find declaration.</param>
            <param name="restore">Defines wether language element should be restored for declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns declaration for the given identifier starting from the given element.
            Language element is restored for declaration.
            </summary>
            <param name="start">The start element.</param>
            <param name="identifier">The identifier to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement,System.String,System.Boolean)">
            <summary>
            Returns declaration for the given identifier starting from the given
            element.
            </summary>
            <param name="start">The start element.</param>
            <param name="identifier">The identifier to search.</param>
            <param name="restore">Defines wether language element should be restored for declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetDefineDirectiveDeclaration(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Finds declaration of define directive for the given location.
            </summary>
            <param name="file">The file to search.</param>
            <param name="point">The point to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetBaseTypes(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns base type (types in case of multiple inheritence) for the pointed type declaration.
            </summary>
            <param name="element">The TypeElement.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetAllBaseTypes(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns all base types for the pointed type declaration.
            </summary>
            <param name="element">The TypeElement.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStartWordRange(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns source range for the element start word.
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetWordRangeAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns source range for a word at the given point.
            </summary>
            <param name="point">The point to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetLanguageElement(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets LanguageElement from the given IElement.
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.AddPrototype(DevExpress.CodeRush.StructuralParser.Method,System.String)">
            <summary>
            Adds prototype for the given method if needed.
            </summary>
            <param name="target">The target method to add prototype.</param>
            <param name="methodPrototype">The method prototype code to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.ReplacePrototype(DevExpress.CodeRush.StructuralParser.Method,System.String)">
            <summary>
            Replaces prototype for the given method with new one.
            </summary>
            <param name="target">The target method to replace prototype.</param>
            <param name="methodPrototype">The method prototype code to replace.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.OnFarCacheChanged">
            <summary>
            Called when FAR symbols are changed. Used only internally.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.OnFarCacheInSync">
            <summary>
            Called when project symbols are in sync.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetAllCodeMetricProviders">
            <summary>
            Retrieves all available code metric providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetCodeMetricProvider(System.String)">
            <summary>
            Retrieves a code metric provider by name.
            </summary>
            <param name="name">The name of the code metric provider to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetCodeMetricValue(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Retrieves a code metric value for the given LanguageElement using the specified code metric provider.
            </summary>
            <param name="metricName">The name of the code metric provider to use.</param>
            <param name="element">The LangaugeElement to retrieve a code metric value for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetSupportedCodeMetricProviders(System.String)">
            <summary>
            Retrieves all code metric providers that support the specified language.
            </summary>
            <param name="languageId">The language ID to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetProjectConfigurationName(DevExpress.CodeRush.StructuralParser.ProjectElement)">
            <summary>
            Returns project configuration name.
            </summary>
            <param name="project">The project to get configuration name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetReferencedDeclarationInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns reference to declaration mapping for all elements inside the specified scope at the given source range.
            </summary>
            <param name="scope">The scope to get declarations from.</param>
            <param name="range">The range to get declarations.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetBuildAction(DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Gets source file build action.
            </summary>
            <param name="fileNode">The source file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStorage(DevExpress.CodeRush.StructuralParser.SolutionElement,System.String)">
            <summary>
            Returns solution specific decoupled storage for the given page.
            </summary>
            <param name="solution">The solution to create decoupled storage.</param>
            <param name="page">The page to create decoupled storage.</param>
            <returns>Returns solution specific decoupled storage for the given page.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStorage(DevExpress.CodeRush.StructuralParser.SolutionElement,System.String,System.String)">
            <summary>
            Returns solution specific decoupled storage for the given page.
            </summary>
            <param name="solution">The solution to create decoupled storage.</param>
            <param name="category">The category to create decoupled storage.</param>
            <param name="page">The page to create decoupled storage.</param>
            <returns>Returns solution specific decoupled storage for the given page.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStorage(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String)">
            <summary>
            Returns project specific decoupled storage for the given page.
            </summary>
            <param name="project">The project to create decoupled storage.</param>
            <param name="page">The page to create decoupled storage.</param>
            <returns>Returns solution specific decoupled storage for the given page.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStorage(DevExpress.CodeRush.StructuralParser.ProjectElement,System.String,System.String)">
            <summary>
            Returns project specific decoupled storage for the given page.
            </summary>
            <param name="project">The project to create decoupled storage.</param>
            <param name="category">The category to create decoupled storage.</param>
            <param name="page">The page to create decoupled storage.</param>
            <returns>Returns solution specific decoupled storage for the given page.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetStorage(System.String,System.String)">
            <summary>
            Returns project specific decoupled storage for the given page.
            </summary>
            <param name="category">The category to create decoupled storage.</param>
            <param name="page">The page to create decoupled storage.</param>
            <returns>Returns solution specific decoupled storage for the given page.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.RemoveNamespaces(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Removes namespaces contained inside the specified text document
            from the internal collection of all namespaces.
            </summary>
            <param name="document">The document to get namespaces from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetIdentifierDeclaration(System.String)">
            <summary>
            Finds the declaration for the specified identifier.
            </summary>
            <param name="identifier">The name of the identifier to find. This must be a 
            simple identifier. Dot-delimited identifiers (e.g., "A.B.C") will not be 
            matched.</param>
            <returns>The LanguageElement that represents the declaration, or null if not 
            found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetIdentifierDeclaration(System.String,DevExpress.CodeRush.Core.IdentifierList)">
            <summary>
            Finds the declaration for the specified identifier.
            </summary>
            <param name="identifier">The name of the identifier to find. This must be a 
            simple identifier. Dot-delimited identifiers (e.g., "A.B.C") will not be 
            matched.</param>
            <param name="identifiers">An IdentifierList to iterate through.</param>
            <returns>The LanguageElement that represents the declaration, or null if not 
            found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetIdentifierDeclaration(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32)">
            <summary>
            Finds the declaration for the specified identifier.
            </summary>
            <param name="identifier">The name of the identifier to find. This must be a 
            simple identifier. Dot-delimited identifiers (e.g., "A.B.C") will not be 
            matched.</param>
            <param name="startNode">A starting element where the identifier is visible. 
            If null, the active element is used.</param>
            <param name="startLine">A starting line from which identifier is visible. </param>
            <param name="startOffset">A starting column offset from which identifier is visible. </param>
            <returns>The LanguageElement that represents the declaration of the specified 
            identifier, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindElement(DevExpress.CodeRush.StructuralParser.LanguageElementCollection,System.String)">
            <summary>
            Finds an element with the given name inside the specified collection of language elements.
            Only first level nodes are checked.
            </summary>
            <param name="elements">The collection of language elements to search in.</param>
            <param name="name">The name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindElements(DevExpress.CodeRush.StructuralParser.LanguageElementCollection,System.String)">
            <summary>
            Finds elements with the given name inside the specified collection of language elements.
            Only first level nodes are checked.
            </summary>
            <param name="elements">The collection of language elements to search in.</param>
            <param name="name">The name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindElementByFullName(DevExpress.CodeRush.StructuralParser.LanguageElementCollection,System.String)">
            <summary>
            Performs a recursive search for an element with the given name 
            inside the specified collection of language elements.
            </summary>
            <param name="elements">The collection of language elements to search in.</param>
            <param name="fullName">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindMember(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Finds a member with the given name inside the specified language element.
            Only first level nodes are checked.
            </summary>
            <param name="element">The language element to search in.</param>
            <param name="name">The name of the member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindMembers(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Finds members with the given name inside the specified language element.
            Only first level nodes are checked.
            </summary>
            <param name="element">The language element to search in.</param>
            <param name="name">The name of the member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindTypeOrNamespace(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Finds a type or namespace with the given name inside the specified
            language element. Only first level nodes are checked.
            </summary>
            <param name="element">The language element to search in.</param>
            <param name="name">The name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindTypeOrNamespace(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.Boolean)">
            <summary>
            Recursively searches for a type or namespace with the given name inside the specified
            language element.
            </summary>
            <param name="element">The language element to search in.</param>
            <param name="name">The name of the element to find.</param>
            <param name="recursive">Pass true to perform a recursive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindElementByLocation(DevExpress.CodeRush.StructuralParser.LanguageElementCollection,System.String)">
            <summary>
            Finds an element with the given location inside the specified collection of language elements.
            Only first level nodes are checked.
            </summary>
            <param name="elements">The collection of language elements to search in.</param>
            <param name="location">The location of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindNamespaceByLocation(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Recursivley searches for a namespace with the given location inside the specified language element.
            </summary>
            <param name="element">The language element to search in.</param>
            <param name="location">The location of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.FindTypeOrNamespaceByLocation(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Recursivley searches for a type or namespace with the given location inside the specified language element.
            </summary>
            <param name="element">The language element to search in.</param>
            <param name="location">The location of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetTypes(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns a collection of types defined inside the specified language element.
            Only first level nodes are checked.
            </summary>
            <param name="element">The language element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetTypes(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns a collection of types defined inside the specified language element.
            </summary>
            <param name="element">The language element to use.</param>
            <param name="findRecursive">Pass true to perform a recursive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNamespaces(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns a collection of namespaces defined inside the specified language element.
            Only first level nodes are checked.
            </summary>
            <param name="element">The language element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetNamespaces(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns a collection of namespaces defined inside the specified language element.
            </summary>
            <param name="element">The language element to use.</param>
            <param name="findRecursive">Pass true to perform a recursive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetTypesOrNamespaces(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns a collection of types or namespaces defined inside the specified language element.
            Only first level nodes are checked.
            </summary>
            <param name="element">The language element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetTypesOrNamespaces(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns a collection of types or namespaces defined inside the specified language element.
            </summary>
            <param name="element">The language element to use.</param>
            <param name="findRecursive">Pass true to perform a recursive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMembers(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns a collection of members defined inside the specified language element.
            Only first level nodes are checked.
            </summary>
            <param name="element">The language element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceModelServices.GetMembers(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Boolean)">
            <summary>
            Returns a collection of members defined inside the specified language element.
            </summary>
            <param name="element">The language element to use.</param>
            <param name="findRecursive">Pass true to perform a recursive search.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.IsAjaxInstalled">
            <summary>
            Returns true if Ajax is installed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveFileNode">
            <summary>
            Gets the LanguageElement representing the active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveSourceFile">
            <summary>
            Gets the SourceFile representing the active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveProject">
            <summary>
            Gets the ProjectElement containing the active document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.Identifiers">
            <summary>
            Gets an IEnumerable member suitable for use in a foreach statement. Identifiers iterates through identifiers
            visible to the current node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.FileNode">
            <summary>
            Returns the file node for the active document. This property is 
            obsolete. Use CodeRush.Source.ActiveFileNode instead.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.CodeActive">
            <summary>
            Returns active LanguageElement for active IAspSourceFile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.Active">
            <summary>
            Returns the language element at the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveWithoutParse">
            <summary>
            Returns the language element at the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveDeclaration">
            <summary>
            Gets the variable, initialized variable, implicit variable or constant declaration that contains the caret. 
            Returns null if the caret is not contained inside declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMemberName">
            <summary>
            Gets the name of the active member (Method, Property, Event, Field, etc.), 
            that is immediately parented by a Class, Struct, or Interface.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMethodName">
            <summary>
            Returns the name of the active method. Returns an empty string if the
            caret is not inside a method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMethodOrPropertyAccessorName">
            <summary>
            Returns the name of the method or property accessor containing the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveClassName">
            <summary>
            Gets the name of the active class. Note that if the caret is inside
            an embedded class (e.g., a class inside a class), only the name of the
            innermost class is returned. Returns an empty string if the caret is
            not inside a class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveTypeName">
            <summary>
            Gets the name of the active class, struct or interface. Note that if 
            the caret is inside an embedded type (e.g., a type inside a type), 
            only the name of the innermost type is returned. Returns an empty 
            string if the caret is not outside a type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveComment">
            <summary>
            Gets the Comment or XMLDocComment that contains the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveXMLDocComment">
            <summary>
            Returns the XML Documentation Comment for the active node (or for the first parent of the active node
            that an XML documentation comment can be bound to). Note: This method can return XMLDocComments that do not
            contain the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveNamespaceName">
            <summary>
            Gets the name of the active namespace. Note that if the caret is inside
            an embedded namespace (e.g., a namespace inside a namespace), only the name of the
            innermost namespace is returned. Returns an empty string if the caret is
            not inside a namespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMember">
            <summary>
            Gets the active Method, Property, Event, Field, etc., that is immediately parented by a Class, Struct, or Interface.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMethod">
            <summary>
            Gets the Method containing the caret.
            Returns null if the caret is not inside a method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveProperty">
            <summary>
            Gets the Property containing the caret.
            Returns null if the caret is not inside a property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActivePropertyAccessor">
            <summary>
            Gets the PropertyAccessor containing the caret.
            Returns null if the caret is not inside a property get or set accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveClass">
            <summary>
            Gets the Class containing the caret.
            Returns null if the caret is not inside a class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveRefType">
            <summary>
            Gets the RefType containing the caret.
            Returns null if the caret is not inside a ActiveRefType.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveValueType">
            <summary>
            Gets the ValueType containing the caret.
            Returns null if the caret is not inside a ActiveValueType.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveEvent">
            <summary>
            Gets the Event containing the caret.
            Returns null if the caret is not inside an event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveAnonymousExpression">
            <summary>
            Gets the AnonymousExpression containing the caret.
            Returns null if the caret is not inside an AnonymousMethodExpression or LambdaExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveEventAccessor">
            <summary>
            Gets the EventAccessor containing the caret.
            Returns null if the caret is not inside an event add or remove accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveCache">
            <summary>
            Gets the SourceModelCache for the active TextDocument, or returns null if there is no TextDocument active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveStruct">
            <summary>
            Gets the Struct containing the caret.
            Returns null if the caret is not inside a struct.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveString">
            <summary>
            Gets the TextString containing the caret.
            Returns null if the caret is not inside a quoted text string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveRegion">
            <summary>
            Gets the region that contains the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveInterface">
            <summary>
            Gets the Interface containing the caret.
            Returns null if the caret is not inside an interface.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveNamespace">
            <summary>
            Gets the active namespace language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveClassInterfaceOrStruct">
            <summary>
            Gets the class, interface, or struct that contains the caret. Returns null if the caret is not contained inside a class, interface, or struct.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveClassInterfaceStructOrModule">
            <summary>
            Gets the class, interface, struct or module that contains the caret. Returns null if the caret is not contained inside a class, interface, struct or module.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveType">
            <summary>
            Gets the class, interface, struct, enum, module, or delegate that contains the caret. 
            Returns null if the caret is not contained inside a class, interface, struct, enum, module, or delegate.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMethodOrPropertyAccessor">
            <summary>
            Gets the active method, property get/set accessor or event add/remove block at the caret. Returns null if the caret is not contained inside a method or property accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMethodOrProperty">
            <summary>
            Gets the active method or property at the caret. Returns null if the caret is not contained inside a method or property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMethodPropertyOrEvent">
            <summary>
            Gets the active method, property or event at the caret. Returns null if the caret is not contained inside a method, property or event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveDefineDirective">
            <summary>
            Gets the define directive from caret location. 
            Returns null if the caret is not contained inside define directive.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ActiveMacroInfo">
            <summary>
            Gets the macro info from caret location. 
            Returns null if the caret is not contained inside macro reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.Aliases">
            <summary>
            Returns the reference aliases for the current file, or null if the current language does not support using/import aliases.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.AllNamespaces">
            <summary>
            Gets an array of all namespaces.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.CompilerDirectives">
            <summary>
            Returns the compiler directives for the current file, or null if the current language does not support compiler directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.CompilerDirectiveRootNode">
            <summary>
            Returns the compiler directive root node for the current file, or null if the current language does not support
            compiler directives. The root node's children (accessed through its Nodes property) are the CompilerDirectives for
            this file. This root node itself, however, is not an actual CompilerDirective for this file (even though its type is
            CompilerDirective, it does not represent an actual CompilerDirective -- it is merely the parent of the
            CompilerDirectives in this file).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.FirstSelectedNode">
            <summary>
            Gets first selected node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideMethodOrPropertyAccessor">
            <summary>
            True if the caret is inside a method, property get/set accessor, or event add/remove block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideClassInterfaceOrStruct">
            <summary>
            True if the caret is inside a class, interface, or struct.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideClassInterfaceStructOrModule">
            <summary>
            True if the caret is inside a class, interface, struct or module.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideType">
            <summary>
            True if the caret is inside a class, interface, struct, enum, or delegate.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideInterface">
            <summary>
            Returns true if caret is inside interface, interface class or interface struct.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideComment">
            <summary>
            Returns true if caret is inside comment or xml doc comment. This property reflects the current 
            state as determined by the parse tree, but it may not match recent edits on the current line.
            If you need to know if immediate recent changes on the line have placed the caret inside a 
            comment, use CodeRush.Caret.InsideComment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideXMLDocComment">
            <summary>
            Returns true if caret is inside xml doc comment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideAttribute">
            <summary>
            Returns true if caret is indside attribute or attribute section.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.InsideString">
            <summary>
            Returns true if caret is inside string. This property reflects the current 
            state as determined by the parse tree, but it may not match recent edits on the current line.
            If you need to know if immediate recent changes on the line have placed the caret inside a 
            string, use CodeRush.Caret.InsideString.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.IsUpdating">
            <summary>
            If true, the source model cache will report that parsing is 
            unnecessary.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.LastSelectedNode">
            <summary>
            Gets last selected node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.MiscFiles">
            <summary>
            A MiscFiles that contains open files that do not belong to a source project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.NamespaceReferences">
            <summary>
            Returns the using/import references for the current file, or null if the current language does not support using/import references.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.Regions">
            <summary>
            Returns the regions for the current file, or null if the current language does not support regions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.RegionRootNode">
            <summary>
            Returns the region root node for the current file, or null if the current language does not support
            regions. The root node's children (accessed through its Nodes property) are the RegionDirectives for
            this file. This root node itself, however, is not an actual RegionDirectives for this file (even though
            its type is RegionDirectives, it does not represent an actual RegionDirectives -- it is merely the parent
            of the regions in this file).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.Strings">
            <summary>
            Returns the strings for the current file, or null if the current language does not support strings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.SelectedExpression">
            <summary>
            Returns currently selected expression. If there is no expressions selected
            then this property returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.ParsingSuspended">
            <summary>
            If true, the source model cache will report that parsing is 
            unnecessary. This option is used for testing, and should 
            never be set to true by a plug-in.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceModelServices.UsePostponedParsing">
            <summary>
            If true, then language elements that implement on demand parsing
            will store tokens for later parse. On demand parse of such language elements
            will occur once NodeCount, Nodes, DetailNodeCount, DetailNodes or Comments
            properties are accessed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.Sort">
            <summary>
            Sorts this SourceRange collection by line number. SourceRanges closer to the top of the file are 
            listed first.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.SortReverse">
            <summary>
            Sorts this SourceRange collection by start point in reverse order.
            SourceRanges closer to the top of the file are listed last.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.InsertAndShift(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Inserts the specified SourceRange into this collection, shifting other SourceRanges below
            it by the appropriate amount. If this SourceRange is inserted at the start or end of a 
            previously-inserted SourceRange, the two SourceRanges are merged into one.
            </summary>
            <param name="range">The SourceRange to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.DeleteAndShift(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Deletes the specified SourceRange from this collection, adjusting any nodes that follow 
            the deletion up as necessary.
            </summary>
            <param name="range">The SourceRange to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.Overlay(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Integrates the specified SourceRange with others in this collection, removing any existing
            SourceRanges that are fully overlapped by the new one, and merging partially-overlapped 
            SourceRanges.
            </summary>
            <param name="range">The SourceRange to overlay.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.Intersects(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if any of the SourceRanges in this collection intersect the 
            specified SourceRange.
            </summary>
            <param name="range">The SourceRange to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SourceRangeCollection.ToArray">
            <summary>
            Creates and returns SourceRange array.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceRangeCollection.First">
            <summary>
            Gets the first SourceRange in this collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceRangeCollection.Last">
            <summary>
            Gets the last SourceRange in this collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SourceRangeCollection.TextDocument">
            <summary>
            The TextDocument these SourceRanges were collected from.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.DecoupledStorage">
            <summary>
            Handles decoupled storage for plug-ins. Includes a property "LanguageID" that can create and select 
            child storage objects for the purposes of language-specific storage (e.g., to support independent 
            settings for C#, C++, Basic, etc.). Just set the LanguageID to the appropriate Language Identifier
            (e.g., "CSharp", "C/C++", "Basic", etc.), and then read and write normally. To activate the 
            language-neutral storage object, set LanguageID to an empty string. If your code is inside a CodeRush 
            Options page, you can get the LanguageID through the Options page's LanguageID property (also, you 
            can handle the LanguageChanged event in your Options page to find out when the user wants to create 
            settings for another programming language).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.SetStorageObject">
            <summary>
            Setups the active storage object -- INI or XML file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.SetStorageObject(DevExpress.CodeRush.Core.IStorageObject)">
            <summary>
            Setups the active storage object -- INI, XML or UserDefined.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.GetExtension(System.String)">
            <summary>
            Returns a file extension for a specified LanguageID.
            </summary>
            <param name="languageID">The language ID (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The file extension, keeping legal file name characters and preceded by the leading ".".</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.GetExtensionSerialized(System.String)">
            <summary>
            Returns an extension for serialized objects, e.g. for templates.
            </summary>
            <param name="languageID"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.MakeReadPath(System.String)">
            <summary>
            Returns a path to a file inside a subfolder of the directory holding this storage object. 
            The subfolder has the same root name as this storage object (typically the page name of your 
            Options page). An appropriate language extension is inserted before the file extension of the 
            specified file if this storage object has a programming language selected through the LanguageID 
            property. So if your Options page name was "Templates" and the category was "Editor", and the specified 
            language was C#, calling MakePath("HelloWorld.bin") might return (depending on the location of your 
            CodeRush Settings folder) something like this: 
            
            "C:\Program Files\Dev Express\CodeRush\Settings\Editor\Templates\HelloWorld.CSharp.bin"
            </summary>
            <param name="fileName">The name of the file to create (should be without path, but it should have an extension).</param>
            <returns>The generated file path.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.SelectActiveStorageObject">
            <summary>
            Activates the storage object associated with the _LanguageID field (called from set_LanguageID). This 
            method ensures the requested storage object for the current _LanguageID is created if necessary.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.GetSubFolders(System.String)">
            <summary>
            Returns all subfolders inside the specified folder as a 
            Hashtable where key is the folder name and value is a 
            DecoupledStorage object. Note that the value can be null if 
            the folder contains subfolders but has no storage.
            </summary>
            <param name="parentFolder">The parent folder to get subfolders.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.Clear">
            <summary>
            Clears the contents of the active language-specific storage object (set through the LanguageID property).
            If LanguageID is empty (""), then the primary (language-neutral) storage object is cleared. To clear all
            storage objects, use ClearAll().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ClearAll">
            <summary>
            Clears the contents of the storage object and any language-specific storage object children. To clear 
            only the active storage object (set through the LanguageID property), use the Clear() method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.DeleteKey(System.String,System.String)">
            <summary>
            Deletes the specified key in the given section.
            </summary>
            <param name="sectionName">The section name that contains the key to delete.</param>
            <param name="keyName">The key name to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.EraseSection(System.String)">
            <summary>
            Deletes the specified section.
            </summary>
            <param name="sectionName">The section name to erase.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.GetKeys(System.String)">
            <summary>
            Returns a string array of keys for the given section.
            </summary>
            <param name="section">The section to check.</param>
            <returns>The string array of keys for aSection.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.GetSections">
            <summary>
            Returns a string array of sections.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ValueExists(System.String,System.String)">
            <summary>
            Returns true if a value exists at the given section and key.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadString(System.String,System.String)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns an empty string value.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested string value or an empty string if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadString(System.String,System.String,System.Boolean)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns an empty string value.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="encoded">If true, the string value is assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string value or an empty string if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadString(System.String,System.String,System.String)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string value to return if the section or key is not found.</param>
            <returns>The requested string value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string value is assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadInt32(System.String,System.String)">
            <summary>
            Reads a Int32 value from the storage object. If the section or key was not found, 
            this method returns zero.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested Int32 value or zero if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadInt32(System.String,System.String,System.Int32)">
            <summary>
            Reads a System.Int32 value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Int32 value to return if the section or key is not found.</param>
            <returns>The requested Int32 value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadColor(System.String,System.String)">
            <summary>
            Reads a Color value from the storage object. If the section or key was not found, 
            this method returns a value of zero.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested Color value or Color.Empty if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Reads a Color value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Color value to return if the section or key is not found.</param>
            <returns>The requested Color value or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadChar(System.String,System.String)">
            <summary>
            Reads a char value from the storage object. If the section or key was not found, 
            this method returns an null char value.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested char value or an empty string if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadChar(System.String,System.String,System.Char)">
            <summary>
            Reads a char value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The char value to return if the section or key is not found.</param>
            <returns>The requested char value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadBoolean(System.String,System.String)">
            <summary>
            Reads a Boolean value from the storage object. If the section or key was not found, 
            this method returns a Boolean value of false.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested Boolean value or false if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Reads a Boolean value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Boolean value to return if the section or key is not found.</param>
            <returns>The requested Boolean value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadDateTime(System.String,System.String)">
            <summary>
            Reads a DateTime value from the storage object. If the section or key was not found, 
            this method returns a the current date and time.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested DateTime value or the current date and time if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Reads a DateTime value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The DateTime value to return if the section or key is not found.</param>
            <returns>The requested DateTime value or or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadSingle(System.String,System.String)">
            <summary>
            Reads a Single value from the storage object. If the section or key was not found, 
            this method returns a value of zero.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested Single value or zero if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadSingle(System.String,System.String,System.Single)">
            <summary>
            Reads a Single value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Single value to return if the section or key is not found.</param>
            <returns>The requested Single value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadDouble(System.String,System.String)">
            <summary>
            Reads a Double value from the storage object. If the section or key was not found, 
            this method returns a value of zero.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested Double value or zero if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadDouble(System.String,System.String,System.Double)">
            <summary>
            Reads a Double value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Double value to return if the section or key is not found.</param>
            <returns>The requested Double value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadStrings(System.String,System.String)">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns null.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <returns>The requested string array value or an emtpy string array if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadStrings(System.String,System.String,System.Boolean)">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns null.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="encoded">If true, the string values are assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string array value or an emtpy string array if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadStrings(System.String,System.String,System.String[])">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string array value to return if the section or key is not found.</param>
            <returns>The requested string array value or or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string array value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string values are assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string array value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadEnum(System.String,System.String,System.Type,System.Object)">
            <summary>
            Reads a enumeration element value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="enumType">The Type of the enumeration to read.</param>
            <param name="defaultValue">The default value to return if the section or key is not found.</param>
            <returns>The requested value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.ReadXmlNode(System.String)">
            <summary>
            Reads an XmlNode value from the storage object. If the name was not found, 
            this method returns null.
            </summary>
            <param name="name">The name of a node to read.</param>
            <returns>The requested value or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteString(System.String,System.String,System.String)">
            <summary>
            Writes a string value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The string value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Writes a string value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The string value to write.</param>
            <param name="encoded">If true, the string value will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteInt32(System.String,System.String,System.Int32)">
            <summary>
            Writes a Int32 value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Int32 value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Writes a Color value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Color value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteChar(System.String,System.String,System.Char)">
            <summary>
            Writes a char value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The char value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Writes a Boolean value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The bool value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Writes a DateTime value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The DateTime value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteSingle(System.String,System.String,System.Single)">
            <summary>
            Writes a Single value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Single value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteDouble(System.String,System.String,System.Double)">
            <summary>
            Writes a Double value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteStrings(System.String,System.String,System.String[])">
            <summary>
            Writes a string array value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Writes a string array value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
            <param name="encoded">If true, the string values will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteEnum(System.String,System.String,System.Object)">
            <summary>
            Writes a enumeration value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.WriteXmlNode(System.String,System.Xml.XmlNode)">
            <summary>
            Writes an XmlNode value to the storage object.
            </summary>
            <param name="name">The name of the xml node.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.UpdateStorage">
            <summary>
            Commits changes to disk. If any language-specific storage object children have been created, that data is
            also committed to disk.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.LoadSerialized(System.String)">
            <summary>
            Loads a serializable object from the specified file name (which should be without a path). If this method is 
            called when this storage object is in a language-specific state (e.g., LanguageID = "CSharp"), the actual 
            file name will have the LanguageID inserted before the file extension (e.g., "HelloWorld.bin" becomes 
            "HelloWorld.CSharp.bin"). If this storage object is in a language-neutral state (e.g., LanguageID = ""), 
            then the file name is unchanged.
            </summary>
            <param name="fileName">The name of the file to load your serialized data from. This file name should have an extension (e.g., ".bin"), 
            however it should *not* have a path (storage path is generated automatically by CodeRush).</param>
            <returns>The deserialized object. Exceptions can be thrown in this method, so be sure to wrap calls 
            to this method in a try/catch.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.LoadSerialized(System.String,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Loads a serializable object from the specified file name (which should be without a path). If this method is 
            called when this storage object is in a language-specific state (e.g., LanguageID = "CSharp"), the actual 
            file name will have the LanguageID inserted before the file extension (e.g., "HelloWorld.bin" becomes 
            "HelloWorld.CSharp.bin"). If this storage object is in a language-neutral state (e.g., LanguageID = ""), 
            then the file name is unchanged.
            </summary>
            <param name="fileName">The name of the file to load your serialized data from. This file name should have an extension (e.g., ".bin"), 
            however it should *not* have a path (storage path is generated automatically by CodeRush).</param>
            <param name="serializationBinder">The SerializationBinder descendant to use to redirect types constructed during deserialization. 
            Your SerializationBinder descendant must override the BindToType method.</param>
            <returns>The deserialized object. Exceptions can be thrown in this method, so be sure to wrap calls 
            to this method in a try/catch.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DecoupledStorage.SaveSerialized(System.Object,System.String)">
            <summary>
            Saves a serializable object to the specified file name (which should be without a path). If this method is 
            called when this storage object is in a language-specific state (e.g., LanguageID = "CSharp"), the actual 
            file name will have the LanguageID inserted before the file extension (e.g., "HelloWorld.bin" becomes 
            "HelloWorld.CSharp.bin"). If this storage object is in a language-neutral state (e.g., LanguageID = ""), 
            then the file name is unchanged.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="fileName">The name of the file to save your serialized data to. This file name should have an extension (e.g., ".bin"), 
            however it should *not* have a path (storage path is generated automatically by CodeRush).></param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DecoupledStorage.ActiveStorage">
            <summary>
            Returns the active storage object, which changes based on the LanguageID. If LanguageID is never specified
            then this property simply returns this.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DecoupledStorage.Folders">
            <summary>
            Returns a Hashtable containing child DecoupledStorage objects for the nested folders.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DecoupledStorage.FileExtension">
            <summary>
            Returns the file extension of the language-specific storage file (e.g., ".CSharp", ".Basic", etc.), or 
            ".ini" if this storage object is in a language-neutral state and storage object is set to use Ini files. To change the programming language 
            associated with this storage object, use the Language property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DecoupledStorage.LanguageID">
            <summary>
            Sets or gets the programming language ID associated with this storage object. Setting a new language ID 
            will have the effect of creating a new storage file with an extension matching the new language ID (minus 
            any characters that are illegal in a file name). To change back to language-neutral storage, set this 
            property to an empty string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DecoupledStorage.Sections">
            <summary>
            Returns a string array of the sections.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.FrmErrorSavingSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmErrorSavingSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FrmErrorSavingSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.GetExtension(System.String)">
            <summary>
            Returns a file extension for a specified LanguageID.
            </summary>
            <param name="languageID">The language ID (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The file extension, keeping legal file name characters and preceded by the leading ".".</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.Clear">
            <summary>
            Clears the contents of the active language-specific storage object (set through the LanguageID property).
            If LanguageID is empty (""), then the primary (language-neutral) storage object is cleared. To clear all
            storage objects, use ClearAll().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.DeleteKey(System.String,System.String)">
            <summary>
            Deletes the specified key in the given section.
            </summary>
            <param name="sectionName">The section name that contains the key to delete.</param>
            <param name="keyName">The key name to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.DeleteStorage(DevExpress.CodeRush.Core.DecoupledStorage)">
            <summary>
            Deletes the entire storage file or a section in the file of the specified language if there's more than one language section exist.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.EraseSection(System.String)">
            <summary>
            Deletes the specified section.
            </summary>
            <param name="sectionName">The section name to erase.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.GetKeys(System.String)">
            <summary>
            Returns a string array of keys for the given section.
            </summary>
            <param name="section">The section to check.</param>
            <returns>The string array of keys for aSection.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.GetSections">
            <summary>
            Returns a string array of sections.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ValueExists(System.String,System.String)">
            <summary>
            Returns true if a value exists at the given section and key.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteStorageData(System.Boolean)">
            <summary>
            Saves a storage object. If suppressErrorDialog is true when Error Dialog isn't showed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteInt32(System.String,System.String,System.Int32)">
            <summary>
            Writes a Int32 value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Int32 value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteEnum(System.String,System.String,System.Object)">
            <summary>
            Writes a enumeration value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Writes a string array value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
            <param name="encoded">If true, the string values will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteDouble(System.String,System.String,System.Double)">
            <summary>
            Writes a Double value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteSingle(System.String,System.String,System.Single)">
            <summary>
            Writes a Single value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Single value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Writes a DateTime value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The DateTime value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Writes a Boolean value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The bool value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteChar(System.String,System.String,System.Char)">
            <summary>
            Writes a char value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The char value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Writes a Color value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Color value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Writes a string value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The string value to write.</param>
            <param name="encoded">If true, the string value will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.WriteXmlNode(System.String,System.Xml.XmlNode)">
            <summary>
            Writes an XmlNode value to the storage object.
            </summary>
            <param name="name">The name of the xml node.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadEnum(System.String,System.String,System.Type,System.Object)">
            <summary>
            Reads a enumeration element value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="enumType">The Type of the enumeration to read.</param>
            <param name="defaultValue">The default value to return if the section or key is not found.</param>
            <returns>The requested value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string array value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string values are assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string array value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadDouble(System.String,System.String,System.Double)">
            <summary>
            Reads a Double value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Double value to return if the section or key is not found.</param>
            <returns>The requested Double value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadSingle(System.String,System.String,System.Single)">
            <summary>
            Reads a Single value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Single value to return if the section or key is not found.</param>
            <returns>The requested Single value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Reads a DateTime value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The DateTime value to return if the section or key is not found.</param>
            <returns>The requested DateTime value or or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Reads a Boolean value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Boolean value to return if the section or key is not found.</param>
            <returns>The requested Boolean value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadChar(System.String,System.String,System.Char)">
            <summary>
            Reads a char value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The char value to return if the section or key is not found.</param>
            <returns>The requested char value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Reads a Color value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Color value to return if the section or key is not found.</param>
            <returns>The requested Color value or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadInt32(System.String,System.String,System.Int32)">
            <summary>
            Reads a System.Int32 value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Int32 value to return if the section or key is not found.</param>
            <returns>The requested Int32 value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string value is assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IStorageObject.ReadXmlNode(System.String)">
            <summary>
            Reads an XmlNode value from the storage object. If the name was not found, 
            this method returns null.
            </summary>
            <param name="name">The name of the node to read.</param>
            <returns>The requested value or null if not found.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IStorageObject.DefaultExtension">
            <summary>
            The default extension of a storage object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IStorageObject.FileExtension">
            <summary>
            Returns the file extension of the language-specific storage file (e.g., ".CSharp", ".Basic", etc.), or 
            ".ini" if this storage object is in a language-neutral state. To change the programming language 
            associated with this storage object, use the Language property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IStorageObject.FileName">
            <summary>
            Returns the file name of a storage object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IStorageObject.Sections">
            <summary>
            Returns a string array of the sections.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IStorageObject.Modified">
            <summary>
            Returns true if a storage object was modified.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string value is assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadInt32(System.String,System.String,System.Int32)">
            <summary>
            Reads a System.Int32 value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Int32 value to return if the section or key is not found.</param>
            <returns>The requested Int32 value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Reads a Color value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Color value to return if the section or key is not found.</param>
            <returns>The requested Color value or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadChar(System.String,System.String,System.Char)">
            <summary>
            Reads a char value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The char value to return if the section or key is not found.</param>
            <returns>The requested char value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Reads a Boolean value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Boolean value to return if the section or key is not found.</param>
            <returns>The requested Boolean value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Reads a DateTime value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The DateTime value to return if the section or key is not found.</param>
            <returns>The requested DateTime value or or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadSingle(System.String,System.String,System.Single)">
            <summary>
            Reads a Single value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Single value to return if the section or key is not found.</param>
            <returns>The requested Single value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadDouble(System.String,System.String,System.Double)">
            <summary>
            Reads a Double value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Double value to return if the section or key is not found.</param>
            <returns>The requested Double value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string array value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string values are assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string array value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadEnum(System.String,System.String,System.Type,System.Object)">
            <summary>
            Reads a enumeration element value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="enumType">The Type of the enumeration to read.</param>
            <param name="defaultValue">The default value to return if the section or key is not found.</param>
            <returns>The requested value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ReadXmlNode(System.String)">
            <summary>
            Reads an XmlNode value from the storage object. If the name was not found, 
            this method returns null.
            </summary>
            <param name="name">The name of the node to read.</param>
            <returns>The requested value or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Writes a string value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The string value to write.</param>
            <param name="encoded">If true, the string value will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteInt32(System.String,System.String,System.Int32)">
            <summary>
            Writes a Int32 value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Int32 value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Writes a Color value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Color value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteChar(System.String,System.String,System.Char)">
            <summary>
            Writes a char value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The char value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Writes a Boolean value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The bool value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Writes a DateTime value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The DateTime value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteSingle(System.String,System.String,System.Single)">
            <summary>
            Writes a Single value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Single value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteDouble(System.String,System.String,System.Double)">
            <summary>
            Writes a Double value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Writes a string array value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
            <param name="encoded">If true, the string values will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteEnum(System.String,System.String,System.Object)">
            <summary>
            Writes a enumeration value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.WriteXmlNode(System.String,System.Xml.XmlNode)">
            <summary>
            Writes an XmlNode value to the storage object.
            </summary>
            <param name="name">The name of the xml node.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.GetExtension(System.String)">
            <summary>
            Returns a file extension for a specified LanguageID.
            </summary>
            <param name="languageID">The language ID (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The file extension, keeping legal file name characters and preceded by the leading ".".</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.Clear">
            <summary>
            Clears the contents of the active language-specific storage object (set through the LanguageID property).
            If LanguageID is empty (""), then the primary (language-neutral) storage object is cleared. To clear all
            storage objects, use ClearAll().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.DeleteKey(System.String,System.String)">
            <summary>
            Deletes the specified key in the given section.
            </summary>
            <param name="sectionName">The section name that contains the key to delete.</param>
            <param name="keyName">The key name to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.DeleteStorage(DevExpress.CodeRush.Core.DecoupledStorage)">
            <summary>
            Deletes the entire storage file or a section in the file of the specified language if there's more than one language section exist.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.EraseSection(System.String)">
            <summary>
            Deletes the specified section.
            </summary>
            <param name="sectionName">The section name to erase.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.GetKeys(System.String)">
            <summary>
            Returns a string array of keys for the given section.
            </summary>
            <param name="section">The section to check.</param>
            <returns>The string array of keys for aSection.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.GetSections">
            <summary>
            Returns a string array of sections.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IniFileStorageObject.ValueExists(System.String,System.String)">
            <summary>
            Returns true if a value exists at the given section and key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IniFileStorageObject.ActiveIniFile">
            <summary>
            Returns a reference to the IniFile belonging to the ActiveStorage object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IniFileStorageObject.DefaultExtension">
            <summary>
            The default extension of a storage object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IniFileStorageObject.FileExtension">
            <summary>
            Returns the file extension of the language-specific storage file (e.g., ".CSharp", ".Basic", etc.), or 
            ".ini" if this storage object is in a language-neutral state. To change the programming language 
            associated with this storage object, use the Language property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IniFileStorageObject.Sections">
            <summary>
            Returns a string array of the sections.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Storage.WarningDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Storage.WarningDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads a string value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string value is assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadInt32(System.String,System.String,System.Int32)">
            <summary>
            Reads a System.Int32 value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Int32 value to return if the section or key is not found.</param>
            <returns>The requested Int32 value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Reads a Color value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Color value to return if the section or key is not found.</param>
            <returns>The requested Color value or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadChar(System.String,System.String,System.Char)">
            <summary>
            Reads a char value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The char value to return if the section or key is not found.</param>
            <returns>The requested char value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Reads a Boolean value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Boolean value to return if the section or key is not found.</param>
            <returns>The requested Boolean value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Reads a DateTime value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The DateTime value to return if the section or key is not found.</param>
            <returns>The requested DateTime value or or aDefault if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadSingle(System.String,System.String,System.Single)">
            <summary>
            Reads a Single value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Single value to return if the section or key is not found.</param>
            <returns>The requested Single value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadDouble(System.String,System.String,System.Double)">
            <summary>
            Reads a Double value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The Double value to return if the section or key is not found.</param>
            <returns>The requested Double value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Reads a string array value from the storage object. If the section or key is not found,
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The string array value to return if the section or key is not found.</param>
            <param name="encoded">If true, the string values are assumed to be in HTTP encoding and will be decoded.</param>
            <returns>The requested string array value or or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadEnum(System.String,System.String,System.Type,System.Object)">
            <summary>
            Reads a enumeration element value from the storage object. If the section or key was not found, 
            this method returns the value passed in defaultValue.
            </summary>
            <param name="section">The section to read from.</param>
            <param name="key">The key to read from.</param>
            <param name="enumType">The Type of the enumeration to read.</param>
            <param name="defaultValue">The default value to return if the section or key is not found.</param>
            <returns>The requested value or defaultValue if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ReadXmlNode(System.String)">
            <summary>
            Reads an XmlNode value from the storage object. If the name was not found, 
            this method returns null.
            </summary>
            <param name="name">The name of the node to read.</param>
            <returns>The requested value or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Writes a string value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The string value to write.</param>
            <param name="encoded">If true, the string value will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteInt32(System.String,System.String,System.Int32)">
            <summary>
            Writes a Int32 value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Int32 value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteColor(System.String,System.String,System.Drawing.Color)">
            <summary>
            Writes a Color value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Color value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteChar(System.String,System.String,System.Char)">
            <summary>
            Writes a char value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The char value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Writes a Boolean value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The bool value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Writes a DateTime value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The DateTime value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteSingle(System.String,System.String,System.Single)">
            <summary>
            Writes a Single value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Single value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteDouble(System.String,System.String,System.Double)">
            <summary>
            Writes a Double value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteStrings(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Writes a string array value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The Double value to write.</param>
            <param name="encoded">If true, the string values will be encoded in HTTP encoding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteEnum(System.String,System.String,System.Object)">
            <summary>
            Writes a enumeration value to the storage object.
            </summary>
            <param name="section">The section to write to.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.WriteXmlNode(System.String,System.Xml.XmlNode)">
            <summary>
            Writes an XmlNode value to the storage object.
            </summary>
            <param name="name">The name of the xml node.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.FilterFiles(System.Collections.Generic.List{System.String})">
            <summary>
            Filters files by language ID.
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.GetExtension(System.String)">
            <summary>
            Returns a file extension for a specified LanguageID.
            </summary>
            <param name="languageID">The language ID (e.g., "CSharp", "Basic", "C/C++").</param>
            <returns>The file extension, keeping legal file name characters and preceded by the leading ".".</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.Clear">
            <summary>
            Clears the contents of the active language-specific storage object (set through the LanguageID property).
            If LanguageID is empty (""), then the primary (language-neutral) storage object is cleared. To clear all
            storage objects, use ClearAll().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.DeleteKey(System.String,System.String)">
            <summary>
            Deletes the specified key in the given section.
            </summary>
            <param name="sectionName">The section name that contains the key to delete.</param>
            <param name="keyName">The key name to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.DeleteStorage(DevExpress.CodeRush.Core.DecoupledStorage)">
            <summary>
            Deletes the entire storage file or a section in the file of the specified language if there's more than one language section exist.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.EraseSection(System.String)">
            <summary>
            Deletes the specified section.
            </summary>
            <param name="sectionName">The section name to erase.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.GetKeys(System.String)">
            <summary>
            Returns a string array of keys for the given section.
            </summary>
            <param name="section">The section to check.</param>
            <returns>The string array of keys for aSection.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.GetSections">
            <summary>
            Returns a string array of sections.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.XmlFileStorageObject.ValueExists(System.String,System.String)">
            <summary>
            Returns true if a value exists at the given section and key.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.XmlFileStorageObject.DefaultExtension">
            <summary>
            The default extension of a storage object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.XmlFileStorageObject.FileExtension">
            <summary>
            Returns the file extension of the language-specific storage file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.XmlFileStorageObject.Sections">
            <summary>
            Returns a string array of the sections.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a substring for the specified text, using the given start end end indices.
            Returns String.Empty if arguments passed are invalid.
            </summary>
            <param name="text">The text to get substring.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.Substring(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a substring for the specified text, using the given start end end indices.
            Returns String.Empty or throws an exception if arguments passed are invalid.
            </summary>
            <param name="text">The text to get substring.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="throwOnError">The value determining if exception should be thrown in case of bad arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CharIn(System.Char,System.Char,System.Char)">
            <summary>
            Test if a character is in the specified range
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CharIn(System.Char,System.String)">
            <summary>
            Test if a character is present in a string
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CharIn(System.Char,System.Char[])">
            <summary>
            Test if a character is present in a char array
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CombineLines(System.String[])">
            <summary>
            Combine a string array into a single string with lines separated by \r\n
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CombineLines(System.Collections.Specialized.StringCollection)">
            <summary>
            Combine a StringCollection into a single string with lines separated by \r\n
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ConvertToCSV(System.String[],System.Boolean)">
            <summary>
            Converts a string array to a comma-separated string. If quoteCommas is set to true, any
            values in the string array containing commas are added inside double-quotes.
            </summary>
            <param name="parts">The string array to convert.</param>
            <param name="quoteCommas">If  true, any values in the string array containing commas are 
            added inside double-quotes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ExtractStartingWord(System.String)">
            <summary>
            Extracts the first word from the passed string.
            </summary>
            <param name="s">The string from which to get starting word.</param>
            <returns>Starting word of the passed string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.FormatForInsertText(System.String)">
            <summary>
            Converts a string with carriage-return/line-feeds to line feeds only,
            preventing the EditPoint's InsertText method from doubling-up the lines 
            inserted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.FormatForTextBox(System.String)">
            <summary>
            Converts a string with line feeds to a string with carriage-return/line feeds.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLeadingWhiteSpaceCharCount(System.String)">
            <summary>
            Returns the number of leading white space characters (tabs and spaces) on the passed-in text.
            </summary>
            <param name="text">The text to check.</param>
            <returns>Returns the number of leading white space characters (tabs and spaces) found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLeadingWhiteSpace(System.String)">
            <summary>
            Returns the leading white space (tabs and spaces) for the specified text.
            </summary> 
            <param name="text">The text to check.</param>
            <returns>The leading white space (tabs and spaces) for the specified text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetClosingWhiteSpace(System.String)">
            <summary>
            Returns the closing white space (tabs and spaces) for the specified text.
            </summary> 
            <param name="text">The text to check.</param>
            <returns>The leading white space (tabs and spaces) for the specified text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetClosingWhiteSpaceCharCount(System.String)">
            <summary>
            Returns the number of closing white space characters (tabs and spaces) on the passed-in text.
            </summary>
            <param name="text">The text to check.</param>
            <returns>Returns the number of leading white space characters (tabs and spaces) found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetParameters(System.String@)">
            <summary>
            Gets text between open and close parens, and removes the parameter block from the command. For example, 
            given a command of "Say(hello)", this method returns "hello" and adjusts command so it becomes "Say".
            </summary>
            <param name="command">The command to remove parameters from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminatorChar(System.Char)">
            <summary>
            Checks a character and returns the LineTerminatorChar that it represents.
            </summary>
            <param name="character">The character to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminatorChar(DevExpress.CodeRush.StructuralParser.LineTerminatorChar)">
            <summary>
            Returns character that is represented by the given LineTerminatorChar.
            </summary>
            <param name="terminatorChar">The LineTerminatorChar to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminator(System.String)">
            <summary>
            Checks a string to see if it starts with a line terminator. The LineTerminator
            that it represents is returned (or LineTerminator.None if a line terminator was
            not found).
            </summary>
            <param name="text">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminator(System.String,System.Int32)">
            <summary>
            Checks a string at the specified index to see if it is a line terminator. The LineTerminator
            that it represents is returned (or LineTerminator.None if a line terminator was
            not found).
            </summary>
            <param name="text">The string to check.</param>
            <param name="index">The index into the string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminatorLength(DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Returns the length in characters of the specified LineTerminator.
            </summary>
            <param name="lineTerm">The LineTerminator to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminatorText(DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Returns a string representing the specified line terminator.
            </summary>
            <param name="lineTerm">The specified line terminator</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetUniqueName(System.String,System.Collections.IList)">
            <summary>
            Returns a string based on the passed base name which is unique in the passed list. 
            Returned strings are the passed name with a trailing integer, starting with 1 and 
            incrementing until the return value is unique. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetWhiteSpaceCount(System.String)">
            <summary>
            Return the count of all white spaces in passed string.
            </summary>
            <param name="text">Text to search for white spaces</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.InsideParens(System.String,System.String)">
            <summary>
            Returns true if leftText contains more open parens than close parens, or if rightText contains more close parens than open parens.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.IsNullOrEmpty(System.String)">
            <summary>
            Determines if the specified string is null or an empty string containing no text.
            </summary>
            <param name="value">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.IsNumber(System.String)">
            <summary>
            Determine if a string represents a valid number
            </summary>
            <param name="text">String to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.String[],DevExpress.CodeRush.StructuralParser.LineTerminator,System.Boolean)">
            <summary>
            Combines a string array into a single string separated by the specified line terminator.
            </summary>
            <param name="lines">The string array to combine.</param>
            <param name="lineTerm">The specified line terminator to use between the combine lines.</param>
            <param name="lineTermAtEnd">If true, a line terminator will be added at the end of the 
            resulting string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.String[],DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Combines a string array into a single string separated by the specified line terminator.
            A line terminator will not be added to the resulting string.
            </summary>
            <param name="lines">The string array to combine.</param>
            <param name="lineTerm">The specified line terminator to use between the combine lines.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.String[],System.Boolean)">
            <summary>
            Combines a string array into a single string separated by an MS-DOS (carriage-return\line-feed)
            line separater.
            </summary>
            <param name="lines">The string array to combine.</param>
            <param name="lineTermAtEnd">If true, a line terminator will be added at the end of the 
            resulting string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.String[])">
            <summary>
            Combines a string array into a single string separated by an MS-DOS (carriage-return\line-feed)
            line separater. A line terminator will not be added to the resulting string.
            </summary>
            <param name="lines">The string array to combine.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.Collections.Specialized.StringCollection,DevExpress.CodeRush.StructuralParser.LineTerminator,System.Boolean)">
            <summary>
            Combines a StringCollection into a single string separated by the specified line terminator.
            </summary>
            <param name="lines">The StringCollection to combine.</param>
            <param name="lineTerm">The specified line terminator to use between the combine lines.</param>
            <param name="lineTermAtEnd">If true, a line terminator will be added at the end of the 
            resulting string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.Collections.Specialized.StringCollection,DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Combines a StringCollection into a single string separated by the specified line terminator.
            A line terminator will not be added to the resulting string.
            </summary>
            <param name="lines">The StringCollection to combine.</param>
            <param name="lineTerm">The specified line terminator to use between the combine lines.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Combines a StringCollection into a single string separated by an MS-DOS (carriage-return\line-feed)
            line separater.
            </summary>
            <param name="lines">The StringCollection to combine.</param>
            <param name="lineTermAtEnd">If true, a line terminator will be added at the end of the 
            resulting string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.JoinLines(System.Collections.Specialized.StringCollection)">
            <summary>
            Combines a StringCollection into a single string separated by an MS-DOS (carriage-return\line-feed)
            line separater. A line terminator will not be added to the resulting string.
            </summary>
            <param name="lines">The StringCollection to combine.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.MustEndWith(System.String@,System.String)">
            <summary>
            Ensures that text ends with suffix.
            </summary>
            <param name="text">The string to test/change (this is a reference parameter).</param>
            <param name="suffix">The suffix that must exist at the end of text. If text doesn't end with this suffix it will be added.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.MustStartWith(System.String@,System.String)">
            <summary>
            Ensures that text starts with prefix.
            </summary>
            <param name="text">The string to test/change (this is a reference parameter).</param>
            <param name="prefix">The prefix that must exist at the beginning of text. If text doesn't start with this prefix, it will be prepended.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ParenScore(System.String)">
            <summary>
            	Will return a negative number if there are more open parens than close parens.
            	Will return a positive number if there are more close parens than open parens. 
            </summary>
            <param name="text">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ParseCSV(System.String,System.Boolean)">
            <summary>
            Parse a comma separated string into a string array. Optionally handles 
            text command quotes ("«" and "»") as well as regular double quotes. 
            </summary>
            <param name="commaSeparatedString">String to parse</param>
            <param name="lookForCmdQuote">if true, will handle text command quotes
            as if they were normal quotes.</param>
            <returns>A string collection parsed from commaSeparatedString.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ParseCSV(System.String)">
            <summary>
            Parse a comma separated string into a string array.</summary>
            <param name="commaSeparatedString">String to parse</param>
            <returns>A string collection parsed from commaSeparatedString.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ReplaceInnerText(System.String,System.String,System.String,DevExpress.CodeRush.Core.ReplaceTextDelegate)">
            <summary>
            Searches for all occurences of text which starts with start substring 
            and ends with end substring and replaces each found occurence 
            using text replacer.
            </summary>
            <param name="text">Text where to replace.</param>
            <param name="start">Start of substring.</param>
            <param name="end">End of substring.</param>
            <param name="replacer">Text replacer.</param>
            <returns>String with replaced text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveLastLineTerminator(System.String)">
            <summary>
            Removes last line terminator from the given string.
            </summary>
            <param name="s">The string that contains line terminator to remove.</param>
            <returns>String with removed last line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTrailingLineTerminator(System.String)">
            <summary>
            Removes trailing line terminator from the given string.
            </summary>
            <param name="s">The string that contains trailing line terminator to remove.</param>
            <returns>String with removed trailing line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveLeadingDigits(System.String)">
            <summary>
            Removes any digits from the start of the specified string.
            </summary>
            <param name="s">The string to evaluate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTrailingDigits(System.String)">
            <summary>
            Removes any digits from the end of the specified string.
            </summary>
            <param name="s">The string to evaluate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SetVariables(System.String)">
            <summary>
            Calls the Set StringProvider once for each comma-delimited assignment in 
            the form of "variable=value" inside the specified string. White space, 
            if specified, will also be assigned to the variable.
            </summary>
            <param name="parameters">The comma-delimited assignment list (e.g., "var1=value1,var2=value2,var3=value3").</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SeparateValues(System.String[],System.String,System.Boolean)">
            <summary>
            Convert a string array into a single string, with the strings in the collection separated by separator. Optionally 
            add quotes around items that contain separator.
            </summary>
            <param name="strings">The StringCollection of items to convert to a string.</param>
            <param name="separator">The separator characters to insert between items in the list.</param>
            <param name="addQuotes">If true, then entries in stringList that contain the separator characters will be surrounded by quotes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SeparateValues(System.String[],System.String)">
            <summary>
            Convert a string array into a single string, with the strings in the collection separated by separator.
            </summary>
            <param name="strings">The StringCollection of items to convert to a string.</param>
            <param name="separator">The separator characters to insert between items in the list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SeparateValues(System.Collections.Specialized.StringCollection,System.String,System.Boolean)">
            <summary>
            Convert a StringCollection into a string, with the strings in the collection separated by separator. Optionally 
            add quotes around items that contain separator.
            </summary>
            <param name="strings">The StringCollection of items to convert to a string.</param>
            <param name="separator">The separator characters to insert between items in the list.</param>
            <param name="addQuotes">If true, then entries in stringList that contain the separator characters will be surrounded by quotes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SeparateValues(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Convert a StringCollection into a string, with the strings in the collection separated by separator.
            </summary>
            <param name="strings">The StringCollection of items to convert to a string.</param>
            <param name="separator">The separator characters to insert between items in the list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SplitCodeLine(System.String,System.Int32,System.String@,System.String@)">
            <summary>
            Splits the source code text (from a call to "TextDocument.GetLine(...)") into left and right segments, at the specified character offset.
            </summary>
            <param name="textLine">The source code text (from a call to "TextDocument.GetLine(...)") to split.</param>
            <param name="offset">The character offset into this line where the split should occur.</param>
            <param name="leftText">This output parameter is set to the text to the left of the split point.</param>
            <param name="rightText">This output parameter is set to the text to the right of the split point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SplitLines(System.String)">
            <summary>
            Splits a string containing line terminators into a string array. If, after splitting, the last entry
            is empty, it is removed from the result.
            </summary>
            <param name="text">The string to split.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SplitLines(System.String,System.Boolean)">
            <summary>
            Splits a string containing line terminators into a string array.
            </summary>
            <param name="text">The string to split.</param>
            <param name="removeLastIfEmpty">If true, the last entry is removed if it is an empty string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SubstringToUpper(System.String,System.Int32,System.Int32)">
            <summary>
            Converts the specified part of the given string to upper case.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="start">The start position.</param>
            <param name="count">The number of chars to upcase.</param>
            <returns>Srting with substring converted to upper case.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SubstringToLower(System.String,System.Int32,System.Int32)">
            <summary>
            Converts the specified part of the given string to lower case.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="start">The start position.</param>
            <param name="count">The number of chars to convert to lower case.</param>
            <returns>Srting with substring converted to lower case.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddLineTerminatorIfNecessery(System.String)">
            <summary>
            Checks if the given string ends with line terminator and adds if it is absent.
            </summary>
            <param name="s">The string to check.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.EndsWithLineTerminator(System.String)">
            <summary>
            Checks if the given string ends with line terminator.
            </summary>
            <param name="s">The string to check.</param>
            <returns>True if the given string ends with line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLastLineTerminator(System.String)">
            <summary>
            Gets the last line terminator in the given string or empty TagText if
            the given string does not end with line terminator.
            </summary>
            <param name="s">The string to check.</param>
            <returns>The index of the last line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLastLineTerminatorIndex(System.String)">
            <summary>
            Gets index of the last line terminator in the given string or -1 if
            the given string does not end with line terminator.
            </summary>
            <param name="s">The string to check.</param>
            <returns>The index of the last line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.StartsWithLineTerminator(System.String)">
            <summary>
            Checks if the given string starts with line terminator.
            </summary>
            <param name="s">The string to check.</param>
            <returns>True if the given string starts with line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetFirstLineTerminatorIndex(System.String)">
            <summary>
            Gets index of the first line terminator in the given string or -1 if
            the given string does not have line terminator.
            </summary>
            <param name="s">The string to check.</param>
            <returns>The index of the first line terminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TabColumnToOffset(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a column in this text line to a character offset.
            </summary>
            <param name="lineText">The text line to check.</param>
            <param name="tabSize">The number of spaces per tab.</param>
            <param name="column">The column number (starting at one) to convert.</param>
            <returns>Returns the character offset (one-based).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.OffsetToTabColumn(System.String,System.Int32,System.Int32)">
            <summary>
            Calculates a column position in this text line for a given character offset.
            </summary>
            <param name="lineText">The text line to check.</param>
            <param name="tabSize">The number of spaces per tab.</param>
            <param name="offset">The character offset (starting at one) to convert.</param>
            <returns>Returns the column position (one-based).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetSubstring(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a substring for the specified text, using the given start end end indices.
            Returns String.Empty or throws an exception if arguments passed are invalid.
            </summary>
            <param name="text">The text to get substring.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="throwOnError">The value determining if exception should be thrown in case of bad arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a substring for the specified text, using the given start end end indices.
            Returns String.Empty if arguments passed are invalid.
            </summary>
            <param name="text">The text to get substring.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GuessLineTerminator(System.String)">
            <summary>
            Tries to guess what line terminator is used in the gived text. If there
            are mixed line terminators then this function returns only first found 
            line terminator.
            </summary>
            <param name="text">The text to check.</param>
            <returns>The suggested LineTerminator.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineStartIndex(System.String,System.Int32,DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Gets the index of the specified line in the given text using passed line terminator.
            </summary>
            <param name="text">The text to check.</param>
            <param name="line">The line to get index.</param>
            <param name="terminator">The LineTerminator to use.</param>
            <returns>The start index of the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineEndIndex(System.String,System.Int32,DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Gets the end index of the specified line in the given text using passed line terminator.
            </summary>
            <param name="text">The text to check.</param>
            <param name="line">The line to get index.</param>
            <param name="terminator">The LineTerminator to use.</param>
            <returns>The end index of the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineEndIndex(System.String,System.Int32)">
            <summary>
            Gets the end index of the specified line in the given text.
            </summary>
            <param name="text">The text to check.</param>
            <param name="line">The line to get index.</param>
            <returns>The end index of the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.ResizeArray(System.Array,System.Int32)">
            <summary>
            Resizes an array to a new length.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddTypeTagsToText(System.String)">
            <summary>
            Adds tags to text to mark types.
            You may use RemoveTypeTags method to get marked types from the given text.
            </summary>
            <param name="text">The text to process</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTypeTags(System.String@)">
            <summary>
            Removes tags from the text added by AddTypeTagsToText method.
            </summary>
            <param name="text">The text to process</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddNameTagsToText(System.String)">
            <summary>
            Adds tags to text to mark names.
            You may use RemoveNameTags method to get marked names from the given text.
            </summary>
            <param name="text">The text to process</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveNameTags(System.String@)">
            <summary>
            Removes tags from the text added by AddNameTagsToText method.
            </summary>
            <param name="text">The text to process.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddExpressionTagsToText(System.String)">
            <summary>
            Adds tags to text to mark expressions.
            You may use RemoveExpressionTags method to get marked expressions from the given text.
            </summary>
            <param name="text">The text to process</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveExpressionTags(System.String@)">
            <summary>
            Removes tags from the text added by AddExpressionTagsToText method.
            </summary>
            <param name="text">The text to process.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddLinkTagsToText(System.String)">
            <summary>
            Adds tags to text to mark link.
            You may use RemoveLinkTags method to get marked links from the given text.
            </summary>
            <param name="text">The text to process</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveLinkTags(System.String@)">
            <summary>
            Removes tags from the text added by AddLinkTagsToText method.
            </summary>
            <param name="text">The text to process.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddTagsToText(System.String,System.String,System.String)">
            <summary>
            Adds tags to text in order to mark it.
            You may use RemoveTextTags method to get marked parts from the given text.
            </summary>
            <param name="text">The text to add tags</param>
            <param name="openTag">The open tag</param>
            <param name="closeTag">The open tag</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.AddTagsToText(System.String)">
            <summary>
            Adds default tags to text in order to mark it.		
            You may use RemoveTextTags(ref string) method to get marked parts from the given text.
            </summary>
            <param name="text">The text to add tags</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTextTags(System.String@)">
            <summary>
            Removes default tags from the given text.
            This method allows get parts marked with AddTagsToText method from the given text.
            </summary>
            <param name="value">The text to remove tags</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTextTags(System.String@,System.String,System.String)">
            <summary>
            Removes tags from the given text.
            This method allows get code marked with AddTagsToText method from the given text.
            </summary>
            <param name="value">The text to remove tags</param>   
            <param name="startTag">The start tag</param>
            <param name="endTag">The end tag</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTextTags(System.String@,System.String,System.String,System.Boolean)">
            <summary>
            Removes tags from the given text.
            This method allows get code marked with AddTagsToText method from the given text.
            </summary>
            <param name="value">The text to remove tags</param>   
            <param name="startTag">The start tag</param>
            <param name="endTag">The end tag</param>
            <param name="checkParameters">If this value is true, then text within start and end tags is checked for parameters</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetTextTags(System.String,System.String,System.String)">
            <summary>		
            Gets tags from the given text.
            This method allows get code marked with AddTagsToText method from the given text 
            (not removing tags from the text).
            </summary>
            <param name="value">The text to get tags</param>
            <param name="startTag">The start tag</param>
            <param name="endTag">The end tag</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.RemoveTagsForPreview(System.String@)">
            <summary>
            Removes all redundant text tags and text commands from the given text for using in CodePreviewWindow.
            </summary>
            <param name="value">The text to remove tags from.</param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetLineTerminatorRegex">
            <summary>
            Returns the regular expression that matches all line terminators.
            </summary>
            <returns>The Regex that matches all line terminators.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CountLines(System.String,DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Counts the number of lines in the passed text using given LineTerminator.
            (Note: Empty string has one line)
            </summary>
            <param name="text">The text to check.</param>
            <param name="terminator">The LineTerminator to use.</param>
            <returns>The number of lines in the given text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.CountLines(System.String)">
            <summary>
            Counts the number of lines in the passed text. (Note: Empty string has one line)
            This function uses Regex to find line terminators.
            </summary>
            <param name="text">The text to check.</param>
            <returns>The number of lines in the given text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetSharedStringBuilder">
            <summary>
            Returns a SharedStringBuilder from an internal pool.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TrimLinesEnd(System.String)">
            <summary>
            Trimes end of each line inside the given string.
            </summary>
            <param name="s">The string to trim.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.IsStartLineTerminatorNeeded(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if start line terminator should be added to text inserted into the
            specified text at the specified point.
            </summary>
            <param name="text">The text to use.</param>
            <param name="pastePoint">The source point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.IsStartLineTerminatorNeeded(DevExpress.DXCore.TextBuffers.ITextBuffer,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if start line terminator should be added to text inserted into the
            specified text document at the specified point.
            </summary>
            <param name="buffer">The ITextBuffer to use.</param>
            <param name="pastePoint">The source point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.IsEndLineTerminatorNeeded(DevExpress.DXCore.TextBuffers.ITextBuffer,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if end line terminator should be added to text inserted into the
            specified text document at the specified point.
            </summary>
            <param name="buffer">The ITextBuffer to use.</param>
            <param name="pastePoint">The source point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.IsEndLineTerminatorNeeded(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if end line terminator should be added to text inserted into the
            specified text at the specified point.
            </summary>
            <param name="text">The text to use.</param>
            <param name="pastePoint">The source point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.GetCharsToNextTabStop(System.String,System.Int32,System.Int32)">
            <summary>
            Used by TabifyLine to retrieve an array of chars up to the next tab stop in the specified text line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TabifyLine(System.String,System.Int32)">
            <summary>
            Replaces spaces in the specified text line with tabs using the given tab size.
            </summary>
            <param name="lineText">The text line to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TabifyLine(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces spaces in the specified text line with tabs using the given tab size.
            </summary>
            <param name="lineText">The text line to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
            <param name="startIndex">The starting index in the text line to begin replacing spaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TabifyLine(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces spaces in the specified text line with tabs using the given tab size.
            </summary>
            <param name="lineText">The text line to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
            <param name="startIndex">The starting index in the text line to begin replacing spaces.</param>
            <param name="length">The length of the portion of the text line in which to replace spaces.</param>
            <remarks>Use startIndex and length to replace spaces in a portion of the text line.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TabifyLines(System.String[],System.Int32)">
            <summary>
            Replaces spaces in the text line arrary with tabs using the given tab size.
            </summary>
            <param name="lines">The text line array to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TabifyLines(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces spaces in the text line arrary with tabs using the given tab size.
            </summary>
            <param name="lines">The text line array to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
            <param name="startIndex">The index in the first text line to begin replacing spaces.</param>
            <param name="endIndex">The index in the last text line to stop replacing spaces.</param>
            <remarks>Use startIndex and endIndex to replace spaces in a portion of the text line.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.UntabifyLine(System.String,System.Int32)">
            <summary>
            Replaces tabs in the specified text line with spaces using the given tab size.
            </summary>
            <param name="lineText">The text line to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.UntabifyLine(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces tabs in the specified text line with spaces using the given tab size.
            </summary>
            <param name="lineText">The text line to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
            <param name="startIndex">The starting index in the text line to begin replacing tabs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.UntabifyLine(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces tabs in the specified text line with spaces using the given tab size.
            </summary>
            <param name="lineText">The text line to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
            <param name="startIndex">The starting index in the text line to begin replacing tabs.</param>
            <param name="length">The length of the portion of the text line in which to replace tabs.</param>
            <remarks>Use startIndex and length to replace tabs in a portion of the text line.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.UntabifyLines(System.String[],System.Int32)">
            <summary>
            Replaces tabs in the text line arrary with spaces using the given tab size.
            </summary>
            <param name="lines">The text line array to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.UntabifyLines(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces tabs in the text line arrary with spaces using the given tab size.
            </summary>
            <param name="lines">The text line array to manipulate.</param>
            <param name="tabSize">The number of spaces in each tab.</param>
            <param name="startIndex">The index in the first text line to begin replacing tabs.</param>
            <param name="endIndex">The index in the last text line to stop replacing tabs.</param>
            <remarks>Use startIndex and endIndex to replace tabs in a portion of the text line.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.TextToXML(System.String)">
            <summary>
            Converts the specified text to XML (replacing &quot; with &amp;quot;, &amp; with &amp;amp;, &lt; with &amp;lt;, and &gt; with &amp;gt;),
            returning the converted value as a string.
            </summary>
            <param name="text">The text to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.FillArray(System.String,System.Int32)">
            <summary>
            Creates an array of strings from the specified text.
            </summary>
            <param name="text">The text to create array</param>
            <param name="length">The length of array</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SetText(System.String,DevExpress.CodeRush.Core.SourceRangeCollection,System.String)">
            <summary>
            Changes text inside the given string using the specified ranges.
            </summary>
            <param name="text">The text to change.</param>
            <param name="ranges">The source ranges collection to use.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SetText(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String)">
            <summary>
            Changes text inside the given string using the specified ranges.
            </summary>
            <param name="text">The text to change.</param>
            <param name="ranges">The source ranges collection to use.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SetText(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String[])">
            <summary>
            Changes text inside the given string using the specified ranges.
            </summary>
            <param name="text">The text to change.</param>
            <param name="ranges">The source ranges collection to use.</param>
            <param name="newTexts">The new texts.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SetText(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String,DevExpress.CodeRush.StructuralParser.SourceRange[]@)">
            <summary>
            Changes text inside the given string using the specified ranges.
            </summary>
            <param name="text">The text to change.</param>
            <param name="ranges">The source ranges to use.</param>
            <param name="newText">The new text.</param>
            <param name="newRanges">The recalculated ranges.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.StringServices.SetText(System.String,DevExpress.CodeRush.StructuralParser.SourceRange[],System.String[],DevExpress.CodeRush.StructuralParser.SourceRange[]@)">
            <summary>
            Changes text inside the given string using the specified ranges.
            </summary>
            <param name="text">The text to change.</param>
            <param name="ranges">The source ranges to use.</param>
            <param name="newTexts">The new texts.</param>
            <param name="newRanges">The recalculated ranges.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SynchronizationService.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the IDE's underlying handle was created on (the UI thread).
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args"/> parameter to be called in the IDE's thread context.</param>
            <param name="args">An array of objects to pass as arguments to the specified method. This parameter can be a null reference (<b>Nothing</b> in Visual Basic) if the method takes no arguments.</param>
            <returns>An IAsyncResult that represents the result of the BeginInvoke operation.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SynchronizationService.BeginInvoke(System.Delegate)">
            <summary>
            Executes the specified delegate asynchronously on the thread that owns the IDE's underlying window handle (the UI thread). 
            </summary>
            <param name="method">A delegate that contains a method to be called in the IDE's thread context.</param>
            <returns>An IAsyncResult that represents the result of the BeginInvoke operation.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SynchronizationService.EndInvoke(System.IAsyncResult)">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the IAsyncResult passed.
            </summary>
            <param name="result">The IAsyncResult that represents a specific invoke asynchronous operation, returned when calling BeginInvoke.</param>
            <returns>The object generated by the asynchronous operation.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SynchronizationService.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, with the specified list of arguments, on the thread that owns the IDE's underlying window handle (the UI thread). 
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args"/> parameter to be called in the TextView's thread context.</param>
            <param name="args">An array of objects to pass as arguments to the specified method. This parameter can be a null reference (<b>Nothing</b> in Visual Basic) if the method takes no arguments.</param>
            <returns>An object that contains the return value from the delegate being invoked, or a null reference (<b>Nothing</b> in Visual Basic) if the delegate has no return value.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SynchronizationService.Invoke(System.Delegate)">
            <summary>
            Executes the specified delegate on the thread that owns the IDE's underlying window handle (the UI thread). 
            </summary>
            <param name="method">A delegate that contains a method to be called in the IDE's thread context.</param>
            <returns>An object that contains the return value from the delegate being invoked, or a null reference (<b>Nothing</b> in Visual Basic) if the delegate has no return value.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SynchronizationService.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call an invoke method when making method calls because the caller 
            is on a different thread than the one that the IDE was created on (the UI thread).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SyntaxHighlighting">
            <summary>
            Summary description for SyntaxHighlighting.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SyntaxHighlighting.StringProvider">
            <summary>
            Syntax highlight color for StringProviders.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SyntaxHighlighting.TextCommand">
            <summary>
            Syntax highlight color for TextCommands.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SyntaxHighlighting.Alias">
            <summary>
            Syntax highlight color for template aliases.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Template.NameMatches(System.String)">
            <summary>
            Returns true if the specified name matches the name of this template.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Template.MakeCopyWithoutData">
            <summary>
            Creates a copy of this template without any TemplateData items.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Template.MakeCopyWithData(System.Int32)">
            <summary>
            Creates a copy of this template and includes a copy of the TemplateData at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Template.MakeCopyWithAllData">
            <summary>
            Creates copy of this template and includes copies of all of the TemplateData.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Template.DescriptiveName">
            <summary>
            Returns a descriptive name for this template, suitable for display to a user.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Template.MatchType">
            <summary>
            Gets the match type for this template. Will return one of 
            TemplateMatchType.Dynamic or TemplateMatchType.Static.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TemplateDataCollection">
            <summary>
            Summary description for TemplateDataCollection.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TemplateLanguageCollection">
            <summary>
            Summary description for TemplateLanguageCollection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateList.WalkCollection(DevExpress.CodeRush.Core.TemplateCategoryCollection,DevExpress.CodeRush.Core.TemplateList.Trigger,System.Boolean)">
            <summary>
            Recurse through the passed collection, and add templates to the list if (a) the category is enabled, and 
            (b) ExpansionTrigger matches the desired trigger, indicated by the 'trigger' parameter.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateList.ToArray">
            <summary>
            Returns an array of the templates contained in this list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateList.ToArray(System.String)">
            <summary>
            Returns an array of the templates contained in this list that match the specified template name.
            </summary>
            <param name="templateName">The template name to match.</param>
            <returns></returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ITemplatePreprocessor">
            <summary>
            Preprocessor for templates.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITemplatePreprocessor.Apply(System.String,DevExpress.CodeRush.Core.TemplateData)">
            <summary>
            Performs preprocessing for the given template.
            </summary>
            <param name="templateName">The name of the template to preprocess.</param>
            <param name="templateData">The template expansion.</param>
            <returns>
            Preprocessed for the given template expansion.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetStringProviders(System.String)">
            <summary>
            Retrieve an array containing all StringProviders 
            for the specified language. Sorted by provider name.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetTextCommands">
            <summary>
            Retrieve an array containing all TextCommands. Sorted by command name. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetExpansion(DevExpress.CodeRush.Core.TemplateData,System.String)">
            <summary>
            Gets the template expansion text based on the specified TemplateData instance. Nested 
            templates are recursively expanded, while StringProviders and TextCommands are left in place. 
            This method is ideal for documenting template expansions.
            </summary>
            <param name="templateData">The TemplateData object containing the expansion.</param>
            <param name="templateName">The name of the template to expand. This is used to log errors and to also 
            set the TemplateName variable, which can affect the expansions of some templates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.AddTemplate(System.String,System.String)">
            <summary>
            Adds new template to the specified category for the neutral language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.AddTemplate(System.String,System.String,System.String)">
            <summary>
            Adds new template to the specified category for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RemoveTemplate(System.String,System.String)">
            <summary>
            Removes template from the specified category for the neutral language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RemoveTemplate(System.String,System.String,System.String)">
            <summary>
            Removes template from the specified category for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="category">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RenameTemplate(System.String,System.String,System.String)">
            <summary>
            Renames template in the specified category for the neutral language.
            </summary>
            <param name="name">The name of the template to rename.</param>
            <param name="newName">The new name of the template.</param>
            <param name="category">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RenameTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            Renames template in the specified category for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="newName">The new name of the template.</param>
            <param name="category">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FindTemplate(System.String,System.String)">
            <summary>
            Searches for the specified template inside the given category for the neutral language.
            </summary>
            <param name="name">The name of the template to find.</param>
            <param name="category">The name of the parent category to search in.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FindTemplate(System.String,System.String,System.String)">
            <summary>
            Searches for the specified template inside the given category for the given language.
            </summary>
            <param name="name">The name of the template to find.</param>
            <param name="category">The name of the parent category to search in.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.AddCategory(System.String,System.String)">
            <summary>
            Adds new template category with the given name for the neutral language.
            </summary>
            <param name="name">The name of the category to add.</param>
            <param name="parent">The name of the parent category.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.AddCategory(System.String,System.String,System.String)">
            <summary>
            Adds new template category with the given name.
            </summary>
            <param name="name">The name of the category to add.</param>
            <param name="parent">The name of the parent category.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RemoveCategory(System.String,System.String)">
            <summary>
            Removes category from the specified parent for the neutral language.
            </summary>
            <param name="name">The category name to remove.</param>
            <param name="parent">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RemoveCategory(System.String,System.String,System.String)">
            <summary>
            Removes category from the specified parent for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="parent">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RenameCategory(System.String,System.String,System.String)">
            <summary>
            Renames category in the specified parent for the neutral language.
            </summary>
            <param name="name">The name of the category to rename.</param>
            <param name="newName">The new name of the category.</param>
            <param name="parent">The parent category path.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RenameCategory(System.String,System.String,System.String,System.String)">
            <summary>
            Renames category in the specified parent for the given language.
            String.Empty is used for the neurtal language.
            </summary>
            <param name="name">The template name.</param>
            <param name="newName">The new name of the template.</param>
            <param name="parent">The parent category path.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetCategories">
            <summary>
            Returns all root template categories for the neutral language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetCategories(System.String)">
            <summary>
            Returns all root template categories for the specified language.
            </summary>
            <param name="language">The language ID to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FindCategory(System.String)">
            <summary>
            Returns template category by it's path.
            </summary>		
            <param name="name">The name of the category to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FindCategory(System.String,System.String)">
            <summary>
            Returns template category by it's path.
            </summary>
            <param name="name">The name of the category to find.</param>
            <param name="language">The templates language.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.Save">
            <summary>
            Saves all templates.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.ExpandAtCursor(System.Boolean)">
            <summary>
            Expands the template at the cursor. Returns true if expansion was successful. 
            Returns false if the template wasn't found, if code is selected, or if the 
            expansion was cancelled by a text command or a plug-in.
            </summary>
            <param name="isSecondaryTrigger">Determines whether the secondary expansion 
            trigger was invoked.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FilterTemplates(System.String)">
            <summary>
            Filters the Primary and Secondary template lists based on the specified programming language.
            </summary>
            <param name="language">The programming language ID (e.g., "CSharp", "Basic", "C/C++", etc.) to filter on.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.Find(System.String,System.Boolean)">
            <summary>
            Finds a specified template in the list.
            </summary>
            <param name="name">The name of the template to find.</param>
            <param name="isSecondaryTrigger">If the secondary trigger is invoking this template.</param>
            <returns>The template corresponding to name, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetPossibleTemplateNames(System.String)">
            <summary>
            Returns a collection of possible template names matching the given text.
            This method doesn't check any context or if a template exists.
            </summary>
            <param name="text">The text to get possible template names.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetTemplateAtCursor(System.Boolean,DevExpress.CodeRush.Core.Template@,DevExpress.CodeRush.Core.TemplateData@)">
            <summary>
            Gets the Template and TemplateItem corresponding to the text to the left of the cursor. Multiple 
            template possibilities are evaluated. The best (longest) template with matching context wins.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetExpansion(DevExpress.CodeRush.Core.TemplateData,System.String,System.Boolean)">
            <summary>
            Gets the template expansion text based on the specified TemplateData instance. Nested 
            templates are recursively expanded, while StringProviders and TextCommands are left in place.
            This method is ideal for documenting template expansions.
            </summary>
            <param name="templateData">The TemplateData object containing the expansion.</param>
            <param name="templateName">The name of the template to expand. This is used to log errors and to also 
            set the TemplateName variable, which can affect the expansions of some templates.</param>
            <param name="isSecondaryTrigger">Set to true if the secondary template expansion key is triggering this expansion.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.Reload">
            <summary>
            Reloads the language-neutral and language-specific template lists and divides them into two categories; one
            that responds to the primary template expansion key, and the other which responds to the secondary expansion
            key (available through the Primary and Secondary TemplateList properties).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RegisterTemplatePreprocessor(System.String,DevExpress.CodeRush.Core.ITemplatePreprocessor)">
            <summary>
            Registers given template preprocessor.
            </summary>
            <param name="name">The name of the preprocessor.</param>
            <param name="preprocessor">The preprocessor to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetTemplatePreprocessor(System.String)">
            <summary>
            Returns registered template preprocessor by its name.
            </summary>
            <param name="name">The name of the preprocessor.</param>
            <returns>Registered template preprocessor.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.RemoveTemplatePreprocessor(System.String)">
            <summary>
            Removes template preprocessor.
            </summary>
            <param name="name">The name of the preprocessor.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.GetRegExAliasArray(System.String)">
            <summary>
            Retrieve an ArrayList containing all RegExAliases (system and regular) 
            for the specified language. Sorted by RegEx name.
            </summary>
            <param name="aLanguageID"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FillCommandMenu(System.Windows.Forms.MenuItem,System.EventHandler,System.Collections.Hashtable)">
            <summary>
            Fills a menu item's submenu with all TextCommands. Sorted by command name. 
            </summary>
            <param name="aMenu">Menu item that will receive the sub-menu.</param>
            <param name="aEvent">Event handler to handle menu clicks in the sub-menu. </param>
            <param name="aItems">Hashtable that associates MenuItem keys with TextCommand
            values. Used in the event handler to retrieve the object associated with a sub-menu item.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TemplateServices.FillStringProviderMenu(System.Windows.Forms.MenuItem,System.EventHandler,System.Collections.Hashtable,System.String)">
            <summary>
            Fills a menu item's submenu with all StringProviders 
            for the specified language. Sorted by provider name. 
            </summary>
            <param name="aMenu">Menu item that will receive the sub-menu.</param>
            <param name="aEvent">Event handler to handle menu clicks in the sub-menu. </param>
            <param name="aItems">Hashtable that associates MenuItem keys with StringProvider 
            values. Used in the event handler to retrieve the object associated with a sub-menu item.</param>
            <param name="aLanguageID">Language to use when retrieving StringProviders.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.ExpandingOnEmptyLine">
            <summary>
            True if the line is empty when stripped of the template text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.PossibleTemplateAtCursor">
            <summary>
            Returns true if there is possible template at the cursor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.LeftText">
            <summary>
            Returns the document text to the left of the currently expanding template.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.Primary">
            <summary>
            Returns a list of templates triggered by the primary key (typically the space bar).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.RightText">
            <summary>
            Returns the document text to the right of the currently expanding template.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.Secondary">
            <summary>
            Returns a list of templates triggered by the secondary key (typically Shift+space).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.CheckingAvailability">
            <summary>
            True if we're in the process of checking template availability. Some contexts (e.g., OnEmptyLine) are satisified differently if this is true. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.TemplateStoragePath">
            <summary>
            Gets the path (rooted from the CodeRush settings path) where templates are stored.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TemplateServices.ForEachElement">
            <summary>
            The IElement associated with a ForEach template expansion. As 
            the ForEach TextCommand expands, for each IElement this property
            will be set.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Assert.IsTrue(System.Boolean)">
            <summary>
            Checks if the given expression is true. If the passed expression
            is false then a TestException will be thrown.
            </summary>
            <param name="expression">The expression to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Checks if the given expression is true. If the passed expression
            is false then a TestException will be thrown.
            </summary>
            <param name="expression">The expression to test.</param>
            <param name="message">Message of exception (if thrown).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the given expression is true. If the passed expression
            is false then a TestException will be thrown.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Assert.IsFalse(System.Boolean)">
            <summary>
            Checks if the given expression is false. If the passed expression
            is true then a TestException will be thrown.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Checks if the given expression is false. If the passed expression
            is true then a TestException will be thrown.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the given expression is false. If the passed expression
            is true then a TestException will be thrown.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Assert.TestName">
            <summary>
            Returns the name of the running test.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionHelper.NewSolution(System.String,System.String)">
            <summary>
            Generates a new solution and closes the current one if it is open.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionHelper.NewProject(System.String,System.String)">
            <summary>
            Creates and returns a new project in the current solution.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionHelper.CloseSolution(System.String)">
            <summary>
            Closes the current solution and deletes the test solution path.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TestException">
            <summary>
            Raised if the test fails.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestInfo.GetDescription(System.Reflection.MethodInfo)">
            <summary>
            Retrieves the description of the specified method. If no System.ComponentModel.DescriptionAttribute
            is defined on this method, an empty string is returned.
            </summary>
            <param name="method">The method to retrieve the description for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestInfo.GetIgnoreAttribute(System.Reflection.MethodInfo)">
            <summary>
            Retrieves the defined IgnoreAttribute from the specified method (if any).
            </summary>
            <param name="method">The method to retrive the IgnoreAttribute from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestInfo.GetVersionSpecificAttribute(System.Reflection.MethodInfo)">
            <summary>
            Retrieves the VersionSpecificAttribute defined on the specified method (if any).
            </summary>
            <param name="method">The method to retrieve the VersionSpecificAttribute for.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestInfo.CanBeRun">
            <summary>
            If true, this test can be run in the current version of Visual Studio.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestInfo.Description">
            <summary>
            Gets a description of this test.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestInfo.Ignored">
            <summary>
            If true, this test case is ignored and cannot be run.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestInfo.IgnoreReason">
            <summary>
            Gets the reason that this test case is ignored.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestInfo.Log">
            <summary>
            Gets test log.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.#ctor">
            <summary>
            Creates test log.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.WriteFormat(System.String,System.String,System.Object[])">
            <summary>
            Writes to the given log using specified format.
            </summary>
            <param name="log">Log to write in.</param>
            <param name="format">Format string to format output.</param>
            <param name="args">Objects that should be written to the log.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.Write(System.String,System.String)">
            <summary>
            Appends a string to the given log.
            </summary>
            <param name="aLog">Log to write.</param>
            <param name="aString">String that should be written to the log.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.WriteLine(System.String,System.String)">
            <summary>
            Appends a string to the given log, starting with a new line.
            </summary>
            <param name="aLog">Log to write.</param>
            <param name="aString">String that should be written to the log.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.Write(System.String)">
            <summary>
            Appends a string to active log.
            </summary>
            <param name="aString">String that should be written to the log.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.WriteFormat(System.String,System.Object[])">
            <summary>
            Writes to the given log using specified format.
            </summary>
            <param name="format">Format string to format output.</param>
            <param name="args">Objects that should be written to the log.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.WriteLine(System.String)">
            <summary>
            Appends a string to active log, starting with a new line.
            </summary>
            <param name="aString">String that should be written to the log.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.Write(System.String,System.Object[])">
            <summary>
            Writes an array of objects to the specified log.
            </summary>
            <param name="aLog">Log to write in.</param>
            <param name="aObjects">An array of objects.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.Write(System.Object[])">
            <summary>
            Writes an array of objects to the active log.
            </summary>
            <param name="aObjects">An array of objects.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.Clear(System.String)">
            <summary>
            Cleares the given log.
            </summary>
            <param name="aLog"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestLogs.Clear">
            <summary>
            Clears active test log.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestLogs.ActiveLog">
            <summary>
            Gets the contents of the active log.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestLogs.ActiveLogName">
            <summary>
            Gets or sets the name of the active test log. 
            Write operations are performed on active log,
            unless otherwise specified.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestLogs.Names">
            <summary>
            Gets the collection of log names.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestLogs.Values">
            <summary>
            Gets the collection of logs.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestLogs.Item(System.String)">
            <summary>
            Indexer. Returns the contents of the given log.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TestProviderBase">
            <summary>
            TestProviderBase is a base class for all test providers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestProviderBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestProviderBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestProviderBase.Target">
            <summary>
            Gets or sets test group target.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestProviderBase.Tests">
            <summary>
            Gets ArrayList of tests.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestProviderBase.TestLogs">
            <summary>
            Gets test provider logs.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestProviderBase.TestTarget">
            <summary>
            Gets or sets test group target.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.TestReportItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TestReportItem class.
            </summary>
            <param name="name">Name of test or node</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.TestReportItemCollection.FindByName(System.String)">
            <summary>
            Find TestReportItem by name
            </summary>
            <param name="name">Name item</param>
            <returns>TestReportItem or null if not finded</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TestServices">
            <summary>
            TestServices class provides access to a collection of test providers.
            TestServices defines methods for generating mouse or keyboard events and 
            sending mouse or keyboard input to a given control or window.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestServices.ExtractTestFile(System.Reflection.Assembly,System.String,System.String,System.String)">
            <summary>
            Extracts test file from resources embedded to the running assembly and
            creates a temporary copy at the specified path.
            </summary>
            <param name="assembly">The assembly being tested. Use Assembly.GetExecutingAssembly().</param>
            <param name="path">The path to the temporary file.</param>
            <param name="manifestPath">The path to the embedded resource.</param>
            <param name="fileName">The name of the test file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestServices.DeleteTestFile(System.String,System.String)">
            <summary>
            Deletes the specified temporary test file.
            </summary>
            <param name="path">The path to the temporary file.</param>
            <param name="fileName">The name of the test file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestServices.DeleteTestFile(System.String)">
            <summary>
            Deletes the specified temporary test file.
            </summary>
            <param name="fullPath">The full path to the temporary file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TestServices.OpenTestFile(System.String)">
            <summary>
            Opens specified test file and parsers it. Returns null if the file does not exist or could not be parsed.
            </summary>
            <param name="testFile">The test file to open and parse.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestServices.Providers">
            <summary>
            Returns an array of all registered test providers
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TestServices.RunningTest">
            <summary>
            Gets currently running test if any.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.UnitTestEventArgs.TypeHasAttribute(DevExpress.CodeRush.StructuralParser.ITypeElement,System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the specified ITypeElement has an attribute with the specified name. 
            Ancestor classes are also evaluated if checkAncestors is set to true.
            </summary>
            <param name="namespaceName"></param>
            <param name="type">The ITypeElement to check.</param>
            <param name="attributeName">The attribute to find.</param>
            <param name="checkAncestors">Determines whether this method evaluates the class only or the entire hierarchy.</param>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.AddTestMethodEventArgs.Category">
            <summary>
            The category attribute of this test method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.AddTestMethodEventArgs.Description">
            <summary>
            The description of this test method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.AddTestMethodEventArgs.IsTestMethod">
            <summary>
            Set to true if the specified Method (a property of these event args) represents a test method in your test framework.
            Optionally you can also set the Description and Category properties.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.AddTestMethodEventArgs.Method">
            <summary>
            The method to check. If this method represents a test method in your test framework, set IsTestMethod (a property of the event args) to true, 
            and optionally set the Description and Category properties to match description and category attributes for this
            test method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.AddTestMethodEventArgs.RowTests">
            <summary>
            Returns obtained collection of row test methods for checked method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.ExternalRunnerArgs.AddEnvironmentVariable(System.String,System.String)">
            <summary>
            Add new environment to the Unit Test Runner process.
            </summary>
            <param name="name">Name of environment.</param>
            <param name="value">Value of environment.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.ExternalRunnerArgs.GetEnvironmentNames">
            <summary>
            Returns names of added environments.
            </summary>
            <returns>Enumerator of environment names.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.ExternalRunnerArgs.GetEnvironmentValue(System.String)">
            <summary>
            Returns a value of environment by name.
            </summary>
            <param name="name">Name of environment.</param>
            <returns>Value of environment.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.ExternalRunnerArgs.IsDebugMode">
            <summary>
            Returns true if Unit Test Runner is executed in a Debug mode
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.IsProjectSupportedEventArgs.Project">
            <summary>
            The IProjectElement implementor for the project being checked.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.IsProjectSupportedEventArgs.Supported">
            <summary>
            Set to true if your unit testing framework is supported by this project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.IsTestFixtureEventArgs.TypeIsTestFixture">
            <summary>
            Set to true if ea.Type is a Test Fixture for this unit testing framework.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute">
            <summary>
            Execute solution
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute(DevExpress.CodeRush.Core.Testing.TestMethod)">
            <summary>
            Execute one test
            </summary>
            <param name="method">Test method for execution</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute(DevExpress.CodeRush.Core.Testing.TestMethodCollection)">
            <summary>
            Execute collection of tests
            </summary>
            <param name="methods">Collection of tests</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute(DevExpress.CodeRush.StructuralParser.IProjectElement)">
            <summary>
            Execute all tests in project
            </summary>
            <param name="project">Project for execution</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Execute all tests inside type
            </summary>
            <param name="type">Type for testing</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute(DevExpress.CodeRush.StructuralParser.INamespaceElement)">
            <summary>
            Execute all tests inside namespace
            </summary>
            <param name="namespace">Namespace for testing</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Execute(DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Execute all tests inside method (example, execute all row tests for method)
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug">
            <summary>
            Debug solution
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug(DevExpress.CodeRush.Core.Testing.TestMethod)">
            <summary>
            Debug one tests
            </summary>
            <param name="method">Test method for debug</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug(DevExpress.CodeRush.Core.Testing.TestMethodCollection)">
            <summary>
            Debug collection of tests
            </summary>
            <param name="methods">Collection of tests</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug(DevExpress.CodeRush.StructuralParser.IProjectElement)">
            <summary>
            Debug all tests in project
            </summary>
            <param name="project">Project for execution</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Debug all tests inside type
            </summary>
            <param name="type">Type for testing</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug(DevExpress.CodeRush.StructuralParser.INamespaceElement)">
            <summary>
            Debug all tests inside namespace
            </summary>
            <param name="namespace">Namespace for testing</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Debug(DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Debug all tests inside method (example, debug all row tests for method)
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.AbortTestRun">
            <summary>
            Stop execution of tests
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.GetProvidersForProject(DevExpress.CodeRush.StructuralParser.IProjectElement)">
            <summary>
            Finds all test providers for given project.
            </summary>
            <param name="project">Project to check.</param>
            <returns>All registered test providers referenced by <paramref name="project"/>.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Tests">
            <summary>
            Returns collections of tests
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.ServiceState">
            <summary>
            Returns state of test service
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.Providers">
            <summary>
            Returns all registered unit test providers.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.CollectingTestsStarted">
            <summary>
            Fired before tests collection is started
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.CollectingTestsFinished">
            <summary>
            Fired after tests collection is finish
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.ExecuteTestsFinished">
            <summary>
            Fired after test execution is finished
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.ExecuteTestsStarted">
            <summary>
            Fired before test execution is started
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestsCleared">
            <summary>
            Fired after all tests are removed
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestsAdded">
            <summary>
            Fired after tests are added
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestsRemoved">
            <summary>
            Fired after tests are removed
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestsReset">
            <summary>
            Fired after test results are cleared
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestUpdated">
            <summary>
            Fired after a test result is changed
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestsExecuted">
            <summary>
            Fired after tests are executed and test results are changed
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.ConsoleTextOutput">
            <summary>
            Fired after console output text is got
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.ErrorTextOutput">
            <summary>
            Fired on console output error
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.TestExecuteProgressChanged">
            <summary>
            Fired after execution progress is changed
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.Testing.IUnitTestServiceEngine.SetupExternalProcess">
            <summary>
            Fired when starting an external Unit Test Runner process for its configuration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.Provider">
            <summary>
            Unit test provider
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.Description">
            <summary>
            Description of test if present
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.Category">
            <summary>
            Category test if present
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.Status">
            <summary>
            Returns status of test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.ProjectName">
            <summary>
            Returns project name containing this test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.ProjectLocation">
            <summary>
            Returns project file location
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.ProviderName">
            <summary>
            Returns unit provider name
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.FullName">
            <summary>
            Returns fullname of test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.NameRange">
            <summary>
            Returns name rage of test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.FixtureNameRange">
            <summary>
            Returns name rage fixture of test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.File">
            <summary>
            Returns file name containing this test fixture
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.MethodFile">
            <summary>
            Returns file name containing this test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.Name">
            <summary>
            Returns name of test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.FixtureFullName">
            <summary>
            Retunrs full name of test fixture containing this test
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethod.TestResults">
            <summary>
            Returns last result of test. Can be null if test pending.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.TestMethodCollection.ReplaceMethodsInFileOrFixture(System.String,System.Boolean,DevExpress.CodeRush.Core.Testing.TestMethodCollection)">
            <summary>
            Replaces the test methods associated with the specified file or test fixture.
            </summary>
            <param name="fullName">The name of the file or fixture the test methods are associated with.</param>
            <param name="isFile"></param>
            <param name="newMethods">The new test methods associated with a specified file.</param>
            <returns>Removed tests</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.TestMethodCollection.ReplaceMethod(DevExpress.CodeRush.Core.Testing.TestMethod)">
            <summary>
            Replace test method
            </summary>
            <param name="method">Test method</param>
            <returns>Removed test methods</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethodCollection.Item(System.Int32)">
            <summary>
            Returns TestMethod instance by index
            </summary>
            <param name="index">Index of instance</param>
            <returns>TestMethod instance</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethodCollection.Item(System.String)">
            <summary>
            Returns TestMethod instance by full name
            </summary>
            <param name="methodFullName">Full name of test</param>
            <returns>TestMethod instance</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.TestMethodCollection.Projects">
            <summary>
            Returns collection of all projects persisting in this test collection
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.UnitTestProvider.AssemblyFullName">
            <summary>
            Returns full name of assembly containing unit test provider. Needs for load assembly in new domain.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.UnitTestProvider.AssemlyLocation">
            <summary>
            Returns location of assembly containing unit test provider
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.UnitTestProvider.SupportsVisibleMethodsOnly">
            <summary>
            Set to true if the testing framework you're supporting only recognizes public test methods.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.UnitTestProvider.SupportsInstanceMethodsOnly">
            <summary>
            Set to true if the testing framework you're supporting only recognizes instance test methods (in other words 
            not static, not shared).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.UnitTestProvider.SupportsTestsFromBaseTypes">
            <summary>
            Set to true if the testing framework you're supporting searching test methods in base types.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Testing.UnitTestProvider.SupportsTestsFromReferencedBaseTypes">
            <summary>
            Set to true if the testing framework you're supporting searching test methods in base types from referenced assemblies.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Testing.UnitTestService.GetProvidersForProject(DevExpress.CodeRush.StructuralParser.IProjectElement)">
            <summary>
            Finds all test providers for given project.
            </summary>
            <param name="project">Project to check.</param>
            <returns>All registered test providers supported by <paramref name="project"/>.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.VersionSpecificAttribute">
            <summary>
            Apply to test methods that can only be run in specific versions of Visual Studio.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VersionSpecificAttribute.IsValid">
            <summary>
            Determines whether the currently running version of Visual Studio is valid against
            the values of this attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionSpecificAttribute.AtLeast">
            <summary>
            Gets or sets the minimum version of Visual Studio that this test can be run in.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionSpecificAttribute.AtMost">
            <summary>
            Gets or sets the maximum version of Visual Studio that this test cannot be run in.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.TextBuffers.ICompoundAction">
            <summary>
            Represents several actions grouped together and add to the undo stack as one action. This instance must be either closed
            or aborted before it is discarded to ensure that the undo stack does not become corrupted.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ICompoundAction.Abort">
            <summary>
            Aborts this compound action.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ICompoundAction.Close">
            <summary>
            Closes this compound action.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferEventArgs.TextBuffer">
            <summary>
            The ITextBuffer this event was fired for.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangeCancelledEventArgs.TextChangeType">
            <summary>
            The type of text change that was cancelled.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangeCancelledEventArgs.DeletionRange">
            <summary>
            A SourceRange representing the coordinates of text that would have been deleted (if any).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangeCancelledEventArgs.OldText">
            <summary>
            The text that would have been removed by this text change.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangeCancelledEventArgs.NewText">
            <summary>
            The text that would have been inserted by this text change.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangedEventArgs.TextChangeType">
            <summary>
            The type of text change that occurred.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangedEventArgs.InsertionRange">
            <summary>
            A SourceRange representing the coordinates of newly inserted text (if any).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangedEventArgs.DeletionRange">
            <summary>
            A SourceRange representing the coordinates of deleted text (if any).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangedEventArgs.NewText">
            <summary>
            If a text insertion or replacement occurred, this holds the text that was inserted into the buffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangingEventArgs.TextChangeType">
            <summary>
            The type of text change that is occurrring.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangingEventArgs.DeletionRange">
            <summary>
            A SourceRange representing the coordinates of text that will be deleted (if any).
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangingEventArgs.OldText">
            <summary>
            The text that will be removed by this text change.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangingEventArgs.NewText">
            <summary>
            The text that will be inserted by this text change.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferChangingEventArgs.Cancel">
            <summary>
            Gets or sets whether this text change will be cancelled.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferRenamedEventArgs.OldName">
            <summary>
            The old name of the text buffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.TextBufferRenamedEventArgs.NewName">
            <summary>
            The new name of the text buffer.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.TextBuffers.IDocumentInfo">
            <summary>
            Represents internal Visual Studio document information.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.IDocumentInfo.DocCookie">
            <summary>
            Gets the Visual Studio cookie for this documnet.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.IDocumentInfo.ReadLocks">
            <summary>
            Gets the number of read locks that have been taken for this document.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.IDocumentInfo.EditLocks">
            <summary>
            Gets the number of edit locks that have been taken for this document.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.TextBuffers.ITextBuffer">
            <summary>
            Represents a text buffer in Visual Studio. This can may be open in a document window or in Visual
            Studio's invisible editor.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.AddLock">
            <summary>
            Adds a lock to this ITextBuffer which will keep Visual Studio from closing it until the lock is released.
            When a lock is applied to a text buffer, it will remain open invisibly even if the user closes its document window.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.GetLineLength(System.Int32)">
            <summary>
            Returns the length (in characters) of the specified line number.
            </summary>
            <param name="line">The line number to return the length of.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.GetLine(System.Int32)">
            <summary>
            Retrieves the text for specified line in this ITextBuffer.
            </summary>
            <param name="line">The line number to return.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.GetText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves a block of text from this ITextBuffer using the specified coordinates.
            </summary>
            <param name="startLine">The starting line number to use.</param>
            <param name="startOffset">The starting character offset to use.</param>
            <param name="endLine">The ending line number to use.</param>
            <param name="endOffset">The ending character offset to use.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.GetText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Retrieves a block of text from this ITextBuffer using the specified coordinates.
            </summary>
            <param name="start">The starting SourcePoint to use.</param>
            <param name="end">The ending SourcePoint to use.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.GetText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Retrieves a block of text from this ITextBuffer using the specified coordinates.
            </summary>
            <param name="range">The SourceRange to use.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.SetText(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Sets a block of text in this ITextBuffer using the specified coordinates.
            </summary>
            <param name="startLine">The starting line number to use.</param>
            <param name="startOffset">The starting character offset to use.</param>
            <param name="endLine">The ending line number to use.</param>
            <param name="endOffset">The ending character offset to use.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.SetText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Sets a block of text in this ITextBuffer using the specified coordinates.
            </summary>
            <param name="start">The starting SourcePoint to use.</param>
            <param name="end">The ending SourcePoint to use.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.SetText(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Sets a block of text in this ITextBuffer using the specified coordinates.
            </summary>
            <param name="range">The SourceRange to use.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.SetText(System.String)">
            <summary>
            Sets the text of this ITextBuffer.
            </summary>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.Format(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Foramts a block of text in this ITextBuffer using the associated Visual Studio language service's code formatter.
            </summary>
            <param name="range">A SourceRange representing the range of text to format.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.NewCompoundAction(System.String)">
            <summary>
            Creates a new compound action for this text buffer. While this compound action is open, any actions performed
            in this text buffer will be added to the undo stack as one action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.NewCompoundAction(System.String,System.Boolean)">
            <summary>
            Creates a new compound action for this text buffer. While this compound action is open, any actions performed
            in this text buffer will be added to the undo stack as one action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
            <param name="saveSelection">If true, a special undo action will be added to the undo stack
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.NewEditPoint(System.Int32,System.Int32)">
            <summary>
            Creates a new text edit point in this text buffer at the specified line number and character offset.
            </summary>
            <param name="line">The line number to create this text edit point at.</param>
            <param name="offset">The character offset to create this text edit point at.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBuffer.GetDocumentInfo">
            <summary>
            Retrieves the internal Visual Studio document information for this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.Index">
            <summary>
            Gets the index of this ITextBuffer in the ITextBufferService. This value may change if other ITextBuffers are removed.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.FullName">
            <summary>
            Gets the full name of this ITextBuffer. This value may change if the ITextBuffer is renamed.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.HasLanguageService">
            <summary>
            Determines whether a Visual Studio language service is assigned to this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.LanguageServiceId">
            <summary>
            Gets a GUID identifying the Visual Studio language service for this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.IsChanging">
            <summary>
            Determines whether a text change is currently being made in this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.IsModified">
            <summary>
            Determines whether this ITextBuffer is in a modified or "dirty" state.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.IsReadOnly">
            <summary>
            Determines whether this ITextBuffer is read-only.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.IsUserReadOnly">
            <summary>
            Determines whether this ITextBuffer is read-only and it isn't editable in the code editor.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.LineCount">
            <summary>
            Gets the number of lines in this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.Range">
            <summary>
            Gets a SourceRange representing the full contents of this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.Size">
            <summary>
            Gets the size (in bytes) of this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.Text">
            <summary>
            Gets the full text contents of this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.AllowEditsWhileDebugging">
            <summary>
            Indicates whether or not language service allows 
            writing to this text buffer during debugging.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.WindowCount">
            <summary>
            Gets the number of windows attached to this ITextBuffer.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBuffer.UndoManager">
            <summary>
            Provides access to the undo manager of this ITextBuffer.
            </summary>
        </member>
        <member name="E:DevExpress.DXCore.TextBuffers.ITextBuffer.Disposing">
            <summary>
            Occurs when this ITextBuffer is about to be disposed.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.TextBuffers.ITextBufferLock">
            <summary>
            Represents a lock on an ITextBuffer that keeps Visual Studio from closing the buffer until released.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferLock.Release">
            <summary>
            Release this lock on the ITextBuffer it is associated with.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBufferLock.TextBuffer">
            <summary>
            The ITextBuffer that this lock is associated with.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.TextBuffers.ITextBufferService">
            <summary>
            Provides services for interacting with ITextBuffers.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferService.FromTextDocument(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Retrieves the ITextBuffer that represents the given TextDocument.
            </summary>
            <param name="document">The TextDocument to retrieve an ITextBuffer for.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferService.Open(System.String)">
            <summary>
            Opens a file in an ITextBuffer. If the specified file name is already open, the existing ITextBuffer is returned;
            otherwise, it is opened invisibly.
            </summary>
            <param name="fileName">The path to the file to open.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferService.NewMultiFileCompoundAction(System.String)">
            <summary>
            Creates a new multi-file compound action. While this compound action is open, all actions performed in any text
            buffers will appear on the undo stack as one linked action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferService.NewMultiFileCompoundAction(System.String,System.Boolean)">
            <summary>
            Creates a new multi-file compound action. While this compound action is open, all actions performed in any text
            buffers will appear on the undo stack as one linked action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
            <param name="saveSelection">If true, a special undo action will be added to the undo stack
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferService.NewMultiFileCompoundAction(System.String,System.Int32,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates a new multi-file compound action. While this compound action is open, all actions performed in any text
            buffers will appear on the undo stack as one linked action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
            <param name="topLine">TextView.TopLine for TextView position restoring.</param>
            <param name="selection">If selection is not empty,  a special undo action will be added to the undo stack
            that saves this selection.</param>    
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextBufferService.NewMultiFileCompoundAction(System.String,System.Int32,DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Creates a new multi-file compound action. While this compound action is open, all actions performed in any text
            buffers will appear on the undo stack as one linked action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
            <param name="topLine">TextView.TopLine for TextView position restoring.</param>
            <param name="selection">If selection is not empty,  a special undo action will be added to the undo stack
            that saves this selection.</param>
            <param name="fileName">The full name of TextDocument which contains selection to save.</param>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBufferService.Active">
            <summary>
            Gets the currently active ITextBuffer in visual studio.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBufferService.Count">
            <summary>
            Gets the number of existing ITextBuffers.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBufferService.Item(System.Int32)">
            <summary>
            Retrieves an ITextBuffer by its index.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextBufferService.Item(System.String)">
            <summary>
            Retrieves an ITextBuffer by its full name.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextEditPoint.Move(System.Int32,System.Int32)">
            <summary>
            Moves this text edit point to the specified line number and character offset in its owning text buffer.
            </summary>
            <param name="line">The line number to move this text edit point to.</param>
            <param name="offset">The character offset to move this text edit point to.</param>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.ITextEditPoint.Move(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves this text edit point to the specified SourcePoint in its owning text buffer.
            </summary>
            <param name="point">The SourcePoint to move this text edit point to.</param>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextEditPoint.TextBuffer">
            <summary>
            Gets the text buffer that owns this text edit point.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextEditPoint.Line">
            <summary>
            Gets the line number that this text edit point is located at.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextEditPoint.Offset">
            <summary>
            Gets the character offset that this text edit point is located at.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextEditPoint.SourcePoint">
            <summary>
            Gets a SourcePoint representing the line number and character offset that this text edit point is located at.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.TextBuffers.ITextEditPoint.IsPushable">
            <summary>
            Gets or sets whether or not this text edit point will be moved if text is inserted at the same position.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetAllTextEditPoints">
            <summary>
            Returns an array of all TextEditPoints.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetTextEditPoints(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of the TextEditPoints located within the specified SourceRange.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetTextEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns an array of the TextEditPoints located between the specified SourcePoints.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetTextEditPoints(System.Int32)">
            <summary>
            Returns an array of the TextEditPoints located on the specified line number.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetTextEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns an array of the TextEditPoints located at the specified SourcePoint.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetAllPushableTextEditPoints">
            <summary>
            Returns an array of all pushable TextEditPoints.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetPushableTextEditPoints(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of the pushable TextEditPoints located within the specified SourceRange.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetPushableTextEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns an array of the pushable TextEditPoints located between the specified SourcePoints.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetPushableTextEditPoints(System.Int32)">
            <summary>
            Returns an array of the pushable TextEditPoints located on the specified line number.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetPushableTextEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns an array of the pushable TextEditPoints located at the specified SourcePoint.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.TextSpanFromSourceRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Converts a SourceRange to a VSIP TextSpan.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetVsLanaguageInfo">
            <summary>
            Returns the IVsLanguageInfo for the language service associated with this text buffer.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.TextBuffers.TextBuffer.GetTextViews">
            <summary>
            Retrieves an array of TextViews associated with this buffer (if any).
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Undo.ITextBufferUndoManager">
            <summary>
            Represents an undo manager that is owned by a text buffer.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Undo.IUndoManager">
            <summary>
            Represents an Visual Studio undo manager. This can be used to manipulate a particular undo or redo stack.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.GetRedoActions">
            <summary>
            Gets an array of the IUndoRedoActions on the redo stack of this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.GetRedoActions(System.Int32)">
            <summary>
            Gets an array of the IUndoRedoActions on the redo stack of this undo manager up to the specified maximum count.
            </summary>
            <param name="maxCount">The maximum number of actions to retrieve.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.GetUndoActions">
            <summary>
            Gets an array of the IUndoRedoActions on the undo stack of this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.GetUndoActions(System.Int32)">
            <summary>
            Gets an array of the IUndoRedoActions on the undo stack of this undo manager up to the specified maximum count.
            </summary>
            <param name="maxCount">The maximum number of actions to retrieve.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.GetRedoAction(System.Int32)">
            <summary>
            Gets the IUndoRedoAction at the specified index from the top of the redo stack.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the number of actions on the undo stack.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.GetUndoAction(System.Int32)">
            <summary>
            Gets the IUndoRedoAction at the specified index from the top of undo redo stack.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the number of actions on the undo stack.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.Redo(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Performs a redo operation for the given action on this undo manager. <paramref name="action"/> 
            must represent an IUndoRedoAction on the redo stack of this undo manager. In addition, if there are any IUndoRedoActions
            before <paramref name="action"/> on the redo stack, they will also be redone.
            </summary>
            <param name="action">The IUndoRedoAction on the redo stack of this undo manager to redo.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.Undo(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Performs a undo operation for the given action on this undo manager. <paramref name="action"/> 
            must represent an IUndoRedoAction on the undo stack of this undo manager. In addition, if there are any IUndoRedoActions
            before <paramref name="action"/> on the undo stack, they will also be undone.
            </summary>
            <param name="action">The IUndoRedoAction on the undo stack of this undo manager to undo.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.IUndoManager.DiscardFrom(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Instructs the undo manager to discard the specified undo unit and all undo units 
            below it on the undo or redo stack.
            </summary>
            <param name="action">The undo action to be discarded. This parameter can be NULL to 
            discard the entire undo or redo stack. If the parameter is not NULL then the stack will not 
            be discarded.</param>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoManager.LastRedoAction">
            <summary>
            Returns the last IUndoRedoAction on the redo stack of this undo manager or null if the stack is empty.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoManager.LastUndoAction">
            <summary>
            Returns the last IUndoRedoAction on the undo stack of this undo manager or null if the stack is empty.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoManager.RedoCount">
            <summary>
            Gets the number of actions on the redo stack of this undo manager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoManager.UndoCount">
            <summary>
            Gets the number of actions on the undo stack of this undo manager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.ITextBufferUndoManager.TextBuffer">
            <summary>
            Gets the text buffer that owns this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.GetRedoActions">
            <summary>
            Gets an array of the IUndoRedoActions on the redo stack of this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.GetRedoActions(System.Int32)">
            <summary>
            Gets an array of the IUndoRedoActions on the redo stack of this undo manager up to the specified maximum count.
            </summary>
            <param name="maxCount">The maximum number of actions to retrieve.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.GetUndoActions">
            <summary>
            Gets an array of the IUndoRedoActions on the undo stack of this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.GetUndoActions(System.Int32)">
            <summary>
            Gets an array of the IUndoRedoActions on the undo stack of this undo manager up to the specified maximum count.
            </summary>
            <param name="maxCount">The maximum number of actions to retrieve.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.GetRedoAction(System.Int32)">
            <summary>
            Gets the IUndoRedoAction at the specified index from the top of the redo stack.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the number of actions on the undo stack.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.GetUndoAction(System.Int32)">
            <summary>
            Gets the IUndoRedoAction at the specified index from the top of undo redo stack.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the number of actions on the undo stack.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.Redo(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Performs a redo operation for the given action on this undo manager. <paramref name="action"/> 
            must represent an IUndoRedoAction on the redo stack of this undo manager. In addition, if there are any IUndoRedoActions
            before <paramref name="action"/> on the redo stack, they will also be redone.
            </summary>
            <param name="action">The IUndoRedoAction on the redo stack of this undo manager to redo.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.TextBufferUndoManager.Undo(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Performs a undo operation for the given action on this undo manager. <paramref name="action"/> 
            must represent an IUndoRedoAction on the undo stack of this undo manager. In addition, if there are any IUndoRedoActions
            before <paramref name="action"/> on the undo stack, they will also be undone.
            </summary>
            <param name="action">The IUndoRedoAction on the undo stack of this undo manager to undo.</param>
        </member>
        <member name="P:DevExpress.DXCore.Undo.TextBufferUndoManager.OleUndoManager">
            <summary>
            Gets the underlying IOleUndoManager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.TextBufferUndoManager.RedoCount">
            <summary>
            Gets the number of actions on the redo stack of this undo manager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.TextBufferUndoManager.UndoCount">
            <summary>
            Gets the number of actions on the undo stack of this undo manager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.TextBufferUndoManager.DevExpress#DXCore#Undo#ITextBufferUndoManager#TextBuffer">
            <summary>
            Gets the text buffer that owns this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommand.GetString">
            <summary>
            Descendant TextCommands can override and return a string that 
            represents the essence of the text command. Overriding is optional, 
            but overriding enables this command to be used in evaluating expressions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommand.ParticipatesInExpansion(System.String)">
            <summary>
            Returns true if this TextCommand participates in the given text expansion.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommand.ParticipatesInExpansion(System.String[])">
            <summary>
            Returns true if this TextCommand participates in at least one of the given text expansions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommand.CommandName">
            <summary>
            The name of this text command. This text command is referenced by this name, 
            which can appear in templates and other expansions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommand.Description">
            <summary>
            A brief description of the functionality provided by this text command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommand.Visible">
            <summary>
            Determines whether this text command appears in the text command drop down.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommand.Parameters">
            <summary>
            A collection of expected parameters for this text command.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.TextCommand.BeforeExpand">
            <summary>
            Occurs before the text expansion starts.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.TextCommand.AfterExpand">
            <summary>
            Occurs after the text expansion ends.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.TextCommand.Execute">
            <summary>
            Occurs when this text command is encountered in an expansion.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.TextCommandFactory._Registry">
            <summary>
            These two parallel lists manage the connection between a command name and the type of the 
            TextCommand associated with it.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommandProxy.RegisterTextCommand(DevExpress.CodeRush.Core.TextCommand)">
            <summary>
            Called by TextCommand registration mechanism to register a real TextCommand
            (newly-created from a load on demand) with an existing TextCommandProxy
            with the same name.						
            </summary>
            <param name="textCommand">The TextCommand to register with this proxy.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommandProxy.Parameters">
            <summary>
            A collection of expected parameters for this text command.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommandServices.Format(System.String)">
            <summary>
            Formats text command using its name.
            </summary>
            <param name="name">Text command name.</param>
            <returns>String representation of the text command.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommandServices.Format(System.String,System.String[])">
            <summary>
            Formats text command using its name and given list of parameters.
            </summary>
            <param name="name">Text command name.</param>
            <param name="args">The list of text command parameters.</param>
            <returns>String representation of the text command.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommandServices.Format(DevExpress.CodeRush.Core.TextCommand)">
            <summary>
            Formats text command using its name.
            </summary>
            <param name="command">The text command to format.</param>
            <returns>String representation of the text command.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextCommandServices.Format(DevExpress.CodeRush.Core.TextCommand,System.String[])">
            <summary>
            Formats text command using its name.
            </summary>
            <param name="command">The text command to format.</param>
            <param name="args">The list of text command parameters.</param>
            <returns>String representation of the text command.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommandServices.TxtStart">
            <summary>
            Gets text command start string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextCommandServices.TxtEnd">
            <summary>
            Gets text command end string.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextDocument">
            <summary>
            TextDocument is a CodeRush wrapper around EnvDTE.TextDocument, 
            providing additional methods and properties to make it easier to 
            manipulate documents.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddAdornment(DevExpress.DXCore.Adornments.TextDocumentAdornment)">
            <summary>
            Adds adornment to this text document.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddForegroundAdornment(DevExpress.DXCore.Adornments.TextDocumentAdornment)">
            <summary>
            Adds foreground adornment to this text document.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddBackgroundAdornment(DevExpress.DXCore.Adornments.TextDocumentAdornment)">
            <summary>
            Adds background adornment to this text document.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddRightBottomCornerAdornment(DevExpress.DXCore.Adornments.TextDocumentAdornment)">
            <summary>
            Adds adornment to the right bottom corner of this text document.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddAdornment(System.String,DevExpress.DXCore.Adornments.TextDocumentAdornment)">
            <summary>
            Adds adornment to this text view.
            </summary>
            <param name="holder">Name of the holder to add adornment to.</param>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.RemoveAdornment(DevExpress.DXCore.Adornments.TextDocumentAdornment)">
            <summary>
            Removes adornment from this text view.
            </summary>
            <param name="adornment">The adornment to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.UpdateAdornments">
            <summary>
            Updates adornments for all decorators.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.UpdateAdornments(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Updates adornments in the given source range 
            for all decorators.
            </summary>
            <param name="range">The range to update</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ReportBufferCoordinateWarning(System.String,System.String,System.Object[])">
            <summary>
            Used by AdjustBufferCoordinates to send a warning message to the log.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AdjustBufferCoordinates(System.Int32@,System.Int32@,System.String,System.String)">
            <summary>
            Adjusts 1-based buffer coordinates so that they are valid.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AdjustBufferCoordinates(System.Int32@,System.Int32@,System.String)">
            <summary>
            Adjusts 1-based buffer coordinates so that they are valid.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AdjustBufferCoordinates(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.String)">
            <summary>
            Adjusts a set of 1-based buffer coordinates so that they are valid.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ProtectEditPointsInRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Protects all edit points inside the specified range from descructive edits by setting UseStoring flag for each edit point.
            </summary>
            <param name="range">The range to protect.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddNamespace(DevExpress.CodeRush.StructuralParser.Namespace)">
            <summary>
            Adds the specified Namespace to the document. Each TextDocument owns a list of all the namespaces declared within.
            </summary>
            <param name="aNamespace">The Namespace (or descendant) to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ClearNamespaces">
            <summary>
            Clears all namespaces associated with the document (parsers should call before parsing).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.TabColumnToOffset(System.Int32,System.Int32)">
            <summary>
            Converts a tab column in this TextDocument to a character offset.
            </summary>
            <param name="lineNumber">The line number (starting at one) to check.</param>
            <param name="column">The column number (starting at one) to check.</param>
            <returns>Returns the character offset (one-based).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.TabColumnToOffset(System.String,System.Int32)">
            <summary>
            Converts a tab column in this TextDocument to a character offset.
            </summary>
            <param name="lineText">The text line to check.</param>
            <param name="column">The column number (starting at one) to check.</param>
            <returns>Returns the character offset (one-based).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.OffsetToTabColumn(System.Int32,System.Int32)">
            <summary>
            Calculates a tab column position in this TextDocument for a given character offset.
            </summary>
            <param name="lineNumber">The line number (starting at one) to check.</param>
            <param name="offset">The character offset (starting at one) to check.</param>
            <returns>Returns the column position (one-based).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.OffsetToTabColumn(System.String,System.Int32)">
            <summary>
            Calculates a tab column position in this TextDocument for a given character offset.
            </summary>
            <param name="lineText">The text line to check.</param>
            <param name="offset">The character offset (starting at one) to check.</param>
            <returns>Returns the column position (one-based).</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNumSpacesForTabAt(System.Int32,System.Int32)">
            <summary>
            Returns the number of spaces contributed by the tab at 
            the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="offset">The offset of the tab to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSpacesForTabAt(System.Int32,System.Int32)">
            <summary>
            Gets a string of spaces that represents the tab character at 
            the specified line and offset.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="offset">The offset of the tab to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.AddHeaderFooter(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String[],System.String[],System.Boolean)">
            <summary>
            Adds the specified header and footer lines before and after the specified language element.
            </summary>
            <param name="element">The language element to enclose.</param>
            <param name="header">The text to precede the language element.</param>
            <param name="footer">The text to follow the language element.</param>
            <param name="selectText">Whether the new header and footer text, as well as 
            the enclosed language element should be selected in the editor.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ClearBookmarks">
            <summary>
            Removes all unnamed bookmarks in the text document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CollectNamespaces(System.String,DevExpress.CodeRush.StructuralParser.NamespaceCollection)">
            <summary>
            Collects all namespaces inside this document matching the specified namespaceName, placing 
            matching namespaces inside namespaceCollection.
            </summary>
            <param name="namespaceName">The namespace to find. Nested namespaces should be dot-delimited (e.g., "DevExpress.CodeRush.Core").</param>
            <param name="namespaceCollection">The NamespaceCollection to hold matching namespaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateEditPoint">
            <summary>
            Creates and returns an EditPoint object at the beginning of 
            the document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateEditPoint(System.Int32,System.Int32)">
            <summary>
            Creates and returns an EditPoint object at the specified location.
            </summary>
            <param name="lineNumber">The line number of the edit point.</param>
            <param name="offset">The column offset of the edit point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateEditPoint(EnvDTE.TextPoint)">
            <summary>
            Creates and returns an EditPoint object at the specified location.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateEditPoint(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Creates and returns an EditPoint at the specified location with the given name, 
            and sets the number of virtual spaces necessary to reach this point.
            </summary>
            <param name="line">The line number for the edit point.</param>
            <param name="column">The column number of the edit point.</param>
            <param name="virtualSpaces">This out parameter is set to the number of virtual 
            spaces needed to reach the specified column on the specified line. 
            The actual edit point is placed next to actual text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateEditPoint(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            Creates and returns an EditPoint at the specified location with the given name, 
            and sets the number of virtual spaces necessary to reach this point.
            </summary>
            <param name="line">The line number for the edit point.</param>
            <param name="column">The column number of the edit point.</param>
            <param name="name">The name of the edit point, which may be useful for debugging.</param>
            <param name="virtualSpaces">This out parameter is set to the number of virtual 
            spaces needed to reach the specified column on the specified line. 
            The actual edit point is placed next to actual text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateDisposableEditPoint(System.Int32,System.Int32)">
            <summary>
            Creates and returns an implementor of IDisposableEditPoint bound to this TextDocument.
            </summary>
            <param name="lineNumber">The line number of the IDisposableEditPoint to create.</param>
            <param name="columnOffset">The column offset of the IDisposableEditPoint to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CreateDisposableEditPoint(System.Int32,System.Int32,System.String)">
            <summary>
            Creates and returns an implementor of IDisposableEditPoint bound to this TextDocument.
            </summary>
            <param name="lineNumber">The line number of the IDisposableEditPoint to create.</param>
            <param name="columnOffset">The column offset of the IDisposableEditPoint to create.</param>
            <param name="name">The name of this IDisposableEditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Activated">
            <summary>
            Called when this TextDocument is activated.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.DoParse">
            <summary>
            Performs a forced parse on this TextDocument. This is a low-level 
            method that should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FullParse">
            <summary>
            Performs a forced full parse on this TextDocument. This is a low-level 
            method that should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format">
            <summary>
            Formats the entire TextDocument.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format(System.Boolean)">
            <summary>
            Formats the entire TextDocument.
            </summary>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Formats a range of text in the TextDocument.
            </summary>
            <param name="range">The range to format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Formats a range of text in the TextDocument.
            </summary>
            <param name="range">The range to format.</param>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean,System.Boolean)">
            <summary>
            Formats a range of text in the TextDocument.
            </summary>
            <param name="range">The range to format.</param>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
            <param name="storeEditPoints">This parameter is used only in special circumstances when a language may perform a destructive format. This should normally be set to false.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean,DevExpress.CodeRush.StructuralParser.SourceRange@)">
            <summary>
            Formats a range of text in the TextDocument.
            </summary>
            <param name="range">The range to format.</param>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
            <param name="rangeAfterFormat">Returns the formatted range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Format(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean,System.Boolean,DevExpress.CodeRush.StructuralParser.SourceRange@)">
            <summary>
            Formats a range of text in the TextDocument.
            </summary>
            <param name="range">The range to format.</param>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
            <param name="storeEditPoints">This parameter is used only in special circumstances when a language may perform a destructive format. This should normally be set to false.</param>
            <param name="rangeAfterFormat">Returns the formatted range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FormatLine(System.Int32)">
            <summary>
            Formats the specified line in this TextDocument.
            </summary>
            <param name="line">The line number to format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FormatLine(System.Int32,System.Boolean)">
            <summary>
            Formats the specified line in this TextDocument.
            </summary>
            <param name="line">The line number to format.</param>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FormatSelection">
            <summary>
            Formats the current selection. If no selection exist, the current line is formatted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetAllEditPoints">
            <summary>
            Returns all of the EditPoints in this document in unsorted order.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetAllEditPoints(System.Boolean)">
            <summary>
            Returns all of the EditPoints in this document.
            </summary>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(System.Int32)">
            <summary>
            Returns the EditPoints on a specific line using the current EditPoint coordinates in unsorted order.
            </summary>
            <param name="line">The line number to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(System.Int32,System.Boolean)">
            <summary>
            Returns the EditPoints on a specific line using the recent EditPoint coordinates.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns the EditPoints in the specified SourceRange using the current EditPoint coordinates in unsorted order.
            </summary>
            <param name="range">The SourceRange to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Returns the EditPoints in the specified SourceRange using the current EditPoint coordinates.
            </summary>
            <param name="range">The SourceRange to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the EditPoints between the specified starting and ending SourcePoints using the current 
            EditPoint coordinates in unsorted order.
            </summary>
            <param name="start">The starting SourcePoint to use.</param>
            <param name="end">The ending SourcePoint to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Returns the EditPoints between the specified starting and ending SourcePoints using the current 
            EditPoint coordinates.
            </summary>
            <param name="start">The starting SourcePoint to use.</param>
            <param name="end">The ending SourcePoint to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the EditPoints contained within the specified range using the current 
            EditPoint coordinates in unsorted order.
            </summary>
            <param name="startLine">The starting line number to use.</param>
            <param name="startOffset">The starting character offset to use.</param>
            <param name="endLine">The ending line number to use.</param>
            <param name="endOffset">The ending character offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the EditPoints contained within the specified range using the current 
            EditPoint coordinates.
            </summary>
            <param name="startLine">The starting line number to use.</param>
            <param name="startOffset">The starting character offset to use.</param>
            <param name="endLine">The ending line number to use.</param>
            <param name="endOffset">The ending character offset to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the EditPoints at the specified SourcePoint using the current 
            EditPoint coordinates in unsorted order.
            </summary>
            <param name="point">The SourcePoint to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCurrentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Returns the EditPoints at the specified SourcePoint using the current 
            EditPoint coordinates.
            </summary>
            <param name="point">The SourcePoint to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(System.Int32)">
            <summary>
            Returns the EditPoints on a specific line using the recent EditPoint coordinates in unsorted order.
            NOTE: Recent coordinates represent the location that an EditPoint was at before a text
            change was made in the buffer.
            </summary>
            <param name="line">The line number to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(System.Int32,System.Boolean)">
            <summary>
            Returns the EditPoints on a specific line using the recent EditPoint coordinates.
            NOTE: Recent coordinates represent the location that an EditPoint was at before a text
            change was made in the buffer.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns the EditPoints in the specified SourceRange using the recent EditPoint coordinates in unsorted order.
            NOTE: Recent coordinates represent the location that an EditPoint was at before a text
            change was made in the buffer.
            </summary>
            <param name="range">The SourceRange to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Returns the EditPoints in the specified SourceRange using the recent EditPoint coordinates.
            NOTE: Recent coordinates represent the location that an EditPoint was at before a text
            change was made in the buffer.
            </summary>
            <param name="range">The SourceRange to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the EditPoints between the specified starting and ending SourcePoints using the recent 
            EditPoint coordinates in unsorted order. NOTE: Recent coordinates represent the location that 
            an EditPoint was at before a text change was made in the buffer.
            </summary>
            <param name="start">The starting SourcePoint to use.</param>
            <param name="end">The ending SourcePoint to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Returns the EditPoints between the specified starting and ending SourcePoints using the recent 
            EditPoint coordinates. NOTE: Recent coordinates represent the location that 
            an EditPoint was at before a text change was made in the buffer.
            </summary>
            <param name="start">The starting SourcePoint to use.</param>
            <param name="end">The ending SourcePoint to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the EditPoints contained within the specified range using the recent 
            EditPoint coordinates in unsorted order. NOTE: Recent coordinates represent the location that 
            an EditPoint was at before a text change was made in the buffer.
            </summary>
            <param name="startLine">The starting line number to use.</param>
            <param name="startOffset">The starting character offset to use.</param>
            <param name="endLine">The ending line number to use.</param>
            <param name="endOffset">The ending character offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the EditPoints contained within the specified range using the recent 
            EditPoint coordinates. NOTE: Recent coordinates represent the location that 
            an EditPoint was at before a text change was made in the buffer.
            </summary>
            <param name="startLine">The starting line number to use.</param>
            <param name="startOffset">The starting character offset to use.</param>
            <param name="endLine">The ending line number to use.</param>
            <param name="endOffset">The ending character offset to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the EditPoints between the specified starting and ending SourcePoints using the recent 
            EditPoint coordinates in unsorted order. NOTE: Recent coordinates represent the location that 
            an EditPoint was at before a text change was made in the buffer.
            </summary>
            <param name="point">The SourcePoint to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRecentEditPoints(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Returns the EditPoints between the specified starting and ending SourcePoints using the recent 
            EditPoint coordinates. NOTE: Recent coordinates represent the location that 
            an EditPoint was at before a text change was made in the buffer.
            </summary>
            <param name="point">The SourcePoint to use.</param>
            <param name="sorted">If true, the returned EditPoints are sorted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetEolType(System.Int32)">
            <summary>
            Returns the end-of-line type for the specified line.
            </summary>
            <param name="line">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCodeOnLine(System.Int32)">
            <summary>
            Gets the code on the specified line without leading or trailing white space.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns the text of the specified line, without leading 
            or trailing white space.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCollapsibleRegions(DevExpress.CodeRush.Core.GetCollapsibleRegionFlags,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an array of CollapsibleRegions using the given GetCollapsibleRegionFlags and SourceRange.
            </summary>
            <param name="flags">The GetCollapsibleRegionFlags to search with.</param>
            <param name="range">The SourceRange to search with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCollapsibleRegions(DevExpress.CodeRush.Core.GetCollapsibleRegionFlags,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.TextView)">
            <summary>
            Returns an array of CollapsibleRegions using the given GetCollapsibleRegionFlags and SourceRange.
            </summary>
            <param name="flags">The GetCollapsibleRegionFlags to search with.</param>
            <param name="range">The SourceRange to search with.</param>
            <param name="textView">The TextView to search in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.RegionDirective)">
            <summary>
            Returns a CollapsibleRegion object for the specified RegionDirective.
            </summary>                                              
            <param name="region">The RegionDirective to return the CollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns a CollapsibleRegion object matching the specified SourceRange. If there is no hidden region
            that matches, null is returned.
            </summary>
            <param name="range">The SourceRange to return the CollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.TextView)">
            <summary>
            Returns a CollapsibleRegion object matching the specified SourceRange. If there is no hidden region
            that matches, null is returned.
            </summary>
            <param name="range">The SourceRange to return the CollapsibleRegion for.</param>
            <param name="textView">The TextView to return the CollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLastCharacterOffset(System.Int32)">
            <summary>
            Gets the character offset of the last character on the specified line.
            </summary>
            <param name="line">The line number to check.</param>
            <returns>Returns the character offset of the last character on the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLine(System.Int32)">
            <summary>
            Retrieves the text for specified line in this TextDocument.
            </summary>
            <param name="line">The line number to return.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineLength(System.Int32)">
            <summary>
            Gets the length of the specified line number.
            </summary>
            <param name="line">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineRange(System.Int32)">
            <summary>
            Returns the SourceRange of the given line number in this TextDocument. If an invalid line
            number is specified, an empty SourceRange is returned.
            </summary>
            <param name="line">The line number to return a SourceRange for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNamespaces(System.String)">
            <summary>
            Returns a newly-created NamespaceCollection for the specified namespace name. Returns an 
            empty collection if the specified namespace is not declared in this file. Most collections 
            returned will only contain a single entry for a given namespace. However because it is 
            possible to declare the same namespace in a single file more than once, this method returns 
            a collection to accomodate that possibility.
            </summary>
            <param name="namespaceName">The name of the namespace to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Returns the LanguageElement at the specified line and column position in the active document.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the LanguageElement at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the LanguageElement at the specified line and column position in the active document.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <param name="canParse">False to use FileNodeWithoutParse to find element.</param>
            <returns>Returns the LanguageElement at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeAt(DevExpress.CodeRush.Core.EditPoint)">
            <summary>
            Returns the node at the specified EditPoint.
            </summary>
            <param name="editPoint">The EditPoint to check.</param>
            <returns>Returns the node at the specified EditPoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the node at the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the node at the specified SourcePoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeAt(EnvDTE.TextPoint)">
            <summary>
            Returns the LanguageElement at the specified TextPoint.
            </summary>
            <param name="textPoint">The TextPoint to check.</param>
            <returns>Returns the node at the specified TextPoint, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeBefore(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the node that ends prior to the specified SourcePoint in this document.
            </summary>
            <param name="point">The SourcePoint to check.</param>
            <param name="topNode">A parent node to start the search from. If you pass null, 
            the node at the specified SourcePoint will be used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNodeBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the node that ends prior to the specified SourcePoint in this document.
            </summary>
            <param name="point">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetNonBorderingParent(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets a parent of the specified SourceRange that does not immediately border 
            the SourceRange's Start or End. There must be at least one character between the parent's 
            boundaries and the specified SourceRange.
            </summary>
            <param name="range">The SourceRange to find a parent for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetOffsetFromColumn(System.Int32,System.Int32)">
            <summary>
            Gets the character offset corresponding to the specified line and display column. 
            Adds any trailing white space to the return value. This method is for compatibility.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The display column to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetOffset(System.Int32,System.Int32)">
            <summary>
            Gets the character offset corresponding to the specified line and display column.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The display column to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetOffset(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the character offset corresponding to the specified line and display column.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The display column to check.</param>
            <param name="includeVirtualSpaces">If true, then virtual space will be added to the offset. Note that this virtual space option 
            is for compatibility with the obsolete GetOffsetFromColumn method. It should be false for normal usage.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetOffsetAndVirtualSpace(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the offset and virtual space required to reach the specified column on the specified line.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column to reach.</param>
            <param name="offset">This out parameter is set to the offset of the actual character on the line 
            that is closest to the specified column.</param>
            <param name="virtualSpaces">This out parameter is set to the number of virtual 
            spaces needed to reach the specified column on the specified line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetProjectElement">
            <summary>
            Returns the ProjectElement associated with this document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetProject">
            <summary>
            Returns the EnvDTE.Project associated with this document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetProjectItem">
            <summary>
            Returns the EnvDTE.ProjectItem associated with this document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRegionChildNodeAt(System.Int32,System.Int32)">
            <summary>
            Returns the region child node (could be a RegionDirective -- could also be a comment) at the 
            specified line and column position.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRegionAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the region directive at the specified SourcePoint in this TextDocument.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetRegionAt(System.Int32,System.Int32)">
            <summary>
            Returns the region directive at the specified line and column position in this TextDocument.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
            <returns>Returns the node at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSelectionBounds(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the bounds of the text selection. Returns false if there is no selection.
            </summary>
            <param name="startLine">The starting line number of the selection.</param>
            <param name="startOffset">The starting column offset of the selection.</param>
            <param name="endLine">The ending line number of the selection.</param>
            <param name="endOffset">The ending column offset of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSelectionBounds(DevExpress.CodeRush.StructuralParser.SourcePoint@,DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Gets the bounds of the text selection. Returns false if there is no selection.
            </summary>
            <param name="startPoint">The starting line number and column offset of the selection.</param>
            <param name="endPoint">The ending line number and column offset of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSelectionBounds(DevExpress.CodeRush.StructuralParser.SourceRange@)">
            <summary>
            Gets the bounds of the text selection. Returns false if there is no selection.
            </summary>
            <param name="range">A SourceRange representing the bounds of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSelection(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the current text selection. Returns false if there is no selection.
            </summary>
            <param name="activeLine">The active line number of the current selection.</param>
            <param name="activeColumn">The active column of the current selection.</param>
            <param name="anchorLine">The anchor line number of the current selection.</param>
            <param name="anchorColumn">The anchor column of the current selection.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSelection(DevExpress.CodeRush.StructuralParser.SourcePoint@,DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Gets the current text selection. Returns false if there is no selection.
            </summary>
            <param name="activePoint">The active line number and column offset of the selection.</param>
            <param name="anchorPoint">The anchor line number and column offset of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSelection(DevExpress.CodeRush.StructuralParser.SourceRange@)">
            <summary>
            Gets the current text selection. Returns false if there is no selection.
            </summary>
            <param name="range">A SourceRange representing the current selection. Note: The SourceRange.Start
            property is set to the anchor point of the selection and the SourceRange.End is set to the active point
            of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSurroundingCharacters(System.Int32,System.Int32,System.Char@,System.Char@)">
            <summary>
            Gets the characters to the left and right of the specified line and character offset.
            </summary>
            <param name="line">The line containing the surrounding text.</param>
            <param name="offset">The character offset to split the line at.</param>
            <param name="leftChar">This output parameter is set to the character to the left of the specified character offset.</param>
            <param name="rightChar">This output parameter is set to the character to the right of the specified character offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSurroundingCharacters(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Char@,System.Char@)">
            <summary>
            Gets the characters to the left and right of the specified SourcePoint.
            </summary>
            <param name="point">A SourcePoint representing the line containing the surrounding text and the 
            character offset to split the line at.</param>
            <param name="leftChar">This output parameter is set to the character to the left of the specified character offset.</param>
            <param name="rightChar">This output parameter is set to the character to the right of the specified character offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSurroundingText(System.Int32,System.Int32,System.String@,System.String@)">
            <summary>
            Gets the text to the left and right of the specified line and character offset.
            </summary>
            <param name="line">The line containing the surrounding text.</param>
            <param name="offset">The character offset to split the line at.</param>
            <param name="leftText">This output parameter is set to the text to the left of the specified character offset.</param>
            <param name="rightText">This output parameter is set to the text to the right of the specified character offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetSurroundingText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String@,System.String@)">
            <summary>
            Gets the text to the left and right of the specified SourcePoint.
            </summary>
            <param name="point">A SourcePoint representing the line containing the surrounding text and the 
            character offset to split the line at.</param>
            <param name="leftText">This output parameter is set to the text to the left of the SourcePoint.</param>
            <param name="rightText">This output parameter is set to the text to the right of the SourcePoint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStringAt(System.Int32,System.Int32)">
            <summary>
            Returns the TextString at the specified line and character offset.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The character offset to check.</param>
            <returns>Returns the TextString at the specified line and column position, or null if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetTextViews">
            <summary>
            Returns an array of existing TextViews for this document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.OperationFailed(System.Int32,System.Boolean)">
            <summary>
            Returns true if the operation that returned the specified HRESULT value failed.
            </summary>
            <param name="hRetVal">The return result of the operation.</param>
            <param name="throwOnError">If true, an exception will be thrown based on the hresult.</param>
            <returns>Returns true if the operation failed; false if the operation was a success.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetTextViews(System.Boolean)">
            <summary>
            Returns an array of existing TextViews for this document.
            </summary>
            <param name="throwOnError">Setting this to true will cause GetTextViews to throw exceptions if they happen; otherwise, exceptions will be suppressed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GdiInvalidateViews(EnvDTE.TextPoint,System.Int32,System.Int32)">
            <summary>
            Invalidates a rectangular region in all text views associated with this document.
            The region is centered on the specified textPoint.
            </summary>
            <param name="textPoint">The TextPoint or EditPoint to invalidate at.</param>
            <param name="width">The width of the rectangular region, in pixels.</param>
            <param name="height">The height of the rectangular region, in pixels.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GdiInvalidateViews(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invalidates a rectangular region in all text views associated with this document.
            The region is centered on the specified line and column offset.
            </summary>
            <param name="line">The line number to invalidate at.</param>
            <param name="columnOffset">The column offset to invalidate at.</param>
            <param name="width">The width of the rectangular region, in pixels.</param>
            <param name="height">The height of the rectangular region, in pixels.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.InsideVirtualSpace(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines if the specified SourcePoint is inside of virtual space.
            </summary>
            <param name="point">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.InsideVirtualSpace(System.Int32,System.Int32)">
            <summary>
            Determines if the specified line number and character offset are inside of virtual space.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The character offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Lock">
            <summary>
            Locks the TextDocument so that its buffer blocks all but the current thread. NOTE: When finished, call
            Unlock to release the buffer to all threads again.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.MarkText(System.String)">
            <summary>
            Returns whether the indicated text was found in the text 
            document, and creates unnamed bookmarks wherever matching 
            text is found.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.MarkText(System.String,EnvDTE.vsFindOptions)">
            <summary>
            Returns whether the indicated text was found in the text 
            document, and creates unnamed bookmarks wherever matching 
            text is found.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GdiPaintOnViews(DevExpress.CodeRush.Core.EditorPaintEventHandler)">
            <summary>
            Calls the specified EditorPaintEventHandler for each TextView associated with this document.
            </summary>
            <param name="handler">The EditorPaintEventHandler that will be called for each TextView.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ParseIfNeeded">
            <summary>
            Parses the active document if changes have been committed since the 
            last parse of the active file. This is a low-level method that normally 
            should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ParseIfTextChanged">
            <summary>
            Parses this TextDocument if the text has been changed (but 
            not necessarily committed) since the last parse. Plug-in authors can 
            call this method to ensure that the CodeRush structural image is in 
            sync with the file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ReferenceDeclared(System.String)">
            <summary>
            Determines whether the specified namespace exists in a namespace reference (e.g., a using reference in C#, or an imports statement in VB).
            </summary>
            <param name="reference">The namespace to check.</param>
            <returns>Returns true if the specified namespace exists in a using reference (or imports statement), false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.RefreshViews">
            <summary>
            Invalidates and repaints all TextViews associated with this document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ReplacePattern(System.String,System.String)">
            <summary>
            Replaces matching text throughout an entire text document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ReplacePattern(System.String,System.String,EnvDTE.vsFindOptions)">
            <summary>
            Replaces matching text throughout an entire text document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ReplacePattern(System.String,System.String,EnvDTE.vsFindOptions,EnvDTE.TextRanges@)">
            <summary>
            Replaces matching text throughout an entire text document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ReplaceSelection(System.String,System.Boolean)">
            <summary>
            Replaces the entire selection with the specified text, and optionally keeps the selection active.
            </summary>
            <param name="text">The replacement text.</param>
            <param name="keepSelection">Specifies whether the new replacement text should be selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SelectText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects text in this document between the specified start position (the anchor) and the 
            end position (the cursor).
            </summary>
            <param name="startLine">The starting line number of the selection.</param>
            <param name="startOffset">The starting column line offset of the selection.</param>
            <param name="endLine">The ending line number of the selection.</param>
            <param name="endOffset">The ending column line offset of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Unlock">
            <summary>
            Unlocks the TextDocument so that its buffer is released to all threads. NOTE: Call this after previously
            locking the TextDocument with the Lock method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SetProjectElement(DevExpress.CodeRush.StructuralParser.ProjectElement)">
            <summary>
            Sets project that this document belongs to.
            </summary>
            <param name="project">The project to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.IncludeLeadingWhiteSpace(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange (based on the specified SourceRange) 
            that includes leading white space. This is useful for cutting, 
            deleting, or moving text inside the SourceRange, as this expanded SourceRange
            tends to produce a clean break in the code when removed.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.IncludeTrailingWhiteSpace(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange (based on the specified SourceRange) 
            that includes trailing white space. This is useful for cutting, 
            deleting, or moving text inside the SourceRange, as this expanded SourceRange
            tends to produce a clean break in the code when removed.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.IncludeWhitespace(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange (based on the specified SourceRange) 
            that includes leading and trailing white space. This is useful for cutting, 
            deleting, or moving text inside the SourceRange, as this expanded SourceRange
            tends to produce a clean break in the code when removed.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.IncludePrecedingEmptyLines(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange
            that includes leading empty lines.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.IncludeTrailingEmptyLines(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange
            that includes trailing empty lines.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStartEmptyLinePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates and returns SourcePoint of the start empty line,
            preceding the specified source point.
            </summary>
            <param name="sourcePoint">The SourcePoint to start from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetEndEmptyLinePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates and returns SourcePoint of the end empty line,
            trailing the specified source point.
            </summary>
            <param name="sourcePoint">The SourcePoint to start from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EmbedLineFragmentSelection(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Performs a "line-fragment" embedding on the currently selected text. Line-fragment embeddings insert text immediately
            before the first character of the selection and immediately after the last character of the selection.
            </summary>
            <param name="left">The text to be inserted immediately to the left of the selection.</param>
            <param name="right">The text to be inserted immediately to the right of the selection.</param>
            <param name="description">Text to be displayed in the undo stack for this embedding.</param>
            <param name="format">If true, the embedded text will be formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EmbedLineFragmentSelection(System.String,System.String,System.Boolean)">
            <summary>
            Performs a "line-fragment" embedding on the given text. Line-fragment embeddings insert text immediately
            before the first character of the selection and immediately after the last character of the selection.
            </summary>
            <param name="text">The text to be inserted.</param>
            <param name="description">Text to be displayed in the undo stack for this embedding.</param>
            <param name="format">If true, the embedded text will be formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EmbedWholeLineSelection(System.String[],System.String[],System.String,System.Boolean,System.Boolean,DevExpress.CodeRush.Core.PostEmbeddingCaretPosition,DevExpress.CodeRush.Core.PostEmbeddingSelectionAdjustment)">
            <summary>
            Wraps code around the currently selected text. Text may be inserted on the line above the
            selection and on the line after the selection, as well as to the left and right of each line.
            </summary>
            <param name="top">A string array to insert above the current selection.</param>
            <param name="bottom">A string array to insert below the current selection.</param>
            <param name="description">Text to be displayed in the undo stack for this embedding.</param>
            <param name="format">If true, the embedded text will be formatted.</param>
            <param name="indent">If true, the current selection will be indented.</param>
            <param name="caret">Specifies the final position of the caret after embedding.</param>
            <param name="adjustment">Specifies how the selection will be adjusted after embedding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EmbedWholeLineSelection(System.String[],System.String[],System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean,DevExpress.CodeRush.Core.PostEmbeddingCaretPosition,DevExpress.CodeRush.Core.PostEmbeddingSelectionAdjustment)">
            <summary>
            Wraps code around the currently selected text. Text may be inserted on the line above the
            selection and on the line after the selection, as well as to the left and right of each line.
            </summary>
            <param name="top">A string array to insert above the current selection.</param>
            <param name="bottom">A string array to insert below the current selection.</param>
            <param name="left">The text to place on the left side of each line.</param>
            <param name="right">The text to place on the right side of each line.</param>
            <param name="leadingColumn">Determines where the left text will be inserted. If trailingColumn is 
            positive, the left text will start at this specified column (unless code on this line starts before 
            the specified column, in which case the left text will be inserted just before the first non-white 
            space character on the line). If leadingColumn is one, then left text will be placed at the start of 
            each line. If trailingColumn is int.MaxValue, then the left text will be placed at the start of each line 
            after any leading white space.</param>
            <param name="trailingColumn">Determines where the right text will be placed. If trailingColumn is 
            positive, the right text will start at this specified column (unless that line is longer than the 
            specified column, in which case the right text will start at the end of the line). If trailingColumn
            is zero, then right text will be placed at the end of each line. If trailingColumn is less than zero, 
            then the right text will be placed at the end of each line before any trailing white space.</param>
            <param name="modifyEmptyLines">If true, empty lines and lines consisting of white-space only will be 
            modified. If false, empty lines and lines entirely consisting of white-space will be untouched.</param>
            <param name="description">Text to be displayed in the undo stack for this embedding.</param>
            <param name="format">If true, the embedded text will be formatted.</param>
            <param name="indent">If true, the current selection will be indented.</param>
            <param name="caret">Specifies the final position of the caret after embedding.</param>
            <param name="adjustment">Specifies how the selection will be adjusted after embedding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EmbedWholeLineSelection(System.String[],System.String[],System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,DevExpress.CodeRush.Core.PostEmbeddingCaretPosition,DevExpress.CodeRush.Core.PostEmbeddingSelectionAdjustment)">
            <summary>
            Wraps code around the currently selected text. Text may be inserted on the line above the
            selection and on the line after the selection, as well as to the left and right of each line.
            </summary>
            <param name="top">A string array to insert above the current selection.</param>
            <param name="bottom">A string array to insert below the current selection.</param>
            <param name="left">The text to place on the left side of each line.</param>
            <param name="right">The text to place on the right side of each line.</param>
            <param name="leadingColumn">Determines where the left text will be inserted. If trailingColumn is 
            positive, the left text will start at this specified column (unless code on this line starts before 
            the specified column, in which case the left text will be inserted just before the first non-white 
            space character on the line). If leadingColumn is one, then left text will be placed at the start of 
            each line. If trailingColumn is int.MaxValue, then the left text will be placed at the start of each line 
            after any leading white space.</param>
            <param name="trailingColumn">Determines where the right text will be placed. If trailingColumn is 
            positive, the right text will start at this specified column (unless that line is longer than the 
            specified column, in which case the right text will start at the end of the line). If trailingColumn
            is zero, then right text will be placed at the end of each line. If trailingColumn is less than zero, 
            then the right text will be placed at the end of each line before any trailing white space.</param>
            <param name="modifyEmptyLines">If true, empty lines and lines consisting of white-space only will be 
            modified. If false, empty lines and lines entirely consisting of white-space will be untouched.</param>
            <param name="skipFirstLast">If true, then the specified left text will not be added to the first line, 
            and the specified right text will not be added to the last line. If false, the left and right text will be 
            added to every line.</param>
            <param name="description">Text to be displayed in the undo stack for this embedding.</param>
            <param name="format">If true, the embedded text will be formatted.</param>
            <param name="indent">If true, the current selection will be indented.</param>
            <param name="extendToWholeLines">If true, then the start of the selection will be extended to the start 
            of the first line, and the end of the selection will be extended to the end of the last line.</param>
            <param name="caret">Specifies the final position of the caret after embedding.</param>
            <param name="adjustment">Specifies how the selection will be adjusted after embedding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EmbedSelection(DevExpress.CodeRush.Core.Embedding)">
            <summary>
            Wraps code around the currently selected text. Text may be inserted on the line above the
            selection and on the line after the selection, as well as to the left and right of each line.
            </summary>
            <param name="embedding">An Embedding object that contains parameters for the operation.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FindText(System.String,DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.Core.FindTextFlags)">
            <summary>
            Finds the position of the specified text at the specified starting position in 
            this TextDocument using the given flags.
            </summary>
            <param name="searchText">The text to find.</param>
            <param name="rangeToSearch">A SourceRange representing the range to search.</param>
            <param name="flags">The flags to use while searching.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FindText(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Finds the position of the specified text at the specified starting position in 
            this TextDocument.
            </summary>
            <param name="searchText">The text to find.</param>
            <param name="rangeToSearch">A SourceRange representing the range to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FindText(System.String,DevExpress.CodeRush.Core.FindTextFlags)">
            <summary>
            Finds the position of the specified text in this TextDocument using the given flags.
            </summary>
            <param name="searchText">The text to find.</param>
            <param name="flags">The flags to use while searching.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.FindText(System.String)">
            <summary>
            Finds the position of the specified text in this TextDocument.
            </summary>
            <param name="searchText">The text to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueDelete(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Deletes the specified SourceRange. This is a queued edit operation, which 
            means it is not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="range">The SourceRange to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueDelete(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Deletes the specified node. This is a queued edit operation, which means it is 
            not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="element">The LanguageElement node to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueDelete(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Deletes the nodes in the specified sibling range (including firstSibling 
            and lastSibling). This is a queued edit operation, which means it is 
            not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="firstSibling">The first sibling node to delete.</param>
            <param name="lastSibling">The last sibling node to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueInsert(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Inserts the specified newCode into the document at the specified insertionPoint. 
            This is a queued edit operation, which means it is not performed until 
            ApplyQueuedEdits is called.
            </summary>
            <param name="insertionPoint">The point to insert this new code.</param>
            <param name="newCode">The code to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueReplace(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Replaces the specified SourceRange with newCode. This is a queued edit operation, 
            which means it is not applied until ApplyQueuedEdits is called.
            </summary>
            <param name="range">The SourceRange to delete.</param>
            <param name="newCode">The new code that will replace the deleted range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueReplace(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Replaces the specified node with newCode. This is a queued edit operation, 
            which means it is not applied until ApplyQueuedEdits is called.
            </summary>
            <param name="element">The LanguageElement node to delete.</param>
            <param name="newCode">The new code that will replace the element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueReplace(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Replaces the nodes in the specified sibling range (including firstSibling and 
            lastSibling) with newCode. This is a queued edit operation, which means it is 
            not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="firstSibling">The first sibling node to delete.</param>
            <param name="lastSibling">The last sibling node to delete.</param>
            <param name="newCode">The new code that will replace the sibling range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.QueueMove(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves the specified range to the insertionPoint.
            This is a queued edit operation, which means it is not performed until 
            ApplyQueuedEdits is called.
            </summary>
            <param name="range">The SourceRange to move.</param>
            <param name="insertionPoint">The SourcePoint to insert the moved text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ApplyQueuedEdits(System.String)">
            <summary>
            Applies all edits in the queue. You can place new insert, delete, and replace edit 
            operations into the edit queue using the QueueDelete, QueueInsert, and 
            QueueReplace methods. You can get a list of all pending edits by querying the 
            QueuedEdits property. This operation is wrapped in an undo/redo stack entry with the 
            specified name.
            </summary>
            <param name="operation">The name of the operation you are performing. This text
            (if not empty and not null) will appear in the undo/redo stack. Passing a null or empty 
            string will cause this method to apply the queued edits without a parent undo wrapper.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ApplyQueuedEdits(System.String,System.Boolean)">
            <summary>
            Applies all edits in the queue. You can place new insert, delete, and replace edit 
            operations into the edit queue using the QueueDelete, QueueInsert, and 
            QueueReplace methods. You can get a list of all pending edits by querying the 
            QueuedEdits property. This operation is wrapped in an undo/redo stack entry with the 
            specified name.
            </summary>
            <param name="operation">The name of the operation you are performing. This text
            (if not empty and not null) will appear in the undo/redo stack. Passing a null or empty 
            string will cause this method to apply the queued edits without a parent undo wrapper.</param>
            <param name="format">Specifies if the text should be formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ApplyQueuedEdits">
            <summary>
            Applies all edits in the queue. You can place new insert, delete, and replace edit 
            operations into the edit queue using the QueueDelete, QueueInsert, and 
            QueueReplace methods. You can get a list of all pending edits by querying the 
            QueuedEdits property. This overload does not create its own undo/redo stack entry. 
            If you want to wrap these changes in a single undo entry, use the other ApplyQueuedEdits
            overload, passing a non-empty string to the operation parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Move(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Immediately moves the specified range to the insertionPoint. If you need to perform several 
            consecutive moves sequentially, use the QueueMove method instead (followed by a call to 
            ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to move.</param>
            <param name="insertionPoint">The SourcePoint to insert the moved text.</param>
            <param name="operation">The name of the operation this move represents. This text
            will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.MoveWithBinding(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Immediately moves the specified range to the insertionPoint. If you need to perform several 
            consecutive moves sequentially, use the QueueMove method instead (followed by a call to 
            ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to move.</param>
            <param name="insertionPoint">The SourcePoint to insert the moved text.</param>
            <param name="operation">The name of the operation this move represents. This text
            will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Replace(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String)">
            <summary>
            Immediately replaces the specified range with the new text. If you need to perform several 
            consecutive replace operations sequentially, use the QueueReplace method instead (followed 
            by a call to ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to replace.</param>
            <param name="newCode">The text to insert.</param>
            <param name="operation">The name of the operation this replace operation represents. 
            This text will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Replace(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String,System.Boolean)">
            <summary>
            Immediately replaces the specified range with the new text. If you need to perform several 
            consecutive replace operations sequentially, use the QueueReplace method instead (followed 
            by a call to ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to replace.</param>
            <param name="newCode">The text to insert.</param>
            <param name="operation">The name of the operation this replace operation represents. 
            This text will appear in the undo/redo stack.</param>
            <param name="format">Specifies if the text should be formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.PadWhitespace(System.Int32,System.Int32)">
            <summary>
            If inside virtual space, whitespace is inserted at the end of the given line up to the
            specified offset.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="offset">The character offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanReplaceText(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wrapper around VSIP IVsTextLines.CanReplaceLines call that handles conversion of 1-based coordinates and tests HRESULT value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanDeleteText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if the specified range of text in this TextDocument can be deleted.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="startLine">The starting line coordinate.</param>
            <param name="startOffset">The starting character offset coordinate.</param>
            <param name="endLine">The ending line coordinate.</param>
            <param name="endOffset">The ending character offset coordinate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanDeleteText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines if the specified range of text in this TextDocument can be deleted.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="start">The starting SourcePoint coordinate.</param>
            <param name="end">The ending SourcePoint coordinate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanDeleteText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Determines if the specified range of text in this TextDocument can be deleted.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="range">The range coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanInsertText(System.Int32,System.Int32,System.String)">
            <summary>
            Determines if the given text can be inserted in this TextDocument at the specified coordinate.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="line">The line coordinate.</param>
            <param name="offset">The character offset coordinate.</param>
            <param name="text">The text to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanInsertText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Determines if the given text can be inserted in this TextDocument at the specified coordinate.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="point">The SourcePoint coordinate.</param>
            <param name="text">The text to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanSetText(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Determines if the specified range of text in this TextDocument can be replaced with the given text.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="startLine">The starting line coordinate.</param>
            <param name="startOffset">The starting character offset coordinate.</param>
            <param name="endLine">The ending line coordinate.</param>
            <param name="endOffset">The ending character offset coordinate.</param>
            <param name="text">The text to replace with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanSetText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Determines if the specified range of text in this TextDocument can be replaced with the given text.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="start">The starting SourcePoint coordinate.</param>
            <param name="end">The ending SourcePoint coordinate.</param>
            <param name="text">The text to replace with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.CanSetText(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Determines if the specified range of text in this TextDocument can be replaced with the given text.
            This returns false if the range is read-only; otherwise, true.
            </summary>
            <param name="range">The range coordinates.</param>
            <param name="text">The text to replace with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.DeleteText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes the text specified by the given coordinates.
            </summary>
            <param name="startLine">The starting line of the text to delete.</param>
            <param name="startOffset">The starting character offset of the text to delete.</param>
            <param name="endLine">The ending line of the text to delete.</param>
            <param name="endOffset">The ending character offset of the text to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.DeleteText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Deletes the text specified by the given coordinates.
            </summary>
            <param name="start">The starting SourcePoint of the text to delete.</param>
            <param name="end">The ending SourcePoint of the text to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.DeleteText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Deletes the text specified by the given coordinates.
            </summary>
            <param name="range">The SourceRange of the text to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ExpandText(System.Int32,System.Int32,System.String)">
            <summary>
            Expands text containing references to TextCommands and StringProviders at the specified location.
            </summary>
            <param name="line">The line number to expand the text at.</param>
            <param name="offset">The character offset to expand the text at.</param>
            <param name="text">The text to expand.</param>
            <returns>Returns a SourceRange representing the expanded text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ExpandText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Expands text containing references to TextCommands and StringProviders at the specified location.
            </summary>
            <param name="point">The SourcePoint to expand the text at.</param>
            <param name="text">The text to expand.</param>
            <returns>Returns a SourceRange representing the expanded text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a block of text from the TextDocument.
            </summary>
            <param name="startLine">The starting line of the block to retrieve.</param>
            <param name="startOffset">The starting character offset of the block to retrieve.</param>
            <param name="endLine">The ending line of the block to retrieve.</param>
            <param name="endOffset">The ending character offset of the block to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetText(System.Int32,System.Int32)">
            <summary>
            Returns a block of text from the TextDocument.
            </summary>
            <param name="startLine">The starting line of the block to retrive.</param>
            <param name="endLine">The ending line of the block to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns a block of the text from the TextDocument.
            </summary>
            <param name="startPoint">The starting SourcePoint of the block to retrieve.</param>
            <param name="endPoint">The ending SourcePoint of the block to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns of block of text from the TextDocument.
            </summary>
            <param name="range">A SourceRange defining the block to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetText(System.Int32)">
            <summary>
            Retrieves the text for specified line in this TextDocument.
            </summary>
            <param name="lineNumber">The line number to return.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.InsertText(System.Int32,System.Int32,System.String)">
            <summary>
            Inserts the given text at the specified line and offset.
            </summary>
            <param name="line">The line to insert the text at.</param>
            <param name="offset">The character offset to insert the text at.</param>
            <param name="text">The text to insert.</param>
            <returns>Returns a SourceRange representing the coordinates of the inserted text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.InsertText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Inserts the given text at the specified SourcePoint.
            </summary>
            <param name="point">The SourcePoint to insert the text at.</param>
            <param name="text">The text to insert.</param>
            <returns>Returns a SourceRange representing the coordinates of the inserted text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SetText(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Sets the text at the given coordinates to the specified text. This can be used to delete, replace or insert text.
            </summary>
            <param name="startLine">The starting line coordinate.</param>
            <param name="startOffset">The starting character offset coordinate.</param>
            <param name="endLine">The ending line coordinate.</param>
            <param name="endOffset">The ending character offset coordinate.</param>
            <param name="text">The specified text.</param>
            <returns>Returns a SourceRange representing the coordinates that were changed.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SetText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Sets the text at the given coordinates to the specified text. This can be used to delete, replace or insert text.
            </summary>
            <param name="start">The starting SourcePoint coordinates.</param>
            <param name="end">The ending SourcePoint coordinates.</param>
            <param name="text">The specified text.</param>
            <returns>Returns a SourceRange representing the coordinates that were changed.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SetText(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Sets the text at the given SourceRange to the specified text. This can be used to delete, replace or insert text.
            </summary>
            <param name="range">The SourceRange to replace with the specified text.</param>
            <param name="text">The specified text.</param>
            <returns>Returns a SourceRange representing the coordinates that were changed.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SetText(DevExpress.CodeRush.Core.SourceRangeCollection,System.String)">
            <summary>
            Sets the text at the given ranges to the specified text. This can be used to delete, replace or insert text.
            </summary>
            <param name="ranges">The ranges collection to replace with the specified text.</param>
            <param name="text">The specified text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.SetText(DevExpress.CodeRush.StructuralParser.SourceRange[],System.String)">
            <summary>
            Sets the text at the given ranges to the specified text. This can be used to delete, replace or insert text.
            </summary>
            <param name="ranges">The ranges array to replace with the specified text.</param>
            <param name="text">The specified text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.DeleteLine(System.Int32)">
            <summary>
            Deletes a line of text.
            </summary>
            <param name="lineNumber">The line number to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.DeleteLines(System.Int32,System.Int32)">
            <summary>
            Deletes lines of text.
            </summary>
            <param name="startLine">The starting line to delete.</param>
            <param name="count">The number of lines to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLines(System.Int32,System.Int32)">
            <summary>
            Gets a string array of several lines of text.
            </summary>
            <param name="startLine"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineCoordinate(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the line and offset of the specified stream position.
            </summary>
            <param name="position">The stream position to use.</param>
            <param name="line">The line number of the specified position.</param>
            <param name="offset">The line character offset of the specified position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineCoordinate(System.Int32)">
            <summary>
            Returns a SourcePoint representing the line and offset of the specified stream position.
            </summary>
            <param name="position">The stream position to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineCoordinates(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the starting and ending line/offsets from the specified stream coordinates.
            </summary>
            <param name="position">The stream position to use.</param>
            <param name="length">The length of the stream to use.</param>
            <param name="startLine">The starting line number of the specified stream coordinates.</param>
            <param name="startOffset">The starting line character offset of the specified stream coordinates.</param>
            <param name="endLine">The ending line number of the specified stream coordinates.</param>
            <param name="endOffset">The ending line character offset of the specified stream coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineCoordinates(System.Int32,System.Int32,DevExpress.CodeRush.StructuralParser.SourcePoint@,DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Gets SourcePoints representing the starting and ending line/offsets from the specified stream coordinates.
            </summary>
            <param name="position">The stream position to use.</param>
            <param name="length">The length of the stream to use.</param>
            <param name="startPoint">A SourcePoint representing the starting line/offset.</param>
            <param name="endPoint">A SourcePoint representing the ending line/offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetLineCoordinates(System.Int32,System.Int32)">
            <summary>
            Gets a SourceRange representing the starting and ending line/offsets from the specified stream coordinates.
            </summary>
            <param name="position">The stream position to use.</param>
            <param name="length">The length of the stream to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStreamCoordinate(System.Int32,System.Int32)">
            <summary>
            Returns the position in the text stream of the specified coordinates.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="offset">The line offset to use.</param>
            <returns>Returns the position of the specified coordinates.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStreamCoordinate(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Retusn the position in the text stream of the specified SourcePoint.
            </summary>
            <param name="point">The SourcePoint to use.</param>
            <returns>Returns the position of the specified coordinates.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStreamCoordinates(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the positions and length in the text stream of the specified coordinates.
            </summary>
            <param name="startLine">The starting line to use.</param>
            <param name="startOffset">The starting offset to use.</param>
            <param name="endLine">The ending line to use.</param>
            <param name="endOffset">The ending offset to use.</param>
            <param name="position">Returns the position of the specified starting coordinates.</param>
            <returns>Returns the length of the specified coordinates in the underlying text stream.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStreamCoordinates(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Int32@)">
            <summary>
            Returns the positions and length in the text stream of the specified coordinates.
            </summary>
            <param name="startPoint">The starting SourcePoint to use.</param>
            <param name="endPoint">The ending SourcePoint to use.</param>
            <param name="position">Returns the position of the specified starting coordinates.</param>
            <returns>Returns the length of the specified coordinates in the underlying text stream.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetStreamCoordinates(DevExpress.CodeRush.StructuralParser.SourceRange,System.Int32@)">
            <summary>
            Returns the positions and length in the text stream of the specified coordinates.
            </summary>
            <param name="range">The SourceRange to use.</param>
            <param name="position">Returns the position of the specified starting coordinates.</param>
            <returns>Returns the length of the specified coordinates in the underlying text stream.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Tabify(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces spaces in the specified range with tabs using this TextDocument's tab size.
            </summary>
            <param name="startLine">The line to begin replacing spaces.</param>
            <param name="startOffset">The 1-based offset to begin replacing spaces.</param>
            <param name="endLine">The line to stop replacing spaces.</param>
            <param name="endOffset">The 1-based offset to stop replacing spaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Tabify(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Replaces spaces in the specified range with tabs using this TextDocument's tab size.
            </summary>
            <param name="start">The SourcePoint to begin replacing spaces.</param>
            <param name="end">The SourcePoint to stop replacing spaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Tabify(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Replaces spaces in the specified range with tabs using this TextDocument's tab size.
            </summary>
            <param name="range">The SourceRange in which to replace spaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.TabifyLine(System.Int32)">
            <summary>
            Replaces spaces in the specified line with tabs using this TextDocument's tab size.
            </summary>
            <param name="line">The number of the line to replace spaces in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.TabifyLine(System.Int32,System.Int32)">
            <summary>
            Replaces spaces in the specified line with tabs using this TextDocument's tab size.
            </summary>
            <param name="line">The number of the line to replace spaces in.</param>
            <param name="startOffset">The offset to begin replacing spaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.TabifyLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces spaces in the specified line with tabs using this TextDocument's tab size.
            </summary>
            <param name="line">The number of the line to replace spaces in.</param>
            <param name="startOffset">The offset to begin replacing spaces.</param>
            <param name="length">The length of the line portion to replace spaces in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Untabify(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces tabs in the specified range with spaces using this TextDocument's tab size.
            </summary>
            <param name="startLine">The line to begin replacing tabs.</param>
            <param name="startOffset">The 1-based offset to begin replacing tabs.</param>
            <param name="endLine">The line to stop replacing tabs.</param>
            <param name="endOffset">The 1-based offset to stop replacing tabs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Untabify(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Replaces tabs in the specified range with spaces using this TextDocument's tab size.
            </summary>
            <param name="start">The SourcePoint to begin replacing tabs.</param>
            <param name="end">The SourcePoint to stop replacing tabs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.Untabify(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Replaces tabs in the specified range with spaces using this TextDocument's tab size.
            </summary>
            <param name="range">The SourceRange in which to replace tabs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.UntabifyLine(System.Int32)">
            <summary>
            Replaces tabs in the specified line with spaces using this TextDocument's tab size.
            </summary>
            <param name="line">The number of the line to replace tabs in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.UntabifyLine(System.Int32,System.Int32)">
            <summary>
            Replaces tabs in the specified line with spaces using this TextDocument's tab size.
            </summary>
            <param name="line">The number of the line to replace tabs in.</param>
            <param name="startOffset">The offset to begin replacing tabs.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.UntabifyLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces tabs in the specified line with spaces using this TextDocument's tab size.
            </summary>
            <param name="line">The number of the line to replace tabs in.</param>
            <param name="startOffset">The offset to begin replacing tabs.</param>
            <param name="length">The length of the line portion to replace tabs in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.StoreInsertionPoint(System.String,System.Int32,System.Int32,DevExpress.CodeRush.Core.InsertionPointOptions)">
            <summary>
            Stores a new insertion point that can be used during text expansion or other text-manipulation process. 
            To use the insertion point, create a text expansion that contains a "GotoInsertionPoint" text command 
            and pass the name of the insertion point as the "Name" parameter, or you can call the GotoInsertionPoint
            method directly from your plug-in. NOTE: Stored insertion points have very short lives -- they are 
            deleted after every text expansion. If you need to keep an edit point around for a longer period of 
            time, call CodeRush.EditPoints.CreateEditPoint() and store the result in a field of your plug-in.
            </summary>
            <param name="name">The name of the new insertion point.</param>
            <param name="line">The line number of the new insertion point.</param>
            <param name="offset">The character offset of the new insertion point.</param>
            <param name="options">Specifies options to use when creating the new insertion point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.StoreInsertionPoint(System.String,System.Int32,System.Int32)">
            <summary>
            Stores a new insertion point that can be used during text expansion or other text-manipulation process. 
            To use the insertion point, create a text expansion that contains a "GotoInsertionPoint" text command 
            and pass the name of the insertion point as the "Name" parameter, or you can call the GotoInsertionPoint
            method directly from your plug-in. NOTE: Stored insertion points have very short lives -- they are 
            deleted after every text expansion. If you need to keep an edit point around for a longer period of 
            time, call CodeRush.EditPoints.CreateEditPoint() and store the result in a field of your plug-in.
            </summary>
            <param name="name">The name of the new insertion point.</param>
            <param name="line">The line number of the new insertion point.</param>
            <param name="offset">The character offset of the new insertion point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GotoInsertionPoint(System.String,System.Boolean)">
            <summary>
            Moves the caret to the specified insertion point, and removes this point from the list if 
            removePoint is true. NOTE: All stored insertion points are removed after a text expansion
            in this document.
            </summary>
            <param name="name">The name of the new insertion point.</param>
            <param name="removePoint">If true, then this named insertion point will be removed from the list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GotoInsertionPoint(System.String)">
            <summary>
            Moves the caret to the specified insertion point. NOTE: Stored insertion points are deleted after
            every text expansion.
            </summary>
            <param name="name">The name of the new insertion point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GotoInsertionPoint">
            <summary>
            Moves the caret to the default insertion point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.StoreInsertionPoint(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.InsertionPointOptions)">
            <summary>
            Stores a new insertion point that can be used during text expansion. To use the insertion point,
            create a text expansion that contains a "GotoInsertionPoint" text command and pass the name
            of the insertion point as the "Name" parameter.
            </summary>
            <param name="name">The name of the new insertion point.</param>
            <param name="point">The SourcePoint of the new insertion point.</param>
            <param name="options">Specifies options to use when creating the new insertion point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.StoreInsertionPoint(System.String,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Stores a new insertion point that can be used during text expansion. To use the insertion point,
            create a text expansion that contains a "GotoInsertionPoint" text command and pass the name
            of the insertion point as the "Name" parameter.
            </summary>
            <param name="name">The name of the new insertion point.</param>
            <param name="point">The SourcePoint of the new insertion point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.StoreInsertionPoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Stores a default insertion point that can be used during text expansion.
            </summary>
            <param name="point">The SourcePoint of the new insertion point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.RemoveInsertionPoint(System.String)">
            <summary>
            Removes a previously stored insertion point.
            </summary>
            <param name="name">The name of the insertion point to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ContainsInsertionPoint(System.String)">
            <summary>
            Determines if an insertion point exists with the specified name.
            </summary>
            <param name="name">The name of the insertion point to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetInsertionPoint(System.String)">
            <summary>
            Returns the current position of the insertion point identified by the given name.
            </summary>
            <param name="name">The name of the insertion point to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetInsertionPoint">
            <summary>
            Returns the current position of the default insertion point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.ClearInsertionPoints">
            <summary>
            Clears all previously stored insertion points. NOTE: This is called internally by the
            DXCore text expansion engine and should not be executed by DXCore plug-ins.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.GetChildFilePaths">
            <summary>
            Returns the file paths of any child items that belong to this TextDocument (if any). For example, if this 
            TextDocument represents a Windows Forms designer, this method will return the file path of the .resx or 
            .Designer.cs file. NOTE: This method is not recursive -- it only retrieves the file paths of the immediate children.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.HandleTextChange(DevExpress.CodeRush.Core.TextChangedEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="ea">Text changed event arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.BeginAnalysis">
            <summary>
            Prepares for read-only background-thread analysis of this document's
            file node. After analysis is complete, be sure to call EndAnalysis(), 
            ideally in a try/finally block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.EndAnalysis">
            <summary>
            Call this method to indicate that background thread analysis of this document's
            file node is complete. Used with BeginAnalysis.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.NewCompoundAction(System.String)">
            <summary>
            Creates a new compound action for this text document. While this compound action is open, any actions performed
            in this text document will be added to the undo stack as one action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.NewCompoundAction(System.String,System.Boolean)">
            <summary>
            Creates a new compound action for this text document. While this compound action is open, any actions performed
            in this text document will be added to the undo stack as one action.
            </summary>
            <param name="description">The name of this action that will appear in the undo stack.</param>
            <param name="saveSelection">If true, a special undo action will be added to the undo stack
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextDocument.LengthOfLine(System.Int32)">
            <summary>
            Returns the length of the specified line in characters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.VsTextFind">
            <summary>
            Returns the IVsTextFind interface for this text buffer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.CanRestoreEditPoints">
            <summary>
            Returns true if EditPoints can be restored after formatting in current document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.ActiveView">
            <summary>
            Gets the active TextView associated with this TextDocument.	Can return null if no TextViews are 
            available for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.ActiveViewSelection">
            <summary>
            Returns the TextViewSelection object associated with the active TextView of this text document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.InactiveView">
            <summary>
            Gets the first inactive TextView associated with this TextDocument.	Can return null if no TextViews are 
            available for this document, or if the only available TextView is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Aliases">
            <summary>
            Returns the reference aliases for this document, or null if this document's language does not 
            support using/import aliases.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.ClearFieldsOnExpanding">
            <summary>
            Defines if TextFields should be cleared before expanding the new fields.
            This property is for testing omly - to be able to compare result with expected value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.CompilerDirectives">
            <summary>
            Returns the compiler directives for this document, or null if this document's language does not support compiler directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.CompilerDirectiveRootNode">
            <summary>
            Returns the compiler directive root node for this document, or null if this document's language does not support
            compiler directives. The root node's children (accessed through its Nodes property) are the CompilerDirectives for
            this file. This root node itself, however, is not an actual CompilerDirective for this file (even though its type is
            CompilerDirective, it does not represent an actual CompilerDirective -- it is merely the parent of the
            CompilerDirectives in this file).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.EndPoint">
            <summary>
            Returns the edit point that is the location of the end of 
            the document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.FieldIsActive">
            <summary>
            True if a TextField is active in this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.FileNode">
            <summary>
            Returns the file node for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.FirstView">
            <summary>
            Gets the first view associated with this TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.HasUncommittedTextChanges">
            <summary>
            True if this document contains text changes on the active line that 
            have not been committed. Text changes are committed when the file is 
            saved, when the document deactivates, and when the Enter key is pressed
            (or when the caret otherwise leaves the active line).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.LastActiveField">
            <summary>
            Gets or sets the last active field for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.LastView">
            <summary>
            Gets the last view associated with this TextDocument. Visual Studio typically supports up to two views 
            into a buffer. The second view is created by dragging the splitter button just above the vertical 
            scrollbar.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.LineCount">
            <summary>
            Gets the number of lines in this TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Namespaces">
            <summary>
            Gets an enumerable MixedNamespaceCollection of all Namespaces declared in this TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.ParseState">
            <summary>
            Gets or sets parse state for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.NamespaceReferences">
            <summary>
            Returns the using/import references for this document, or null if this document's language does not support using/import references.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.QueuedEdits">
            <summary>
            A collection of SandboxEdit descendants that represent pending edits for 
            this document. You can place new insert, delete, and replace edit 
            operations into the edit queue using the QueueDelete, QueueInsert, and 
            QueueReplace methods. You can apply pending edits using the ApplyQueuedEdits
            method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Range">
            <summary>
            Returns the full range of this TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Regions">
            <summary>
            Returns the regions for this document, or null if this document's language does not support regions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.RegionRootNode">
            <summary>
            Returns the region root node for this document, or null if this document's language does not support
            regions. The root node's children (accessed through its Nodes property) are the RegionDirectives for
            this file. This root node itself, however, is not an actual RegionDirectives for this file (even though
            its type is RegionDirectives, it does not represent an actual RegionDirectives -- it is merely the parent
            of the regions in this file).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Selection">
            <summary>
            Returns the TextSelection Object associated with the 
            TextDocument object, either the active pane, or the top pane 
            if neither is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Size">
            <summary>
            Returns total size of document in characters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.SourceModelCache">
            <summary>
            The SourceModelCache for this TextDocument. Used to maintain parse status.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.StartPoint">
            <summary>
            Returns the TextPoint Object representing the beginning of the 
            text document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Strings">
            <summary>
            Returns the strings for this document, or null if this document's language does not support strings.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Text">
            <summary>
            Gets the entire text of this document as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.AllowEditsWhileDebugging">
            <summary>
            Indicates whether or not language service allows 
            writing to this text buffer during debugging.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.TextFieldCount">
            <summary>
            The number of TextFields inside this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.TextFields">
            <summary>
            A collection of TextFields for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.TextFieldTarget">
            <summary>
            A target for the TextFields in a document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.FinalTextFieldTarget">
            <summary>
            A final target for the TextFields in a document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.HasSplitView">
            <summary>
            Returns true if the TextView associated with this TextDocument is split into two views.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.PrimaryView">
            <summary>
            Returns the primary (top) view of the TextView split associated with this TextDocument. If the view is not split, 
            the TextView for this TextDOcument is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.SecondaryView">
            <summary>
            Returns the secondary (bottom) view of the TextView split associated with this TextDocument. If the view is not 
            split, null is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.LastActiveView">
            <summary>
            Returns the last active view of this TextDocument. If the TextDocument has a split view, the most recently 
            focused TextView in the split is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.Active">
            <summary>
            Gets the active TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.DevExpress#CodeRush#StructuralParser#IDocument#ActiveView">
            <summary>
            Gets the active TextView associated with this TextDocument.	Can return null if no TextViews are 
            available for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocument.DevExpress#CodeRush#StructuralParser#IDocument#InactiveView">
            <summary>
            Gets the first inactive ITextView associated with this TextDocument.	Can return null if no ITextViews are 
            available for this document, or if the only available ITextView is active.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSTextStreamReader.SetEndPosition(System.Int32)">
            <summary>
            Sets the _EndPosition field of this TextReader and ensures that it won't be set to a value that
            is greater than the size of the underlying IVsTextStream.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSTextStreamReader.SetInitialPositions(System.Int32,System.Int32)">
            <summary>
            Sets up the initial positions of this TextReader. NOTE: This is called
            by the constructors.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSTextStreamReader.GetSize">
            <summary>
            Gets the size of this TextReader's IVsTextStream.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSTextStreamReader.SetStream(Microsoft.VisualStudio.TextManager.Interop.IVsTextStream)">
            <summary>
            Sets the IVsTextStream instance this TextReader uses.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSTextStreamReader.OffsetSubStream(System.Int32,System.Int32)">
            <summary>
            Moves the position of this reader to the specified line and character offset.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocumentReader.StartLine">
            <summary>
            Gets the starting line of the source that was parsed. If the entire document 
            was parsed, will return 1. Otherwise, if a segment of the document was 
            parsed, this property will return the line number that started the parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocumentReader.StartColumn">
            <summary>
            Gets the starting column of the source that was parsed. If the entire 
            document was parsed, will return 1. Otherwise, if a segment of the document 
            was parsed, this property will return the column number on the first line 
            that started the parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextDocumentReader.DevExpress#CodeRush#StructuralParser#ISourceReader#IsDocumentReader">
            <summary>
            Returns true if this reader works directly with VS document.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ExpansionBuilder">
            <summary>
            Provides a high-level mechanism to create and expand DXCore text expansions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AppendText(System.String)">
            <summary>
            Appends the specified text onto the end of the internal _Builder instance.
            </summary>
            <param name="text">The text string to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddFileBase">
            <summary>
            Adds a "FileBase" string provider to this text expansion. When expanded, the base name (file 
            name without the file extension) of the current file will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddFileName">
            <summary>
            Adds a "FileName" string provider to this text expansion. When expanded, the file name of the
            current file will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddFilePath">
            <summary>
            Adds a "FilePath" string provider to this text expansion. When expanded, the directory path of the
            current file will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddField(System.String,System.String)">
            <summary>
            Inserts a text field at the caret position with the specified text.
            </summary>
            <param name="text">The text of the text field to insert.</param>
            <param name="hint">The hint to display when the text field is active.</param>
            <remarks>Adds a "FieldStart/FieldEnd" TextCommands to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddLink(System.String)">
            <summary>
            Inserts a linked identifier at the caret position with the specified text. Any other linked 
            identifiers in this expansion with the same text will be connected to this one.
            </summary>
            <param name="text">The text of the linked identifier to insert.</param>
            <remarks>Adds a "Link" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddMemberName">
            <summary>
            Adds a "Member" string provider to this text expansion. When expanded, the name of the current
            member (method, property or field) will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddProjectFileName">
            <summary>
            Adds a "ProjectFileName" string provider to this text expansion. When expanded, the file name of the
            curent project will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddProjectName">
            <summary>
            Adds a "ProjectName" string provider to this text expansion. When expanded, the name of the
            current project will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddSelectedLink(System.String)">
            <summary>
            Inserts a linked identifier at the caret position with the specified text, and makes 
            sure this linked identifier is selected at the end of the expansion. Any other linked 
            identifiers in this expansion with the same text will be connected to this one.
            </summary>
            <param name="text">The text of the linked identifier to insert.</param>
            <remarks>Adds a "Link" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddSelectedField(System.String,System.String)">
            <summary>
            Inserts a text field at the caret position with the specified text, and makes 
            sure this text field is selected at the end of the expansion.
            </summary>
            <param name="text">The text of the text field to insert.</param>
            <param name="hint">The hint to display when the text field is active.</param>
            <remarks>Adds a "FieldStart/FieldEnd" TextCommands to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddSolutionFileName">
            <summary>
            Adds a "SolutionFileName" string provider to this text expansion. When expanded, the file name of the
            current solution will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddSolutionName">
            <summary>
            Adds a "SolutionName" string provider to this text expansion. When expanded, the name of the
            current solution will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddStringProvider(System.String)">
            <summary>
            Adds an encoded string provider to the end of this text expansion.
            </summary>
            <param name="name">The name of the string provider to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddStringProvider(System.String,System.String[])">
            <summary>
            Adds an encoded string provider with custom parameters to the end of this text expansion.
            </summary>
            <param name="name">The name of the string provider to add.</param>
            <param name="parameters">An array of string parameters for the TextCommand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddText(System.String)">
            <summary>
            Inserts the specified string during expansion.
            </summary>
            <param name="value">The System.String to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddText(System.String,System.Object[])">
            <summary>
            Inserts a formatted string, which contains zero or more format specifications, during 
            expansion. Each format specification is replaced by the string representation of a 
            corresponding object argument.
            </summary>
            <param name="format">A string containing zero or more format specifications.</param>
            <param name="args">An array of objects to format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddTextCommand(System.String)">
            <summary>
            Adds an encoded TextCommand to the end of this text expansion.
            </summary>
            <param name="name">The name of the TextCommand to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddTextCommand(System.String,System.String[])">
            <summary>
            Adds an encoded TextCommand with custom parameters to the end of this text expansion.
            </summary>
            <param name="name">The name of the TextCommand to add.</param>
            <param name="parameters">An array of string parameters for the TextCommand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddTypeName">
            <summary>
            Adds a "Type" string provider to this text expansion. When expanded, the name of the current
            type (class, struct or interface) will be inserted at this position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AddVariable(System.String)">
            <summary>
            Adds a "Get" string provider to this text expansion that inserts the value of the specified
            named variable that was previously initialized with SetVariable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.AnchorSelection">
            <summary>
            Sets the position of the text selection anchor point after expansion.
            </summary>
            <remarks>Adds a "BlockAnchor" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Clear">
            <summary>
            Clears this text expansion.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.DeclareNamespaceReferences(System.String[])">
            <summary>
            Before expansion, the specified namespaces will be declared at the top the of the active document.
            </summary>
            <param name="namespaces">An array of namespaces to be declared.</param>
            <remarks>Adds "AddNamespace" TextCommands to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.DropHardMarker">
            <summary>
            After expansion, a DXCore hard marker will be dropped at this position.
            </summary>
            <remarks>Adds a "HardMarker" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.DropMarker">
            <summary>
            After expansion, a DXCore marker will be dropped at this position.
            </summary>
            <remarks>Adds a "Marker" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand">
            <summary>
            Expands this instance in a TextDocument at the caret
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Expands this instance in a TextDocument at the caret
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="document">A TextDocument to expand in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Expands this instance in a TextDocument at the specified insertion point
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="insertionPoint">A SourcePoint to expand at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(System.String)">
            <summary>
            Expands this instance in a TextDocument at the caret
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="actionDescription">A description of the action to be performed. If specified, an undo unit
            will be wrapped around this expansion automatically with the specified name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Expands this instance in a TextDocument at the specified insertion point
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="document">A TextDocument to expand in.</param>
            <param name="insertionPoint">A SourcePoint to expand at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Expands this instance in a TextDocument at the caret
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="document">A TextDocument to expand in.</param>
            <param name="actionDescription">A description of the action to be performed. If specified, an undo unit
            will be wrapped around this expansion automatically with the specified name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Expands this instance in a TextDocument at the specified insertion point
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="insertionPoint">A SourcePoint to expand at.</param>
            <param name="actionDescription">A description of the action to be performed. If specified, an undo unit
            will be wrapped around this expansion automatically with the specified name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.Expand(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Expands this instance in a TextDocument at the specified insertion point
            and returns a SourceRange representing the coordinates of
            the newly expanded text.
            </summary>
            <param name="document">A TextDocument to expand in.</param>
            <param name="insertionPoint">A SourcePoint to expand at.</param>
            <param name="actionDescription">A description of the action to be performed. If specified, an undo unit
            will be wrapped around this expansion automatically with the specified name.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetLink(System.String)">
            <summary>
            Gets a Link TextCommand for the specified identifier.
            </summary>
            <param name="identifier">The identifier to link.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetSelectedLink(System.String)">
            <summary>
            Gets code needed to inside a Linked Identifier that is selected after expansion completes.
            </summary>
            <param name="text">The text to link.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetField(System.String,System.String)">
            <summary>
            Embeds the specified text into FieldStart/FieldEnd TextCommands.
            </summary>
            <param name="text">The text to embed.</param>
            <param name="hint">The hint to display when the text field is active.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetSelectedField(System.String,System.String)">
            <summary>
            Gets code needed to inside a Linked Identifier that is selected after expansion completes.
            </summary>
            <param name="text">The text to link.</param>
            <param name="hint">The hint to display when the text field is active.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetStringProvider(System.String)">
            <summary>
            Constructs an encoded StringProvider and returns it as a string.
            </summary>
            <param name="name">The name of the StringProvider to construct.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetStringProvider(System.String,System.String[])">
            <summary>
            Constructs an encoded StringProvider and returns it as a string.
            </summary>
            <param name="name">The name of the StringProvider to construct.</param>
            <param name="parameters">An array of string parameters for the StringProvider.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetTextCommand(System.String)">
            <summary>
            Constructs an encoded TextCommand and returns it as a string.
            </summary>
            <param name="name">The name of the TextCommand to construct.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetTextCommand(System.String,System.String[])">
            <summary>
            Constructs an encoded TextCommand and returns it as a string.
            </summary>
            <param name="name">The name of the TextCommand to construct.</param>
            <param name="parameters">An array of string parameters for the TextCommand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.GetVariable(System.String)">
            <summary>
            Returns a StringProvider that will be replaced with the specified variable.
            </summary>
            <param name="name">The name of the variable to get. This must match the name of a variable previously assigned with the Set TextCommand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.PasteClipboard">
            <summary>
            Inserts the current contents of the clipboard at this position.
            </summary>
            <remarks>Adds a "Paste" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.PositionCaret">
            <summary>
            Sets the position of the caret after expansion. Use this with SetAnchorPosition if a 
            selection is desired.
            </summary>
            <remarks>Adds a "Caret" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.SetVariable(System.String,System.String)">
            <summary>
            Adds a "Set" string provider to this text expansion. This stores a value in a custom named variable.
            Use InsertVariable to insert the value when text is expanded.
            </summary>
            <param name="name">A unique name for the custom variable.</param>
            <param name="value">The value to set the custom variable to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.ShowIntellisense">
            <summary>
            Displays Visual Studio's Intellisense window at this position after expansion.
            </summary>
            <remarks>Adds a "CompleteWord" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.ShowParameterTooltip">
            <summary>
            Displays Visual Studio's parameter tip window at this position after expansion.
            </summary>
            <remarks>Adds a "ParameterInfo" TextCommand to this text expansion.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ExpansionBuilder.ToString">
            <summary>
            Converts this text expansion to a System.String.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.BlockAnchor">
            <summary>
            Gets a BlockAnchor TextCommand that will determine the anchor location of a selection, after 
            text expansion has completed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.Caret">
            <summary>
            Gets a Caret TextCommand that will determine where the caret is placed after 
            text expansion has completed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.Clipboard">
            <summary>
            Gets a TextCommand that will be replaced with the contents of the clipboard when expanded.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.CompleteWord">
            <summary>
            Gets a CompleteWord TextCommand, useful for bringing up Intellisense at the caret position after 
            text expansion is complete.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.FileBase">
            <summary>
            The base name (file name without the file extension) of the current file as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.FileName">
            <summary>
            The file name of the active document, as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.FilePath">
            <summary>
            The path of the current file as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.FieldStart">
            <summary>
            The field start text command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.FieldEnd">
            <summary>
            The field start text command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.HardMarker">
            <summary>
            Gets a HardMarker TextCommand, useful for dropping markers inside expanded text. HardMarkers
            (red) move with the code when the line they are on is edited. Normal Markers (blue) are 
            removed from the line when it's changed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.Marker">
            <summary>
            Gets a Marker TextCommand, useful for dropping markers inside expanded text. HardMarkers
            (red) move with the code when the line they are on is edited. Normal Markers (blue) are 
            removed from the line when it's changed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.Member">
            <summary>
            The name of the active member as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.ParameterInfo">
            <summary>
            Returns a TextCommand that will display parameter tool tip information at 
            the location where this TextCommand is expanded.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.ProjectFileName">
            <summary>
            Gets the file name of the active project, as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.ProjectName">
            <summary>
            The name of the active project as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.SolutionFileName">
            <summary>
            The file name of the solution as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.SolutionName">
            <summary>
            The name of the solution as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.TypeName">
            <summary>
            The name of the current type (class, struct or interface) as a TextCommand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.Format">
            <summary>
            Gets or sets a value that determines whether the text will be formatted by Visual Studio 
            after this is expanded. The default value is true.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ExpansionBuilder.Text">
            <summary>
            Gets the text of this ExpansionBuilder.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ITextExpansionEngine.Insert(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.Boolean,System.Boolean)">
            <summary>
            Inserts text containing encoded text commands at the active cursor point. 
            </summary>
            <param name="textDoc">The TextDocument to expand the template in.</param>
            <param name="insertionPos">The postion at which the template should be expanded.</param>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded text commands.</param>
            <param name="allowCancel">If true, allows text commands to cancel the insertion of text.</param>
            <param name="format">If true, the inserted template will be formatted using the current language service's formatter.</param>
            <returns>Returns a SourceRange instance reflecting the range of the expanded text.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITextExpansionEngine.IsExpanding">
            <summary>
            Determines whether the template engine is currently expanding a template or not.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ITextExpansionEngine.CurrentHelper">
            <summary>
            Internal property used by the DXCore. Do you not use.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextExpansionHelper">
            <summary>
            TextExpansionHelper is used internally by BeforeTemplateExpandEventArgs, AfterTemplateExpandEventArgs 
            and ExecuteTextCommandEventArgs to provide functionality useful during a text expansion. Do
            not instantiate this class and use it as it may have unexpected results.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionHelper.GetPosition(System.String)">
            <summary>
            Retrieves an EditPoint representing a previously stored position by its unique name.
            </summary>
            <param name="name">The name of the EditPoint to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionHelper.RemovePosition(System.String)">
            <summary>
            Removes a previous stored position.
            </summary>
            <param name="name">The unique name of the position to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionHelper.StorePosition(System.String)">
            <summary>
            Stores the current position of the caret. This is generally used if something meaningful
            should happen *after* the template is fully expanded. For example, the DXCore uses this
            to select text and restore the caret position after expansion.
            </summary>
            <param name="name">A unique name by which an EditPoint representing the stored position
            can be retrieved.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionHelper.StorePosition(System.String,System.Boolean)">
            <summary>
            Stores the current position of the caret. This is generally used if something meaningful
            should happen *after* the template is fully expanded. For example, the DXCore uses this
            to select text and restore the caret position after expansion.
            </summary>
            <param name="name">A unique name by which an EditPoint representing the stored position
            can be retrieved.</param>
            <param name="anchorable">If true, the EditPoint will have its IsAnchorable property
            set to true.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.Insert(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.Boolean)">
            <summary>
            Inserts text containing encoded TextCommands and StringProviders at the active cursor point
            in the specified TextDocument. 
            Multiline text is left-aligned to the active cursor column. String providers embedded within the text
            </summary>
            <param name="textDoc">The TextDocument to insert the expansion into.</param>
            <param name="insertionPos">The position at which the template should be expanded. If empty, the 
            current caret position is used.</param>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded 
            TextCommands and StringProviders.</param>
            <param name="allowCancel">If true, allows TextCommands to cancel the insertion of text.</param>
            <returns>The source range that encompasses the expansion.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.Insert(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Inserts text containing encoded TextCommands and StringProviders at the active cursor point
            in the specified TextDocument. Multi-line text is left-aligned to the active cursor column.
            </summary>
            <param name="textDoc">The TextDocument to insert the expansion into.</param>
            <param name="insertionPos">The position at which the template should be expanded. If empty, the 
            current caret position is used.</param>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded 
            TextCommands and StringProviders.</param>
            <returns>The source range that encompasses the expansion.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.Insert(System.String,System.Boolean,System.Boolean)">
            <summary>
            Inserts text containing encoded text commands at the active cursor point. Implementors should call 
            InsertExpansion(expansion, ""/*name*/, false/*allowCancel*/);
            </summary>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded text commands.</param>
            <param name="allowCancel">If true, allows text commands to cancel the insertion of text.</param>
            <param name="format">If true, the inserted template will be formatted using the current language service's formatter.</param>
            <returns>Returns a SourceRange instance reflecting the range of the expanded text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.Insert(System.String,System.Boolean)">
            <summary>
            Inserts text containing encoded text commands at the active cursor point. Multiline text is left-aligned 
            to the active cursor column. Implementors should call InsertExpansion(aTemplateExpansion, ""/*aTemplateName*/, false/*aAllowCancel*/);
            </summary>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded text commands.</param>
            <param name="format">If true, the inserted template will be formatted using the current language service's formatter.</param>
            <returns>Returns the SourceRange of the inserted text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.Insert(System.String)">
            <summary>
            Inserts text containing encoded text commands at the active cursor point. Multiline text is left-aligned 
            to the active cursor column. Implementors should call InsertExpansion(aTemplateExpansion, ""/*aTemplateName*/, false/*aAllowCancel*/);
            </summary>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded text commands.</param>
            <returns>Returns the SourceRange of the inserted text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.Insert(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,System.Boolean,System.Boolean)">
            <summary>
            Inserts text containing encoded text commands at the active cursor point. 
            </summary>
            <param name="textDoc">The TextDocument to expand the template in.</param>
            <param name="insertionPos">The postion at which the template should be expanded.</param>
            <param name="expansion">Text to insert at the cursor. This text can contain embedded text commands.</param>
            <param name="allowCancel">If true, allows text commands to cancel the insertion of text.</param>
            <param name="format">If true, the inserted template will be formatted using the current language service's formatter.</param>
            <returns>Returns a SourceRange instance reflecting the range of the expanded text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextExpansionServices.EscapeExpansionCharacters(System.String)">
            <summary>
            Replaces text expansion special characters with string providers.
            This method might be used to preserve text expansion in it's original form.
            </summary>
            <returns>
            String with replaced text expansion characters.
            </returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextExpansionServices.Variables">
            <summary>
            Provides get/set access to string variables used during expansion. String variables can be added by text expansions using the Set 
            StringProvider, and queried using the Get StringProvider (as well as being set and retrieved programmatically through this 
            property).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextExpansionServices.CurrentHelper">
            <summary>
            Internal property used by the DXCore. Do you not use.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.TextMarkers.ITextMarker.Release">
            <summary>
            Use to release this text marker when it is no longer needed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.TextMarkers.ITextMarker.Show">
            <summary>
            Shows this text marker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.TextMarkers.ITextMarker.Hide">
            <summary>
            Hides this text marker.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.TextMarkers.ITextMarker.GetDisplayName">
            <summary>
            Returns marker type display name.
            </summary>
            <returns>Returns marker type display name.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.TextMarkers.ITextMarker.UnregisterMarkerType">
            <summary>
            Use to unregister the Marker Type of this marker from VS TextMarkerManager cache.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.TextMarkers.ITextMarker.Range">
            <summary>
            Gets or sets the range of this text marker.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.TextMarkers.ITextMarker.TooltipText">
            <summary>
            Gets or sets the tooltip text for this text marker.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.TextMarkers.ITextMarker.PreventToolTipShowing">
            <summary>
            Set this flag if you want to prevent showing hint for text marker
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.TextMarkers.ITextMarker.IsReleased">
            <summary>
            Returns true if marker is already released.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.TextMarkers.ITextMarker.MarkerObject">
            <summary>
            Gets underlying marker object
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.TextMarkers.ITextMarker.TextMarkerType">
            <summary>
            Gets TextMarkerType
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.TextMarkers.ITextMarker.Released">
            <summary>
            Raised when text marker is released.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.TextMarkers.ITextMarker.Invalidated">
            <summary>
            Raised when the text associated with a marker is 
            deleted by a user action.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.TextMarkers.ITextMarker.SpanReloaded">
            <summary>
            Signals that the text under the marker has been altered but the
            marker has not been deleted.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.TextMarkers.ITextMarker.BeforeBufferClose">
            <summary>
            Raised when the text buffer is about to close.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextSelection">
            <summary>
            TextSelection is a CodeRush wrapper around EnvDTE.TextSelection, 
            providing additional methods and properties to make it easier to 
            manipulate text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PadToVirtualSpace">
            <summary>
            Pads the end of the current line with spaces to fill out any virtual space between the end of the line and the cursor.
            Does not change the line if the cursor is not in virtual space.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.InsideVirtualSpace">
            <summary>
            Determines if the cursor is inside virtual space.
            </summary>
            <returns>Returns true if the ActivePoint is inside virtual space.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.ExtendToWholeLines">
            <summary>
            Extends the selection to include complete lines. If nothing is selected, then no change occurs. If the last line in the selection contains no selected text (e.g., the anchor or active point is at the start of the line), then that line is not included in the selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartsWith(System.String,System.Boolean)">
            <summary>
            Returns true if every line in this text selection starts with the specified prefix.
            </summary>
            <param name="prefix">The text to look for at the beginning of each line.</param>
            <param name="ignoreWhiteSpace">Determines whether white space will be ignored at the beginning of each line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartsWith(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns true if every line in this text selection starts with the specified prefix.
            </summary>
            <param name="prefix">The text to look for at the beginning of each line.</param>
            <param name="ignoreWhiteSpace">Determines whether white space will be ignored at the beginning of each line.</param>
            <param name="ignoreEmptyLines">Determines whether empty lines will be ignored.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartsWith(System.String)">
            <summary>
            Returns true if every line in this text selection starts with the specified prefix.
            </summary>
            <param name="prefix">The text to look for at the beginning of each line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.AddPrefix(System.String,System.Boolean)">
            <summary>
            Adds the specified prefix to the beginnning of each line in the text selection.
            </summary>
            <param name="prefix">The text to prepend to each line.</param>
            <param name="ignoreWhiteSpace">Determines whether white space will be ignored at the beginning of each line. If true, then the prefix will be inserted at the end of any leading white space on each line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.AddPrefix(System.String)">
            <summary>
            Adds the specified prefix to the beginnning of each line in the text selection.
            </summary>
            <param name="prefix">The text to prepend to each line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.RemovePrefix(System.String,System.Boolean)">
            <summary>
            Removes the specified prefix from the beginnning of each line in the text selection.
            </summary>
            <param name="prefix">The text to remove from each line. Lines without this text are unaffected.</param>
            <param name="ignoreWhiteSpace">Determines whether white space will be ignored at the beginning of each line. If true, then way space leading the prefix will be ignored. If false, the prefix will only be removed if it is found at the beginning of the line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.RemovePrefix(System.String)">
            <summary>
            Removes the specified prefix from the beginnning of each line in the text selection.
            </summary>
            <param name="prefix">The text to remove from the beginning of each line. Only lines starting with this text will be changed.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Format">
            <summary>
            Formats the selection
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Format(System.Boolean)">
            <summary>
            Formats the selection.
            </summary>
            <param name="keepSelection">Specifies whether the current selection should be persisted
            after the text is formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Replace(System.String)">
            <summary>
            Replaces the entire selection with the specified text.
            </summary>
            <param name="text">The replacement text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Replace(System.String,System.Boolean)">
            <summary>
            Replaces the entire selection with the specified text, and optionally keeps the selection active.
            </summary>
            <param name="text">The replacement text.</param>
            <param name="keepSelection">Specifies whether the new replacement text should be selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified line range.
            </summary>
            <param name="startLine">The starting line number to select.</param>
            <param name="stopLine">The last line number to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Select(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="range">The SourceRange to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Select(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="start">The starting SourcePoint of the range to select.</param>
            <param name="end">The ending SourcePoint of the range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Select(EnvDTE.TextPoint,EnvDTE.TextPoint)">
            <summary>
            Selects the range between the specified TextPoints.
            </summary>
            <param name="anchorPoint">The anchor of the selection.</param>
            <param name="activePoint">The cursor position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="startLine">The starting line number of the range to select.</param>
            <param name="startOffset">The column offset on the first line of the range to select.</param>
            <param name="endLine">The ending line number of the range to select.</param>
            <param name="endOffset">The column offset on the last line of the range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectDisplayRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified display range.
            </summary>
            <param name="startLine">The starting line number of the range to select.</param>
            <param name="startDisplayColumn">The display column on the first line of the range to select.</param>
            <param name="endLine">The ending line number of the range to select.</param>
            <param name="endDisplayColumn">The display column on the last line of the range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Backspace(System.Int32)">
            <summary>
            Deletes the specified number of characters to the left of the cursor.
            </summary>
            <param name="Count">Number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Cancel">
            <summary>
            Cancels the selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.ChangeCase(EnvDTE.vsCaseOptions)">
            <summary>
            Changes the case of the selected text.
            </summary>
            <param name="How">One of vsCaseOptionsLowerCase, vsCaseOptionsUpperCase, or vsCaseOptionsCapitalize.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.CharLeft(System.Boolean,System.Int32)">
            <summary>
            Moves the object the specified number of characters to the left.
            </summary>
            <param name="Extend">Determines whether the moved text is collapsed or not.</param>
            <param name="Count">Represents the number of characters to move to the left.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.CharRight(System.Boolean,System.Int32)">
            <summary>
            Moves the object the specified number of characters to the right.
            </summary>
            <param name="Extend">Determines whether the moved text is collapsed or not.</param>
            <param name="Count">Represents the number of characters to move to the Right.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.ClearBookmark">
            <summary>
            Clears any unnamed bookmarks in the current text buffer line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Collapse">
            <summary>
            Collapses the selected text to the active point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Copy">
            <summary>
            Copies the selected text to the clipboard.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Cut">
            <summary>
            Copies the selected text to the clipboard and deletes it from its original location.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Delete(System.Int32)">
            <summary>																																							 
            Deletes the selected text or a specifed number of characters to the right of the ActivePoint.
            </summary>
            <param name="Count">If no text is selected, then Delete deletes Count characters to the right of the active end point. If Count is negative, then Delete performs like the DeleteLeft Method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.DeleteLeft(System.Int32)">
            <summary>
            Deletes a specified number of characters to the left of the ActivePoint.
            </summary>
            <param name="Count">Represents the number of characters to delete. If the value of Count is negative, then DeleteLeft performs like the Delete method</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.DeleteWhitespace(EnvDTE.vsWhitespaceOptions)">
            <summary>
            Deletes the empty characters (white space) horizontally or vertically around the current location in the text buffer.
            </summary>
            <param name="Direction">A vsWhitespaceOptions constant that determines how and where to remove empty spaces.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.DestructiveInsert(System.String)">
            <summary>
            Inserts text, overwriting the existing text.
            </summary>
            <param name="Text">Represents the text to insert. Newline characters cause the text selection's active end to move to the beginning of the next line, possibly inserting indentation depending on the language used in the text document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.EndOfDocument(System.Boolean)">
            <summary>
            Moves the object to the end of the document.
            </summary>
            <param name="Extend">If Extend is True, then only the active end of the selected text is moved. Otherwise, the selected text is collapsed (no selection) and the caret is positioned at the end of the document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.EndOfLine(System.Boolean)">
            <summary>
            Moves the selection to the end of the current line.
            </summary>
            <param name="Extend">If Extend is True, then only the active end of the selected text is moved. Otherwise, the selected text is collapsed (e.g., no selection) and positioned at the end of the document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.FindPattern(System.String,System.Int32,EnvDTE.TextRanges@)">
            <summary>
            Searches for the given pattern from the active point to the end of the document. The return value indicates whether the pattern is found. If the pattern is found, the edit point is moved to the beginning of the match. Otherwise, the edit location is unchanged.
            </summary>
            <param name="Pattern">The text to find.</param>
            <param name="Flags">One or more vsFindOptions constants (one of vsFindOptionsBackwards, vsFindOptionsFromStart, vsFindOptionsKeepModifiedDocumentsOpen, vsFindOptionsMatchCase, vsFindOptionsMatchInHiddenText, vsFindOptionsMatchWholeWord, vsFindOptionsNone, vsFindOptionsRegularExpression, vsFindOptionsSearchSubfolders, or vsFindOptionsWildcards).</param>
            <param name="Tags">If the matched pattern is a regular expression containing tagged subexpressions, then Tags argument contains a collection of TextRange Objects, one for each tagged sub-expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.FindText(System.String,System.Int32)">
            <summary>
            Searches for the given pattern from the active point to the end of the document. The return value indicates whether the pattern is found. If the pattern is found, the edit point is moved to the beginning of the match. Otherwise, the edit location is unchanged.
            </summary>
            <param name="Pattern">The text to find.</param>
            <param name="Flags">One or more vsFindOptions constants (one of vsFindOptionsBackwards, vsFindOptionsFromStart, vsFindOptionsKeepModifiedDocumentsOpen, vsFindOptionsMatchCase, vsFindOptionsMatchInHiddenText, vsFindOptionsMatchWholeWord, vsFindOptionsNone, vsFindOptionsRegularExpression, vsFindOptionsSearchSubfolders, or vsFindOptionsWildcards).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.GotoLine(System.Int32,System.Boolean)">
            <summary>
            Moves to the beginning of the indicated line and selects the line if requested.
            </summary>
            <param name="Line">The line number to go to, starting with one.</param>
            <param name="Select">Indicates whether the target line should be selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Indent(System.Int32)">
            <summary>
            Indents the selected lines by the given number of indentation levels.
            </summary>
            <param name="Count">The number of display indent levels to indent each selected line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Insert(System.String,System.Int32)">
            <summary>
            Inserts the specified Text at the cursor.
            </summary>
            <param name="Text">The text to insert.</param>
            <param name="Flags">A vsInsertFlags constant indicating how to treat the inserted text (one of vsInsertFlagsCollapseToEnd, vsInsertFlagsCollapseToStart, vsInsertFlagsContainNewText, vsInsertFlagsInsertAtEnd, or vsInsertFlagsInsertAtStart).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.InsertFromFile(System.String)">
            <summary>
            Inserts the contents of the specified file at the current location in the buffer.
            </summary>
            <param name="File">The name of the file to insert into the text buffer.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineDown(System.Boolean,System.Int32)">
            <summary>
            Moves the selection (caret) down a specified number of lines. If the end of the document is encountered before Count lines, then the position remains at the end of the document. LineDown tries to match the display column from the line of origin to the target line, rounding down a character position, if necessary, if it ends up in the middle of a tab on the target line.
            </summary>
            <param name="Extend">Determines whether the selection is extended to include this new line. </param>
            <param name="Count">Indicates how many lines to move down.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineUp(System.Boolean,System.Int32)">
            <summary>
            Moves the selection (caret) up a specified number of lines. If the beginning of the document is encountered before Count lines, then the position remains at the beginning of the document. LineUp tries to match the display column from the line of origin to the target line, rounding down a character position, if necessary, if it ends up in the middle of a tab on the target line.
            </summary>
            <param name="Extend">Determines whether the selection is extended to include this new line. </param>
            <param name="Count">Indicates how many lines to move up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveTo(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the active point to the specified line and column.
            </summary>
            <param name="Line">The line number, starting at one, from the beginning of the buffer. </param>
            <param name="Column">Represents the column, starting at one, that is the new column location.</param>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToAbsoluteOffset(System.Int32,System.Boolean)">
            <summary>
            Moves the active point to the given 1-based absolute character offset, optionally extending the selection to include that offset.
            </summary>
            <param name="Offset">A character index from the start of the document, starting at one.</param>
            <param name="Extend">Determines whether the current selection should be extended to the offset. If Extend is True, then the active end of the selection moves to the location while the anchor end remains in place. If false, both ends are moved to the specified location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToDisplayColumn(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the active point to the indicated display column. This method accepts the column value as though the editor were 
            in virtual space mode. If the column offset is in the middle of a tab character in the line, the active point is moved 
            to the position immediately preceding the tab. If the values of Line or Column are zero, then the active point remains 
            at the current line number and/or column number.
            </summary>
            <param name="Line">The line number, starting at one, from the beginning of the buffer, or alternatively a vsGotoLineOptions 
            constant (either vsGotoLineOptionsLast or vsGotoLineOptionsFirst). </param>
            <param name="Column">Represents the virtual display column, starting at one, that is the new column location.</param>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToLineAndOffset(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the ActivePoint to the given position. If the value of Offset is beyond the last character of the line, the selection includes the end of the line.
            </summary>
            <param name="Line">The line number, starting at one, from the beginning of the buffer, or alternatively a vsGotoLineOptions constant (either vsGotoLineOptionsLast or vsGotoLineOptionsFirst). </param>
            <param name="Offset">The character index position in the line, starting at one. </param>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToPoint(EnvDTE.TextPoint,System.Boolean)">
            <summary>
            Moves the active point to the given position.
            </summary>
            <param name="Point">The location to move the caret.</param>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.NewLine(System.Int32)">
            <summary>
            Inserts one or more line break characters at the ActivePoint.
            </summary>
            <param name="Count">Represents the number of line break characters to insert. If the value of Count is negative, or greater than or equal to 10,000, then NewLine fails.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.NextBookmark">
            <summary>
            Moves the insertion point to the next bookmark. Returns true if successful.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.OutlineSection">
            <summary>
            Creates an outlining section based on the current selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PadToColumn(System.Int32)">
            <summary>
            Fills the current line in the buffer with empty characters (white space) to the given column. PadToColumn inserts tabs and spaces, according to global settings, from the selection's display column to the specified display column. If the active end of the selection already lies beyond the specified column, PadToColumn does nothing. The selection immediately follows the inserted white space and is collapsed.
            </summary>
            <param name="Column">The number of columns to pad, starting at one.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PageDown(System.Boolean,System.Int32)">
            <summary>
            Moves the active point a specified number of pages down in the document, scrolling the view.
            </summary>
            <param name="Extend">Determines whether the moved text is collapsed or not.</param>
            <param name="Count">Represents the number of pages to move up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PageUp(System.Boolean,System.Int32)">
            <summary>
            Moves the active point a specified number of pages up in the document, scrolling the view.
            </summary>
            <param name="Extend">Determines whether the moved text is collapsed or not.</param>
            <param name="Count">Represents the number of pages to move up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Paste">
            <summary>
            Inserts the clipboard contents at the current location.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PreviousBookmark">
            <summary>
            Moves the text selection to the location of the previous bookmark in the document. Returns true if the selection is moved.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.ReplacePattern(System.String,System.String,System.Int32,EnvDTE.TextRanges@)">
            <summary>
            Replaces matching text throughout a selection.
            </summary>
            <param name="Pattern">The text to find.</param>
            <param name="Replace">The text to replace each occurrence of Pattern with.</param>
            <param name="Flags">A vsFindOptions constant indicating the behavior of ReplacePattern, such as how to search, where to begin the search, whether to search forward or backward, the case-sensitivity, and so forth.</param>
            <param name="Tags">A TextRanges collection. If the matched text pattern is a regular expression and contains tagged subexpressions, then Tags contains a collection of EditPoint objects, one for each tagged subexpression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.ReplaceText(System.String,System.String,System.Int32)">
            <summary>
            Replaces the specified text with the given text, within the selection.
            </summary>
            <param name="Pattern">The text to find.</param>
            <param name="Replace">The text to replace each occurrence of Pattern with.</param>
            <param name="Flags">A vsFindOptions constant indicating the behavior of ReplacePattern, such as how to search, where to begin the search, whether to search forward or backward, the case-sensitivity, and so forth.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectAll">
            <summary>
            Selects the entire document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectLine">
            <summary>
            Selects the line containing the active point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SetBookmark">
            <summary>
            Sets an unnamed bookmark on the current line in the buffer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SmartFormat">
            <summary>
            Re-indents or formats the selected text, including the lines the anchor and active ends are on, according to global settings for smart indenting. SmartFormat causes the selection to include the complete lines at the ends.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartOfDocument(System.Boolean)">
            <summary>
            Moves the selected text to the beginning of the document.
            </summary>
            <param name="Extend">Determines whether the selection is extended to the beginning of the document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartOfLine(EnvDTE.vsStartOfLineOptions,System.Boolean)">
            <summary>
            Moves the ActivePoint to the beginning of the current line.
            </summary>
            <param name="Where">A vsStartOfLineOptions constant (vsStartOfLineOptionsFirstColumn or vsStartOfLineOptionsFirstText) representing where the ActivePoint should be positioned.</param>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SwapAnchor">
            <summary>
            Exchanges the position of the active and the anchor points.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Tabify">
            <summary>
            Converts contiguous spaces to tabs within the selected text according to the global setting for a tab's size.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Unindent(System.Int32)">
            <summary>
            Removes indents from the selected text by the number of indentation levels given.	This method does not perform smart formatting or remove indents for lines based on the context of the code. Tabs and characters are deleted and inserted as necessary to remove one indentation level according to the current global settings for tab and indent level size. Unindent behaves differently depending on whether the selected text is continuous or columnar. If it's continuous, indents are removed from all lines partially or completely within the selection at the first column. If it's a columnar selection, indents are removed from the selected text at the left edge of the selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Untabify">
            <summary>
            Converts all tabs to spaces within the selected text according to the global setting for a tab's size.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.WordLeft(System.Boolean,System.Int32)">
            <summary>
            Moves the ActivePoint left the specified number of words.
            </summary>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
            <param name="Count">The number of words to move past.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.WordRight(System.Boolean,System.Int32)">
            <summary>
            Moves the ActivePoint right the specified number of words.
            </summary>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
            <param name="Count">The number of words to move past.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Backspace">
            <summary>
            Deletes the character to the left of the cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Delete">
            <summary>																																							 
            Deletes the selected text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.EndOfLine">
            <summary>
            Moves the selection to the end of the current line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.GotoLine(System.Int32)">
            <summary>
            Moves the caret to the beginning of the indicated line and selects the line if requested.
            </summary>
            <param name="Line">The line number to go to, starting with one.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectLine(System.Int32)">
            <summary>
            Selects the specified line.
            </summary>
            <param name="Line">The line number to select, starting with one.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Indent">
            <summary>
            Indents the selection one indentation level.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Insert(System.String)">
            <summary>
            Inserts the specified Text at the cursor.
            </summary>
            <param name="Text">The text to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineDown(System.Boolean)">
            <summary>
            Moves the selection (caret) down one line.
            </summary>
            <param name="Extend">Determines whether the selection is extended to include this new line. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineDown(System.Int32)">
            <summary>
            Moves the selection (caret) down a specified number of lines.
            </summary>
            <param name="Count">Indicates how many lines to move down.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineDown">
            <summary>
            Moves the caret down one line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineUp(System.Boolean)">
            <summary>
            Moves the selection (caret) up one line.
            </summary>
            <param name="Extend">Determines whether the selection is extended to include this new line. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineUp(System.Int32)">
            <summary>
            Moves the selection (caret) up a specified number of lines.
            </summary>
            <param name="Count">Indicates how many lines to move up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.LineUp">
            <summary>
            Moves the caret up one line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the active point to the specified line and column.
            </summary>
            <param name="Line">The line number, starting at one, from the beginning of the buffer. </param>
            <param name="Column">Represents the column, starting at one, that is the new column location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToAbsoluteOffset(System.Int32)">
            <summary>
            Moves the active point to the given 1-based absolute character offset.
            </summary>
            <param name="Offset">A character index from the start of the document, starting at one.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToDisplayColumn(System.Int32,System.Int32)">
            <summary>
            Moves the active point to the indicated display column. This method accepts the column value as though the editor were in virtual space mode. If the column offset is in the middle of a tab character in the line, the active point is moved to the position immediately preceding the tab. If the values of Line or Column are zero, then the active point remains at the current line number and/or column number.
            </summary>
            <param name="Line">The line number, starting at one, from the beginning of the buffer, or alternatively a vsGotoLineOptions constant (either vsGotoLineOptionsLast or vsGotoLineOptionsFirst). </param>
            <param name="Column">Represents the virtual display column, starting at one, that is the new column location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToLineAndOffset(System.Int32,System.Int32)">
            <summary>
            Moves the ActivePoint to the given position. If the value of Offset is beyond the last character of the line, the document moves to the end of the line.
            </summary>
            <param name="Line">The line number, starting at one, from the beginning of the buffer, or alternatively a vsGotoLineOptions constant (either vsGotoLineOptionsLast or vsGotoLineOptionsFirst). </param>
            <param name="Offset">The character index position in the line, starting at one. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.MoveToPoint(EnvDTE.TextPoint)">
            <summary>
            Moves the active point to the given position.
            </summary>
            <param name="Point">The location to move the caret.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.NewLine">
            <summary>
            Inserts a line break character at the ActivePoint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PageDown(System.Boolean)">
            <summary>
            Moves the active point down one page in the document, scrolling the view.
            </summary>
            <param name="Extend">Determines whether the moved text is collapsed or not.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PageDown">
            <summary>
            Moves the active point down one page in the document, scrolling the view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PageUp(System.Boolean)">
            <summary>
            Moves the active point up one page in the document, scrolling the view.
            </summary>
            <param name="Extend">Determines whether the moved text is collapsed or not.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.PageUp">
            <summary>
            Moves the active point up one page in the document, scrolling the view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartOfDocument">
            <summary>
            Moves the selected text to the beginning of the document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.StartOfLine(EnvDTE.vsStartOfLineOptions)">
            <summary>
            Moves the ActivePoint to the beginning of the current line.
            </summary>
            <param name="Where">A vsStartOfLineOptions constant (vsStartOfLineOptionsFirstColumn or vsStartOfLineOptionsFirstText) representing where the ActivePoint should be positioned.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.Unindent">
            <summary>
            Unindents the selected text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.WordLeft(System.Boolean)">
            <summary>
            Moves the ActivePoint left the specified number of words.
            </summary>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.WordLeft">
            <summary>
            Moves the ActivePoint left one word.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.WordRight(System.Boolean)">
            <summary>
            Moves the ActivePoint right the specified number of words.
            </summary>
            <param name="Extend">Determines whether the selection extends to the new location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.WordRight">
            <summary>
            Moves the ActivePoint right one word.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.GetHeight">
            <summary>
            Returns the height of the selection, in code lines.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.GetLines">
            <summary>
            Get the selected text as a string array
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectLines(System.Int32,System.Int32)">
            <summary>
            Selects the specified line range.
            </summary>
            <param name="startLine">The starting line number to select.</param>
            <param name="stopLine">The last line number to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="range">The SourceRange to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectRange(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="start">The starting SourcePoint of the range to select.</param>
            <param name="end">The ending SourcePoint of the range to select.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectRange(EnvDTE.TextPoint,EnvDTE.TextPoint)">
            <summary>
            Selects the range between the specified TextPoints.
            </summary>
            <param name="anchorPoint">The anchor of the selection.</param>
            <param name="activePoint">The cursor position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextSelection.SelectRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified range.
            </summary>
            <param name="startLine">The starting line number of the range to select.</param>
            <param name="startOffset">The column offset on the first line of the range to select.</param>
            <param name="endLine">The ending line number of the range to select.</param>
            <param name="endOffset">The column offset on the last line of the range to select.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.AnchorIsBeforeCursor">
            <summary>
            Returns true if the selection anchor precedes the cursor (e.g., a selection created by dragging toward the *bottom* of the file). Identical to the IsActiveEndGreater property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.CursorIsBeforeAnchor">
            <summary>
            Returns true if the cursor precedes the selection anchor (e.g., a selection created by dragging toward the *top* of the file).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.Height">
            <summary>
            Returns the height of the selection, in lines of code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.ActivePoint">
            <summary>
            Returns the active point (e.g., the caret location) of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.AnchorColumn">
            <summary>
            Returns the anchor column of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.AnchorOffset">
            <summary>
            Returns the anchor character offset of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.AnchorPoint">
            <summary>
            Returns the origin point of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.BottomLine">
            <summary>
            Returns the bottom display line of the selection. If preceding lines are collapsed (folded), this line number represents the number of times you would have to down-arrow from the top of the file (minus one) to reach this line./// Returns the top display line of the selection. If preceding lines are collapsed (folded), this line number represents the number of times you would have to down-arrow from the top of the file (minus one) to reach this line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.BottomEditLine">
            <summary>
            Returns the bottom line number of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.BottomPoint">
            <summary>
            Returns the point at the end of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.CurrentColumn">
            <summary>
            Returns the active column of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.CurrentOffset">
            <summary>
            Returns the active character offset of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.CurrentLine">
            <summary>
            Returns the active line (the line containing the cursor) of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.IsActiveEndGreater">
            <summary>
            Returns true if the cursor follows the selection anchor. Identical to the AnchorIsBeforeCursor property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.IsEmpty">
            <summary>
            Indicates whether the anchor point is equal to the active point. Returns false if a selection exists.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.Mode">
            <summary>
            Sets or returns a value determining whether dragging the mouse selects in stream (vsSelectionModeStream) or block (vsSelectionModeBox) mode.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.Text">
            <summary>
            Sets or returns the selected text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.TopEditLine">
            <summary>
            Returns the top line number of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.TopLine">
            <summary>
            Returns the top display line of the selection. If preceding lines are collapsed (folded), this line number represents the number of times you would have to down-arrow from the top of the file (minus one) to reach this line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextSelection.TopPoint">
            <summary>
            Returns the top point of the selection.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.IGdiTextView">
            <summary>
            Gdi text view implementation.
            This interface is provided for backward compatibility only.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.DrawString(DevExpress.CodeRush.Win32.HDC,System.String,System.Drawing.Point)">
            <summary>
            Intended to be used for highly-optimized text painting on the editor. The caller is responsible
            for selecting the proper HFONT and setting the text color of the HDC.
            </summary>
            <param name="hdc">The handle of the device context to paint to.</param>
            <param name="text">The text to paint.</param>
            <param name="point">The client coordinates to paint at.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetImage(System.Drawing.Rectangle)">
            <summary>
            Gets a bitmap containing the image at the specified rectangle. 
            </summary>
            <param name="rect">The rectangle containing the image to copy to the bitmap </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetLeftMarginOffset">
            <summary>
            Returns the offset in pixels to the left margin. This value includes 
            the indicator margin, the selection margin and the line number margin 
            if they are visible. This value also takes into account the horizontal 
            scroll position (so if the view is scrolled far to the right, the result 
            may be negative).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetScreenPoint(EnvDTE.TextPoint)">
            <summary>
            Returns the point in screem coordinates of the upper-left position of the specified 
            EnvDTE.TextPoint. The EnvDTE.TextPoint may specify virtual space.
            </summary>
            <param name="point">The EnvDTE.TextPoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetRectangleFromLanguageElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns a rectangle (in client coordinates) that encompasses the specified LanguageElement.
            </summary>
            <param name="element">The LanguageElement to derive the rectangle from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetRectangleFromRangeOnLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a rectangle (in client coordinates) that encompasses the specified single-line text range.
            </summary>
            <param name="lineNumber">The line number containing the range.</param>
            <param name="startOffset">The character offset of the left side of the range.</param>
            <param name="endOffset">The character offset of the right side of the range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetRectangleFromRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns a rectangle (in client coordinates) that encompasses the specified SourceRange.
            </summary>
            <param name="range">The SourceRange to derive the rectangle from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetRectangleFromRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a rectangle (in client coordinates) that encompasses the specified text range.
            </summary>
            <param name="startLineNumber">The line number containing the start of the range.</param>
            <param name="startOffset">The character offset of the left side of the range.</param>
            <param name="endLineNumber">The line number containing the end of the range.</param>
            <param name="endOffset">The character offset of the right side of the range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetTextExtent(DevExpress.CodeRush.Win32.HDC,System.String)">
            <summary>
            Intended to be used for highly-optimized text painting on the editor. The caller is responsible
            for selecting the proper HFONT into the device context.
            </summary>
            <param name="hdc">The handle of the device context to use.</param>
            <param name="text">The text to get the extent of.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetTextRectangle(System.String,System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
            Gets a rectangle for the specified text on this TextView at the specified line 
            number and column offset. This method returns true if successful, false otherwise.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="lineNumber">The line number, starting at one.</param>
            <param name="offset">The offset, starting at one (tabs count as a single column offset).</param>
            <param name="rectangle">This out parameter will be set to the rectangle representing the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetTextRectangle(System.String,System.Int32,System.Int32,System.Boolean,System.Drawing.Rectangle@)">
            <summary>
            Gets a rectangle for the specified text on this TextView at the specified line 
            number and column offset. This method returns true if successful, false otherwise.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="lineNumber">The line number, starting at one.</param>
            <param name="offset">The offset, starting at one (tabs count as a single column offset).</param>
            <param name="bold">Specifies whether the text should be measured with a bolded font.</param>
            <param name="rectangle">This out parameter will be set to the rectangle representing the text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified rectangle on this TextView.
            </summary>
            <param name="rect">The rectangle to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invalidate(System.Drawing.Region)">
            <summary>
            Invalidates the specified region on this TextViewFilter.
            </summary>
            <param name="rgn">The region to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invalidate(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Invalidates the specified SourceRange on this TextView.
            </summary>
            <param name="range">The SourceRange to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invalidate(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Invalidates the specified LanguageElement on this TextView.
            </summary>
            <param name="element">The LanguageElement to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invalidate(EnvDTE.TextPoint,System.Int32,System.Int32)">
            <summary>
            Invalidates a rectangular region the text view at the specified text point. The size 
            of the region is determined by the width &amp; height parameters. The 
            invalidated region is centered on the center of the line at the specified 
            TextPoint. If the specified text point is not visible, the invalidation will
            not occur.
            </summary>
            <param name="textPoint">The TextPoint or EditPoint to invalidate at.</param>
            <param name="width">The width of the rectangular region, in pixels.</param>
            <param name="height">The height of the rectangular region, in pixels.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invalidate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invalidates a rectangular region the text view at the specified line and column offset. The size 
            of the region is determined by the width &amp; height parameters. The 
            invalidated region is centered on the center of the line at the specified 
            line and columnOffset. If the specified line and column offset is not visible, the invalidation will
            not occur.
            </summary>
            <param name="lineNumber">The line number to invalidate at.</param>
            <param name="offset">The column offset to invalidate at. This can be in virtual space.</param>
            <param name="width">The width of the rectangular region, in pixels.</param>
            <param name="height">The height of the rectangular region, in pixels.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.OverlayText(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws the specified text on top of this TextView at the specified line 
            number and column offset in the specified color.
            </summary>
            <param name="graphics">The System.Drawing.Graphics instance to draw the text to.</param>
            <param name="text">The Text to draw.</param>
            <param name="lineNumber">The line number, starting at one.</param>
            <param name="offset">The offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color regardless of the selection state at this location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.OverlayText(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws the specified text on top of this TextView at the specified line 
            number and column offset in the specified color.
            </summary>
            <param name="graphics">The System.Drawing.Graphics instance to draw the text to.</param>
            <param name="text">The Text to draw.</param>
            <param name="lineNumber">The line number, starting at one.</param>
            <param name="offset">The offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color regardless of the selection state at this location.</param>
            <param name="bold">Specifies whether the text should be drawn in a bolded font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws the specified text on top of this TextView at the specified line 
            number and column offset in the specified color.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="lineNumber">The line number, starting at one.</param>
            <param name="offset">The offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color regardless of the selection state at this location.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.OverlayText(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws the specified text on top of this TextView at the specified line 
            number and column offset in the specified color.
            </summary>
            <param name="text">The Text to draw.</param>
            <param name="lineNumber">The line number, starting at one.</param>
            <param name="offset">The offset, starting at one (tabs count as a single column offset).</param>
            <param name="textColor">The color to paint the text. The text will be painted in this color regardless of the selection state at this location.</param>
            <param name="bold">Specifies whether the text should be drawn in a bolded font.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Repaint">
            <summary>
            Immediately repaints the entire TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Repaint(System.Drawing.Rectangle)">
            <summary>
            Immediately repaints the specified rectangle on this TextView.
            </summary>
            <param name="rect">The rectangle to repaint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Repaint(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Immediately repaints the specified SourceRange on this TextView.
            </summary>
            <param name="range">The SourceRange to repaint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Repaint(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Immediately repaints the specified LanguageElement on this TextView.
            </summary>
            <param name="element">The LanguageElement to repaint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Repaint(EnvDTE.TextPoint,System.Int32,System.Int32)">
            <summary>
            Immediately repaints a rectangular region the text view at the specified text point. 
            The size of the square region is determined by the width &amp; height parameters. 
            The invalidated region is centered on the center of the line at the specified 
            TextPoint.
            </summary>
            <param name="textPoint">The TextPoint or EditPoint which will be the center of the repaint.</param>
            <param name="width">The width of the rectangular region, in pixels.</param>
            <param name="height">The height of the rectangular region, in pixels.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.ShowMenu(System.Windows.Forms.ContextMenu,System.Int32,System.Int32)">
            <summary>
            Displays the specified context menu at the client coordinate positions 
            (relative to this TextView). The context menu's Popup event is triggered before showing. If a 
            menu item is selected, its Click event will be triggered before returning from this method.
            This method hides the editor caret (cursor) before displaying the popup, and restores it 
            when the popup menu is closed.
            </summary>
            <param name="menu">The context menu to display.</param>
            <param name="clientX">The client X coordinate (relative to this TextView).</param>
            <param name="clientY">The client Y coordinate (relative to this TextView).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.ShowMenu(System.Windows.Forms.ContextMenu,DevExpress.CodeRush.Core.Tile)">
            <summary>
            Displays the specified context menu at the specified Tile. The context menu's Popup event is 
            triggered before showing. If a menu item is selected, its Click event will be triggered before 
            returning from this method.
            This method hides the editor caret (cursor) before displaying the popup, and restores it 
            when the popup menu is closed.
            </summary>
            <param name="menu">The context menu to display.</param>
            <param name="tile">The tile to display the menu at. The menu will be positioned directly 
            underneath the Tile.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.HighlightCode(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Highlights the specified code segment in this TextView.
            </summary>
            <param name="startLine">The number of the first line in the segment to highlight.</param>
            <param name="startOffset">The character offset of the start of the segment to highlight.</param>
            <param name="endLine">The number of the last line in the segment to highlight.</param>
            <param name="endOffset">The character offset of the end of the segment to highlight.</param>
            <param name="codeEdgeLineColor">The color of the line that borders the top and bottom lines of code in the segment to highlight.</param>
            <param name="fillColor">The fill color of the highlight. Specify Color.Empty for no fill. The specified fill color should include a transparency alpha value so the code beneath is visible.</param>
            <param name="whiteSpaceBorderColor">The color of the line that borders whitespace in the segment to highlight. Specify Color.Empty for no border line next to whitespace. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.HighlightCode(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Highlights the specified LanguageElement in this TextView.
            </summary>
            <param name="element">The element to highlight.</param>
            <param name="codeEdgeLineColor">The color of the line that borders the top and bottom lines of code in the segment to highlight.</param>
            <param name="fillColor">The fill color of the highlight. Specify Color.Empty for no fill. The specified fill color should include a transparency alpha value so the code beneath is visible.</param>
            <param name="whiteSpaceBorderColor">The color of the line that borders whitespace in the segment to highlight. Specify Color.Empty for no border line next to whitespace. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.HighlightCode(DevExpress.CodeRush.StructuralParser.SourceRange,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Highlights the specified SourceRange in this TextView.
            </summary>
            <param name="range">The SourceRange to highlight.</param>
            <param name="codeEdgeLineColor">The color of the line that borders the top and bottom lines of code in the segment to highlight.</param>
            <param name="fillColor">The fill color of the highlight. Specify Color.Empty for no fill. The specified fill color should include a transparency alpha value so the code beneath is visible.</param>
            <param name="whiteSpaceBorderColor">The color of the line that borders whitespace in the segment to highlight. Specify Color.Empty for no border line next to whitespace. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.HighlightCode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Highlights the specified code in this TextView.
            </summary>
            <param name="startLine">The start line of the range to highlight.</param>
            <param name="firstStartOffset">The character offset of the first character in the range to highlight.</param>
            <param name="firstEndOffset">The character offset of the last character on the first line in the range to highlight. This setting determines the length of the line drawn in codeEdgeLineColor.</param>
            <param name="endLine">The end line of the range to highlight.</param>
            <param name="endLineStartOffset">The character offset of the first character on the last line in the range to highlight. This setting (combined with endLineEndOffset) determines the length of the line drawn in codeEdgeLineColor.</param>
            <param name="endLineEndOffset">The character offset of the last character in the range to highlight.</param>
            <param name="codeEdgeLineColor">The color of the line that borders the top and bottom lines of code in the segment to highlight.</param>
            <param name="fillColor">The fill color of the highlight. Specify Color.Empty for no fill. The specified fill color should include a transparency alpha value so the code beneath is visible.</param>
            <param name="whiteSpaceBorderColor">The color of the line that borders whitespace in the segment to highlight. Specify Color.Empty for no border line next to whitespace. </param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.AddTile(DevExpress.CodeRush.Core.Tile)">
            <summary>
            Adds the specified tile to this TextView. Call this method from inside an EditorXxxxPaint event handler (tiles are cleared before each paint). 
            Tiles are rectangular regions on screen that can react to mouse activity.
            </summary>
            <param name="tile">The Tile to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.GetTileAt(System.Int32,System.Int32)">
            <summary>
            Gets the tile at the specified TextView client coordinates. Returns null if no tile is found.
            </summary>
            <param name="x">The horizontal pixel value in TextView client coordinates.</param>
            <param name="y">The vertical pixel value in TextView client coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.BeginInvoke(System.Delegate)">
            <summary>
            Executes the specified delegate asynchronously on the thread that owns this TextView's underlying window handle (the UI thread). 
            </summary>
            <param name="method">A delegate that contains a method to be called in this TextView's thread context.</param>
            <returns>An IAsyncResult that represents the result of the BeginInvoke operation.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.IGdiTextView.Invoke(System.Delegate)">
            <summary>
            Executes the specified delegate on the thread that owns this TextView's underlying window handle (the UI thread). 
            </summary>
            <param name="method">A delegate that contains a method to be called in this TextView's thread context.</param>
            <returns>An object that contains the return value from the delegate being invoked, or a null reference (<b>Nothing</b> in Visual Basic) if the delegate has no return value.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IGdiTextView.ActiveTile">
            <summary>
            Returns the active Tile (under the mouse). If there is no active Tile, returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IGdiTextView.TileCollection">
            <summary>
            Returns the collection of all Tiles for this TextView. If your plug-in added tiles in its 
            EditorPaintXxxxx event handler, you can test for them using the TileIsOurs() method of your plug-in.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ISavedSelection">
            <summary>
            Represents the saved state of a selection in a TextView.
            </summary>
            <remarks>ISavedSelection inherits IDispose its Dispose() method should be called when it is no longer in use.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ISavedSelection.Restore">
            <summary>
            Restores the selection in the TextView with saved state in this object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ISavedSelection.TextView">
            <summary>
            The TextView whose selection state is saved by this object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.StartTextViewEvents">
            <summary>
            Starts listening to IVsTextViewEvents.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.StopTextViewEvents">
            <summary>
            Stops listening to IVsTextViewEvents.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.InitVsCodeWindow">
            <summary>
            Initializes this TextView's VsCodeWindow. This is called during TextView initialization.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.InitVsWindowFrame">
            <summary>
            Initializes this TextView's VsWindowFrame. This is called during TextView initialization.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.TextFromSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <summary>
            Retrieves the text represented by the specified TextSpan in this TextView's underlying buffer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SourceRangeFromSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
            <summary>
            Converts a VSIP TextSpan to a DXCore SourceRange.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetMenuItem(System.Windows.Forms.MenuItem,System.Int32)">
            <summary>
            Checks the passed-in menu item to see if its MenuID value matches id. If not, also recursively 
            checks nested menu items. Returns the menu item with the matching ID.
            </summary>
            <param name="menuItem">The menu item to check.</param>
            <param name="id">The ID to match.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetScrollInfo(DevExpress.CodeRush.Win32.ScrollBarConstants,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets scroll information.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetVerticalScrollInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets information on the vertical scroll bar.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetHorizontalScrollInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets information on the Horizontal scroll bar.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPropertyContainer">
            <summary>
            Returns the VSIP IVsTextEditorPropertyContainer for this text view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.CalcTopAndBottomLines">
            <summary>
            Calculates the current top and bottom buffer lines in the display. Called once before each paint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.CheckLineOffsetIsVisible(System.Int32,System.Int32)">
            <summary>
            Determines whether or not the specified line and offset are currently visible.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The character offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetTextHidingLayerModule">
            <summary>
            Returns the IVsTextHidingLayerModule for this TextView's top layer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.CenterLine(System.Int32)">
            <summary>
            Centers the specified line in the view.
            </summary>
            <param name="line">The specified line to center.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.CenterLines(System.Int32,System.Int32)">
            <summary>
            Centers the specified lines in the view.
            </summary>
            <param name="startLine">The starting line to center.</param>
            <param name="lineCount">The number of lines to center.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.IsOffscreen(System.Int32)">
            <summary>
            Determines if the specified line is currently scrolled off screen.
            </summary>
            <param name="line">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.IsOnScreen(System.Int32)">
            <summary>
            Determines if the specified line is currently scrolled on screen.
            </summary>
            <param name="line">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.AttachObject(System.String,System.Object)">
            <summary>
            Attaches a named object to this TextView.
            </summary>
            <param name="name">A unique name to use when attaching/getting the object from storage.</param>
            <param name="value">The object to attach.</param>
            <remarks>The object attached with this method can be retrieved using GetObject.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetObject(System.String)">
            <summary>
            Gets an attached object that is attached to this TextView.
            </summary>
            <param name="name">A unique name to use when attaching/getting the object from _Storage.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.RemoveObject(System.String)">
            <summary>
            Removes the named object previously attached to this TextView.
            </summary>
            <param name="name">The unique name of the object to remove.</param>
            <remarks>The object attached with this method can be retrieved using GetObject, and attached with AttachObject.</remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetAdornmentsHost">
            <summary>
            Returns text view adornments host.
            </summary>
            <returns>Returns text view adornments host.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SetAdornmentsHost(DevExpress.DXCore.Adornments.AdornmentsHost)">
            <summary>
            Sets text view adornments host.
            </summary>
            <param name="host">The host to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.AddAdornment(DevExpress.DXCore.Adornments.TextViewAdornment)">
            <summary>
            Adds adornment to this text view.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.AddForegroundAdornment(DevExpress.DXCore.Adornments.TextViewAdornment)">
            <summary>
            Adds foreground adornment to this text view.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.AddBackgroundAdornment(DevExpress.DXCore.Adornments.TextViewAdornment)">
            <summary>
            Adds background adornment to this text view.
            </summary>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.AddAdornment(System.String,DevExpress.DXCore.Adornments.TextViewAdornment)">
            <summary>
            Adds adornment to this text view.
            </summary>
            <param name="holder">Name of the holder to add adornment to.</param>
            <param name="adornment">The adornment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.RemoveAdornment(DevExpress.DXCore.Adornments.TextViewAdornment)">
            <summary>
            Removes adornment from this text view.
            </summary>
            <param name="adornment">The adornment to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.MakeVisible(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Makes the specified LanguageElement visible in this view. It ensures that the any necessary
            collapsed regions will be expanded and that the LanguageElement will be in view both vertically
            and horizontally.
            </summary>
            <param name="element">The SourcePoint to make visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.MakeVisible(System.Int32,System.Int32)">
            <summary>
            Makes the specified line and offset visible in this view. It ensures that the any necessary
            collapsed regions will be expanded and that the line/offset will be in view both vertically
            and horizontally.
            </summary>
            <param name="line">The line number to make visible.</param>
            <param name="offset">The character offset to make visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.MakeVisible(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Makes the specified SourcePoint visible in this view. It ensures that the any necessary
            collapsed regions will be expanded and that the SourcePoint will be in view both vertically
            and horizontally.
            </summary>
            <param name="point">The SourcePoint to make visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.MakeVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes the specified coordinates visible in this view. It ensures that the any necessary
            collapsed regions will be expanded and that the coordinates will be in view both vertically
            and horizontally.
            </summary>
            <param name="startLine">The starting line number to make visible.</param>
            <param name="startOffset">The starting character offset to make visible.</param>
            <param name="endLine">The ending line number to make visible.</param>
            <param name="endOffset">The starting character offset to make visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.MakeVisible(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Makes the specified SourceRange visible in this view. It ensures that the any necessary
            collapsed regions will be expanded and that the SourceRange will be in view both vertically
            and horizontally.
            </summary>
            <param name="range">The SourceRange to make visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.LengthOfLine(System.Int32)">
            <summary>
            Returns the length, in characters, of a line number.
            </summary>
            <param name="lineNumber">The line number to get the length of.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SetExplicitFocus">
            <summary>
            Immediately sets focus to the TextView. This is only necessary under special
            circumstances. Most of the time, you should use SetFocus().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetEolType(System.Int32)">
            <summary>
            Returns the end-of-line type for the specified line.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.LineOffsetToLineNumber(System.Int32)">
            <summary>
            Converts a display line offset (from the top of the view) to a real line number.
            </summary>
            <param name="displayLineOffset">The zero-based offset from the top line displayed in this TextView. For example, to get the third visible line in the TextView, pass two.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(System.Int32,System.Int32)">
            <summary>
            Returns the point in client coordinates of the upper-left position of the specified line and 
            character offset. Line and offset parameters may specify virtual space. If the point cannot be
            retrieved, a value of CodeRush.Graphics.InvalidPoint will be returned.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="virtualOffset">The character offset to check. This value can exist in virtual space.</param>
            <returns>Returns the point in client coordinates from the specified line and character offset.</returns>
            <remarks>
            This method calls GetPointOfLineColumn of the TextView object directly. This called method wants 
            line number and character offset to be indexes (e.g., zero-based). To avoid mixing indexes with 
            traditionally one-based line number and offset numbers, this method subtracts one from each of the 
            parameters before passing them on to the internal GetPointOfLineColumn.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>
            Determines the point in client coordinates of the upper-left position of the specified line and 
            column. If the requested line and character offset are hidden, false is returned; true otherwise.
            Line and offset parameters may specify virtual space.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="virtualOffset">The character offset to check. This value can exist in virtual space.</param>
            <param name="point">Returns the requested point.</param>
            <returns>Returns false if the requested line and column are hidden, true otherwise.</returns>
            <remarks>
            This method calls GetPointOfLineColumn of the TextView object directly. This called method wants 
            line number and character offset to be indexes (e.g., zero-based). To avoid mixing indexes with 
            traditionally one-based line number and offset numbers, this method subtracts one from each of the 
            parameters before passing them on to the internal GetPointOfLineColumn.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(System.Int32,System.Int32,System.Boolean,System.Drawing.Point@)">
            <summary>
            Determines the point in client coordinates of the upper-left position of the specified line and 
            column. If the requested line and character offset are hidden, false is returned; true otherwise.
            Line and offset parameters may specify virtual space.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="virtualOffset">The character offset to check. This value can exist in virtual space.</param>
            <param name="logErrors">If true, error messages will be logged to the DXCore messages log when this method fails.</param>
            <param name="point">Returns the requested point.</param>
            <returns>Returns false if the requested line and column are hidden, true otherwise.</returns>
            <remarks>
            This method calls GetPointOfLineColumn of the TextView object directly. This called method wants 
            line number and character offset to be indexes (e.g., zero-based). To avoid mixing indexes with 
            traditionally one-based line number and offset numbers, this method subtracts one from each of the 
            parameters before passing them on to the internal GetPointOfLineColumn.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the point in client coordinates of the upper-left position of the specified 
            SourcePoint. The SourcePoint may specify virtual space.
            </summary>
            <param name="point">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Drawing.Point@)">
            <summary>
            Determines the point in client coordinates of the upper-left position of the specified 
            SourcePoint. If the requested SourcePoint is hidden, false is returned; true otherwise.
            The SourcePoint may specify virtual space.
            </summary>
            <param name="point">The SourcePoint to check.</param>
            <param name="result">Returns the requested point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(EnvDTE.TextPoint)">
            <summary>
            Returns the point in client coordinates of the upper-left position of the specified 
            EnvDTE.TextPoint. The EnvDTE.TextPoint may specify virtual space.
            </summary>
            <param name="point">The EnvDTE.TextPoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(EnvDTE.TextPoint,System.Drawing.Point@)">
            <summary>
            Determines the point in client coordinates of the upper-left position of the specified 
            EnvDTE.TextPoint. If the requested EnvDTE.TextPoint is hidden, false is returned; true otherwise.
            The EnvDTE.TextPoint may specify virtual space.
            </summary>
            <param name="point">The EnvDTE.TextPoint to check.</param>
            <param name="result">Returns the requested point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(DevExpress.CodeRush.Core.DocPoint)">
            <summary>
            Gets the position (in client pixel coordinates) of the specified DocPoint. 
            </summary>
            <param name="docPoint">The DocPoint to check.</param>
            <returns>Returns the client coordinates of the specified DocPoint in this TextView. If an error occurs, this method returns Point.Empty.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(System.Int32,System.Int32)">
            <summary>
            Returns the line number of the longest line within the specified range. This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="startLine">The first line to check.</param>
            <param name="endLine">The last line to check.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the line number of the longest line within the specified range. This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="startLine">The first line to check.</param>
            <param name="expandTabs">If true, tabs will be expanded before counting the line length. If false, tabs will count as a single character.</param>
            <param name="endLine">The last line to check.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the line number with the most characters (tabs count as a single character) within 
            the specified range. This method will return zero if no visible lines are contained within 
            the specified range.
            </summary>
            <param name="startLine">The first line to check.</param>
            <param name="endLine">The last line to check.</param>
            <param name="longestLineLength">This out parameter is set to the length of the longest line within the specified range.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Returns the number of the longest line within the specified range. 
            This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="startLine">The first line to check.</param>
            <param name="endLine">The last line to check.</param>
            <param name="expandTabs">If true, tabs will be expanded before counting the line length. If false, tabs will count as a single character.</param>
            <param name="longestLineLength">This out parameter is set to the length of the longest line within the specified range.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Returns the number of the longest line within the specified range. 
            This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="startLine">The first line to check.</param>
            <param name="endLine">The last line to check.</param>
            <param name="expandTabs">If true, tabs will be expanded before counting the line length. If false, tabs will count as a single character.</param>
            <param name="visibleOnly">If true, only lines currently visible inside this TextView will be considered. If false, all lines within the given range will be considered unless they are inside a collapsed region.</param>
            <param name="longestLineLength">This out parameter is set to the length of the longest line within the specified range.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns the line number of the longest line within the specified range. This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="range">The SourceRange to check.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Returns the line number of the longest line within the specified range. This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="range">The SourceRange to check.</param>
            <param name="expandTabs">If true, tabs will be expanded before counting the line length. If false, tabs will count as a single character.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(DevExpress.CodeRush.StructuralParser.SourceRange,System.Int32@)">
            <summary>
            Returns the line number with the most characters (tabs count as a single character) within 
            the specified range. This method will return zero if no visible lines are contained within 
            the specified range.
            </summary>
            <param name="range">The SourceRange to check.</param>
            <param name="longestLineLength">This out parameter is set to the length of the longest line within the specified range.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean,System.Int32@)">
            <summary>
            Returns the number of the longest line within the specified range. 
            This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="range">The SourceRange to check.</param>
            <param name="expandTabs">If true, tabs will be expanded before counting the line length. If false, tabs will count as a single character.</param>
            <param name="longestLineLength">This out parameter is set to the length of the longest line within the specified range.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLongestLine(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Returns the number of the longest line within the specified range. 
            This method will return zero if no visible lines are contained within the specified range.
            </summary>
            <param name="range">The SourceRange to check.</param>
            <param name="expandTabs">If true, tabs will be expanded before counting the line length. If false, tabs will count as a single character.</param>
            <param name="visibleOnly">If true, only lines currently visible inside this TextView will be considered. If false, all lines within the given range will be considered unless they are inside a collapsed region.</param>
            <param name="longestLineLength">This out parameter is set to the length of the longest line within the specified range.</param>
            <returns>The line number of the longest visible line within the specified range, or zero if no visible lines were contained within the range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetNearestVisibleSourcePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets a SourcePoint representing the line and offset that are the closest visible coordinates to the 
            specified SourcePoint. So, if the specified SourcePoint is inside of a collapsed region of text, 
            the nearest edge will be returned. In the case of ambiguity, the left edge is returned.
            </summary>
            <param name="point">The SourcePoint to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetNearestVisibleSourcePoint(System.Int32,System.Int32)">
            <summary>
            Gets a SourcePoint representing the line and offset that are the closest visible coordinates to the 
            specified line and offset. So, if the specified line and offset are inside of a collapsed region of text, 
            the nearest edge will be returned. In the case of ambiguity, the left edge is returned.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="offset">The line offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.LineOffsetIsVisible(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether or not the specified SourcePoint is currently visible.
            </summary>
            <param name="point">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.LineOffsetIsVisible(System.Int32,System.Int32)">
            <summary>
            Determines whether or not the specified line and offset are currently visible.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The character offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.EnsureLineOffsetIsVisible(System.Int32,System.Int32)">
            <summary>
            Ensures that the specifed line and offset pair is in view, both vertically and horizonally.
            </summary>
            <param name="line">The line number to make visible.</param>
            <param name="offset">The character offset to make visible.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.EnsureLineOffsetsVisible(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Ensures that the specifed SourcePoint is in view, both vertically and horizonally.
            </summary>
            <param name="point">The SourcePoint to make visible..</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.EnsureSpanIsVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures that the specified range is in view, both vertically and horizontally.
            </summary>
            <param name="startLine">The starting line number.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="endLine">The ending line number.</param>
            <param name="endOffset">The ending offset.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.EnsureSpanIsVisible(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Ensures that the specified range is in view, both vertically and horizontally.
            </summary>
            <param name="startPoint">The starting SourcePoint.</param>
            <param name="endPoint">The ending SourcePoint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.EnsureSpanIsVisible(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Ensures that the specified range is in view, both vertically and horizontally.
            </summary>
            <param name="sourceRange">The SourceRange.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetTopAndBottomLines(System.Int32@,System.Int32@)">
            <summary>
            Returns the current top and bottom buffer lines in the display.
            </summary>
            <param name="topLine">The top buffer line in the display.</param>
            <param name="bottomLine">The bottom buffer line in the display.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetVirtualSpaces(System.Int32,System.Int32)">
            <summary>
            Returns the number of virtual spaces required to reach the specified line and column position.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The display column to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.InVirtualSpace(System.Int32,System.Int32)">
            <summary>
            Determines whether or not the specified line and column are in virtual space.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The display column to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ConvertToNonVirtualCoordinates(System.Int32@,System.Int32@)">
            <summary>
            Converts the specified line and virtual offset to the nearest valid coordinates that
            are not in virtual space.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="virtualOffset">The virtual offset to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetNonVirtualCoordinates(System.Int32,System.Int32)">
            <summary>
            Gets the nearest valid coordinates that are not in virtual space for the specified 
            line and virtual offset.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="virtualOffset">The virtual offset to use.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetNonVirtualCoordinates(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the nearest valid coordinates that are not in virtual space for the specified 
            SourcePoint.
            </summary>
            <param name="point">The SourcePoint (in virtual space) to use.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPosition">
            <summary>
            Gets a new ViewPosition to represent the current view into this TextView. The ViewPosition includes 
            top line, lines in view, and can be restored at a later time.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SetTopLine(System.Int32)">
            <summary>
            Sets the top line number of the view.
            </summary>
            <param name="lineNumber">The line number that should be the top line of the view.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetBottomLine">
            <summary>
            Gets the bottom source line in view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetSelectionRange">
            <summary>
            Gets selection source range.
            </summary>
            <returns>Returns selection source range.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetSourcePointUnderMouse">
            <summary>
            Gets a SourcePoint that indicates the line and column position under the mouse cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLanguageElementUnderMouse">
            <summary>
            Gets the LanguageElement under the mouse cursor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetOtherView">
            <summary>
            If the TextView is split, it returns the other view from the split.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetWordAt(System.Int32,System.Int32,DevExpress.CodeRush.Core.Word@)">
            <summary>
            Retrieves the word at the specified line and offset. This may be a keyword, identifier or number. If there is no
            word at the given location, GetWordResult.Failure is returned.
            </summary>
            <param name="line">The line number to retrieve the word at.</param>
            <param name="virtualOffset">The offset to retrieve the word at. NOTE: This may exist in virtual space.</param>
            <param name="word">The retrieved word.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetWordAt(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.Core.Word@)">
            <summary>
            Retrieves the word at the specified SourcePoint. This may be a keyword, identifier or number. If there is no
            word at the given location, GetWordResult.Failure is returned.
            </summary>
            <param name="point">The SourcePoint to retrieve the word at. NOTE: This may exist in virtual space.</param>
            <param name="word">The retrieved word.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPoint(DevExpress.CodeRush.Core.DocPoint,System.Drawing.Point@)">
            <summary>
            Gets the position (in client pixel coordinates) of the specified DocPoint. 
            Returns true if successful, and false if an error occurred.
            </summary>
            <param name="point">The DocPoint to check.</param>
            <param name="result">This out parameter is set to the client coordinates of the specified DocPoint.</param>
            <returns>Returns true if successful, and false if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToClientPoint(System.Drawing.Point)">
            <summary>
            Converts the screen coordinates of a specified to point to client-area coordinates.
            </summary>
            <param name="screenPoint">The screen coordinates to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToClientPoints(System.Drawing.Point[])">
            <summary>
            Converts an array of screen coordinate points to an array of client-area coordinate points.
            </summary>
            <param name="screenPoints">The area of screen coordinate points to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToClientRect(System.Drawing.Rectangle)">
            <summary>
            Converts the screen coordinates of a specified to rectangle to client-area coordinates.
            </summary>
            <param name="screenRect">The screen coordinate rectangle to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToClientRects(System.Drawing.Rectangle[])">
            <summary>
            Converts an array of screen coordinate rectangles to an array of client-area coordinate rectangles.
            </summary>
            <param name="screenRects">The area of screen coordinate rectangles to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToScreenPoint(System.Drawing.Point)">
            <summary>
            Converts the client-area coordinates of a specified to point to screen coordinates.
            </summary>
            <param name="clientPoint">The client-area coordinates to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToScreenPoints(System.Drawing.Point[])">
            <summary>
            Converts an array of client-area coordinate points to an array of screen coordinate points.
            </summary>
            <param name="clientPoints">The area of client-area coordinate points to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToScreenRect(System.Drawing.Rectangle)">
            <summary>
            Converts the client-area coordinates of a specified to rectangle to screen coordinates.
            </summary>
            <param name="clientRect">The client-area coordinate rectangle to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ToScreenRects(System.Drawing.Rectangle[])">
            <summary>
            Converts an array of client-area coordinate rectangles to an array of screen coordinate rectangles.
            </summary>
            <param name="clientRects">The area of client-area coordinate rectangles to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetBottomRightPoint(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets the point (in client pixel coordinates of this TextView) corresponding to 
            the lowest and right-most non-white-space line withing the specified SourceRange.
            </summary>
            <param name="range">The SourceRange containing upper and lower bounds to check.</param>
            <returns>Returns the pixel coordinates of a point that is lower and further 
            to the right than any code withing the specified SourceRange.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetTopRightPoint(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets the point (in client pixel coordinates of this TextView) corresponding to 
            the topmost and right-most non-white-space line withing the specified SourceRange.
            </summary>
            <param name="range">The SourceRange containing upper and lower line numbers to check.</param>
            <returns>Returns the pixel coordinates of a point that is higher (closer to the top of the file) and further 
            to the right than any code withing the specified SourceRange.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPointSafe(System.Int32,System.Int32)">
            <summary>
            Returns the point, in client coordinates, of the upper-left position of the specified line and character offset.
            <paramref name="line"/> and <paramref name="virtualOffset"/> parameters may specify virtual space. If the point cannot
            be retrieved, <see cref="P:DevExpress.DXCore.Common.Option`1.None">Option&lt;Point&gt;.None</see> is returned.
            </summary>
            <param name="line">The line number to use.</param>
            <param name="virtualOffset">The character offset to use. This value can exist in virtal space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetRangeFromRectangle(System.Drawing.RectangleF)">
            <summary>
            Returns source range from the given rectangle.
            </summary>
            <param name="rect">The rectangle to get source range from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.RemoveSplit">
            <summary>
            Removes the other TextView if this view is split.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.Split">
            <summary>
            Splits the TextView into two views if it is not split already. If it is split, the other view
            is returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowText(System.Int32)">
            <summary>
            Displays the specified line number in the view. If the line is hidden inside of any collapsed regions, they will be
            expanded and the view will be scrolled so that the line is centered vertically.
            </summary>
            <param name="line">The line number to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowText(System.Int32,System.Int32)">
            <summary>
            Displays the specified line number and character offset in the view. If the line and offset are hidden inside of 
            any collapsed regions, they will be expanded and the view will be scrolled so that the line is centered vertically.
            </summary>
            <param name="line">The line number to show.</param>
            <param name="offset">The character offset to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays the specified range of text in the view. If the range is hidden inside of any collapsed 
            regions, they will be expanded and the view will be scrolled so that the line is centered vertically.
            </summary>
            <param name="startLine">The starting line number to show.</param>
            <param name="startOffset">The starting character offset to show.</param>
            <param name="endLine">The ending line number to show.</param>
            <param name="endOffset">The ending character offset to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowText(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Displays the specified SourcePoint view. If the SourcePoint is hidden inside of any collapsed 
            regions, they will be expanded and the view will be scrolled so that the line is centered vertically.
            </summary>
            <param name="point">The SourcePoint to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Displays the specified SourceRange view. If the SourceRange is hidden inside of any collapsed 
            regions, they will be expanded and the view will be scrolled so that the line is centered vertically.
            </summary>
            <param name="range">The SourceRange to show.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPointFromLineAndColumn(System.Int32,System.Int32)">
            <summary>
            Returns the point in client coordinates of the upper-left position of the specified line and 
            display column. Line and column parameters may specify virtual space.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="column">The display column to check.</param>
            <returns>Returns the point in client coordinates from the specified line and display column.</returns>
            <remarks>
            This method calls GetPointOfLineColumn of the TextView object directly. This called method wants 
            line number and character offset to be indexes (e.g., zero-based). To avoid mixing indexes with 
            traditionally one-based line number and offset numbers, this method subtracts one from each of the 
            parameters before passing them on to the internal GetPointOfLineColumn.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetPointFromLineAndColumn(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>
            Determines the point in client coordinates of the upper-left position of the specified line and 
            display column. If the requested line and display column are hidden, false is returned; true 
            otherwise. Line and column parameters may specify virtual space.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="column">The display column to check.</param>
            <param name="point">Returns the requested point.</param>
            <returns>Returns false if the requested line and column are hidden, true otherwise.</returns>
            <remarks>
            This method calls GetPointOfLineColumn of the TextView object directly. This called method wants 
            line number and character offset to be indexes (e.g., zero-based). To avoid mixing indexes with 
            traditionally one-based line number and offset numbers, this method subtracts one from each of the 
            parameters before passing them on to the internal GetPointOfLineColumn.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetNearestVisiblePoint(System.Int32,System.Int32)">
            <summary>
            Returns the point in client coordinate of the upper-left position that is nearest to the specified
            line and character offset. If the specified coordinates collapsed within a hidden region, the closest
            visible coordinates are used.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The character offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.NewDocPoint(System.Drawing.Point)">
            <summary>
            Creates and returns a new DocPoint instance at the specified client coordinates of this TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.NewDocPoint(System.Int32,System.Int32)">
            <summary>
            Creates and returns a new DocPoint instance at the specified X and Y client 
            coordinates of this TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLineAndColumn(System.Drawing.Point,System.Int32@,System.Int32@)">
            <summary>
            Gets the line number and column under the specified client point.
            </summary>
            <param name="clientPoint">The position to check, in client coordinates of this TextView.</param>
            <param name="line">This out parameter is set to the line number under the specified client point.</param>
            <param name="column">This out parameter is set to the column offset under the specified client point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLineAndColumnUnderMouse(System.Int32@,System.Int32@)">
            <summary>
            Gets the line number and column under the mouse cursor.
            </summary>
            <param name="line">This out parameter is set to the line number under the specified client point.</param>
            <param name="column">This out parameter is set to the column offset under the specified client point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowMenu(System.Windows.Forms.ContextMenu,System.Int32,System.Int32)">
            <summary>
            Displays the specified context menu at the client coordinate positions 
            (relative to this TextView). The context menu's Popup event is triggered before showing. If a 
            menu item is selected, its Click event will be triggered before returning from this method.
            This method hides the editor caret (cursor) before displaying the popup, and restores it 
            when the popup menu is closed.
            </summary>
            <param name="menu">The context menu to display.</param>
            <param name="clientX">The client X coordinate (relative to this TextView).</param>
            <param name="clientY">The client Y coordinate (relative to this TextView).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ShowMenu(System.Windows.Forms.ContextMenu,DevExpress.DXCore.Adornments.TileVisual)">
            <summary>
            Displays the specified context menu at the specified Tile. The context menu's Popup event is 
            triggered before showing. If a menu item is selected, its Click event will be triggered before 
            returning from this method.
            This method hides the editor caret (cursor) before displaying the popup, and restores it 
            when the popup menu is closed.
            </summary>
            <param name="menu">The context menu to display.</param>
            <param name="tile">The tile to display the menu at. The menu will be positioned directly 
            underneath the Tile.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetTileVisualAt(System.Double,System.Double)">
            <summary>
            Gets the tile at the specified TextView client coordinates. Returns null if no tile is found.
            </summary>
            <param name="x">The horizontal value in TextView client coordinates.</param>
            <param name="y">The vertical value in TextView client coordinates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetTileVisualAt(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Gets the tile at the specified TextView client coordinates. Returns null if no tile is found.
            </summary>
            <param name="x">The horizontal value in TextView client coordinates.</param>
            <param name="y">The vertical value in TextView client coordinates.</param>
            <param name="tileX">The x-coordinate of the mouse inside the tile.</param>
            <param name="tileY">The y-coordinate of the mouse inside the tile.</param>
            <returns></returns>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SetActiveTileVisual(DevExpress.DXCore.Adornments.TileVisual)">
            <summary>
            Sets the active Tile. Called when the mouse passes over a tile.
            </summary>
            <param name="newTile">The newly-active Tile.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.AddTile(DevExpress.DXCore.Adornments.TileVisual)">
            <summary>
            Adds the specified tile to this TextView.
            </summary>
            <param name="tile">The Tile to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.GetLineTransformation(System.Int32)">
            <summary>
            Returns the line transformation for the specified line index.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SetLineTransformation(System.Int32,DevExpress.CodeRush.Core.LineTransformation)">
            <summary>
            Set the line transformation for the specified line index.
            </summary>
            <param name="line"></param>
            <param name="lineTransformation"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.SetLineTransformation(System.Int32,DevExpress.CodeRush.Core.LineTransformation,System.Boolean)">
            <summary>
            Set the line transformation for the specified line index.
            </summary>
            <param name="line"></param>
            <param name="lineTransformation"></param>
            <param name="applyImmediately">Value indicating whether to invalidate view immediately.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ClearLineTransformation(System.Int32)">
            <summary>
            Clears the line transformation for the specified line index.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextView.ClearLineTransformations">
            <summary>
            Clears all line transformations.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedTopAndBottomLinesValid">
            <summary>
            Gets or sets value determining if cached 
            top and bottom lines are valid.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedTopLine">
            <summary>
            Gets or sets cached top line number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedBottomLine">
            <summary>
            Gets or sets cached bottom line number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedCoordinatesValid">
            <summary>
            Gets or sets value determining if cached 
            coordinates are valid.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedDisplayTopLine">
            <summary>
            Gets or sets cached display top line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedDisplayLeftColumn">
            <summary>
            Gets or sets cached display left column.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedVisibleLineCount">
            <summary>
            Gets or sets cached visible line count.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.CachedVisibleColumnCount">
            <summary>
            Gets or sets cached visible column count.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.Buffer">
            <summary>
            Returns the IVsTextLines associated with this view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.IsLayoutInSync">
            <summary>
            Returns true if text view layout is in sync
            with recent changes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.FileNode">
            <summary>
            Gets the source file language element associated with this view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.TopLine">
            <summary>
            Gets the top source line in view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.BottomLine">
            <summary>
            Gets the bottom source line in view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.DisplayTopLine">
            <summary>
            Gets the top line of this view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.DisplayBottomLine">
            <summary>
            Gets the bottom line in the view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.HorizontalScrollPosition">
            <summary>
            Gets and sets the scroll position of the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.VerticalScrollPosition">
            <summary>
            Gets and sets the scroll position of the vertical scroll bar.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.TextLineHeight">
            <summary>
            Gets the nominal height of a line of text in the view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.LineHeight">
            <summary>
            Returns the displayed height, in pixels, of one line in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.Width">
            <summary>
            Returns the total width of the TextView in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.Height">
            <summary>
            Returns the total height of the TextView in pixels.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.SpaceWidth">
            <summary>
            Returns the width, in pixels, of a space character in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.ColumnWidth">
            <summary>
            Returns the width, in pixels, of one column in the editor. NOTE: This value is only
            valid if a fixed-width font is used in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.TabSize">
            <summary>
            Gets the TabSize for the Document associated with this TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.IsSplit">
            <summary>
            Determines whether or not the text view is split into two views.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.VirtualSpace">
            <summary>
            Gets or sets virtual space on this text view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.WordWrap">
            <summary>
            Gets or sets word wrapping on this text view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.GutterWidth">
            <summary>
            Returns the total width, in pixels, of the left margin. This value includes
            the indicator margin, the selection margin and the line number margin if they are visible.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextView.ActiveTileVisual">
            <summary>
            Returns the active Tile (under the mouse). If there is no active Tile, returns null.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.FillVirtualSpaceIfNeeded(System.Int32,System.Int32)">
            <summary>
            If the specified 1-based line and column are inside virtual space, the appropriate white space will be inserted
            up to the line and column.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetBuffer">
            <summary>
            Returns the IVsTextLines for this IVsTextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetBufferLayer">
            <summary>
            Returns the IVsTextLayer for the underlying text buffer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetBufferSize">
            <summary>
            Returns the size of the buffer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetCaretPos(System.Int32@,System.Int32@)">
            <summary>
            Returns the 0-based line and column of the curent caret position. Note: All requests
            to get the caret position should ultimately go through this method to ensure that 
            any IVsCompoundAction.FlushEditActions is called first.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetLanguageInfo">
            <summary>
            Returns the IVsLanguageInfo for the underlying buffer of this IVsTextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetStream">
            <summary>
            Returns the IVsTextStream for this IVsTextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetTextFromLineData(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[])">
            <summary>
            Returns the text for a specified line number from the given buffer using the passed pointer
            (allocated to store a LINEDATA structure).
            </summary>
            <param name="buffer">The IVsTextLines buffer to use.</param>
            <param name="lineNumber">The line number (1-based) to get.</param>
            <param name="lineData">Pointer to a LINEDATA structure to get the text from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetTopLayer">
            <summary>
            Returns the top-most IVsTextLayer from this IVsTextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.GetVirtualSpaces(System.Int32,System.Int32)">
            <summary>
            Returns the number of virtual spaces represented by the specified 1-based line and column.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.InsertText(System.String)">
            <summary>
            Inserts the given text at the caret and returns a TextSpan representing the changed
            range of text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.InsertText(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Inserts the given text at the caret and returns a TextSpan representing the changed
            range of text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewObject.InsertText(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Inserts the given text at the caret and returns a TextSpan representing the changed
            range of text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.FillVirtualSpaceIfNeeded">
            <summary>
            If the caret is inside virtual space, the appropriate white space will be inserted
            up to the caret's position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.DeleteLeft(System.Int32)">
            <summary>
            Deletes the specified number of characters to the left of the caret.
            </summary>
            <param name="count">The number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.DeleteRight(System.Int32)">
            <summary>
            Deletes the specified number of characters to the right of the caret.
            </summary>
            <param name="count">The number of characters to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.DeleteLeftWhiteSpace">
            <summary>
            Deletes whitespace characters to the left of the caret and returns the number of characters deleted.
            </summary>
            <returns>Returns the number of characters deleted.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.DeleteRightWhiteSpace">
            <summary>
            Deletes whitespace characters to the right of the caret and returns the number of characters deleted.
            </summary>
            <returns>Returns the number of characters deleted.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.Insert(System.Char,System.Boolean)">
            <summary>
            Inserts the given character and optionally moves the caret. 
            </summary>
            <param name="ch">The character to insert.</param>
            <param name="moveCaret">If true, the caret will be moved after the inserted character.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.Insert(System.Char)">
            <summary>
            Inserts the given character and moves the caret after the character.
            </summary>
            <param name="ch">The character to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.Insert(System.String,System.Boolean)">
            <summary>
            Inserts the given text and optionally moves the caret.
            </summary>
            <param name="text">The text to insert.</param>
            <param name="moveCaret">If true, the caret will be moved after the inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.Insert(System.String)">
            <summary>
            Inserts the given text and moves the caret after the text.
            </summary>
            <param name="text">The text to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(System.Int32,System.Boolean)">
            <summary>
            Moves the caret to the location represented by the specified stream position and, 
            optionally, extends the selection.
            </summary>
            <param name="position">The stream position to move the caret to. A stream position
            is the offset from the start of the file.</param>
            <param name="extend">If true, the current selection will be selected to the new caret
            position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(System.Int32)">
            <summary>
            Moves the caret to the location represented by the specified stream position.
            </summary>
            <param name="position">The stream position to move the caret to. A stream position
            is the offset from the start of the file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(EnvDTE.TextPoint,System.Boolean)">
            <summary>
            Moves the caret to the location represented by the specified EnvDTE.TextPoint and, optionally,
            extends the selection. This is useful for mixing CodeRush and Visual Studio .NET automation code.
            </summary>
            <param name="point">An EnvDTE.TextPoint (EnvDTE.EditPoint or EnvDTE.VirtualPoint) to move the 
            caret to. This can be in virtual space.</param>
            <param name="extend">If true, the current selection will be selected to the new caret 
            position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(EnvDTE.TextPoint)">
            <summary>
            Moves the caret to the location represented by the specified EnvDTE.TextPoint. This is useful
            for mixing CodeRush and Visual Studio .NET automation code.
            </summary>
            <param name="point">An EnvDTE.TextPoint (EnvDTE.EditPoint or EnvDTE.VirtualPoint) to move the 
            caret to. This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Moves the caret to the location represented by the specified SourcePoint and, optionally,
            extends the selection.
            </summary>
            <param name="point">The SourcePoint to move the caret to. This can be in virtual space.</param>
            <param name="extend">If true, the current selection will be selected to the new caret 
            position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves the caret to the location represented specified SourcePoint.
            </summary>
            <param name="point">The SourcePoint to move the caret to. This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the caret to the location represented by the specified line and column and, optionally,
            extends the selection.
            </summary>
            <param name="line">The line to move the caret to.</param>
            <param name="column">The column to move the caret to. This can be in virtual space.</param>
            <param name="extend">If true, the current selection will be selected to the new caret 
            position.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the caret to the location represented by the specified line and column.
            </summary>
            <param name="line">The line to move the caret to.</param>
            <param name="column">The column to move the caret to. This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveLeft(System.Int32)">
            <summary>
            Moves the caret to the left a specified number of characters. If the caret is currently inside 
            virtual space, it will moved to the end of the current line first.
            </summary>
            <param name="numChars">The number of characters to move the caret.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveRight(System.Int32)">
            <summary>
            Moves the caret to the right a specified number of characters. If the caret is currently inside 
            virtual space, it will moved to the end of the current line first.
            </summary>
            <param name="numChars">The number of characters to move the caret.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveToEndOfLine">
            <summary>
            Positions the caret at the end of the current line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveToStartOfLine">
            <summary>
            Positions the caret at the start of the current line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MoveOutOfVirtualSpace">
            <summary>
            If the caret is in virtual space, it will be moved to the position of the end-of-line terminator
            on the line.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.GetSurroundingChars(System.Char@,System.Char@)">
            <summary>
            Gets the characters to the left and right of the caret from the line it is currently positioned on.
            If there is none, a null character returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.GetSurroundingText(System.String@,System.String@)">
            <summary>
            Gets the text to the left and right of the caret from the line it is currently positioned on.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.Hide">
            <summary>
            Hides the editor caret. You can restore the caret after calling Hide through a call to 
            Show. Every call to Hide must have a matching call to Show.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.Show">
            <summary>
            Shows the editor caret. Call this after calling Hide.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewCaret.MakeVisible">
            <summary>
            Makes the editor caret visible in the view. It ensures that any necessary collapsed regions
            will be expanded and that the caret is in view vertically and horizontally.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.LineText">
            <summary>
            Returns the text for the line that the caret is currently positioned on.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.LeftText">
            <summary>
            Returns the text to the left of the caret from the line it is currently positioned on.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.RightText">
            <summary>
            Returns the text to the right of the caret from the line it is currently positioned on.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.LeftChar">
            <summary>
            Returns the character to the left of the caret from the line it is currently positioned on. If
            none exists, a null character is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.RightChar">
            <summary>
            Returns the character to the right of the caret from the line it is currently positioned on. If
            none exists, a null character is returned.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.InsideVirtualSpace">
            <summary>
            Returns true if the caret is in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.OnEmptyLine">
            <summary>
            Returns true if the caret is positioned on a line that contains only whitespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.AtEndOfDocument">
            <summary>
            Determines whether or not the caret is at the end of the current document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.AtStartOfDocument">
            <summary>
            Determines whether or not the caret is at the start of the current document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.AtEndOfWord">
            <summary>
            Determines whether or not the caret is at the end of a word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.AtStartOfWord">
            <summary>
            Determines whether or not the caret is at the start of a word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.AtEndOfLine">
            <summary>
            Determines whether or not the caret is at the end of the current line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.AtStartOfLine">
            <summary>
            Determines whether or not the caret is at the start of the current line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.Line">
            <summary>
            Returns the current line of the caret.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.Offset">
            <summary>
            Returns the current offset of the caret in the current line. If the caret is in virtual space,
            this will be the position of the end-of-line terminator on the line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.Position">
            <summary>
            Returns the current position of the caret in the text stream (the offset from the start of the file).
            If the caret is in virtual space. This will be the position of the end-of-line terminator on the
            current line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.SourcePoint">
            <summary>
            Returns a SourcePoint representing the current caret coordinates. This value can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.ViewColumn">
            <summary>
            Returns the current column of the caret. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.VirtualSpaces">
            <summary>
            Returns the number of virtual spaces between the end of the current line and the caret position.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.Column">
            <summary>
            Returns the current column of the caret. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.InVirtualSpace">
            <summary>
            Returns true if the caret is in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewCaret.Point">
            <summary>
            Returns a SourcePoint representing the current caret coordinates.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewIntellisense.Close">
            <summary>
            Closes the intellisense window if active.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.InCollapsedRegion(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether or not the given SourcePoint is inside of a collapsed hidden region or not.
            Note that this will return true both for the starting and ending SourcePoints of a region.
            </summary>
            <param name="pos">The SourcePoint check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.InView(System.Int32)">
            <summary>
            Determines whether or not a line is within the view's display range. This will return true
            even if the line is contained inside a collapsed region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.IsVisible(System.Int32)">
            <summary>
            Determines whether a line is actually visible within the view's display. That is,
            the line is within the view's display range and is not contained inside a collapsed
            region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.IsVisible(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether a position is actually visible within the view's display. That is,
            the position is within the view's display range and is not contained inside a collapsed
            region.
            </summary>
            <param name="pos">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.GetText(System.Int32)">
            <summary>
            Returns the text of the specified line number in this TextView's buffer.
            </summary>
            <param name="lineNumber">The line number to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.GetText(System.Int32,System.Int32)">
            <summary>
            Returns the text from the specified starting and ending lines in this TextView's buffer.
            </summary>
            <param name="startLine">The starting line number of the text to get.</param>
            <param name="count">The number of lines to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.StartsRegion(System.Int32)">
            <summary>
            Returns true if the given line number is the starting line of a visible region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.EndsRegion(System.Int32)">
            <summary>
            Returns true if the given line number is the ending line of a visible region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.InCollapsedRegion(System.Int32)">
            <summary>
            Determines whether or not the given line number is inside of a collapsed hidden region or not.
            Note that this will return true both for the starting and ending lines of a region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewLines.InCollapsedRegion(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean,System.Boolean)">
            <summary>
            Determines whether or not the given SourcePoint is inside of a collapsed hidden region or not.
            </summary>
            <param name="pos">The SourcePoint check.</param>
            <param name="checkStart">Defines if start point of the region should be considered</param>
            <param name="checkEnd">Defines if end point of the region should be considered</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewLines.Count">
            <summary>
            Returns the number of lines in the buffer associated with this view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewLines.LineMapChanging">
            <summary>
            Determines whether or not Visual Studio is currently updating the line-to-buffer mapping
            for this TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.AddLeftRight(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds the specified prefix to the beginnning of each line in the text selection.
            </summary>
            <param name="left">The text to prepend to the beginning of each line.</param>
            <param name="right">The text to append to the end of each line.</param>
            <param name="leadingColumn">Determines where the left text will be inserted. If trailingColumn is 
            positive, the left text will start at this specified column (unless code on this line starts before 
            the specified column, in which case the left text will be inserted just before the first non-white 
            space character on the line). If leadingColumn is one, then left text will be placed at the start of 
            each line. If trailingColumn is int.MaxValue, then the left text will be placed at the start of each line 
            after any leading white space.</param>
            <param name="trailingColumn">Determines where the right text will be placed. If trailingColumn is 
            positive, the right text will start at this specified column (unless that line is longer than the 
            specified column, in which case the right text will start at the end of the line). If trailingColumn
            is zero, then right text will be placed at the end of each line. If trailingColumn is less than zero, 
            then the right text will be placed at the end of each line before any trailing white space.</param>
            <param name="modifyEmptyLines">If true, empty lines and lines consisting of white-space only will be 
            modified. If false, empty lines and lines entirely consisting of white-space will be untouched.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.AddLeftRight(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds the specified prefix to the beginnning of each line in the text selection.
            </summary>
            <param name="left">The text to prepend to the beginning of each line.</param>
            <param name="right">The text to append to the end of each line.</param>
            <param name="leadingColumn">Determines where the left text will be inserted. If trailingColumn is 
            positive, the left text will start at this specified column (unless code on this line starts before 
            the specified column, in which case the left text will be inserted just before the first non-white 
            space character on the line). If leadingColumn is one, then left text will be placed at the start of 
            each line. If trailingColumn is int.MaxValue, then the left text will be placed at the start of each line 
            after any leading white space.</param>
            <param name="trailingColumn">Determines where the right text will be placed. If trailingColumn is 
            positive, the right text will start at this specified column (unless that line is longer than the 
            specified column, in which case the right text will start at the end of the line). If trailingColumn
            is zero, then right text will be placed at the end of each line. If trailingColumn is less than zero, 
            then the right text will be placed at the end of each line before any trailing white space.</param>
            <param name="modifyEmptyLines">If true, empty lines and lines consisting of white-space only will be 
            modified. If false, empty lines and lines entirely consisting of white-space will be untouched.</param>
            <param name="skipFirstLast">If true, then the specified left text will not be added to the first line, 
            and the specified right text will not be added to the last line. If false, the left and right text will be 
            added to every line.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Clear(System.Boolean)">
            <summary>
            Clears the current selection.
            </summary>
            <param name="moveCaretToAnchor">If true, the caret will be moved to the anchor coordinates of the 
            selection when cleared.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Clear">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Delete">
            <summary>
            Deletes the current selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Contains(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if the specified SourceRange is contained within the current selection.
            </summary>
            <param name="range">The SourceRange to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Contains(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if the specified SourcePoint is contained within the current selection.
            </summary>
            <param name="point">The SourcePoint to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Contains(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified line and column are contained within the 
            current selection. If the line and column are at the start of the selection, 
            this method will return true. However, if the line and column are at the end
            of the selection, this method will return false.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="column">The column offset to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.ExtendToWholeLines">
            <summary>
            Extends the selection to include complete lines. If nothing is selected, then no change occurs. If the last line in the selection contains no selected text (e.g., the anchor or active point is at the start of the line), then that line is not included in the selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.ExtendToIncludeWhitespace">
            <summary>
            Extends the selection to include leading and trailing white space. This is useful for 
            cutting, deleting, or moving text inside the selection, as this expanded selection 
            tends to produce a clean break in the code.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Format">
            <summary>
            Formats the selected text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SwapPoints">
            <summary>
            Swaps the anchor and active points.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Get(System.Int32@,System.Int32@)">
            <summary>
            Gets the coordinates of the current selection converted to stream coordinates. These values represent
            offsets in the underlying text stream so they cannot be inside of virtual space. If one of both points
            of the selection are in virtual space, the nearest positions will be returned.
            </summary>
            <param name="anchorPosition">The text stream position of the current selection's anchor point.</param>
            <param name="activePosition">The text stream position of the current selection's active point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Get(DevExpress.CodeRush.StructuralParser.SourceRange@)">
            <summary>
            Gets a SourceRange representing all coordinates of the current selection.
            </summary>
            <param name="range">A Source representing the current selection. Any of its coordinates can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Get(DevExpress.CodeRush.StructuralParser.SourcePoint@,DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Gets SourcePoints representing all coordinates of the current selection.
            </summary>
            <param name="anchorPoint">A SourcePoint representing the anchor coordinates of the current selection.
            This can be in virtual space.</param>
            <param name="activePoint">A SourcePoint representing the active coordinates of the current selection.
            This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Get(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets all coordinates of the current selection.
            </summary>
            <param name="anchorLine">The anchor line of the current selection.</param>
            <param name="anchorColumn">The anchor column of the current selection. This can be in virtual space.</param>
            <param name="activeLine">The active line of the current selection.</param>
            <param name="activeColumn">The active column of the current selection. This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.GetEnd(System.Int32@)">
            <summary>
            Gets the ending coordinates of the current selection converted to a stream coordinate. This value represents
            an offset in the underlying text stream so it cannot be inside of virtual space. If the ending point
            of the selection is in virtual space, the nearest position will be returned.
            </summary>
            <param name="position">The text stream position of the current selection's ending point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.GetEnd(DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Gets the ending coordinates of the current selection.
            </summary>
            <param name="point">A SourcePoint representing the ending coordinates of the current selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.GetEnd(System.Int32@,System.Int32@)">
            <summary>
            Gets the ending coordinates of the current selection.
            </summary>
            <param name="line">The ending line of the current selection.</param>
            <param name="column">The ending column of the current selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.GetStart(System.Int32@)">
            <summary>
            Gets the starting coordinates of the current selection converted to a stream coordinate. This value represents
            an offset in the underlying text stream so it cannot be inside of virtual space. If the starting point
            of the selection is in virtual space, the nearest position will be returned.
            </summary>
            <param name="position">The text stream position of the current selection's starting point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.GetStart(DevExpress.CodeRush.StructuralParser.SourcePoint@)">
            <summary>
            Gets the starting coordinates of the current selection.
            </summary>
            <param name="point">A SourcePoint representing the starting coordinates of the current selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.GetStart(System.Int32@,System.Int32@)">
            <summary>
            Gets the starting coordinates of the current selection.
            </summary>
            <param name="line">The starting line of the current selection.</param>
            <param name="column">The starting column of the current selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the current selection to the specified stream coordinates.
            </summary>
            <param name="anchorPosition">The text stream position to set the selection's anchor point to.</param>
            <param name="activePosition">The text stream position to set the selection's active point to.</param>
            <param name="ensureVisible">Setting this to true scrolls the selection into view if necessary.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(System.Int32,System.Int32)">
            <summary>
            Sets the current selection to the specified stream coordinates.
            </summary>
            <param name="anchorPosition">The text stream position to set the selection's anchor point to.</param>
            <param name="activePosition">The text stream position to set the selection's active point to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Sets the current selection to the specified coordinates.
            </summary>
            <param name="range">A SourceRange representing the coordinates to set the selection to. This can be in virtual space.</param>
            <param name="ensureVisible">Setting this to true scrolls the selection into view if necessary.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets the current selection to the specified coordinates.
            </summary>
            <param name="range">A SourceRange representing the coordinates to set the selection to. This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Sets the current selection to the specified coordinates.
            </summary>
            <param name="anchorPoint">A SourcePoint representing the anchor coordinates to set the selection to.
            This can be in virtual space.</param>
            <param name="activePoint">A SourcePoint representing the active coordinates to set the selection to.
            This can be in virtual space.</param>
            <param name="ensureVisible">Setting this to true scrolls the selection into view if necessary.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the current selection to the specified coordinates.
            </summary>
            <param name="anchorPoint">A SourcePoint representing the anchor coordinates to set the selection to.
            This can be in virtual space.</param>
            <param name="activePoint">A SourcePoint representing the active coordinates to set the selection to.
            This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the current selection to the specified coordinates.
            </summary>
            <param name="anchorLine">The anchor line to set the selection to.</param>
            <param name="anchorColumn">The anchor column to set the selection to. This can be in virtual space.</param>
            <param name="activeLine">The active line to set the selection to.</param>
            <param name="activeColumn">The active column to set the selection to. This can be in virtual space.</param>
            <param name="ensureVisible">Setting this to true scrolls the selection into view if necessary.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current selection to the specified coordinates.
            </summary>
            <param name="anchorLine">The anchor line to set the selection to.</param>
            <param name="anchorColumn">The anchor column to set the selection to. This can be in virtual space.</param>
            <param name="activeLine">The active line to set the selection to.</param>
            <param name="activeColumn">The active column to set the selection to. This can be in virtual space.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SetEnd(System.Int32)">
            <summary>
            Sets the end of the current selection to specified stream coordinate.
            </summary>
            <param name="position">The text stream position to set the end of the selection to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SetEnd(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the end of the current selection to the specified coordinates.
            </summary>
            <param name="point">A SourcePoint representing the coordinates to set the end of the selection to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SetEnd(System.Int32,System.Int32)">
            <summary>
            Sets the end of the current selection to the specified coordinates.
            </summary>
            <param name="line">The line to set the end of the selection to.</param>
            <param name="column">The column to set the end of the selection to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SetStart(System.Int32)">
            <summary>
            Sets the start of the current selection to specified stream coordinate.
            </summary>
            <param name="position">The text stream position to set the start of the selection to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SetStart(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the start of the current selection to the specified coordinates.
            </summary>
            <param name="point">A SourcePoint representing the coordinates to set the start of the selection to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.SetStart(System.Int32,System.Int32)">
            <summary>
            Sets the start of the current selection to the specified coordinates.
            </summary>
            <param name="line">The line to set the start of the selection to.</param>
            <param name="column">The column to set the start of the selection to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewSelection.Save">
            <summary>
            Saves the current selection state and returns an ISavedSelection object. You can call Restore()
            on this object at a later time to restore the saved selection state in this TextView.
            </summary>
            <remarks>ISavedSelection inherits IDispose its Dispose() method should be called when it is no longer in use.</remarks>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActiveLine">
            <summary>
            Returns the active column of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActiveViewColumn">
            <summary>
            Returns the active view column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActiveOffset">
            <summary>
            Returns the active character offset of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActiveSourcePoint">
            <summary>
            Returns a SourcePoint representing the active coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActivePosition">
            <summary>
            Returns the stream coordinate of the selection's active point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorLine">
            <summary>
            Returns the anchor line of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorViewColumn">
            <summary>
            Returns the anchor view column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorOffset">
            <summary>
            Returns the anchor character offset of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorSourcePoint">
            <summary>
            Returns a SourcePoint representing the anchor coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorPosition">
            <summary>
            Returns the stream coordinate of the selection's anchor point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorIsAtStart">
            <summary>
            Determines whether the anchor is at the start of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorIsAtEnd">
            <summary>
            Determines whether the anchor is at the end of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartLine">
            <summary>
            Returns the starting line of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartViewColumn">
            <summary>
            Returns the starting view column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartOffset">
            <summary>
            Returns the starting offset of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartSourcePoint">
            <summary>
            Returns a SourcePoint representing the starting coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartPosition">
            <summary>
            Returns the stream coordinate of the selection's starting point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndLine">
            <summary>
            Returns the ending line of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndViewColumn">
            <summary>
            Returns the ending view column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndOffset">
            <summary>
            Returns the ending character offset of the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndSourcePoint">
            <summary>
            Returns a SourcePoint representing the ending coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndPosition">
            <summary>
            Returns the stream coordinate of the selection's ending point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.LogicalRange">
            <summary>
            Returns a SourceRange representing the logical coordinates of the current selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.Range">
            <summary>
            Returns a SourceRange representing the coordinates of the current selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.Height">
            <summary>
            Returns the height (in lines) of this selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.Lines">
            <summary>
            Gets the currently selected text as an array of strings representing the lines of 
            the selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.Exists">
            <summary>
            Returns true if text is selected; otherwise, false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.Mode">
            <summary>
            Gets or sets the mode of the current selection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.Text">
            <summary>
            Gets the currently selected text, or sets the currently selected text
            (replacing the existing selection, if any, and selecting the new 
            value).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActiveColumn">
            <summary>
            Returns the active column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.ActivePoint">
            <summary>
            Returns a SourcePoint representing the active coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorColumn">
            <summary>
            Returns the anchor column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.AnchorPoint">
            <summary>
            Returns a SourcePoint representing the anchor coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartColumn">
            <summary>
            Returns the starting column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.StartPoint">
            <summary>
            Returns a SourcePoint representing the starting coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndColumn">
            <summary>
            Returns the starting column of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewSelection.EndPoint">
            <summary>
            Returns a SourcePoint representing the ending coordinates of the selection. This can be in virtual space.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TextViewServices">
            <summary>
            Provides access to TextViews. TextViews represent the view into a TextDocument.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.StartTextManagerEvents">
            <summary>
            Starts listening to IVsTextManager events.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.StopTextManagerEvents">
            <summary>
            Stops listening to IVsTextManager events.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.AddVsTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Adds an IVsTextView that has been registered by Visual Studio to the internal list of 
            IVsTextViews. This is called from the IVsTextManagerEvents.OnRegisterView event handler.
            </summary>
            <param name="view">The IVsTextView to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.RemoveVsTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Removes an IVsTextView that has been unregistered by Visual Studio from the internal list of
            IVsTextViews. This is called from the IVsTextManagerEvents.OnUnregisterView event handler. 
            </summary>
            <param name="view">The IVsTextView to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.AddExistingVsTextViews">
            <summary>
            Adds all existing IVsTextViews to the internal list of IVsTextViews. This is called during 
            service initialization.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.ClearVsTextViews">
            <summary>
            Clears the internal list of IVsTextViews. This is called during service finalization.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.ClearTextViews">
            <summary>
            Clears and disposes all existing TextViews.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.DisposeTextView(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Disposes and removes a TextView.
            </summary>
            <param name="view">The TextView to dispose and remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.GetBufferFromDocData(System.Object)">
            <summary>
            VSIP helper method to retrieve an IVsTextBuffer from a document data object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.GetViewsForBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
            <summary>
            VSIP helper method to retrieve the IVsTextViews for a specified IVsTextBuffer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.FromHandle(DevExpress.CodeRush.Win32.HWND)">
            <summary>
            Gets the TextView based on the specified handle.
            </summary>
            <param name="handle">The handle of the TextView to find.</param>
            <returns>The TextView if found; null otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.Get(System.Boolean)">
            <summary>
            Gets an array of TextViews for the active TextDocument.
            </summary>
            <param name="throwOnError">If false, errors will be suppressed and cause this method will return null. Otherwise, errors will result in thrown exceptions.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.Get(DevExpress.CodeRush.Core.TextDocument,System.Boolean)">
            <summary>
            Gets an array of TextViews for the specified TextDocument.
            </summary>
            <param name="document">The document to check.</param>
            <param name="throwOnError">If false, errors will be suppressed and cause this method will return null. Otherwise, errors will result in thrown exceptions.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.Get">
            <summary>
            Gets an array of TextViews for the active TextDocument.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.Get(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Gets an array of TextViews for the specified TextDocument.
            </summary>
            <param name="document">The document to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.RestorePosition(DevExpress.CodeRush.Core.ViewPosition)">
            <summary>
            Restores the specified view. If the file associated with the view has been closed, it will be reopened.
            The restored TextView is returned. NOTE: This method sets focus to the restored by posting a
            message to the TextView's message queue. So, calling CodeRush.TextViews.Active or
            TextView.Active is not guaranteed to return the newly restored TextView until that message
            is handled. If any other operations need to be performed on the restored view, use the TextView 
            returned by this method.
            </summary>
            <param name="viewPosition">The ViewPosition object to restore. You can get a new ViewPosition by calling CodeRush.TextViews.SavePosition().</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.SavePosition(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Creates and returns a new ViewPosition object for the specified TextView.
            </summary>
            <param name="textView">The TextView to get ViewPosition information from. If null, the active TextView is used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.SavePosition">
            <summary>
            Creates and returns a new ViewPosition object for the active TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.Focus(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Focuses the specified TextView.
            </summary>
            <param name="textView">The TextView to focus.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.GdiPaint(DevExpress.CodeRush.Core.EditorPaintEventHandler)">
            <summary>
            Iterates through all TextViews for the active document, calling the specified event handler.
            </summary>
            <param name="editorPaintEventHandler">The EditorPaintEventHandler to call for each TextView. You can 
            create an EditorPaintEventHandler stub by double-clicking one of the paint events on your 
            in the plug-in designer.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.Refresh">
            <summary>
            Invalidates all TextViews.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.CreateNewTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Creates and registers a new TextView from the specified IVsTextView and VsTextEditPane sub-class.
            </summary>
            <param name="view">The IVsTextView to create a new TextView with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.EnableSubClasses">
            <summary>
            This property is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TextViewServices.DisableSubClasses">
            <summary>
            This property is for internal DXCore use only. Do not use as it is subject to change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewServices.ExecutingEditLineDown">
            <summary>
            Determines whether Visual Studio is currently executing the Edit.LineDown command.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewServices.Active">
            <summary>
            Gets the active TextView.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewServices.ImeCompositionActive">
            <summary>
            Determines whether an IME composition is in an active state, 
            and we're waiting for the end of the composition. IME stands 
            for Input Method Editor. IMEs are typically used to input 
            unicode characters such as Kanji.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TextViewServices.LineHeight">
            <summary>
            Returns the line height of the active TextView. If there is not active TextView, zero is returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Vs8TextViewLines.GetLastLineIndex(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32@,System.Int32@)">
            <summary>
            Returns the last line and index from an IVsTextBuffer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Vs8TextViewLines.EndsRegion(System.Int32)">
            <summary>
            Returns true if the given line number is the ending line of a visible region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Vs8TextViewLines.StartsRegion(System.Int32)">
            <summary>
            Returns true if the given line number is the starting line of a visible region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Vs8TextViewLines.InCollapsedRegion(System.Int32)">
            <summary>
            Determines whether or not the given line number is inside of a collapsed hidden region or not.
            Note that this will return true both for the starting and ending lines of a region.
            </summary>
            <param name="lineNumber">The line number to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Vs8TextViewLines.InCollapsedRegion(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean,System.Boolean)">
            <summary>
            Determines whether or not the given SourcePoint is inside of a collapsed hidden region or not.
            </summary>
            <param name="pos">The SourcePoint check.</param>
            <param name="checkStart">Defines if start point of the region should be considered</param>
            <param name="checkEnd">Defines if end point of the region should be considered</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Vs8TextViewLines.LineMapChanging">
            <summary>
            Determines whether or not Visual Studio is currently updating the line-to-buffer mapping
            for this TextView.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Word">
            <summary>
            Represents the text and range of a particular word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Word.Text">
            <summary>
            Gets the text of this word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Word.Range">
            <summary>
            Gets the range of this word.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Word.IsIdentifier">
            <summary>
            Returns true if this word is an identifier in the active language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Word.IsKeyword">
            <summary>
            Returns true if this word is a keyword in the active language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Word.IsNumber">
            <summary>
            Returns true if this word is a number in the active language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ThirdPartyExtensionsService.IsAutoBraceCompleteOn">
            <summary>
            Returns true if Microsoft Productivity Power Tools extension is installed and 
            AutoBraceComplete feature is On.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ThirdPartyExtensionsService.IsQuickFindActive">
            <summary>
            Returns true if Microsoft Productivity Power Tools QuickFind feature is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ThirdPartyExtensionsService.IsQuickFindFocused">
            <summary>
            Returns true if Microsoft Productivity Power Tools QuickFind feature is active and has focus.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IThirdPartyExtensionsAnalyzer.IsQuickFindActive">
            <summary>
            Returns true if Microsoft Productivity Power Tools QuickFind feature is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.IThirdPartyExtensionsAnalyzer.IsQuickFindFocused">
            <summary>
            Returns true if Microsoft Productivity Power Tools QuickFind feature is active and has focus.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.Tile">
            <summary>
            Tiles are rectangular regions that can be dropped on the TextView during a paint, and 
            monitored for subsequent mouse actions (like SetCursor, MouseDown, MouseUp, MouseMove, 
            etc.)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.Invalidate">
            <summary>
            Invalidates the TextView associated with this Tile.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.OnSetCursor(DevExpress.CodeRush.Core.EditorSetCursorEventArgs)">
            <summary>
            Triggers the TileSetCursor event.
            </summary>
            <param name="ea"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.OnMouseDown(DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileMouseDown event.
            </summary>
            <param name="ea"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.OnDoubleClick(DevExpress.CodeRush.Core.EditorMouseEventArgs)">
            <summary>
            Triggers the TileDoubleClick event.
            </summary>
            <param name="ea"></param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.OnMouseEnter">
            <summary>
            Triggers the TileMouseEnter event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.OnMouseLeave">
            <summary>
            Triggers the TileMouseLeave event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.SetTextView(DevExpress.CodeRush.Core.TextView)">
            <summary>
            Sets the TextView. Called from the TextView's AddTile method.
            </summary>
            <param name="textView">The TextView to associate with this Tile.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.Tile.op_Implicit(DevExpress.CodeRush.Core.Tile)~System.Drawing.Rectangle">
            <summary>
            Allows implicit comparisons between Tiles and Rectangles.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Tile.Bounds">
            <summary>
            The rectangular region for this Tile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Tile.Object">
            <summary>
            The object associated with this Tile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Tile.Owner">
            <summary>
            The plug-in that registered this tile. This property is used to direct tile events to its owner.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.Tile.TextView">
            <summary>
            Gets the TextView that contains this Tile.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TileCollection.Find(System.Drawing.Point)">
            <summary>
            Finds a Tile containing the specified point.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TileCollection.Find(System.Int32,System.Int32)">
            <summary>
            Finds a Tile containing the specified coordinates.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ToolWindow">
            <summary>
            Represents a DXCore ToolWindow.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindow.Hide">
            <summary>
            Hides the tool window.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindow.Show">
            <summary>
            Creates the tool window if necessary and displays it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.Guid">
            <summary>
            The System.Guid that uniquely identifies this tool window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.Image">
            <summary>
            Returns the picture that is displayed when this tool window is docked in a tab.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.MenuButton">
            <summary>
            Returns the IMenuButton that is automatically created for this tool window in the DXCore "Tool Windows" menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.PlugIn">
            <summary>
            Returns the IToolWindowPlugIn for this tool window. NOTE: this value will be null if the tool window has not yet be displayed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.PlugInControl">
            <summary>
            Returns the UserControl for this ToolWindowPlugIN. NOTE: this value will be null if the tool window has not yet be displayed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.SubMenu">
            <summary>
            Returns the name of the sub-menu (if any) that this tool window adds to the DXCore "Tool Windows" menu.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.Title">
            <summary>
            Returns the title of this tool window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.AddMenuButton">
            <summary>
            Reurns true if CodeRush registers menu button for this tool window
            in a menu or on a command bar.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.RestoreOnStartUp">
            <summary>
            True if CodeRush restores visibility, size and position 
            of this tool window on startup.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.Type">
            <summary>
            Returns the System.Type of the ToolWindowPlugIn for this tool window. NOTE: accessing this 
            property may be expensive as it forces the ToolWindowPlugIn's assembly to be loaded if it 
            isn't already.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.Visible">
            <summary>
            Gets or sets whether or not this tool window is visible.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindow.Window">
            <summary>
            Gets the EnvDTE.Window for this tool window. NOTE: this value will be null if the tool window
            has not been displayed yet.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.SortMenu(DevExpress.CodeRush.Menus.IMenuPopup)">
            <summary>
            Sorts the items in an IMenuPopup by type and caption.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.SortMenus">
            <summary>
            Called after CodeRush is loaded to sort the ToolWindows menu properly.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.GetPlugInControl(System.String)">
            <summary>
            Returns the base UserControl of a DXCore tool window plug-in.
            </summary>
            <param name="guid">The guid that uniquely identifies the tool window.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.GetPlugInControl(System.Guid)">
            <summary>
            Returns the base UserControl of a DXCore tool window plug-in.
            </summary>
            <param name="guid">The guid that uniquely identifies the tool window.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.GetPlugInControl(System.Type)">
            <summary>
            Returns the base UserControl of a DXCore tool window plug-in.
            </summary>
            <param name="type">The System.Type of the DXCore tool window.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.GetPlugInControl``1">
            <summary>
            Returns the base UserControl of a DXCore tool window plug-in.
            </summary>
            <typeparam name="T">The DXCore tool window plug-in to retrieve.</typeparam>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.Register(System.Type)">
            <summary>
            Registers a DXCore ToolWindowPlugIn. This is called by the DXCore plug-in loader.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowsServices.Register(System.Guid,DevExpress.CodeRush.Core.TransparentBitmap,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Registers a DXCore ToolWindowPlugIn. This is called by the DXCore plug-in loader.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindowsServices.Item(System.Guid)">
            <summary>
            Returns the ToolWindow represented by the specified System.Guid.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ToolWindowsServices.Item(System.Type)">
            <summary>
            Returns the ToolWindow represented by the specified System.Type 
            (e.g. CodeRush.ToolWindows[typeof(MyToolWindowPlugIn)]).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.DxToolWindow">
             <summary>
             This class implements the tool window exposed by this package and hosts a user control.
            
             In Visual Studio tool windows are composed of a frame (implemented by the shell) and a pane, 
             usually implemented by the package implementer.
            
             This class derives from the ToolWindowPane class provided from the MPF in order to use its 
             implementation of the IVsWindowPane interface.
             </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.DxToolWindow.#ctor">
            <summary>
            Standard constructor for the tool window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.DxToolWindow.Window">
            <summary>
            This property returns the handle to the user control that should
            be hosted in the Tool Window.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.Core.ToolWindowShim.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowShim.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ToolWindowShim.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TransparentBitmap.IsEmptyBitmap">
            <summary>
            Returns true if the bitmap was generated (wasn't set manually).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.TransparentBitmap.IsValidBitmap">
            <summary>
            Returns false if all pixels of the bitmap have same color.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.TransparentBitmapHelper.GetAnyBitmap(DevExpress.DXCore.Controls.Utils.ImageCollectionBase,System.Int32,DevExpress.CodeRush.Core.TransparentBitmap)">
            <summary>
            Returned transparent bitmap from list if possible or return existed bitmap
            </summary>
            <param name="firstList">List of images</param>
            <param name="index">Index on image</param>
            <param name="bitmap">Another bitmap returned if not exists in list</param>
            <returns>Transparent bitmap</returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.TutorialProviderBase">
            <summary>
            Summary description for TutorialProviderBase.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionCancelledEventArgs.UndoManager">
            <summary>
            The undo manager that this event was fired for.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionCancelledEventArgs.Actions">
            <summary>
            The undo/redo actions that this event was fired for.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionExecutedEventArgs.UndoManager">
            <summary>
            The undo manager that this event was fired for.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionExecutedEventArgs.Description">
            <summary>
            Gets the description text of the undo/redo action that was executed.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionExecutingEventArgs.UndoManager">
            <summary>
            The undo manager that this event was fired for.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionExecutingEventArgs.Actions">
            <summary>
            The undo/redo actions that this event was fired for.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoRedoActionExecutingEventArgs.Cancel">
            <summary>
            Gets or sets whether this action will be cancelled.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Undo.IUndoRedoAction">
            <summary>
            Represents an action on the undo or redo stack. Because the undo and redo stack is constantly manipulated, it is not
            appropriate to store references to this interface. If you choose to do so, you may get unexpected results and, potentially,
            the undo and redo stacks could become corrupted.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoRedoAction.Description">
            <summary>
            Gets the description text of this undo/redo action.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoRedoAction.Index">
            <summary>
            Gets the index of this undo/redo action from the top of it's parent (undo or redo) stack.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoRedoAction.Type">
            <summary>
            Gets the type of this undo/redo action.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoRedoAction.UndoManager">
            <summary>
            Gets the undo manager that owns this undo/redo action.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoRedoAction.Object">
            <summary>
            Gets underlying undo unit object.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.IUndoRedoAction.UndoUnit">
            <summary>
            Gets underlying unit from undo unit object if possible.
            </summary>
        </member>
        <member name="F:DevExpress.DXCore.Undo.SaveItemsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.SaveItemsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.SaveItemsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetActionFromArray(DevExpress.DXCore.Undo.IUndoRedoAction[],System.Int32)">
            <summary>
            Retrieves the IUndoRedoAction from the given array at the specified index.
            </summary>
            <param name="array">The array to retrieve the IUndoRedoAction from.</param>
            <param name="index">The index in <paramref name="array"/> to retreive the IUndoRedoAction from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the length of <paramref name="array"/>.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetUndoRedoActionFromOleUnit(System.IntPtr)">
            <summary>
            Converts a COM object into an IUndoRedoAction.
            </summary>
            <param name="comPtr">A COM object that supports either IOleUndoUnit or IOleParentUndoUint.</param>
            <returns>Returns an object implementing IUndoItem if possible; otherwise, null.</returns>
            <remarks>
            This is necessary because of COM interop issues between IOleUndoUnit and IOleParentUndoUnit.
            </remarks>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.UndoRedoActionsFromComEnum(DevExpress.CodeRush.Interop.OLE.IEnumOleUndoUnits,DevExpress.DXCore.Undo.UndoRedoActionType)">
            <summary>
            Converts all of the COM objects in the given IEnumOleUndoUnits instance to an array of IUndoRedoAction.
            </summary>
            <param name="comEnum">The IEnumOleUndoUnits instance to use.</param>
            <param name="type">The UndoRedoActionType to set for each item in the returned IUndoRedoAction array.</param>
            <returns>Returns an array of IUndoRedoAction for each item in <paramref name="comEnum"/>.
            If no items exist, an empty array is returned.</returns>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetRedoActions">
            <summary>
            Gets an array of the IUndoRedoActions on the redo stack of this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetRedoActions(System.Int32)">
            <summary>
            Gets an array of the IUndoRedoActions on the redo stack of this undo manager up to the specified maximum count.
            </summary>
            <param name="maxCount">The maximum number of actions to retrieve.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetUndoActions">
            <summary>
            Gets an array of the IUndoRedoActions on the undo stack of this undo manager.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetUndoActions(System.Int32)">
            <summary>
            Gets an array of the IUndoRedoActions on the undo stack of this undo manager up to the specified maximum count.
            </summary>
            <param name="maxCount">The maximum number of actions to retrieve.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetRedoAction(System.Int32)">
            <summary>
            Gets the IUndoRedoAction at the specified index from the top of the redo stack.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the number of actions on the undo stack.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.GetUndoAction(System.Int32)">
            <summary>
            Gets the IUndoRedoAction at the specified index from the top of undo redo stack.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index"/> is less than zero or if it is greater than or equal to the number of actions on the undo stack.</exception>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.Redo(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Performs a redo operation for the given action on this undo manager. <paramref name="action"/> 
            must represent an IUndoRedoAction on the redo stack of this undo manager. In addition, if there are any IUndoRedoActions
            before <paramref name="action"/> on the redo stack, they will also be redone.
            </summary>
            <param name="action">The IUndoRedoAction on the redo stack of this undo manager to redo.</param>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoManager.Undo(DevExpress.DXCore.Undo.IUndoRedoAction)">
            <summary>
            Performs a undo operation for the given action on this undo manager. <paramref name="action"/> 
            must represent an IUndoRedoAction on the undo stack of this undo manager. In addition, if there are any IUndoRedoActions
            before <paramref name="action"/> on the undo stack, they will also be undone.
            </summary>
            <param name="action">The IUndoRedoAction on the undo stack of this undo manager to undo.</param>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoManager.OleUndoManager">
            <summary>
            Gets the underlying IOleUndoManager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoManager.RedoCount">
            <summary>
            Gets the number of actions on the redo stack of this undo manager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoManager.UndoCount">
            <summary>
            Gets the number of actions on the undo stack of this undo manager.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoManager.UndoRedoAction.Object">
            <summary>
            Gets underlying undo unit object.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoManager.UndoRedoAction.UndoUnit">
            <summary>
            Gets underlying unit from undo unit object if possible.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.OnRedoActionExecuted">
            <summary>
            Triggers the RedoActionExecuted event.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.OnRedoActionExecuting(System.Int32)">
            <summary>
            Triggers the RedoActionExecuting event for the redo action at the specified index on the active undo manager. If the event is cancelled,
            this method returns true.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.OnUndoActionExecuted">
            <summary>
            Triggers the UndoActionExecuted.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.OnUndoActionExecuting(System.Int32)">
            <summary>
            Triggers the UndoActionExecuting event for the undo action at the specified index on the active undo manager. If the event is cancelled,
            this method returns true.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.GetActiveUndoManager">
            <summary>
            Retrieves the TextBufferUndoManager from the active text buffer.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.LinkedUndoOpened">
            <summary>
            Called when a linked undo transaction is opened. At this point, a GUID for the linked undo is generated.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.LinkedUndoClosed">
            <summary>
            Called when a linked undo transaction is closed.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.LinkedUndoAborted">
            <summary>
            Called when a linked undo transaction is aborted.
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.Undo.UndoMonitor.TextBufferChanged(DevExpress.DXCore.TextBuffers.TextBuffer)">
            <summary>
            Called by DevExpress.DXCore.TextBuffers.TextBuffer when a text change occurs.
            </summary>
        </member>
        <member name="P:DevExpress.DXCore.Undo.UndoMonitor.IsLinkedUndoOpen">
            <summary>
            Determines if a linked undo transaction is open.
            </summary>
        </member>
        <member name="T:DevExpress.DXCore.Undo.UndoMonitor.ExecutingAction">
            <summary>
            Instances of this class are created temporarily and pushed onto the executing action stack when the
            UndoExecuting or RedoExecuting events fire. They are popped off to determine whether or not the
            UndoExecuted or RedoExecuted events should fire.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetNextUndoUnit(DevExpress.CodeRush.Interop.OLE.IEnumOleUndoUnits,System.IntPtr@)">
            <summary>
            Returns the next IOleUndoUnit in an IEnumOleUndoUnits instance. It handles proper marshalling. If there
            are no more units in the enumerator, this method returns false; otherwise, true.
            </summary>
            <param name="unitEnum">The IEnumOleUndoUnits instance to get the next IOleUndoUnit from.</param>
            <param name="unit">The returned IOleUndoUnit. This may be null if the pointer in the IEnumOleUndoUnits
            instance can not be QI'd for IOleUndoUnit.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetDescriptions(DevExpress.CodeRush.Interop.OLE.IEnumOleUndoUnits)">
            <summary>
            Gets all undo descriptions from an IEnumOleUndoUnits instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.UndoTo(DevExpress.CodeRush.Core.TextDocument,Microsoft.VisualStudio.OLE.Interop.IOleUndoUnit)">
            <summary>
            Executes an undo up to and including the specifed unit on the undo stack of the specifed TextDocument.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack to use.</param>
            <param name="unit">The undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetUndoManager(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Returns the IOleUndoManager for a TextDocument. If no IOleUndoManager is found, null is returned.
            </summary>
            <param name="textDoc">The TextDocument to retrieve the IOleUndoManager from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.Abort">
            <summary>
            Aborts a previously open undo context (cancelling all edits made since the context was open). 
            You can open an undo context by calling Undo.BeginUpdate();
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.BeginUpdate(System.String)">
            <summary>
            Marks the start of a sequence of changes that will be treated as a single undo operation (also known as an "undo context").
            </summary>
            <param name="actionDescription">A description of the action you are about to perform. Note that only 
            the topmost BeginUpdate's description will be associated with the undo action. Action descriptions in 
            nested BeginUpdate calls are ignored.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.BeginUpdate(System.String,System.Boolean)">
            <summary>
            Marks the start of a sequence of changes that will be treated as a single undo operation 
            (also known as an "undo context"). You can nest multiple paired calls to BeginUpdate and 
            EndUpdate within each other.
            </summary>
            <param name="actionDescription">A description of the action you are about to perform. Note that only 
            the topmost BeginUpdate's description will be associated with the undo action. Action descriptions in 
            nested BeginUpdate calls are ignored.</param>
            <param name="strictStackLinkage">Determines whether changes to multiple documents under a single undo context can be undone 
            individually (aStrictStackLinkage == false) or if the each document's undo stack be linked together at this entry in the undo
            stack (aStrictStackLinkage == true), resulting in a linked undo/redo for all modified documents (undo in one undoes in all documents affected by your operations).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.EndUpdate">
            <summary>
            Marks the end of a sequence of changes that will be treated as a single undo operation. If this
            is the outermost EndUpdate for a particular sequence of actions, then the previously-open undo context 
            will be closed and the edit actions will be committed. You can nest multiple paired calls to 
            BeginUpdate and EndUpdate within each other.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.Undo">
            <summary>
            Performs an undo operation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.Redo">
            <summary>
            Performs a redo operation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.InsertMarker(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Inserts an empty undo unit (or "undo marker") onto the undo stack of the specified TextDocument. This is 
            useful for situations in which the undo stack needs to be restored to a specific state. A System.Int32 cookie
            value is returned which can be used with RollbackToMarker to restore the undo stack state.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack the marker will be added to.</param>
            <param name="description">The text that will be displayed in VS .NET's undo/redo dropdown lists.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.InsertMarker(System.String)">
            <summary>
            Inserts an empty undo unit (or "undo marker") onto the undo stack of the specified TextDocument. This is 
            useful for situations in which the undo stack needs to be restored to a specific state. A System.Int32 cookie
            value is returned which can be used with RollbackToMarker to restore the undo stack state.
            </summary>
            <param name="description">The text that will be displayed in VS .NET's undo/redo dropdown lists.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RedoTo(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Executes a redo up to and including the unit with the specified descirption on the redo stack of 
            the specifed TextDocument.
            </summary>
            <param name="textDoc">The TextDocument whose redo stack to use.</param>
            <param name="description">The description of the undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RedoTo(System.String)">
            <summary>
            Executes a redo up to and including the unit with the specified description on the active redo stack.
            </summary>
            <param name="description">The description of the undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RollbackToMarker(System.Int32)">
            <summary>
            Returns the state of the undo stack of the specified TextDocument to its position before the 
            specified undo marker.
            </summary>
            <param name="cookie">The cookie value of the marker (returned by InsertMarker).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RollbackToMarker(DevExpress.CodeRush.Core.TextDocument,System.Int32)">
            <summary>
            Returns the state of the undo stack of the specified TextDocument to its position before the 
            specified undo marker.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack to roll back.</param>
            <param name="cookie">The cookie value of the marker (returned by InsertMarker).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.MarkerIsLast(DevExpress.CodeRush.Core.TextDocument,System.Int32)">
            <summary>
            Defines if specified undo marker is last in the undo stack.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack to check.</param>
            <param name="cookie">The cookie value of the marker (returned by InsertMarker).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.UndoTo(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Executes an undo up to and including the unit with the specified description on the undo stack of 
            the specifed TextDocument.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack to use.</param>
            <param name="description">The description of the undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.UndoTo(System.String)">
            <summary>
            Executes an undo up to and including the unit with the specified description on the active undo stack.
            </summary>
            <param name="description">The description of the undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.UndoTo(System.String,System.String)">
            <summary>
            Executes an undo up to and including the unit with the specified description on the undo stack of 
            the specifed TextBuffer.
            </summary>
            <param name="bufferName">The name of TextBuffer whose undo stack to use.</param>
            <param name="description">The description of the undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetUndoDescriptions(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Returns an array of undo descriptions from the undo stack for the given
            TextDocuemnt.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack will be used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetUndoDescriptions">
            <summary>
            Returns an array of undo descriptions from the undo stack for the active
            TextDocuemnt.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetRedoDescriptions(DevExpress.CodeRush.Core.TextDocument)">
            <summary>
            Returns an array of redo descriptions from the redo stack for the given
            TextDocuemnt.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack will be used.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.GetRedoDescriptions">
            <summary>
            Returns an array of redo descriptions from the redo stack for the active
            TextDocuemnt.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RunInCompoundAction(System.String,System.Boolean,DevExpress.CodeRush.Core.EditInCompoundActionHandler)">
            <summary>
            Runs operation in compound action.
            </summary>
            <param name="description">The description to use.</param>
            <param name="saveSelection">Determines if selection should be saved.</param>
            <param name="operation">The operation to run.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RunInCompoundAction(System.String,System.Boolean,System.Collections.Generic.IEnumerable{DevExpress.CodeRush.Core.EditInCompoundActionHandler})">
            <summary>
            Runs operations in compound action.
            </summary>
            <param name="description">The description to use.</param>
            <param name="saveSelection">Determines if selection should be saved.</param>
            <param name="operations">The operations to run.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.OpenParentUnit(System.String)">
            <summary>
            Marks the start of a sequence of changes that will be treated as a single undo operation. Store 
            a reference to the returned DevExpress.CodeRush.Interop.OLE.Helpers.ParentUndoUnit and pass it to 
            CloseParentUnit when you are finished with the operation. OpenParentUnit/CloseParentUnit often 
            results in a more powerful undo than BeginUpdate/EndUpdate but can only be used with TextDocuments.
            If this method succeeds, it returns a new ParentUndoUnit; otherwise, it returns null.
            </summary>
            <param name="actionDescription">A description of the action you are about to perform. Note that only 
            the topmost ParentUnit's description will be displayed in the undo list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.OpenParentUnit(System.String,System.Boolean)">
            <summary>
            Marks the start of a sequence of changes that will be treated as a single undo operation. Store 
            a reference to the returned DevExpress.CodeRush.Interop.OLE.Helpers.ParentUndoUnit and pass it to 
            CloseParentUnit when you are finished with the operation. OpenParentUnit/CloseParentUnit often 
            results in a more powerful undo than BeginUpdate/EndUpdate but can only be used with TextDocuments.
            If this method succeeds, it returns a new ParentUndoUnit; otherwise, it returns null.
            </summary>
            <param name="actionDescription">A description of the action you are about to perform. Note that only 
            the topmost ParentUnit's description will be displayed in the undo list.</param>
            <param name="saveSelection">If true, a special undo unit will be added to parentUnit
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.OpenParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit)">
            <summary>
            Marks the start of a sequence of changes that will be treated as a single undo operation. Store 
            a reference to the returned DevExpress.CodeRush.Interop.OLE.Helpers.ParentUndoUnit and pass it to 
            CloseParentUnit when you are finished with the operation. OpenParentUnit/CloseParentUnit often 
            results in a more powerful undo than BeginUpdate/EndUpdate but can only be used with TextDocuments.
            If this method succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">An instance of a class that properly implements 
            DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.OpenParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit,System.Boolean)">
            <summary>
            Marks the start of a sequence of changes that will be treated as a single undo operation. Store 
            a reference to the returned DevExpress.CodeRush.Interop.OLE.Helpers.ParentUndoUnit and pass it to 
            CloseParentUnit when you are finished with the operation. OpenParentUnit/CloseParentUnit often 
            results in a more powerful undo than BeginUpdate/EndUpdate but can only be used with TextDocuments.
            If this method succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">An instance of a class that properly implements 
            DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit.</param>
            <param name="saveSelection">If true, a special undo unit will be added to parentUnit
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.CloseParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit)">
            <summary>
            Closes a previously opened DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit and 
            adds it to the undo stack. If this method succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">The specified IOleParentUndoUnit to close.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.CloseParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit,System.Boolean)">
            <summary>
            Closes a previously opened DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit. If this method 
            succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">The specified IOleParentUndoUnit to close.</param>
            <param name="commit">If true, adds the IOleParentUndoUnit to the undo stack. If false, 
            the ParentUndoUnit is discarded.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.CloseParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit,System.Boolean,System.Boolean)">
            <summary>
            Closes a previously opened DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit. If this method 
            succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">The specified IOleParentUndoUnit to close.</param>
            <param name="commit">If true, adds the IOleParentUndoUnit to the undo stack. If false, 
            the ParentUndoUnit is discarded.</param>
            <param name="saveSelection">If true, a special undo unit will be added to parentUnit
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.CommitParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit)">
            <summary>
            Closes a previously opened DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit and 
            adds it to the undo stack. If this method succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">The specified IOleParentUndoUnit to close.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.CommitParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit,System.Boolean)">
            <summary>
            Closes a previously opened DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit and 
            adds it to the undo stack. If this method succeeds, it returns true; otherwise, false.
            </summary>
            <param name="parentUnit">The specified IOleParentUndoUnit to close.</param>
            <param name="saveSelection">If true, a special undo unit will be added to parentUnit
            that saves the current text selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.DiscardParentUnit(DevExpress.CodeRush.Interop.OLE.Helpers.IParentUndoUnit)">
            <summary>
            Closes a previously opened DevExpress.CodeRush.Interop.OLE.IOleParentUndoUnit and 
            discards it (does not add it to the undo stack). If this method succeeds, it returns true; 
            otherwise, false.
            </summary>
            <param name="parentUnit">The specified IOleParentUndoUnit to close.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.Add(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Interop.OLE.Helpers.IUndoUnit)">
            <summary>
            Adds a custom undo unit to the top of the specified TextDocument's undo stack. Note: depending on the state
            of the stack this may be added to the redo stack. (E.g., if the stack is currently undoing.)
            </summary>
            <param name="textDoc">The TextDocument whose undo stack the custom undo unit will be added to.</param>
            <param name="unit">The custom undo unit to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.Add(DevExpress.CodeRush.Interop.OLE.Helpers.IUndoUnit)">
            <summary>
            Adds a custom undo unit to the top of the active undo stack. Note: depending on the state
            of the stack this may be added to the redo stack. (E.g., if the stack is currently undoing.)
            </summary>
            <param name="unit">The custom undo unit to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RedoTo(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Interop.OLE.Helpers.IUndoUnit)">
            <summary>
            Executes a redo up to and including the specifed unit on the redo stack of the specifed TextDocument.
            </summary>
            <param name="textDoc">The TextDocument whose redo stack to use.</param>
            <param name="unit">The undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.RedoTo(DevExpress.CodeRush.Interop.OLE.Helpers.IUndoUnit)">
            <summary>
            Executes a redo up to and including the specifed unit on the active redo stack.
            </summary>
            <param name="unit">The undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.UndoTo(DevExpress.CodeRush.Core.TextDocument,DevExpress.CodeRush.Interop.OLE.Helpers.IUndoUnit)">
            <summary>
            Executes an undo up to and including the specifed unit on the undo stack of the specifed TextDocument.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack to use.</param>
            <param name="unit">The undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.UndoTo(DevExpress.CodeRush.Interop.OLE.Helpers.IUndoUnit)">
            <summary>
            Executes an undo up to and including the specifed unit on the active undo stack.
            </summary>
            <param name="unit">The undo unit to stop after.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.FindRedoByDescription(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Returns the first top-level undo unit with the specified description from the 
            specified TextDocument's undo stack.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack will be searched.</param>
            <param name="description">The description of the undo unit to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.FindRedoByDescription(System.String)">
            <summary>
            Returns the first top-level undo unit with the specified description from the active undo stack.
            </summary>
            <param name="description">The description of the undo unit to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.FindUndoByDescription(DevExpress.CodeRush.Core.TextDocument,System.String)">
            <summary>
            Returns the first top-level undo unit with the specified description from the 
            specified TextDocument's undo stack.
            </summary>
            <param name="textDoc">The TextDocument whose undo stack will be searched.</param>
            <param name="description">The description of the undo unit to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.UndoServices.FindUndoByDescription(System.String)">
            <summary>
            Returns the first top-level undo unit with the specified description from the active undo stack.
            </summary>
            <param name="description">The description of the undo unit to find.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoServices.ActiveUndoManager">
            <summary>
            Returns the IOleUndoManager for the active TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoServices.LastRedoDescription">
            <summary>
            Returns the description of the last unit on the redo stack or an empty string if the redo stack is empty.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoServices.LastUndoDescription">
            <summary>
            Returns the description of the last unit on the undo stack or an empty string if the undo stack is empty.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.UndoServices.IsValidUndoManager">
            <summary>
            Checks if undo manager is valid.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.VariableSubServices">
            <summary>
            Manages template variables, accessible through CodeRush.Templates.Variables.
            The Get and Set StringProviders work with data in this class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VariableSubServices.Clear">
            <summary>
            Removes all variables.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VariableSubServices.Clear(System.String)">
            <summary>
            Sets the value of the specified variable to String.Empty.
            </summary>
            <param name="varName">The variable name to change.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VariableSubServices.Set(System.String,System.String)">
            <summary>
            Sets the specified variable to the specified value.
            </summary>
            <param name="varName">The name of the variable to set.</param>
            <param name="newValue">The new value of the variable.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VariableSubServices.Get(System.String)">
            <summary>
            Gets the value of the specified variable.
            </summary>
            <param name="varName">The name of the variable to check.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.VersionServices">
            <summary>
            VersionServices supplies version information for CodeRush.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.Major">
            <summary>
            Returns the major version number as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.VERSION_Major">
            <summary>
            Returns the major version number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.Minor">
            <summary>
            Returns the minor version number as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.VERSION_Minor">
            <summary>
            Returns the minor version number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.Build">
            <summary>
            Returns the build number as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.VERSION_Build">
            <summary>
            Returns the build number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.Revision">
            <summary>
            Returns the revision number as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.VERSION_Revision">
            <summary>
            Returns the revision number.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.MajorDotMinor">
            <summary>
            Returns the major version number and minor version numbers separated by a "." (e.g., "1.0").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.FullName">
            <summary>
            Returns the full version number of this product (e.g., "1.1B (Release Candidate").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VersionServices.Classification">
            <summary>
            Returns the release state of this product (
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ViewPaneBase">
            <summary>
            Ancestor class for ViewPanes. Descendants must prefix the class declaration 
            with the ViewPaneID() attribute, specifying a unique view name used for 
            storage and load on demand.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.GetSerializationID">
            <summary>
            Gets the serialization ID used to persist layouts holding this ViewPane.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.OnHiding">
            <summary>
            Triggers the Hiding event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.OnGetAvailability(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection,System.Boolean@)">
            <summary>
            Triggers the GetAvailability event.
            </summary>
            <param name="activeElement">The active element at the caret.</param>
            <param name="declaration">The node that represents the declaration of the active element.</param>
            <param name="references">A collection of nodes that represent all references to the active element.</param>
            <param name="isAvailable">This boolean is set to true if this ViewPane is available.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.OnGetAvailability(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Triggers the GetAvailability event, and sets the property IsAvailable to true if this ViewPane is available,
            false otherwise.
            </summary>
            <param name="activeElement">The active element at the caret.</param>
            <param name="declaration">The node that represents the declaration of the active element.</param>
            <param name="references">A collection of nodes that represent all references to the active element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.OnGetBestSize(System.Int32@,System.Int32@)">
            <summary>
            Triggers the GetBestSize event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.OnShowing(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Triggers the Showing event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneBase.OnSubViewChanged">
            <summary>
            Triggers the SubViewChanged event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ViewPaneBase.GetAvailability">
            <summary>
            Occurs when the caret moves and context changes. You must handle this event and set ea.IsAvailable to true if your ViewPane is to be displayed.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ViewPaneBase.GetBestSize">
            <summary>
            Occurs when the view needs to size itself to the current layout. Called after the Showing event.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ViewPaneBase.Hiding">
            <summary>
            Occurs when the view pane is no longer available, or there is nothing to view. 
            Handle this event to null-out any references allocated/saved in previous 
            GetAvailability or Showing event handlers.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ViewPaneBase.Showing">
            <summary>
            Occurs when the view is shown.
            </summary>
        </member>
        <member name="E:DevExpress.CodeRush.Core.ViewPaneBase.SubViewChanged">
            <summary>
            Occurs when the SubViewName property changes, typically due 
            to context-sensitive layout changes. Handle this event to change 
            the custom sub-view inside your ViewPane.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneBase.IsAvailable">
            <summary>
            Gets or sets whether this ViewPane is available for the current context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneBase.SubViewName">
            <summary>
            If your ViewPane supports more than one user-selectable sub-views 
            (e.g., a ViewPane that can show code or a class diagram), then 
            specify a unique name for the active view (e.g., "Code" or "Diagram").
            You can also use this string to specify additional user-selectable data
            that should be stored with a particular (context-sensitive) layout.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneBase.Title">
            <summary>
            The title of this ViewPane.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ViewPaneServices">
            <summary>
            Summary description for ViewPaneServices.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneServices.CreateViewPanes">
            <summary>
            Creates all registered ViewPanes and stores them in both a 
            ViewPaneCollection (for easy, type-safe iteration), and a 
            Hashtable (for fast PanelID-based access).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneServices.GetID(System.Type)">
            <summary>
            Gets the panel ID for a specified paneType.
            </summary>
            <param name="paneType">The ViewPane type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneServices.Register(System.Type)">
            <summary>
            Registers a ViewPane. This method is used internally by the plug-in loader and should not be called by plug-ins. 
            </summary>
            <param name="paneType">pageType is of type System.Type. Use the typeof operator to retrieve this.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneServices.ViewPaneTypesByID">
            <summary>
            Returns a Hashtable of all registered ViewPaneTypes
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneServices.All">
            <summary>
            Gets a ViewPaneCollection of all registered ViewPanes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneServices.ByID">
            <summary>
            Gets a registered ViewPane based on the specified ID.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPaneType.CreateInstance">
            <summary>
            Creates an instance of this ViewPane, triggering demand if needed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPaneType.PaneID">
            <summary>
            Returns the ID for this ViewPane.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ViewPosition">
            <summary>
            Represents the location of a view to a TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ViewPosition.Restore">
            <summary>
            Activates and restores the view, if it is still available. When finished, it returns 
            the newly restored TextView. NOTE: This method sets focus to the restored by posting a
            message to the TextView's message queue. So, calling CodeRush.TextViews.Active or
            TextView.Active is not guaranteed to return the newly restored TextView until that message
            is handled. If any other operations need to be performed on the restored view, use the 
            TextView returned by this method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPosition.FullDocName">
            <summary>
            The full name of the document associated with this view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPosition.LinesInView">
            <summary>
            The number of lines in view.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ViewPosition.TopLine">
            <summary>
            The top line of the view.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VsBinding.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the VsBinding class.
            </summary>
            <param name="binding">The binding text to get data</param>
            <param name="commandName">The VS command name </param>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.VsBinding.HasConflicts(DevExpress.CodeRush.Core.ShortcutBase,DevExpress.CodeRush.Core.ShortcutBase)">
            <summary>
            Returns true if this binding has conflicts with command key binding.
            </summary>
            <param name="firstKey">The command first key binding to check.</param>
            <param name="secondKey">The command second key binding to check.</param>
            <returns>
            Returns true if this binding has conflicts with command key binding.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VsBindingKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the VsBindingKey class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VsBindingKey.Conflicts(DevExpress.CodeRush.Core.ShortcutBase)">
            <summary>
            Returns true if this vs binding key conflicts with the given shortcut key.
            </summary>
            <param name="key">The shortcut key to check.</param>
            <returns>
            Returns true if this vs binding key conflicts with the given shortcut key.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FontAndColorCategories.GetCategory(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Create FontAndColorCategory using data from registry cache.
            </summary>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.FontAndColorCategories.GetCategory(Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorDefaultsProvider,System.String,System.Guid,System.Guid)">
            <summary>
            Gets FontAndColorCategory from VS using IVsFontAndColorDefaultsProvider.
            </summary>    
        </member>
        <member name="M:DevExpress.CodeRush.Core.FontAndColorCategory.Load">
            <summary>
            Loads settings from VS.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FontAndColorCategoryImpl.Load">
            <summary>
            Loads settings from VS.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.FontAndColorCategoryImpl.LoadFromStorage">
            <summary>
            Return true if success.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.Name">
            <summary>
            Gets the name of the language that the options have changed for.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.LanguageServiceId">
            <summary>
            Gets a <see cref="T:System.Guid"/> representing the Visual Studio language service ID.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.AutoListMembers">
            <summary>
            Gets the value of the "Auto list members" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.HideAdvancedMembers">
            <summary>
            Gets the value of the "Hide advanced members" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.CutCopyBlanks">
            <summary>
            Gets the value of the "Apply Cut or Copy commands to blank lines when there is no selection" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.HotUrls">
            <summary>
            Gets the value of the "Enable single-click URL navigation" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.IndentSize">
            <summary>
            Gets the value of the "Indent size" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.IndentStyle">
            <summary>
            Gets the value of the "Indenting" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.InsertSpaces">
            <summary>
            Gets the value of the "Insert spaces" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.InsertTabs">
            <summary>
            Gets the value of the "Keep tabs" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.LineNumbers">
            <summary>
            Gets the value of the "Line numbers" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.NavigationBar">
            <summary>
            Gets the value of the "Navigation bar" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.ParameterInformation">
            <summary>
            Gets the value of the "Parameter information" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.TabSize">
            <summary>
            Gets the value of the "Tab size" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.VirtualSpace">
            <summary>
            Gets the value of the "Enable virtual space" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.WordWrap">
            <summary>
            Gets the value of the "Word wrap" option for this language.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.LanguageSettings.WordWrapGlyphs">
            <summary>
            Gets the value of the "Show visual glyphs for word wrap" option for this language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetVSProperties(System.String,System.String)">
            <summary>
            Retrieves the EnvDTE.Properties for the specified category and page.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetVSProperty(System.String,System.String,System.String)">
            <summary>
            Retrieves the EnvDTE.Property with the given name from the specified category and page.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetVSPropertyValue(System.String,System.String,System.String)">
            <summary>
            Gets the named property value from the specified category and page.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.SetVSPropertyValue(System.String,System.String,System.String,System.Object)">
            <summary>
            Sets the named property value from the specified category and page with the given value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.ReloadEditorFont">
            <summary>
            Reloads the editor font. This method is useful if the editor font is changed in a manner
            other than through the VS Fonts and Color settings page in the VS Options dialog.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.VersionAtLeast(DevExpress.CodeRush.Core.VisualStudioVersion)">
            <summary>
            Determines whether the currently running version of Visual Studio is the same or greater
            than the specified version.
            </summary>
            <param name="version">The version to check against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.VersionAtMost(DevExpress.CodeRush.Core.VisualStudioVersion)">
            <summary>
            Determines whether the currently running version of Visual Studio is the same or less
            than the specified version.
            </summary>
            <param name="version">The version to check against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.VersionLessThan(DevExpress.CodeRush.Core.VisualStudioVersion)">
            <summary>
            Determines whether the currently running version of Visual Studio is less than the specified
            version.
            </summary>
            <param name="version">The version to check against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.VersionGreaterThan(DevExpress.CodeRush.Core.VisualStudioVersion)">
            <summary>
            Determines whether the currently running version of Visual Studio is greater than the
            specified version.
            </summary>
            <param name="version">The version to check against.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.VersionIs(DevExpress.CodeRush.Core.VisualStudioVersion)">
            <summary>
            Determines whether the currently running version of Visual Studio is the same as the specified version.
            </summary>
            <param name="version">The version to check against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetAtStartUpValue">
            <summary>
            Gets the value of the "At startup" Visual Studio property. NOTE: If the value cannot be retrieved
            for any reason, AtStartUp.Unknown will be returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.SetAtStartUpValue(DevExpress.CodeRush.Core.AtStartUp)">
            <summary>
            Sets the value of the "At startup" Visual Studio property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetVBProperty(System.String)">
            <summary>
            Gets the EnvDTE.Property associated with the "Basic-Specific" 
            page of the TextEditor options category.
            </summary>
            <param name="propName">The name of the property to get.</param>
            <returns>Returns the EnvDTE.Property if found; null otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.SuppressVBPrettyListing">
            <summary>
            Suppresses VB's pretty listing feature. This method does not 
            check to see if VB is the active language, so you might want 
            to perform that test before calling. After calling this method 
            you must call RestoreVBPrettyListing to ensure that pretty 
            listing features are properly restored.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.EngageVBPrettyListing">
            <summary>
            Engages VB's pretty listing feature. This method does not 
            check to see if VB is the active language, so you might want 
            to perform that test before calling. After calling this method 
            you must call RestoreVBPrettyListing to ensure that pretty 
            listing features are properly restored.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.RestoreVBPrettyListing">
            <summary>
            Restores VB's pretty listing feature to the state it was in 
            before calling SuppressVBPrettyListing or EngageVBPrettyListing. 
            You must call this method sometime after calling SuppressVBPrettyListing 
            or EngageVBPrettyListing to ensure that pretty listing features are 
            properly restored.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetFontAndColorCategory(System.String)">
            <summary>
            Retrieves the FontAndColorCategory object for the specified category name.
            </summary>
            <param name="name">The name of the FontAndColorCategory object to retrieve. This
            is the value that appears in the "Show settings for" combobox on the English-language
            version of the "Fonts and Colors" Visual Studio options page.</param>
            <returns>Returns the FontAndColorCategory for the specified category name if it 
            exists; otherwise, null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetFontAndColorSetting(System.String)">
            <summary>
            Returns a FontAndColorSetting object for the specified name from the "Text Editor" category.
            </summary>
            <param name="name">The name of the FontAndColorSettings object to retrieve. This
            is the same as the text that appears in the "Display items" listbox on the English-language
            version of "Fonts and Colors" Visual Studio options page.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.VSSettingsServices.GetFontAndColorSetting(System.String,System.String)">
            <summary>
            Returns a FontAndColorSetting object for the specified name from the given category.
            </summary>
            <param name="category">The name of the category to retrieve from. This is the value that
            appears in the "Show settings for" combobox on the English-language version of the "Fonts 
            and Colors" Visual Studio options page.</param>
            <param name="name">The name of the FontAndColorSettings object to retrieve. This
            is the same as the text that appears in the "Display items" listbox on the English-language
            version of "Fonts and Colors" Visual Studio options page.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.FontsPropogating">
            <summary>
            Determines whether or not VS .NET font and color categories are propogating inherited font settings
            due to calls by the DXCore into the IVsFontAndColorStorage service. This is important because 
            TextView.ehChangeScrollInfo is called when changes are propogated and can cause recursion (resulting
            in a stack overflow).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.Version">
            <summary>
            Returns the Visual Studio version string, suitable for use in forming registry keys.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.VisualStudioVersion">
            <summary>
            Returns a VisualStudioVersion enumeration value that represents the currently running version of Visual Studio.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.FontName">
            <summary>
            The name of the font used in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.FontSize">
            <summary>
            The size of the font used in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.FontCharSet">
            <summary>
            The CharSet of the font used in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.Font">
            <summary>
            The font used in the editor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.VSSettingsServices.EnvironmentFontCategory">
            <summary>
            Returns the FontAndColorCategory object for the "Environment Font" category.
            NOTE: This is only valid in Visual Studio 2008 or later. In earlier versions 
            of Visual Studio, this will return null.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.WindowCollection">
            <summary>
            Summary description for WindowCollection.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.WindowPlugin">
            <summary>
            A base class for windowed plug-ins like ToolWindow and ViewPane. 
            Descends from UserControl, and adds Image and ImageBackColor 
            properties.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowPlugin.SetImage(System.Drawing.Bitmap)">
            <summary>
            Sets the _Image field, and also sets the _ImageBackColor
            field based on the bottom left pixel of the image.
            </summary>
            <param name="bitmap">The image to set.</param>
        </member>
        <member name="T:DevExpress.CodeRush.Core.WindowType">
            <summary>
            CodeRush replacement for the vsWindowType type in EnvDTE. Adds "Unknown", and improves readability
            by reducing noise accociated with each element (old code: "vsWindowType.vsWindowTypeDocument",
            new code: "WindowType.Document")
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetCodeWindowFromView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Returns the corresponding IVsCodeWindow from an IVsTextView interface.
            </summary>
            <param name="view">The IVsTextView to search with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetWindowFrameFromView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Returns the corresponding IVsWindowFrame from an IVsTextView interface.
            </summary>
            <param name="view">The IVsTextView to search with.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetToolboxUser(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Returns the corresponding IVsToolboxUser from an IVsWindowFrame interface. 
            NOTE: The result may be null if IVsToolboxUser is not supported on the specified IVsWindowFrame.
            </summary>
            <param name="frame">The specified IVsWindowFrame.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetToolboxUser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Returns the corresponding IVsToolboxUser from an IVsTextView interface.
            </summary>
            <param name="view">The specified IVsTextView.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetDocumentFromWindow(EnvDTE.Window)">
            <summary>
            Checks the EnvDTE.Window.Document property in a safe way that
            doesn't raise any exceptions. If the property cannot be retrieved,
            null is returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetObjectFromWindow(EnvDTE.Window)">
            <summary>
            Checks the EnvDTE.Window.Object property in a safe way that
            doesn't raise any exceptions. If the property cannot be retrieved,
            null is returned.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.GetHtmlWindowFromWindow(EnvDTE.Window)">
            <summary>
            Retrieves an EnvDTE.HTMLWindow from the specified EnvDTE.Window. If the specified window is not
            an HTML window, null is returned.
            </summary>
            <param name="window">The EnvDTE.Window to retrieve an EnvDTE.HTMLWindow for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.Get(System.String)">
            <summary>
            Gets the window corresponding to the supplied GUID.
            </summary>
            <param name="windowObjectKindGuid">The GUID of the window (the value of its ObjectKind property).</param>
            <returns>Returns the specified window.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.Activate(System.String)">
            <summary>
            Activates the window corresponding to the supplied GUID.
            </summary>
            <param name="windowObjectKindGuid">The GUID of the window (the value of its ObjectKind property).</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.ConvertWindowType(EnvDTE.vsWindowType)">
            <summary>
            Converts an EnvDTE.vsWindowType enum to a WindowType enum.
            </summary>
            <param name="windowType">The EnvDTE.vsWindowType to convert.</param>
            <returns>A WindowType enum.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.ConvertWindowType(DevExpress.CodeRush.Core.WindowType)">
            <summary>
            Converts a WindowType enum to an EnvDTE.vsWindowType enum.
            </summary>
            <param name="windowType">The WindowType to convert.</param>
            <returns>An EnvDTE.vsWindowType enum, or raises a DXCireException if windowType == WindowType.Unknown.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.IsCodeWindow(EnvDTE.Window)">
            <summary>
            Determines if a window is a text window. 
            </summary>
            <param name="window">The EnvDTE.Window to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.IsDesigner(EnvDTE.Window)">
            <summary>
            Determines if a window is a form designer.
            </summary>
            <param name="window">The EnvDTE.Window to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.IsHTMLWindow(EnvDTE.Window)">
            <summary>
            Determines if a window is an HTML window.
            </summary>
            <param name="window">The EnvDTE.Window to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.IsHTMLCodeWindow(EnvDTE.Window)">
            <summary>
            Determines if a window is an HTML window in HTML (Source) view.
            </summary>
            <param name="window">The EnvDTE.Window to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.IsHTMLDesigner(EnvDTE.Window)">
            <summary>
            Determines if a window is an HTML window in Design view.
            </summary>
            <param name="window">The EnvDTE.Window to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.Core.WindowsServices.ShowStartPage">
            <summary>
            Displays the Visual Studio start page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.Active">
            <summary>
            Returns the active window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.ActiveDocument">
            <summary>
            Returns the active document window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.ActiveType">
            <summary>
            Returns the window type of the active window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.CompletorPaneHandle">
            <summary>
            Gets the handle of completor pane. Returns HWND.Empty if no completor pane is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.ActiveTipWindowRect">
            <summary>
            Gets the TextView-relative coordinates of active VS tip window. Returns Rect.Empty if no tip window is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.LastActiveType">
            <summary>
            Returns the type of the last active window. See also: <seealso cref="P:DevExpress.CodeRush.Core.WindowsServices.ActiveType"/>
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.LastActive">
            <summary>
            Returns the last active window.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.IsIntellisenseActive">
            <summary>
            Returns true when the Intellisense window is showing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.IsAnyIntellisenseSessionActive">
            <summary>
            Returns true when any intellisense window is showing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.IsTipWindowActive">
            <summary>
            Returns true when the tip window is showing.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.TipWindowHandle">
            <summary>
            Gets the handle of the most recently displayed tool tip window. Returns HWND.Empty if no tool tip windows are active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.VisibleTipWindows">
            <summary>
            Returns an array of the currently visible tip windows.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.IsMenuActive">
            <summary>
            Returns true when a menu is active in the VS .NET IDE..
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.WindowsServices.TipWindowCollection">
            <summary>
            Returns the collection of tip windows. 
            </summary>
        </member>
        <member name="M:DevExpress.DXCore.XPO.IXPOServices.IsPersistent(DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Returns true if the passed type has a Persistent attribute and/or descends from XPObject, XPBaseObject, or XPCustomObject, and the class does not include a NonPersistent attribute.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SolutionItemsChangedEventArgs">
            <summary>
            Events args for the solution changed events.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionItemsChangedEventArgs.#ctor(DevExpress.CodeRush.Core.ChangedSolutionItem[])">
            <summary>
            Creates new instance of the SolutionChangeEventArgs.
            </summary>
            <param name="changes">The array of solution changes.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SolutionItemsChangedEventArgs.Changes">
            <summary>
            Gets an array of changed solution items.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.SolutionItemsRenamedEventArgs">
            <summary>
            Events args for the solution items renamed events.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.SolutionItemsRenamedEventArgs.#ctor(DevExpress.CodeRush.Core.RenamedSolutionItem[])">
            <summary>
            Creates new instance of the SolutionChangeEventArgs.
            </summary>
            <param name="changes">The array of solution changes.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.SolutionItemsRenamedEventArgs.Changes">
            <summary>
            Gets an array of changed solution items.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.Core.ChangedSolutionItem">
            <summary>
            Solution change item.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.ChangedSolutionItem.#ctor(System.Object,System.String,System.String[])">
            <summary>
            Creates new instance of the ChangedSolutionItem.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="name">The name of the parent.</param>
            <param name="items">The names of the items.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangedSolutionItem.Object">
            <summary>
            Gets parent object for the change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangedSolutionItem.Name">
            <summary>
            Gets parent name for the change.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.Core.ChangedSolutionItem.Items">
            <summary>
            Gets names of changed items.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.Core.RenamedSolutionItem.#ctor(System.Object,System.String,System.String[],System.String[])">
            <summary>
            Creates new instance of the RenamedSolutionItem.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="name">The name of the parent.</param>
            <param name="items">The names of the items.</param>
            <param name="newNames">The new names of the items.</param>
        </member>
        <member name="P:DevExpress.CodeRush.Core.RenamedSolutionItem.NewNames">
            <summary>
            Gets new names of changed items.
            </summary>
        </member>
    </members>
</doc>
