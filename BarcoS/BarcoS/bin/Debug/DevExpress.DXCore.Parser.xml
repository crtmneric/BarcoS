<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevExpress.DXCore.Parser</name>
    </assembly>
    <members>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.Category">
            <summary>
            Gets the formatting category for this formatting rule.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.Name">
            <summary>
            Gets the name of this formatting rule.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.SubCategory">
            <summary>
            Gets the sub formatting category, e.g. "General", "Attributes", "Arrays", etc.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.SupportedLanguage">
            <summary>
            Gets the supported language for rule
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.Enabled">
            <summary>
            Gets the boolean value for this formatting rule.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.DefaultValue">
            <summary>
            Gets the default value for this rule with FormattingOption other than boolean.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.DefaultIntValue">
            <summary>
            Gets the integer default value for this rule with FormattingOption other than boolean.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.BaseFormattingRule.EditOption">
            <summary>
            Gets the value indicating how an options is changed (e.g. boolean true/false, max value editor).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeGenObject">
            <summary>
            Base class for code generator objects.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenObject.#ctor">
            <summary>
            Creates new CodeGenObject.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenObject.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for the given element.
            </summary>
            <param name="languageElement">The element to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenObject.GenerateCode(System.IO.TextWriter,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="writer">The TextWriter to use.</param>
            <param name="languageElement">The language element to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenObject.GenerateCode(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element to generate.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenObject.GenerateCode(DevExpress.CodeRush.StructuralParser.CodeWriter,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="writer">The CodeWriter to use.</param>
            <param name="languageElement">The language element to generate.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGenObject.CodeGen">
            <summary>
            Gets code gen object that provides ability to generate code
            for all language elements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGenObject.Options">
            <summary>
            Gets code generator options.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGenObject.Code">
            <summary>
            Gets the object to write code to.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeGen">
            <summary>
            Root code generation object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.DirectiveGen">
            <summary>
            Gets preprocessor directive code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.ExpressionGen">
            <summary>
            Gets expression code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.MemberGen">
            <summary>
            Gets member code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.SupportElementGen">
            <summary>
            Gets support elements code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.StatementGen">
            <summary>
            Gets statements code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.TypeDeclarationGen">
            <summary>
            Gets type declaration code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.XmlGen">
            <summary>
            Gets xml comments code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.NamespaceReferenceGen">
            <summary>
            Gets namespace reference code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.NamespaceGen">
            <summary>
            Gets namespace code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.SnippetGen">
            <summary>
            Gets snippet elements code generator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeGen.Options">
            <summary>
            Gets code generator options.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeGenOptions">
            <summary>
            Options for code generation
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.GetRules(DevExpress.CodeRush.StructuralParser.ParserLanguageID)">
            <summary>
            Returns a collection of code formatting rules for the specified language.
            </summary>
            <param name="languageId">The language ID.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.SetDefaults(DevExpress.CodeRush.StructuralParser.ParserLanguageID)">
            <summary>
            Sets all code formatting rules for the specified language to its defaults.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.Enabled(DevExpress.CodeRush.StructuralParser.ParserLanguageID,System.String)">
            <summary>
            Returns true if the specified option is enabled.
            </summary>
            <param name="languageId">The language ID.</param>
            <param name="optionName">The option name.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.GetIntValue(DevExpress.CodeRush.StructuralParser.ParserLanguageID,System.String)">
            <summary>
            Gets the integer value of the specified option.
            </summary>
            <param name="languageId">The language ID.</param>
            <param name="optionName">The option name.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.GetStringValue(DevExpress.CodeRush.StructuralParser.ParserLanguageID,System.String)">
            <summary>
            Gets the string value of the specified option.
            </summary>
            <param name="languageId">The language ID.</param>
            <param name="optionName">The option name.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.Save(DevExpress.CodeRush.StructuralParser.ParserLanguageID)">
            <summary>
            Saves code formatting rules.
            </summary>
            <param name="languageId">The language ID.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.Format(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Apply formatting for secific range in file
            </summary>
            <param name="file">Source file for formatting</param>
            <param name="range">Source range for formattng</param>
            <returns>Returns true internal format success</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.FormatRange(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Apply formatting for secific range in file
            Ignores "Adjust code style on autoformat" option
            </summary>
            <param name="file">Source file for formatting</param>
            <param name="range">Source range for formattng</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.GetRuleChanger(DevExpress.CodeRush.StructuralParser.ParserLanguageID)">
            <summary>
            Returns rule changer for temporary rule changes
            </summary>
            <param name="language">Specify changes language</param>
            <returns>Rule changer</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IFormattingService.Item(DevExpress.CodeRush.StructuralParser.ParserLanguageID)">
            <summary>
            Returns a collection of code formatting rules for the specified language.
            </summary>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeStyle.Formatting.IRuleChanger.AddRuleValue(System.String,System.Object)">
            <summary>
            Temporary changes a rule value
            </summary>
            <param name="ruleName">Rule name</param>
            <param name="newValue">New rule value</param>
            <returns>True if successfull</returns>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeWriter">
            <summary>
            CodeGen is used to generate code from LanguageElement tree
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DirectiveCodeGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DirectiveCodeGenBase.GenerateDirective(DevExpress.CodeRush.StructuralParser.PreprocessorDirective)">
            <summary>
            Generates code for given directive.
            </summary>
            <param name="directive">The directive.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionCodeGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlXmlCodeGenBase.#ctor(DevExpress.CodeRush.StructuralParser.CodeGen)">
            <summary>
            Creates new XmlNode code generator instance using the given
            root generator.
            </summary>
            <param name="codeGen">The root code generator object.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlXmlCodeGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlXmlCodeGenBase.GenerateHtmlXmlNode(DevExpress.CodeRush.StructuralParser.XmlNode)">
            <summary>
            Generates code for given XmlNode.
            </summary>
            <param name="xmlNode">The XmlNode.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberCodeGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="element">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberCodeGenBase.GenerateMember(DevExpress.CodeRush.StructuralParser.Member)">
            <summary>
            Generates code for given member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeGenStyle">
            <summary>
            Contains information about code generation style.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenStyle.#ctor">
            <summary>
            Creates new instance of code gen style.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenStyle.RegisterElementStyle(DevExpress.CodeRush.StructuralParser.ElementCodeGenStyle)">
            <summary>
            Registers element style.
            </summary>
            <param name="style">The style to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenStyle.RegisterElementStyles(DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection)">
            <summary>
            Registers element style.
            </summary>
            <param name="styles">The styles to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeGenStyle.GetElementStyle(DevExpress.CodeRush.StructuralParser.LanguageElementType)">
            <summary>
            Gets element style by language element type.
            </summary>
            <param name="type">The language element type to get style for.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyle.ElementType">
            <summary>
            Gets language element type for the style.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection">
            <summary>
            Constains language element code gen styles.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection.Add(DevExpress.CodeRush.StructuralParser.ElementCodeGenStyle)">
            <summary>
            Adds element style to the collection.
            </summary>
            <param name="style">The style to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection.AddRange(DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection)">
            <summary>
            Adds element styles to the collection.
            </summary>
            <param name="styles">The styles to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection.Remove(DevExpress.CodeRush.StructuralParser.ElementCodeGenStyle)">
            <summary>
            Removes given element styles from the collection.
            </summary>
            <param name="style">The style to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection.Insert(System.Int32,DevExpress.CodeRush.StructuralParser.ElementCodeGenStyle)">
            <summary>
            Inserts given element style into the collection at the specified index.
            </summary>
            <param name="index">The index to insert the style.</param>
            <param name="style">The element style to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection.IndexOf(DevExpress.CodeRush.StructuralParser.ElementCodeGenStyle)">
            <summary>
            Returns index of the given element style.
            </summary>
            <param name="style">The style to get index for.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementCodeGenStyleCollection.Item(System.Int32)">
            <summary>
            Gets or sets specified element style.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IfCodeGenStyle">
            <summary>
            Conditional if statement code gen style.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IfCodeGenStyle.#ctor">
            <summary>
            Creates new instance of IfCodeGenStyle
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IfCodeGenStyle.AddSpaceAfterKeyword">
            <summary>
            Gets or sets value indicating that white space should be added
            after if statement keyword.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SupportElementCodeGenBase.GenerateSupportElement(DevExpress.CodeRush.StructuralParser.SupportElement)">
            <summary>
            Generates code for given element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SupportElementCodeGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamespaceGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamespaceReferenceGenBase.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given language element.
            </summary>
            <param name="languageElement">The language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NodeList.DeepClone">
            <summary>
            Clones this node list. All elements inside the list must implement
            ICloneable, otherwise exception will be thrown.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NodeList.DeepClone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this node list. All elements inside the list must implement
            ICloneable, otherwise exception will be thrown.
            </summary>
            <param name="options">Clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.FindElementByFullName(System.String,System.Boolean)">
            <summary>
            Finds element by the specified full name.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="caseSensitive">The value determining if case should be taken into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.DeepClone">
            <summary>
            Clones this node list. All elements inside the list must implement
            ICloneable, otherwise exception will be thrown.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.DeepClone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this node list. All elements inside the list must implement
            ICloneable, otherwise exception will be thrown.
            </summary>
            <param name="options">Clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.ToLanguageElementCollection">
            <summary>
            Creates and returns new LanguageElementCollection from this IElementCollection instance.
            This method will get corresponding LanguageElement from each IElement object.
            Note that some elements may be missing if LanguageElement can not be obtained.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.IndexOf(DevExpress.CodeRush.StructuralParser.IElement[],DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns index of the given element.
            </summary>
            <param name="elements">The array of elements to check.</param>
            <param name="element">The element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.GetEnumerable">
            <summary>
            Returns IEnumerable for this collection.
            </summary>
            <returns>Returns IEnumerable for this collection.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.GetRange">
            <summary>
            Returns combined source range for all elements inside the collection.
            </summary>
            <returns>Returns combined source range for all elements inside the collection.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.GetRange(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns FirstRange or FirstNameRange for the given element.
            </summary>
            <returns>Returns FirstRange or FirstNameRange for the given element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollection.GetRange(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.StructuralParser.IElement})">
            <summary>
            Returns combined source range for all elements.
            </summary>
            <returns>Returns combined source range for all elements.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FileSourceRange">
            <summary>
            Contains information about file and range inside the file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRange.#ctor(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new instance of FileSourceRange class for the given file and range.
            </summary>
            <param name="file">The file to use.</param>
            <param name="range">The source range inside the file.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRange.#ctor(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new instance of FileSourceRange class using first file of the given element and range.
            </summary>
            <param name="element">The element to use.</param>
            <param name="range">The source range inside the file.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.FileSourceRange.File">
            <summary>
            Gets the source file for this range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.FileSourceRange.Range">
            <summary>
            Gets or sets source range inside the file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.FileSourceRange.Data">
            <summary>
            Gets or sets associated data.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection">
            <summary>
            Contains a list of FileSourceRange instances.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.Add(DevExpress.CodeRush.StructuralParser.FileSourceRange)">
            <summary>
            Adds the given range to the collection.
            </summary>
            <param name="range">The range to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.AddRange(DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection)">
            <summary>
            Adds the given ranges to the collection.
            </summary>
            <param name="ranges">The ranges to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the given ranges to the collection.
            </summary>
            <param name="ranges">The ranges to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.IndexOf(DevExpress.CodeRush.StructuralParser.FileSourceRange)">
            <summary>
            Returns index of the given range.
            </summary>
            <param name="range">The range get index.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.Insert(System.Int32,DevExpress.CodeRush.StructuralParser.FileSourceRange)">
            <summary>
            Inserts the given range into collection.
            </summary>
            <param name="index">The index to insert new range.</param>
            <param name="range">The range to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.Remove(DevExpress.CodeRush.StructuralParser.FileSourceRange)">
            <summary>
            Removes the specified range from the collection.
            </summary>
            <param name="range">The range to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.GroupByFile">
            <summary>
            Creates and returns a hashtable that contains SourceFile 
            as a key and FileSourceRangeCollection as a value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.GetRangesFromData">
            <summary>
            Gets a collection of file source ranges for ranges array stored inside data property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.CreateInstance(DevExpress.CodeRush.StructuralParser.SourceFile,DevExpress.CodeRush.StructuralParser.SourceRange[])">
            <summary>
            Creates new instance of the FileSourceRangeCollection class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.Ranges">
            <summary>
            Gets SourceRanges for this collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.Data">
            <summary>
            Gets data associated with this collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.FileSourceRangeCollection.Item(System.Int32)">
            <summary>
            Gets or sets element at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LineRange.op_Implicit(DevExpress.CodeRush.StructuralParser.LineRange)~System.Int32">
            <summary>
            Implicitly converts an instance of type LineRange to a new instance of type int.
            </summary>
            <param name="lineRange">An instance of type LineRange to convert.</param>
            <returns>Returns a new instance of type int, derived from the specified LineRange instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LineRange.op_Implicit(System.Int32)~DevExpress.CodeRush.StructuralParser.LineRange">
            <summary>
            Implicitly converts an instance of type int to a new instance of type LineRange.
            </summary>
            <param name="numLines">An instance of type int to convert.</param>
            <returns>Returns a new instance of type LineRange, derived from the specified numLines instance.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LineRange.NumLines">
            <summary>
            The number of lines in this LineRange.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.#ctor(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates new SourcePoint from the given one. If passed
            source point has code bindings, then they will be lost.
            </summary>
            <param name="point">The original source point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.AdjustForInsertion(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Moves a SourcePoint down and/or right in response to an insertion occuring before it.
            </summary>
            <param name="insertion">The SourceRange representing the newly-inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.AdjustForDeletion(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Moves a SourcePoint up and/or left in response to a deletion occuring before it.
            </summary>
            <param name="deletion">The SourceRange representing the just-deleted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.SetFast(System.Int32,System.Int32)">
            <summary>
            Sets source point coordinates directly.
            </summary>
            <param name="line">The line of point.</param>
            <param name="offset">The offset of point.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.SetPoint(System.Int32,System.Int32)">
            <summary>
            This method is obsolete -- use Set method instead. 
            This method sets the position of this source point. This method will 
            remove the previous binding to source code (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.Set(System.Int32,System.Int32)">
            <summary>
            Sets the position of this source point. This method will 
            remove the previous bindings to source code (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.Set(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the position of this source point. This method will 
            remove the previous binding to source code (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.Set(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the position of this source point so it points to the 
            start of the specified token. This method will remove the 
            previous binding to source code (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.SetOffset(System.Int32)">
            <summary>
            Sets the offset position of this source point. This method will 
            remove the previous binding to source code (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.BindToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory)">
            <summary>
            Binds this SourcePoint to a TextDocument using the specified IDisposableEditPointFactory
            implementor. The Line and Offset properties of this SourcePoint become the line and 
            column offsets for the new IDisposableEditPoint implementor. This binding ensures that 
            this SourcePoint will always stay with its surrounding text, even when the text moves 
            in response to source code changes. IMPORTANT: If you call this BindToCode method, 
            you *must* call RemoveBinding when you no longer need this SourcePoint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.BindToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory,System.Boolean)">
            <summary>
            Binds this SourcePoint to a TextDocument using the specified IDisposableEditPointFactory
            implementor. The Line and Offset properties of this SourcePoint become the line and 
            column offsets for the new IDisposableEditPoint implementor. This binding ensures that 
            this SourcePoint will always stay with its surrounding text, even when the text moves 
            in response to source code changes. IMPORTANT: If you call this BindToCode method, 
            you *must* call RemoveBinding when you no longer need this SourcePoint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.RemoveBinding">
            <summary>
            Removes the EditPoint binding associated with this SourcePoint (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.AnchorToSourcePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Binds this SourcePoint to a SourcePoint that is currently 
            bound to the source code. Note: Binding will only occur if this 
            SourcePoint is not Empty (IOW, it must have a valid position
            before calling this method).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.AnchorToSourcePoint(DevExpress.CodeRush.StructuralParser.SourcePoint,System.Boolean)">
            <summary>
            Binds this SourcePoint to a SourcePoint that is currently 
            bound to the source code. Note: Binding will only occur if this 
            SourcePoint is not Empty (IOW, it must have a valid position
            before calling this method).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.HoistAnchor">
            <summary>
            Removes the SourcePoint anchor binding associated with this SourcePoint (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.RemoveAllBindings">
            <summary>
            Removes all bindings, either EditPoint or SourcePoint if they exist.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.OffsetPoint(System.Int32,System.Int32)">
            <summary>
            Creates new SourcePoint offset by specified number of lines and columns. 
            If this SourcePoint is bound or anchored to code then, this binding is not set for 
            the new SourcePoint.
            </summary>
            <param name="lines">The number of lines for offset.</param>
            <param name="columns">The number of columns for offset.</param>
            <returns>The new SourcePoint.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.ExtractFromDocument(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates new SourcePoint relative to the given origin. newOrigin is the point which will become 
            the origin of the new coordinate system. The SourcePoint returned will not be bound or anchored 
            to code, even if this SourcePoint is.
            </summary>
            <param name="newOrigin">The new origin to translate to.</param>
            <returns>The extracted SourcePoint.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.RestoreToDocument(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Restores the SourcePoint from the custom origin to the TextView. customOrigin is the point 
            which was used as the origin of the temporary coordinate system where this SourcePoint was 
            held (e.g., the parameter passed to ExtractFromDocument). 
            </summary>
            <param name="customOrigin">The origin where this SourcePoint was previously transfered to 
            (e.g., through a call to ExtractFromDocument).</param>
            <returns>The restored SourcePoint.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.SetBinding(DevExpress.CodeRush.StructuralParser.SourcePointBinding)">
            <summary>
            Sets the binding type of this source point.
            </summary>
            <param name="binding">The new binding type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.UnboundCompareTo(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            This method compares two SourcePoint with the assumption that neither SourcePoint is bound or anchored
            in any way. If either SourcePoint is bound or anchored, an incorrect result may be returned. Use only in
            special cases where high-performance is essential.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.System#ICloneable#Clone">
            <summary>
            Creates new SourcePoint instance from this one. If this
            source point has code bindings, then they will be lost.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourcePoint.Clone">
            <summary>
            Creates new SourcePoint instance from this one. If this
            source point has code bindings, then they will be lost.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.IsBoundToCode">
            <summary>
            Returns true if this SourcePoint is bound to the text that 
            surrounds it. (This means that this source point has binding point and
            Binding is set to SourcePointBinding.EditPoint)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.IsAnchored">
            <summary>
            Returns true if this SourcePoint is anchored to the text that 
            surrounds it. (This means that this source point has binding point and
            Binding is set to SourcePointBinding.Anchor)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.Line">
            <summary>Gets or sets line of this source point.
            The way to get or set the line depends upon
            wheather this source point is bound or anchored to code, or has
            no binding at all.</summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.Offset">
            <summary>
            Gets or sets offset of this source point.
            The way to get or set the offset depends upon
            wheather this source point is bound or anchored to code, or has
            no binding at all.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.Binding">
            <summary>
            Gets the binding type of this source point. SourcePoint can be bound to code
            using IDisposableEditPoint, or it can be anchored to code using another source point's
            BindingPoint, or it can have no binding.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.BindingPoint">
            <summary>
            Returns binding point for this source point. If this source point
            is anchored then shared binding point will be returned.
            If this source point is bound to code then the orginal binding point
            will be returned. Otherwise returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.HasBindingPoint">
            <summary>
            Returns true if this source point has a valid
            binding point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourcePoint.IsAnchorPushable">
            <summary>
            Gets or sets whether this source point is pushable.
            This means that if insertion is done right before this point,
            and this point is anchored to binding point, the point 
            will be moved right/down according to the insertion.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.AdjustForInsertion(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Moves Start and End down and/or right in response to an insertion occuring before it.
            </summary>
            <param name="insertion">The SourceRange representing the newly-inserted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.AdjustForDeletion(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Moves Start and End up and/or left in response to a deletion occuring before it.
            </summary>
            <param name="deletion">The SourceRange representing the just-deleted text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.SetRange(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the range to a Token, called by CodeRush parsers.
            </summary>
            <param name="token">The token to set the range to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Set(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the range to a Token, called by CodeRush parsers.
            </summary>
            <param name="token">The token to set the range to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.SetFast(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets source range coordinates directly.
            </summary>
            <param name="startLine">The start line of range.</param>
            <param name="startOffset">The start offset of range.</param>
            <param name="endLine">The end line of range.</param>
            <param name="endOffset">The end offset of range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Contains(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if sourcePoint is bounded by (or on the borders of) this SourceRange.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Contains(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if the specified SourceRange is contained within this 
            SourceRange (or if the range equals this SourceRange).
            </summary>
            <param name="range">The SourceRange to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.IntersectsWith(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Checks if this range intersects with the given range.
            </summary>
            <param name="range">The range to check</param>
            <returns>
            Returns true if this range intersects with the given range.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Intersects(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Checks if this range contains start or end point of the given range.
            </summary>
            <param name="range">The range to check</param>
            <returns>
            Returns true if this range contains start or end point of the given range.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Surrounds(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if this SourceRange surrounds the specified SourcePoint.
            "Surrounds" means the Top of this SourceRange appears before, and the 
            Bottom appears after, the specified sourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.EndsBefore(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if this SourceRange ends before the start of the specified SourceRange.
            </summary>
            <param name="sourceRange">The SourceRange to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.EndsBefore(System.Int32,System.Int32)">
            <summary>
            Determines whether this range ends before the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this range ends before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.StartsAfter(System.Int32,System.Int32)">
            <summary>
            Determines whether this range starts after the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this range starts after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.StartsAfter(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if this SourceRange starts after the end of the specified SourceRange.
            </summary>
            <param name="sourceRange">The SourceRange to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.StartsBefore(System.Int32,System.Int32)">
            <summary>
            Determines whether this range starts before the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this range starts before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.EndsAfter(System.Int32,System.Int32)">
            <summary>
            Determines whether this range ends after the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this range ends after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Overlaps(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if the specified range overlaps this range by at least one position. Adjacent ranges will return false.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Holds(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if the specified SourcePoint is inside the specified range (but not at either of the ends of the SourceRange).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.BindToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory)">
            <summary>
            Binds this SourceRange to a TextDocument using the specified IDisposableEditPoint, 
            which ensures that the ends of this SourceRange will always stay with its surrounding 
            text (e.g., when the text moves due to source code changes). IMPORTANT: 
            If you call this BindToCode method, you must call RemoveBinding when you 
            no longer need this SourceRange (if not before).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.RemoveBinding">
            <summary>
            Removes the EditPoint bindings associated with this SourceRange (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.RemoveAllBindings">
            <summary>
            Removes all bindings associated with this SourceRange (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.AnchorToSourcePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Anchors this SourceRange to the specified SourcePoint, 
            which ensures that the ends of this SourceRange will always 
            maintain their position relative to the specified SourcePoint. The 
            specified SourcePoint must have had its BindToCode() method called 
            before calling this method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.HoistAnchor">
            <summary>
            Removes the connection to the sourcePoint previous associated with this SourceRange (if one exists).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.OffsetRange(System.Int32,System.Int32)">
            <summary>
            Creates hew SourceRange offset by specified number of lines and columns. 
            If this SourceRange is bound to code then this binding is not set for the new SourceRange.
            </summary>
            <param name="lines">The number of lines for offset</param>
            <param name="columns">The number of columns for offset</param>
            <returns>The new SourceRange</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.ExtractFromDocument(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates new SourceRange relative to the given origin. newOrigin is the point which will become 
            the origin of the new coordinate system. This method is useful for temporarily moving a 
            SourceRange to another location (call RestoreToDocument to move it back). The SourceRange 
            returned will not be bound to code, even if this SourceRange is.
            </summary>
            <param name="newOrigin">The new origin to translate to.</param>
            <returns>The extracted SourceRange.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.RestoreToDocument(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Restores the SourceRange, from the custom origin to the document. customOrigin is the point which was 
            the offset in the temporary coordinate system (e.g., the parameter passed to ExtractFromDocument). 
            </summary>
            <param name="customOrigin">The customOrigin of the transformation.</param>
            <returns>The restored SourceRange.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Union(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets a SourceRange that spans from the smallest to the greatest SourcePoints held in 
            specified SourceRanges. Note that the SourceRange parameters do not need to overlap 
            each other.
            </summary>
            <param name="a">A SourceRange to combine.</param>
            <param name="b">A SourceRange to combine.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.System#ICloneable#Clone">
            <summary>
            Creates new SourceRange instance from this one. If this
            source range has code bindings, then they will be lost.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceRange.Clone">
            <summary>
            Creates new SourceRange instance from this one. If this
            source range has code bindings, then they will be lost.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.IsBoundToCode">
            <summary>
            Returns true if this SourceRange is bound to the text that surrounds it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.IsAnchored">
            <summary>
            Returns true if this SourceRange is anchored to the text that surrounds it.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.CharsIncludedOnLastLine">
            <summary>
            Returns the number of characters included on the last line of this range. If 
            this range spans a single line, the result equals the bottom offset minus the 
            top offset. Otherwise the result equals the bottom offset.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.Height">
            <summary>
            Gets the height of the range, in lines.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.IsEmpty">
            <summary>
            Returns true if this SourceRange is uninitialized.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.IsPoint">
            <summary>
            Returns true if Start equals End.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.LineCount">
            <summary>
            Returns the number of lines spanned by this SourceRange. The return type is LineRange, which can be 
            implicitly converted to an int.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.LineCountMinusOne">
            <summary>
            Returns the number of lines spanned by this SourceRange minus one. The return type 
            is LineRange, which can be implicitly converted to an int.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceRange.LogicalRange">
            <summary>
            Returns a SourceRange in which the start always preceeds the end.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SourceTextRange">
            <summary>
            SourceTextRange is a class that stores source text and it's range.
            Use Text property to get source string.
            Use Range property to get source coordinates of the source string.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceTextRange.Range">
            <summary>
            Gets or Sets SourceRange.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceTextRange.Text">
            <summary>
            Gets or Sets text that is associated with this SourceTextRange.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextRange.ToSourceRange">
            <summary>
            Converts text range to source range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextRange.System#ICloneable#Clone">
            <summary>
            Creates new SourceRange instance from this one. If this
            source range has code bindings, then they will be lost.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextRange.Clone">
            <summary>
            Creates new TextRange instance from this one. If this
            source range has code bindings, then they will be lost.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CSharp.CSharpCodeGen">
            <summary>
            CSharpCodeGen provides code generation for CSharp language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateAddressOfExpression(DevExpress.CodeRush.StructuralParser.AddressOfExpression)">
            <summary>
            Generates code for AddressOfExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateAttributeVariableInitializer(DevExpress.CodeRush.StructuralParser.AttributeVariableInitializer)">
            <summary>
            Generates code for AttributeVariableInitializer.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateMethodCallExpression(DevExpress.CodeRush.StructuralParser.MethodCallExpression)">
            <summary>
            Generates code for MethodCallExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateArgumentDirectionExpression(DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression)">
            <summary>
            Generates code for ArgumentDirectionExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateBaseReferenceExpression(DevExpress.CodeRush.StructuralParser.BaseReferenceExpression)">
            <summary>
            Generates code for BaseReferenceExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateCheckedExpression(DevExpress.CodeRush.StructuralParser.CheckedExpression)">
            <summary>
            Generates code for CheckedExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateBooleanLiteral(System.Boolean)">
            <summary>
            Generates code for boolean literal.
            </summary>
            <param name="value">The value to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.IsEscapedString(System.String)">
            <summary>
            Returns true if the given string is escaped.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateStringLiteral(System.String)">
            <summary>
            Generates code for string literal.
            </summary>
            <param name="value">The value to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateCharLiteral(System.Char)">
            <summary>
            Generates code for char literal.
            </summary>
            <param name="value">The value to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateNullLiteral">
            <summary>
            Generates code for null literal.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateNumberLiteral(System.String,System.Object,DevExpress.CodeRush.StructuralParser.PrimitiveType)">
            <summary>
            Generates code for number literal.
            </summary>
            <param name="name">The name to generate.</param>
            <param name="value"> The value to generate.</param>
            <param name="type">The type to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateTypeOfExpression(DevExpress.CodeRush.StructuralParser.TypeOfExpression)">
            <summary>
            Generates code for TypeOfExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateTypeReferenceExpression(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Generates code for TypeReferenceExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateUncheckedExpression(DevExpress.CodeRush.StructuralParser.UncheckedExpression)">
            <summary>
            Generates code for UncheckedExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateTypeOfIsExpression(DevExpress.CodeRush.StructuralParser.TypeOfIsExpression)">
            <summary>
            Generates code for TypeOfIsExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateTypeCheck(DevExpress.CodeRush.StructuralParser.TypeCheck)">
            <summary>
            Generates code for RelationalOperation.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateConditionalTypeCast(DevExpress.CodeRush.StructuralParser.ConditionalTypeCast)">
            <summary>
            Generates code for ConditionalTypeCast.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateDefaultValueExpression(DevExpress.CodeRush.StructuralParser.DefaultValueExpression)">
            <summary>
            Generates code for DefaultValueExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateNullCoalescingExpression(DevExpress.CodeRush.StructuralParser.NullCoalescingExpression)">
            <summary>
            Generates code for NullCoalescingExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateQualifiedAliasExpression(DevExpress.CodeRush.StructuralParser.QualifiedAliasExpression)">
            <summary>
            Generates code for QualifiedAliasExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpExpressionCodeGen.GenerateExpressionList(DevExpress.CodeRush.StructuralParser.ExpressionCollectionBase)">
            <summary>
            Generates code for the list of expressions.
            </summary>
            <param name="expressions">The list of expressions to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Generates code for given XmlDocComment.
            </summary>
            <param name="element">The element to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateXmlDocComment(DevExpress.CodeRush.StructuralParser.XmlDocComment)">
            <summary>
            Generates code for given XmlDocComment.
            </summary>
            <param name="xmlComment">The XmlDocComment.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateXmlDocElement(DevExpress.CodeRush.StructuralParser.XmlElement)">
            <summary>
            Generates code for the XmlElement .
            </summary>
            <param name="xmlDocElement">The XmlElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateXmlElementOpenTag(DevExpress.CodeRush.StructuralParser.XmlElement)">
            <summary>
            Generates code for the open tag.
            </summary>
            <param name="xmlDocElement">The XmlElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateXmlElementCloseTag(DevExpress.CodeRush.StructuralParser.XmlElement)">
            <summary>
            Generates code for the close tag.
            </summary>
            <param name="xmlDocElement">The XmlElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateXmlDocAttribute(DevExpress.CodeRush.StructuralParser.XmlAttribute)">
            <summary>
            Generates code for the XmlAttribute.
            </summary>
            <param name="element">The XmlAttribute.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpXmlCodeGen.GenerateXmlDocText(DevExpress.CodeRush.StructuralParser.XmlText)">
            <summary>
            Generates code for the XmlText.
            </summary>
            <param name="xmlDocText">The XmlText.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CSharp.New.CSharpCodeGen">
            <summary>
            CSharpCodeGen provides code generation for CSharp language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharp10KeyWords.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharp10KeyWords.Contains(System.String)">
            <summary>
            Returns true if a given string is contained in VB keywords collection.
            </summary>
            <param name="word">String to test</param>
            <returns>True if a given string is contained in VB keywords collection.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CSharp.CSharp10KeyWords.Collection">
            <summary>
            Gets StringCollection of VB keywords.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharp20KeyWords.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharp20KeyWords.Contains(System.String)">
            <summary>
            Returns true if a given string is contained in VB keywords collection.
            </summary>
            <param name="word">String to test</param>
            <returns>True if a given string is contained in VB keywords collection.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CSharp.CSharp20KeyWords.Collection">
            <summary>
            Gets StringCollection of VB keywords.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.#ctor">
            <summary>
            Creates an instance of ParserBase.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.CreateExpressionParser">
            <summary>
            Creates and returns a new expression parser. Descendant parsers should override and create their ExpressionParserBase descendant.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.CreateExpressionInverter">
            <summary>
            Creates and returns a new expression inverter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.PrepareForParse(DevExpress.CodeRush.StructuralParser.ParserContext)">
            <summary>
            Prepares internal data for parsing.
            </summary>
            <param name="parserContext">The parsing context.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.GetSourceFile(System.String)">
            <summary>
            Creates source file using the specified file name.
            </summary>
            <param name="fileName">The name file to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.GotoParentRegion">
            <summary>
            Sets region root node to the parent of the current region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.IntroduceComments(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Unravels the comment nodes collected so far in the Tokenizer's comments list and adds 
            them to the parsed language element.
            </summary>
            <param name="context">The element to add comments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.IntroduceComments(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.CommentCollection)">
            <summary>
            Introduces comments in the given comment collection to the given language element node.
            </summary>
            <param name="context">The element to add comments.</param>
            <param name="comments">The comments to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.ParseSring(System.String)">
            <summary>
            Parses the specified code.
            </summary>
            <param name="code">The code to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.ParseString(System.String)">
            <summary>
            Parses the specified code.
            </summary>
            <param name="code">The code to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.ParseFile(System.String)">
            <summary>
            Parses the specified file on disk.
            </summary>
            <param name="path">The path of the file to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.ParseFile(System.String,System.Text.Encoding)">
            <summary>
            Parses the specified file on disk.
            </summary>
            <param name="path">The path of the file to parse.</param>
            <param name="encoding"> The code page of the file to parse.</param>
            <returns>Returns the LanguageElement representing the specified file, or null if an error occurred.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.ParseFile(DevExpress.CodeRush.StructuralParser.SourceFile)">
            <summary>
            Parses the specified file on disk.
            </summary>
            <param name="file">The file to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserBase.SetContext(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Sets parser context.
            </summary>
            <param name="value">The new context to set.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.Language">
            <summary>
            Returns the name of the language that this parses.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.IsParsing">
            <summary>
            Returns true if parser is inside parse loop.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.ParseTime">
            <summary>
            Gets the time of the last parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.Context">
            <summary>
            Gets current language element context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.Document">
            <summary>
            Document being parsed. This property will return null
            if parsing is not in progress.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.ParseRange">
            <summary>
            Gets the source range being parsed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.AllowCommentsInParseTree">
            <summary>
            Gets or sets the flag specifying whether to add comments
            to parse tree.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserBase.IsIncremental">
            <summary>
            Gets or sets the flag specifying that it is incremental parsing.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ParserErrorsBase">
            <summary>
            Base class for collecting errors during parse.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.#ctor">
            <summary>
            Creates new instance of ErrorsBase class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.GetSyntaxErrorText(System.Int32)">
            <summary>
            Returns text for the given syntax error.
            </summary>
            <param name="n">The syntax error number.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.LogError(System.String,System.Object[])">
            <summary>
            Logs error, using the given error message format and arguments.
            </summary>
            <param name="format">The format of the error message.</param>
            <param name="args">The arguments of the error message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.SynErr(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports syntax error.
            </summary>
            <param name="line">The line of the error.</param>
            <param name="col">The column of the error.</param>
            <param name="n">The error number.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.SemErr(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports semantic error.
            </summary>
            <param name="line">The line of the error.</param>
            <param name="col">The column of the error.</param>
            <param name="n">The error number.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.Error(System.Int32,System.Int32,System.String)">
            <summary>
            Reports parser error.
            </summary>
            <param name="line">The line of the error.</param>
            <param name="col">The column of the error.</param>
            <param name="s">The error message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.Exception(System.String)">
            <summary>
            Reports parser fatal error.
            </summary>
            <param name="s">The error message.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.Clear">
            <summary>
            Clear errors collection
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParserErrorsBase.Count">
            <summary>
            Gets the number of errors.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionParserBase.Parse(DevExpress.CodeRush.StructuralParser.ISourceReader)">
            <summary>
            Parsers a expression using given ISourceReader.
            </summary>
            <param name="reader">ISourceReader to use.</param>
            <returns>Returns parsed Expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionParserBase.ParseTypeReferenceExpression(System.String)">
            <summary>
            Parsers type reference expression from the given string.
            </summary>
            <param name="expression">The expression to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionParserBase.ParseTypeReferenceExpression(DevExpress.CodeRush.StructuralParser.ISourceReader)">
            <summary>
            Parsers type reference expression from the given reader.
            </summary>
            <param name="reader">The reader to parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IExpressionInverter.Invert(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Inverts given expression.
            </summary>
            <param name="expression">The expression to invert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionInverterBase.Invert(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Inverts given expression.
            </summary>
            <param name="expression">The expression to invert.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SourceFile">
            <summary>
            Summary description for SourceFile.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.PathElement">
            <summary>
            A language element with an associated file on disk.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.LanguageElement">
            <summary>
            LanguageElement represents a construct in a formal language.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.DocumentElement">
            <summary>
            Abstract class for representing an element of a document. 
            Document elements are characterized by a range within the 
            document (running from StartLine &amp; StartOffset to 
            EndLine &amp; EndOffset).
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.BaseElement">
            <summary>
            Ancestor to DocumentElement. Provides two ArrayLists of nodes to hold child 
            nodes and detail nodes.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.System#ICloneable#Clone">
            <summary>
            Implements IClonebale to clone this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.CleanUpOwnedReferencesForNodes(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Calls CleanUpOwnedReferences for each element inside passed node list.
            </summary>
            <param name="nodeList">The node list to clean up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.CreateNodeList">
            <summary>
            Called to create a new list to hold child nodes as well as detail nodes. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.GetDetailNodeRange">
            <summary>
            Returns a SourceRange representing the span of all DetailNodes owned by 
            this element. Returns SourceRange.Empty if this element does not own any 
            DetailNodes.
            </summary>
            <returns>Returns a SourceRange representing the span of all 
            DetailNodes owned by this element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.GetNodeRange">
            <summary>
            Returns a SourceRange representing the span of all Nodes owned by 
            this element. Returns SourceRange.Empty if this element does not own any 
            Nodes.
            </summary>
            <returns>Returns a SourceRange representing the span of all 
            Nodes owned by this element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through calls to Dispose (which calls 
            CleanUpOwnedReferences) when this node is freed. Descendants can override 
            and null-out any additional child references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.CleanUpOwnedReferences">
            <summary>
            Calls CleanUpOwnedReferences for each element inside child nodes
            and detail nodes.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.Clone">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseElement.Nodes">
            <summary>
            Gets child nodes for this element. Descendants could override this
            property in order to perform additional tasks. E.g. do on demand parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseElement.NodeCount">
            <summary>
            Gets the number of child nodes for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseElement.DetailNodes">
            <summary>
            Gets child detail nodes for this element. Descendants could override this
            property in order to perform additional tasks. E.g. do on demand parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseElement.DetailNodeCount">
            <summary>
            Gets the number of detail nodes for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseElement.Name">
            <summary>
            The name of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetHistory(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.DocumentHistorySlice)">
            <summary>
            Sets the document history for all nodes in the specified NodeList.
            </summary>
            <param name="list">The NodeList contains the nodes to set history for.</param>
            <param name="history">The DocumentHistorySlice to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetHistory(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,DevExpress.CodeRush.StructuralParser.DocumentHistorySlice)">
            <summary>
            Sets the document history for all nodes in the specified NodeList.
            </summary>
            <param name="list">The NodeList contains the nodes to set history for.</param>
            <param name="index">The start index.</param>
            <param name="history">The DocumentHistorySlice to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetTransformedRange(DevExpress.CodeRush.StructuralParser.TextRange)">
            <summary>
            Gets a SourceRange transformed by the document history of this element.
            </summary>
            <param name="original">The TextRange to transform.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.ClearHistory">
            <summary>
            Clears the document history for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SelectCode(DevExpress.CodeRush.StructuralParser.IDXCoreTextView,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects the code corresponding to the passed coordinates in the specified TextView. 
            Note: This method does not verify that the specified text view actually contains 
            the source code from which this node was derived. It is caller's responsibility to 
            pass the correct TextView.
            </summary>
            <param name="textView">The TextView to select code in.</param>
            <param name="startLine">Selection start line.</param>
            <param name="startOffset">Selection start offset.</param>
            <param name="endLine">Selection end line.</param>
            <param name="endOffset">Selection end offset.</param>
            <param name="ensureVisible">Whether the selection should be scrolled into view.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetInnerDetailNodes(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Sets the DetailNodes list for this element.
            </summary>
            <param name="value">The NodeList to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetInnerNodes(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Sets the Nodes list for this element.
            </summary>
            <param name="value">The NodeList to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.PrepareDetailNodeList">
            <summary>
            Prepares the internal _DetailNodes list for adding new elements.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.PrepareNodeList">
            <summary>
            Prepares the internal _Nodes list field for adding new elements.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetTotalMemoryForNodeList(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Returns the total memory occupied by all elements inside the given
            node list.
            </summary>
            <param name="nodeList">The NodeList to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetTotalMemoryForDetailNodes">
            <summary>
            Returns the total memory occupied by all elements inside the DetailNodes list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetTotalMemoryForNodes">
            <summary>
            Returns the total memory occupied by all child elements inside the Nodes list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones data from the specified element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetTotalMemory">
            <summary>
            Returns total memory occupied by this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetTotalMemory(System.Boolean)">
            <summary>
            Returns total memory occupied by this element.
            Forces full garbage collection if needed.
            </summary>
            <param name="forceFullCollection">Pass true to force full collection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.DetailNodesFollowChildNodes">
            <summary>
            Returns true if the detail nodes of this element follow its child nodes. For 
            example, in C#, Do/While loops have their detail nodes (in the while expression)
            follow the child nodes. Detail nodes normally precede child nodes, so this 
            method will nearly always return false.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetHistory(DevExpress.CodeRush.StructuralParser.DocumentHistorySlice,System.Boolean)">
            <summary>                                                                                       
            Sets the document history for this element.
            </summary>
            <param name="history">The DocumentHistorySlice to set.</param>
            <param name="isRecursive"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through calls to Dispose (which calls 
            CleanUpOwnedReferences) when this node is freed. Descendants can override 
            and null-out any additional child references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.PrepareToParentNodes">
            <summary>
            Descendants should override this method to perform extra actions
            to prepare this node.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetImageIndex">
            <summary>
            Retruns image index for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SelectCode(DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Selects the code corresponding to this element in the specified TextView. 
            Note: This method does not verify that the specified text view actually contains 
            the source code from which this node was derived. It is caller's responsibility to 
            pass the correct TextView.
            </summary>
            <param name="textView">The TextView to select code in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SelectCode(DevExpress.CodeRush.StructuralParser.IDXCoreTextView,System.Boolean)">
            <summary>
            Selects the code corresponding to this element in the specified TextView. 
            Note: This method does not verify that the specified text view actually contains 
            the source code from which this node was derived. It is caller's responsibility to 
            pass the correct TextView.
            </summary>
            <param name="textView">The TextView to select code in.</param>
            <param name="aEnsureVisible">Whether the selection should be scrolled into view.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified line and column are contained within this element.
            </summary>
            <param name="line">The line number to check.</param>
            <param name="offset">The column offset to check.</param>
            <returns>Returns true if the specified line and column offset are contained within this element, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.Contains(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines if the specified SourcePoint is contained within this element.
            </summary>
            <param name="point">The SourcePoint to check.</param>
            <returns>Returns true if the specified SourcePoint is contained within this element, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.Contains(DevExpress.CodeRush.StructuralParser.DocumentElement)">
            <summary>
            Determines if the specified element is contained within this element. Line ranges are checked -- not parentage. 
            This method is useful when working with nodes that indirectly participate in the source tree, like directives.
            </summary>
            <param name="aElement">The element to check.</param>
            <returns>Returns true if the specified element is contained within this element, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.Contains(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Determines if the specified SourceRange is contained within this element.
            </summary>
            <param name="aRange">The SourceRange to check.</param>
            <returns>Returns true if the specified SourceRange is contained within this element, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.ContainedIn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if the element is contained within specific source coordinates.
            </summary>
            <param name="startLine">The starting line number to check.</param>
            <param name="startOffset">The starting column offset to check.</param>
            <param name="endLine">The ending line number to check.</param>
            <param name="endOffset">The ending column offset to check.</param>
            <returns>Returns true if the element is contained within the specified coordinates, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.ContainedIn(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines if the element is contained between to SourcePoints.
            </summary>
            <param name="start">The starting SourcePoint to check.</param>
            <param name="end">The ending SourcePoint to check.</param>
            <returns>Returns true if the element is contained between the specified SourcePoints, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.ContainedIn(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Determines if the element is contained within a SourceRange.
            </summary>
            <param name="aRange">The SourceRange to check.</param>
            <returns>Returns true if the element is contained within the specified SourceRange, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.GetDetailNodeDescription(System.Int32)">
            <summary>
            Returns a description for the detail node at the specified index.
            </summary>
            <param name="index">The index into this element's DetailNodes list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.StartsAfter(System.Int32,System.Int32)">
            <summary>
            Determines whether this element starts after the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this element starts after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.StartsAfter(DevExpress.CodeRush.StructuralParser.DocumentElement)">
            <summary>
            Determines whether this element starts after the end of the specified element.
            </summary>
            <param name="documentElement">The element to compare against.</param>
            <returns>Returns true if this element starts after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.StartsAfter(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether this element starts after the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to compare against.</param>
            <returns>Returns true if this element starts after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.StartsBefore(System.Int32,System.Int32)">
            <summary>
            Determines whether this element starts before the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this element starts before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.StartsBefore(DevExpress.CodeRush.StructuralParser.DocumentElement)">
            <summary>
            Determines whether this element starts before the specified element.
            </summary>
            <param name="documentElement">The element to compare against.</param>
            <returns>Returns true if this element starts before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.StartsBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether this element starts before the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to compare against.</param>
            <returns>Returns true if this element starts before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.EndsAfter(System.Int32,System.Int32)">
            <summary>
            Determines whether this element ends after the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this element ends after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.EndsAfter(DevExpress.CodeRush.StructuralParser.DocumentElement)">
            <summary>
            Determines whether this element ends after the end the specified element.
            </summary>
            <param name="documentElement">The element to compare against.</param>
            <returns>Returns true if this element ends after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.EndsAfter(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether this element ends after the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to compare against.</param>
            <returns>Returns true if this element ends after the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.EndsBefore(System.Int32,System.Int32)">
            <summary>
            Determines whether this element ends before the specified location.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <param name="columnOffset">The column offset to check.</param>
            <returns>Returns true if this element ends before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.EndsBefore(DevExpress.CodeRush.StructuralParser.DocumentElement)">
            <summary>
            Determines whether this element ends before the start of the specified element.
            </summary>
            <param name="documentElement">The element to compare against.</param>
            <returns>Returns true if this element ends before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.EndsBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Determines whether this element ends before the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to compare against.</param>
            <returns>Returns true if this element ends before the specified location; false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetEnd(System.Int32,System.Int32)">
            <summary>
            Sets the end point of this document element.
            </summary>
            <param name="lineNumber">The line number marking the end of the document element.</param>
            <param name="characterOffset">The character offset marking the end of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetEnd(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets the end point of this document element to match the end of the specified SourceRange.
            </summary>
            <param name="range">The SourceRange marking the range of the document element. 
            This document element's EndLine and EndOffset will be bound to the specified range's End property.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetEnd(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the end point of this document element.
            </summary>
            <param name="point">The SourcePoint that marks the end of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetEnd(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the end point of this document element. This method can be called by language 
            parsers to associate the end of this LanguageElement with the specified Token.
            </summary>
            <param name="token">The Token that represents the end of this element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetEndOffset(System.Int32)">
            <summary>
            Sets the end offset of this document element.
            </summary>
            <param name="characterOffset">The character offset marking the end of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the start and end points of this document element.
            </summary>
            <param name="startLine">The line number of the start of the document element.</param>
            <param name="startOffset">The character offset of the start of the document element.</param>
            <param name="endLine">The line number of the end of the document element.</param>
            <param name="endOffset">The character offset of the end of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets the start and end points of this document element.
            </summary>
            <param name="range">The SourceRange that marks the range of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetRange(DevExpress.CodeRush.StructuralParser.SourcePoint,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the start and end points of this document element.
            </summary>
            <param name="startPoint">The SourcePoint that marks the start of the document element.</param>
            <param name="endPoint">The SourcePoint that marks the end of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetStart(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets the start point of this document element to match the start of the specified SourceRange.
            </summary>
            <param name="range">The SourceRange marking the range of the document element.
            This document element's StartLine and StartOffset will be bound to the specified range's Start property.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetStart(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Sets the start point of this document element.
            </summary>
            <param name="point">The SourcePoint marking the start of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetStart(System.Int32,System.Int32)">
            <summary>
            Sets the start point of this document element.
            </summary>
            <param name="lineNumber">The line number marking the start of the document element.</param>
            <param name="characterOffset">The character offset marking the start of the document element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DocumentElement.SetStart(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the start point of this document element.
            </summary>
            <param name="token">The token to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.InnerNodes">
            <summary>
            Gets or sets child nodes for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.InnerDetailNodes">
            <summary>
            Gets detail nodes for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.StartLine">
            <summary>
            The line number where this language element starts.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.EndLine">
            <summary>
            The line number where this language element ends.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.StartOffset">
            <summary>
            The column offset where this language element starts.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.EndOffset">
            <summary>
            The column offset where this language element ends.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.ClassName">
            <summary>
            The full name of this language element class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.Name">
            <summary>
            The name of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.Nodes">
            <summary>
            Gets child nodes for this element. Descendants could override this
            property in order to perform additional tasks. E.g. do on demand parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.DetailNodes">
            <summary>
            Gets child detail nodes for this element. Descendants could override this
            property in order to perform additional tasks. E.g. do on demand parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.History">
            <summary>
            Gets DocumentHistorySlice associated with this document element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.InternalRange">
            <summary>
            The line and column offset range where this language element exists in the text document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.IsNewContext">
            <summary>
            Returns true if this node is the context (e.g., the Parent) for any 
            new nodes created by the parser.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DocumentElement.NameRange">
            <summary>
            Gets or sets name source range for this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElement">
            <summary>
            Base interface for all parse tree elements.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.Accept(DevExpress.CodeRush.StructuralParser.IElementVisitor)">
            <summary>
            Accepts the given element visitor.
            </summary>
            <param name="visitor">The visitor to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.GetParent(DevExpress.CodeRush.StructuralParser.LanguageElementType,DevExpress.CodeRush.StructuralParser.LanguageElementType[])">
            <summary>
            Gets parent with the given type.
            </summary>
            <param name="type">The element type to find.</param>
            <param name="types">The element types to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.GetParentStatementOrVariable">
            <summary>
            Gets parent statement or variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.FindChildByName(System.String)">
            <summary>
            Finds child element by it's name.
            </summary>
            <param name="name">The name of the child element to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.IsParentedBy(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if this element is parented by the given element.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.Clone">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.GetDeclaration">
            <summary>
            Gets declaration for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.GetDeclaration(System.Boolean)">
            <summary>
            Gets declaration for this element.
            </summary>
            <param name="restore">
            Determines whether a LanguageElement should be restored for the found declaration.
            Pass in false if you only need to test and explore the element’s declaration (you’ll get an IElement implementer back).
            Pass in true if you will need to change the parse tree and generate new code (slower, but you’ll get a heavier LanguageElement descendant back).
            </param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.ToLanguageElement">
            <summary>
            Gets corresponding LanguageElement for this element.
            This method will return null, if this element doesn't 
            have corresponding LanguageElement available
            (e.g. if this element is inside referenced assembly).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.FindAllReferences">
            <summary>
            Searches for references inside active solution.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElement.FindAllReferences(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Searches for references inside the given scope.
            </summary>
            <param name="scope">The scope to search in.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Name">
            <summary>
            Gets name of the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Project">
            <summary>
            Gets project for the element.
            Note that elements that are not
            inside any project will return null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Solution">
            <summary>
            Gets solution for the element.
            Note that elements that are not
            inside any solution will return null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.AssemblyModel">
            <summary>
            Gets assembly model for the element.
            Note that elements that are not
            inside any assembly will return null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Parent">
            <summary>
            Gets parent element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentType">
            <summary>
            Gets parent type of the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentEvent">
            <summary>
            Gets parent event for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentMethod">
            <summary>
            Gets parent method for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentMethodOrAccessor">
            <summary>
            Gets parent method or accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentMethodOrPropertyOrEvent">
            <summary>
            Gets parent method or property or event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentMember">
            <summary>
            Gets parent member for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentProperty">
            <summary>
            Gets parent property for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ParentNamespace">
            <summary>
            Gets parent namespace of the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Children">
            <summary>
            Gets the element children.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.AllChildren">
            <summary>
            Gets all children of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.CodeChildren">
            <summary>
            Gets children elements located in the body of the current element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Files">
            <summary>
            Gets an array of files where the element is declared.
            In the case of partial elements (e.g., partial classes),
            there might be several files.
            The NameRanges, Ranges, and Files arrays are synchronized,
            and will have the same length and
            indexes (e.g., so Ranges[2] can be found inside Files[2]).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.FirstFile">
            <summary>
            Gets first file where the element is declared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.NameRanges">
            <summary>
            Gets an array of TextRanges that indicate where 
            the element name appears in the code.
            In the case of partial elements (e.g., partial classes),
            there will be one TextRange for each partial declaration.
            The NameRanges, Ranges, and Files arrays are synchronized,
            and will have the same length and
            indexes (e.g., so Ranges[2] can be found inside Files[2]).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.FirstNameRange">
            <summary>
            Gets first TextRange that indicate where 
            the element name appears in the code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.Ranges">
            <summary>
            Gets an array of TextRanges that indicate where 
            the element appears in the code.
            In the case of partial elements (e.g., partial classes),
            there will be one TextRange for each partial declaration.
            The NameRanges, Ranges, and Files arrays are synchronized,
            and will have the same length and
            indexes (e.g., so Ranges[2] can be found inside Files[2]).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.FirstRange">
            <summary>
            Gets first TextRange that indicate where 
            the element appears in the code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.FullName">
            <summary>
            Gets full signature name
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.RootNamespaceFullName">
            <summary>
            Gets full signature name with added root namespace name
            at the beggining.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.NextSibling">
            <summary>
            Gets the next sibling to this element, or null if no siblings follow this element.
            </summary>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.PreviousSibling">
            <summary>
            Returns the previous sibling to this element, or null if no siblings precede this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.CompletesPrevious">
            <summary>
            True if this element connects to the previous statement or preprocessor directive 
            (e.g., catch, finally, #if, #elif, #warning, etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.ImageIndex">
            <summary>
            Returns element image index.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.InReferencedAssembly">
            <summary>
            Returns true if this element is declared inside a referenced assembly.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.IsMember">
            <summary>
            Returns true if this element is a member of a type declaration (e.g., method, property, event, or field).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElement.IsNestedType">
            <summary>
            Returns true if this element is a type declaration nested inside another type declaration.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElementModifier">
            <summary>
            Interface that allows elements modifications.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementModifier.SetParent(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Sets parent for curent element.
            </summary>
            <param name="parent">The parent to set</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementModifier.SetName(System.String)">
            <summary>
            Sets name for curent element.
            </summary>
            <param name="newName">The name to set</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementModifier.ReplaceChild(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Repplaces old element with new one.
            </summary>
            <param name="oldNode">The node to replace</param>
            <param name="newNode">New inserting node</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementModifier.InsertChild(System.Int32,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Inserts element to the given index.
            </summary>
            <param name="index">The index to insert to.</param>
            <param name="child">The element to insert</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementModifier.SetFakeNode(System.Boolean)">
            <summary>
            Sets IsFakeNode property to the given value.
            </summary>
            <param name="isFakeNode">The value to set.</param>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LanguageElement._Index">
            <summary>
            Index into parent's OwningList property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.#ctor">
            <summary>
            Creates LanguageElement instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AdjustStartToElement(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32@,System.Int32@)">
            <summary>
            Adjusts start line and offset coordinates to the start point of the passed language element.
            </summary>
            <param name="element">The language element to use.</param>
            <param name="startLine">The start line to adjust.</param>
            <param name="startOffset">The start offset to adjust.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.CleanUpPostponedData">
            <summary>
            Cleans up all postponed parsing data.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetCollapsibleRegion">
            <summary>
            Returns ICollapsibleRegion for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Returns ICollapsibleRegion for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertNodeToNodeListWithoutReindex(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Inserts node to the given node list at the specified index. Index field is not changed.
            </summary>
            <param name="list">The list to add new node.</param>
            <param name="index">The index where to insert new node.</param>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IncreaseNodesIndices(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32)">
            <summary>
            Increases nodes indices by one at the given node list starting from the given index.
            </summary>
            <param name="list">The node list to use.</param>
            <param name="startFrom">The starting index.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.DecreaseNodesIndices(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32)">
            <summary>
            Decreases nodes indices by one at the given node list starting from the given index.
            </summary>
            <param name="list">The node list to use.</param>
            <param name="startFrom">The starting index.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetCanBeDocumented">
            <summary>
            Returns true if XML documentation comments can be bound to this language element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetPreviousChildIdentifier(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the child identifier that occurs before this one. Note that there is a tricky transition 
            between the first child identifier of a method and the next identifier 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetLastSiblingInScope(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the last sibling in scope that declares an identifier. If no siblings in scope declare an identifier,
            works its way up through parents and parent siblings.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AllChildrenAccessibleByGrandchildren">
            <summary>
            Returns true if grandchildren of this node can access all of their parent node's siblings. Implementation 
            inside LanguageElement returns true if this node is a Class or Struct.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetLastIdentifierInList(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Returns the last LanguageElement in the specified ArrayList (which must contain 
            LanguageElements). 
            </summary>
            <param name="list">The list to check (e.g., either _Nodes or _DetailNodes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetLastDetailIdentifier">
            <summary>
            Returns the last DetailNode that declares an identifier or null if no detail nodes declare an identifier.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetLastIdentifier">
            <summary>
            Returns the last child node that declares an identifier or null if no child nodes declare an identifier.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddNodeToNodeList(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Adds a child node to this LanguageElement and sets its Parent property accordingly.
            </summary>
            <param name="aList">The list to add the node to.</param>
            <param name="aLanguageElement">The LanguageElement to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddNodesToNodeList(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Adds a child node to this LanguageElement and sets its Parent property accordingly.
            </summary>
            <param name="aList">The list to add the node to.</param>
            <param name="nodes">The LanguageElement to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveNodeFromNodeList(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Removes a child node of this LanguageElement and sets its Parent property accordingly.
            </summary>
            <param name="list">The list to remove the node from.</param>
            <param name="element">The LanguageElement to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertNodeToNodeList(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Inserts node into the node list at the specified index. If the specified index points
            to the last + 1 element then the node will be added to node list.
            </summary>
            <param name="list">The node list to use.</param>
            <param name="index">The index where to insert the node.</param>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertNodesToNodeList(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Inserts nodes to the given list at the specified index.
            </summary>
            <param name="list">The list to insert new nodes.</param>
            <param name="index">The index where to insert nodes.</param>
            <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindDeclarationInList(DevExpress.CodeRush.StructuralParser.NodeList,System.String,System.String,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the LanguageElement in the specified ArrayList (which holds LanguageElements) that 
            matches the specified identifier name and is visible from the specified viewer. 
            </summary>
            <param name="list">The list to check (e.g., either _Nodes or _DetailNodes).</param>
            <param name="firstIdentifier">The name of the child identifier to find.</param>
            <param name="remainingIdentifiers">Any remaining identifiers owned by firstIdentifier.</param>
            <param name="viewer">The LanguageElement which must be able to see the declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNodeIndexAfter(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,System.Int32)">
            <summary>
            Gets node index positioned after the specified line and offset.
            </summary>
            <param name="list">The list to search</param>
            <param name="line">The line to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNodeIndexBefore(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,System.Int32)">
            <summary>
            Gets node index positioned before the specified line and offset.
            </summary>
            <param name="list">The list to search</param>
            <param name="line">The line to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNodeAfter(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,System.Int32)">
            <summary>
            Gets node positioned after the specified line and offset.
            </summary>
            <param name="list">The list to search</param>
            <param name="line">The line to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNodeBefore(DevExpress.CodeRush.StructuralParser.NodeList,System.Int32,System.Int32)">
            <summary>
            Gets node positioned before the specified line and offset.
            </summary>
            <param name="list">The list to search</param>
            <param name="line">The line to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetSignaturePart">
            <summary>
            Gets part of element signature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddHeader(System.String)">
            <summary>
            Adds the specified header lines before and after this language element. 
            Header lines will automatically be prefixed with the same amount of leading 
            white space found on the first line of this language element.
            </summary>
            <param name="header">The text to precede the language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddHeader(System.String[])">
            <summary>
            Adds the specified header lines before and after this language element. 
            Header lines will automatically be prefixed with the same amount of leading 
            white space found on the first line of this language element.
            </summary>
            <param name="header">The text to precede the language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddHeaderFooter(System.String,System.String)">
            <summary>
            Adds the specified header and footer lines before and after this language element.
            Header and footer lines will automatically be prefixed with the same amount of leading 
            white space found on the first line of this language element.
            </summary>
            <param name="header">The text to precede the language element.</param>
            <param name="footer">The text to follow the language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddHeaderFooter(System.String,System.String,System.Boolean)">
            <summary>
            Adds the specified header and footer lines before and after this language element.
            Header and footer lines will automatically be prefixed with the same amount of leading 
            white space found on the first line of this language element.
            </summary>
            <param name="header">The text to precede the language element.</param>
            <param name="footer">The text to follow the language element.</param>
            <param name="selectText">Whether the new header and footer text, as well as 
            this enclosed language element should be selected in the editor.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddHeaderFooter(System.String[],System.String[])">
            <summary>
            Adds the specified header and footer lines before and after this language element.
            Header and footer lines will automatically be prefixed with the same amount of leading 
            white space found on the first line of this language element.
            </summary>
            <param name="header">The text to precede the language element.</param>
            <param name="footer">The text to follow the language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddHeaderFooter(System.String[],System.String[],System.Boolean)">
            <summary>
            Adds the specified header and footer lines before and after this language element.
            Header and footer lines will automatically be prefixed with the same amount of leading 
            white space found on the first line of this language element.
            </summary>
            <param name="header">The text to precede the language element.</param>
            <param name="footer">The text to follow the language element.</param>
            <param name="selectText">Whether the new header and footer text, as well as 
            this enclosed language element should be selected in the editor.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddFooter(System.String)">
            <summary>
            Adds the specified footer lines after this language element. Footer lines will automatically be prefixed 
            with the same amount of leading white space found on the first line of this language element.
            </summary>
            <param name="footer">The text to follow the language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddFooter(System.String[])">
            <summary>
            Adds the specified footer lines after this language element. Footer lines will automatically be prefixed 
            with the same amount of leading white space found on the first line of this language element.
            </summary>
            <param name="footer">The text to follow the language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ClosestParent(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the closest parent of the two specified language elements 
            that directly or indirectly parent this node.
            </summary>
            <param name="element1">The first of two possible parent elements to test.</param>
            <param name="element2">The second of two possible parent elements to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.CleanUpOwnedReferences">
            <summary>
            Calls CleanUpOwnedReferences for each element inside child nodes
            and detail nodes.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ContainsSelection">
            <summary>
            Determines if this language element contains the selection. Will also return true 
            if this element contains the cursor (and there is no selection).
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildCyclomaticComplexity">
            <summary>
            Calls GetCyclomaticComplexity for all children of this node and returns 
            the total.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetDeclaringType">
            <summary>
            Returns the Class, Struct or Interface that declares this type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParent(DevExpress.CodeRush.StructuralParser.LanguageElementType)">
            <summary>
            Finds and returns a parent to this node of the specified ElementType.
            </summary>
            <param name="aType">The ElementType of the parent LanguageElement we're trying to find.</param>
            <returns>The matching parent node if found; otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParent(DevExpress.CodeRush.StructuralParser.LanguageElementType,DevExpress.CodeRush.StructuralParser.LanguageElementType[])">
            <summary>
            Finds and returns a the first parent to this node matching any of the specified ElementTypes.
            </summary>
            <param name="type">One of the ElementTypes of the parent LanguageElement we're trying to find.</param>
            <param name="types">The remaining ElementTypes of the parent LanguageElement we're trying to find.</param>
            <returns>The matching parent node if found; otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentClassInterfaceOrStruct">
            <summary>
            Returns the parent node that is a Class, an Interface, or a Struct.
            </summary>
            <returns>Returns the parent node that is a Class, an Interface, or a Struct.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentClassInterfaceStructOrModule">
            <summary>
            Returns the parent node that is a Class, an Interface, Struct or a Module.
            </summary>
            <returns>Returns the parent node that is a Class, an Interface, Struct or a Module.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentTypeDeclaration">
            <summary>
            Returns the parent node that is a Class, Interface, Struct, Enum, Delegate or a Module.
            </summary>
            <returns>Returns the parent node that is a Class, Interface, Struct, Enum, Delegate or a Module.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentingStatementParent">
            <summary>
            Finds and returns a ParentingStatement parent (method, property, property accessor) to this element.
            </summary>
            <returns>The matching parent node if found; otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetMethod">
            <summary>
            Returns the Method that holds this LanguageElement, or this 
            element itself if it is a Method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetElementThatCanBeDocumented">
            <summary>
            Returns a parent LanguageElement that can accept an XML Documentation Comment, or this 
            language element itself if it can accept an XML Documentation Comment.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetProperty">
            <summary>
            Returns the Property that holds this LanguageElement, or this 
            element itself if it is a Property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetPropertyAccessor">
            <summary>
            Returns the PropertyAccessor that holds this LanguageElement, or this 
            element itself if it is a PropertyAccessor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetEventAccessor">
            <summary>
            Returns the EventAccessor that holds this LanguageElement, or this 
            element itself if it is a EventAccessor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetClass">
            <summary>
            Returns the Class that holds this LanguageElement, or this 
            element itself if it is a Class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetValueClass">
            <summary>
            Returns the ValueClass that holds this LanguageElement, or this 
            element itself if it is a ValueClass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetManagedClass">
            <summary>
            Returns the ManagedClass that holds this LanguageElement, or this 
            element itself if it is a ManagedClass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetValueStruct">
            <summary>
            Returns the ValueStruct that holds this LanguageElement, or this 
            element itself if it is a ValueStruct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetManagedStruct">
            <summary>
            Returns the ManagedStruct that holds this LanguageElement, or this 
            element itself if it is a ManagedStruct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetInterfaceClass">
            <summary>
            Returns the InterfaceClass that holds this LanguageElement, or this 
            element itself if it is a InterfaceClass.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetInterfaceStruct">
            <summary>
            Returns the InterfaceStruct that holds this LanguageElement, or this 
            element itself if it is a InterfaceStruct.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetInterface">
            <summary>
            Returns the Interface that holds this LanguageElement, or this 
            element itself if it is a Interface.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetStruct">
            <summary>
            Returns the Struct that holds this LanguageElement, or this 
            element itself if it is a Struct.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNamespace">
            <summary>
            Returns the Namespace that holds this LanguageElement, or this 
            element itself if it is a Namespace.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetEvent">
            <summary>
            Returns the Event that holds this LanguageElement, or this 
            element itself if it is an Event.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetAnonymousExpression">
            <summary>
            Returns the AnonymousExpression that holds this LanguageElement, or this 
            element itself if it is an AnonymousMethodExpression or LambdaExpression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetSourceFile">
            <summary>
            Returns the SourceFile that holds this LanguageElement, or this 
            element itself if it is a SourceFile. This property may return null 
            if this language element is not held inside a SourceFile.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetSourceFileSupportLists(DevExpress.CodeRush.StructuralParser.RegionDirective@,DevExpress.CodeRush.StructuralParser.TextStringCollection@,DevExpress.CodeRush.StructuralParser.CompilerDirective@)">
            <summary>
            Gets lists associated with tracking region directives, source code strings, and compiler 
            directives based on a given context.
            </summary>
            <param name="regionDirectives">This will be set to the RegionDirective which is the 
            parent to all parsed RegionDirectives, or null if context was not from a SourceFile.</param>
            <param name="strings">This will be set to the TextStringCollection which holds all 
            parsed source code strings, or null if context was not from a SourceFile.</param>
            <param name="compilerDirectives">This will be set to the CompilerDirective which is 
            the parent to all parsed CompilerDirectives, or null if context was not from a 
            SourceFile.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetSourceFileSupportLists(DevExpress.CodeRush.StructuralParser.RegionDirective@,DevExpress.CodeRush.StructuralParser.TextStringCollection@,DevExpress.CodeRush.StructuralParser.CompilerDirective@,DevExpress.CodeRush.StructuralParser.SourceFile@)">
            <summary>
            Gets lists associated with tracking region directives, source code strings, and compiler directives based on a given context.
            </summary>
            <param name="regionDirectives">This will be set to the RegionDirective which is 
            the parent to all parsed RegionDirectives, or null if context was not from a 
            SourceFile.</param>
            <param name="strings">This will be set to the TextStringCollection which holds 
            all parsed source code strings, or null if context was not from a SourceFile.</param>
            <param name="compilerDirectives">This will be set to the CompilerDirective 
            which is the parent to all parsed CompilerDirectives, or null if context was not 
            from a SourceFile.</param>
            <param name="sourceFile">This will be set to the SourceFile derived from context.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetTypeName">
            <summary>
            Returns the type name of this LanguageElement (Valid if DeclaresIdentifier is true, with the exception of namespaces)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentDocument">
            <summary>
            Gets the VisualStudioDocument (or descendant) node that parents this node (either directly or through multiple parents).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetLastCodeChild">
            <summary>
            Returns the last child code node (non-comment) of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetPreviousIdentifier(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the LanguageElement before this one that declares an identifier that aReferenceNode can see.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetPreviousIdentifier(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32,System.Int32)">
            <summary>
            Gets the LanguageElement before this one that declares an identifier that can be seen from aReferenceNode. 
            If this node contains aRefLine and aRefColumn then this node's detail nodes are checked. 
            This method also performs other checks appropriate with a *first-time* check for identifiers. After that, 
            the overloaded GetPreviousIdentifier (which accepts only a single LanguageElement parameter) is called to find 
            subsequent identifiers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockRange">
            <summary>
            Gets the full block range for this language element. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including attributes, XML Doc Comments, and 
            regions that tightly enclose this block. 
            The coordinates may extend beyond the bounds of 
            this particular language element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockRange(DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Gets the full block range for this language element. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including attributes, XML Doc Comments, and 
            regions that tightly enclose this block. 
            The coordinates may extend beyond the bounds of 
            this particular language element.
            </summary>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockCoordinates(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the full block coordinates for this language element. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including attributes, XML Doc Comments, and 
            regions that tightly enclose this block. 
            The coordinates may extend beyond the bounds of 
            this particular language element.
            </summary>
            <param name="startLine">The starting line number of the full code block.</param>
            <param name="startOffset">The starting line offset of the full code block.</param>
            <param name="endLine">The ending line number of the full code block.</param>
            <param name="endOffset">The ending line offset of the full code block.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockCoordinates(System.Int32@,System.Int32@,System.Int32@,System.Int32@,DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Gets the full block coordinates for this language element. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including attributes, XML Doc Comments, and 
            regions that tightly enclose this block. 
            The coordinates may extend beyond the bounds of 
            this particular language element.
            </summary>
            <param name="startLine">The starting line number of the full code block.</param>
            <param name="startOffset">The starting line offset of the full code block.</param>
            <param name="endLine">The ending line number of the full code block.</param>
            <param name="endOffset">The ending line offset of the full code block.</param>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockNodes(DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Gets the starting and ending language elements for this element's full block. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including attributes and XML Doc Comments. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockNodes(DevExpress.CodeRush.StructuralParser.BlockElements,DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Gets the starting and ending language elements for this element's full block. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including elements specified inside blockElements flags.
            </summary>
            <param name="blockElements">The block elements to take into account.</param>
            <param name="startNode">The start node.</param>
            <param name="endNode">The end node.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.MoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Moves this node to the specified target position in this file.
            </summary>
            <param name="target">The target SourcePoint position to move this node to.</param>
            <param name="operation"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceWith(System.String,System.String)">
            <summary>
            Replaces this node with the specified code.
            </summary>
            <param name="newCode">The text to replace this node with.</param>
            <param name="operation">The name of the undo/redo entry associated with this 
            operation (e.g., "Replace Old Method with New One"). This text will appear in 
            the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceWith(System.String,System.String,System.Boolean)">
            <summary>
            Replaces this node with the specified code.
            </summary>
            <param name="newCode">The text to replace this node with.</param>
            <param name="operation">The name of the undo/redo entry associated with this 
            operation (e.g., "Replace Old Method with New One"). This text will appear in 
            the undo/redo stack.</param>
            <param name="format">Specifies if the text should be formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FullBlockMoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Moves this node and its partnering elements to the specified target position in this file.
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. 
            </summary>
            <param name="target">The target SourcePoint position to move this node to.</param>
            <param name="operation">A description of the operation to perform. This text is visible 
            to users and will appear in the undo/redo lists.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FullBlockMoveTo(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Moves this node and its partnering elements to the specified target position in this file.
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. 
            </summary>
            <param name="target">The target SourcePoint position to move this node to.</param>
            <param name="operation">A description of the operation to perform. This text is visible 
            to users and will appear in the undo/redo lists.</param>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FullBlockMoveWithBinding(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Moves this node and its partnering elements to the specified target position in this file.
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. This method is functionally identical to FullBlockMoveTo, however it uses 
            a slightly different mechanism to work around a bug in the VB language service that appears 
            in Visual Studio 2003. Note: this bug does not appear in Visual Studio 2005.
            </summary>																			
            <param name="target">The target SourcePoint position to move this node to.</param>
            <param name="operation">A description of the operation to perform. This text is visible 
            to users and will appear in the undo/redo lists.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FullBlockMoveWithBinding(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String,DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Moves this node and its partnering elements to the specified target position in this file.
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. This method is functionally identical to FullBlockMoveTo, however it uses 
            a slightly different mechanism to work around a bug in the VB language service that appears 
            in Visual Studio 2003. Note: this bug does not appear in Visual Studio 2005.
            </summary>																			
            <param name="target">The target SourcePoint position to move this node to.</param>
            <param name="operation">A description of the operation to perform. This text is visible 
            to users and will appear in the undo/redo lists.</param>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FullBlockReplaceWith(System.String,System.String)">
            <summary>
            Replaces this node and its partnering elements with the specified code.
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. 
            </summary>
            <param name="newCode">The text to replace this node with.</param>
            <param name="operation">The name of the undo/redo entry associated with this 
            operation (e.g., "Replace Old Method with New One"). This text will appear in 
            the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FullBlockReplaceWith(System.String,System.String,DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Replaces this node and its partnering elements with the specified code.
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. 
            </summary>
            <param name="newCode">The text to replace this node with.</param>
            <param name="operation">The name of the undo/redo entry associated with this 
            operation (e.g., "Replace Old Method with New One"). This text will appear in 
            the undo/redo stack.</param>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetCutRange">
            <summary>
            Gets a SourceRange that includes leading and trailing white space. 
            This method is useful for cutting, deleting or moving this LanguageElement, 
            as this expanded SourceRange tends to produce a clean break in the 
            code when removed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockCutRange">
            <summary>
            Gets a SourceRange that includes partnering elements, leading and trailing white space. 
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. 
            This method is useful for cutting, deleting or moving this LanguageElement, 
            as this expanded SourceRange tends to produce a clean break in the 
            code when removed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullBlockCutRange(DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Gets a SourceRange that includes partnering elements, leading and trailing white space. 
            Partnering elements are neighboring elements that complete this block (or that this 
            element completes), and include attributes, XML Doc Comments, and regions that tightly 
            enclose this block. 
            This method is useful for cutting, deleting or moving this LanguageElement, 
            as this expanded SourceRange tends to produce a clean break in the 
            code when removed.
            </summary>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SelectCode(System.Boolean)">
            <summary>
            Selects the code corresponding to this element in the active TextView. 
            </summary>
            <param name="ensureVisible">Whether the selection should be scrolled into view.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SelectCode">
            <summary>
            Selects the code corresponding to this element in the active TextView.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SelectFullBlock(DevExpress.CodeRush.StructuralParser.IDXCoreTextView,System.Boolean)">
            <summary>
            Selects the full block of code corresponding to this element in the 
            specified TextView. "Full block" is defined as this element and any 
            partnering elements that complete this block (or that this block 
            completes).
            </summary>
            <param name="textView">The view to select in.</param>
            <param name="ensureVisible">Whether the selection should be scrolled into view.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SelectFullBlock(DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Selects the full block of code corresponding to this element in the 
            specified TextView. "Full block" is defined as this element and any 
            partnering elements that complete this block (or that this block 
            completes).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SelectFullBlock(System.Boolean)">
            <summary>
            Selects the full block of code corresponding to this element in the 
            active TextView. "Full block" is defined as this element and any 
            partnering elements that complete this block (or that this block 
            completes).
            </summary>
            <param name="ensureVisible">Whether the selection should be scrolled into view.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SelectFullBlock">
            <summary>
            Selects the full block of code corresponding to this element in the 
            active TextView. "Full block" is defined as this element and any 
            partnering elements that complete this block (or that this block 
            completes).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentMethod">
            <summary>
            Returns the parent LanguageElement that is a Method, or null if this LanguageElement is 
            not parented by a Method.
            </summary>
            <returns>Returns the parent LanguageElement that is a Method, or null if this LanguageElement is 
            not parented by a Method.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentElementThatCanBeDocumented">
            <summary>
            Returns a parent LanguageElement that can accept an XML documentation comment.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentProperty">
            <summary>
            Returns the parent LanguageElement that is a Property, or null if this LanguageElement is 
            not parented by a Property.
            </summary>
            <returns>Returns the parent LanguageElement that is a Property, or null if this LanguageElement is 
            not parented by a Property.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentPropertyAccessor">
            <summary>
            Returns the parent LanguageElement that is a PropertyAccessor, or null if this LanguageElement is 
            not parented by a PropertyAccessor.
            </summary>
            <returns>Returns the parent LanguageElement that is a PropertyAccessor, or null if this LanguageElement is 
            not parented by a PropertyAccessor.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentEventAccessor">
            <summary>
            Returns the parent LanguageElement that is a EventAccessor, or null if this LanguageElement is 
            not parented by a PropertyAccessor.
            </summary>
            <returns>Returns the parent LanguageElement that is a EventAccessor, or null if this LanguageElement is 
            not parented by a EventAccessor.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentClass">
            <summary>
            Returns the parent LanguageElement that is a Class, or null if this LanguageElement is 
            not parented by a Class.
            </summary>
            <returns>Returns the parent LanguageElement that is a Class, or null if this LanguageElement is 
            not parented by a Class.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentManagedClass">
            <summary>
            Returns the parent LanguageElement that is a ManaedClass, or null if this LanguageElement is 
            not parented by a ManagedClass.
            </summary>
            <returns>Returns the parent LanguageElement that is a ManagedClass, or null if this LanguageElement is 
            not parented by a ManagedClass.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentManagedStruct">
            <summary>
            Returns the parent LanguageElement that is a ManaedStruct, or null if this LanguageElement is 
            not parented by a ManagedStruct.
            </summary>
            <returns>Returns the parent LanguageElement that is a ManagedStruct, or null if this LanguageElement is 
            not parented by a ManagedStruct.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentInterfaceClass">
            <summary>
            Returns the parent LanguageElement that is a InterfaceClass, or null if this LanguageElement is 
            not parented by a InterfaceClass.
            </summary>
            <returns>Returns the parent LanguageElement that is a InterfaceClass, or null if this LanguageElement is 
            not parented by a InterfaceClass.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentInterfaceStruct">
            <summary>
            Returns the parent LanguageElement that is a InterfaceStruct, or null if this LanguageElement is 
            not parented by a InterfaceClass.
            </summary>
            <returns>Returns the parent LanguageElement that is a InterfaceStruct, or null if this LanguageElement is 
            not parented by a InterfaceStruct.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentValueClass">
            <summary>
            Returns the parent LanguageElement that is a ValueClass, or null if this LanguageElement is 
            not parented by a ValueClass.
            </summary>
            <returns>Returns the parent LanguageElement that is a ValueClass, or null if this LanguageElement is 
            not parented by a ValueClass.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentValueStruct">
            <summary>
            Returns the parent LanguageElement that is a ValueStruct, or null if this LanguageElement is 
            not parented by a ValueStruct.
            </summary>
            <returns>Returns the parent LanguageElement that is a ValueStruct, or null if this LanguageElement is 
            not parented by a ValueStruct.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentInterface">
            <summary>
            Returns the parent LanguageElement that is an Interface, or null if this LanguageElement is 
            not parented by an Interface.
            </summary>
            <returns>Returns the parent LanguageElement that is an Interface, or null if this LanguageElement is 
            not parented by an Interface.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentStruct">
            <summary>
            Returns the parent LanguageElement that is a Struct, or null if this LanguageElement is 
            not parented by a Struct.
            </summary>
            <returns>Returns the parent LanguageElement that is a Struct, or null if this LanguageElement is 
            not parented by a Struct.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentNamespace">
            <summary>
            Returns the parent LanguageElement that is a Namespace, or null if this LanguageElement is 
            not parented by a Namespace.
            </summary>
            <returns>Returns the parent LanguageElement that is a Namespace, or null if this LanguageElement is 
            not parented by a Namespace.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentEvent">
            <summary>
            Returns the parent LanguageElement that is an Event, or null if this LanguageElement is 
            not parented by a Event.
            </summary>
            <returns>Returns the parent LanguageElement that is a Event, or null if this LanguageElement is 
            not parented by a Event.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentAnonymousExpression">
            <summary>
            Returns the parent LanguageElement that is an AnonymousMethodExpression or LambdaExpression, or null if this LanguageElement is 
            not parented by AnonymousMethodExpression or LambdaExpression.
            </summary>
            <returns>Returns the parent LanguageElement that is AnonymousMethodExpression or LambdaExpression, or null if this LanguageElement is 
            not parented by AnonymousMethodExpression or LambdaExpression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetCodeNodeFromList(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Returns the first code node (non-comment) from the passed-in list.
            </summary>
            <param name="list">An ArrayList of LanguageElements.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFirstCodeChild">
            <summary>
            Returns the first child code node (non-comment) of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFirstCodeChild(System.Boolean)">
            <summary>
            Returns the first child code node (non-comment) of this element.
            </summary>
            <param name="useDetailNodes">Pass true to use detail nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNextCodeElementSibling">
            <summary>
            Returns next code element sibling.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetPreviousCodeElementSibling">
            <summary>
            Returns previous code element sibling.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentLoopOrFinallyTarget">
            <summary>
            Returns the parent loop or the finally block of a try/finally if it's a closer target. Returns null if this element is not
            parented by a loop or try/finally block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentMethodOrProperty">
            <summary>
            Gets the method or property that holds this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentMethodOrPropertyOrEvent">
            <summary>
            Gets the method or property or event that holds this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentMethodOrPropertyAccessor">
            <summary>
            Gets the method or property accessor that holds this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentMethodOrAccessor">
            <summary>
            Gets the parent method or accessor that holds this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentMethodOrEventAccessor">
            <summary>
            Gets the method or event accessor that holds this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentCodeBlock">
            <summary>
            Gets parent method or property accessor or event accessor or delegate.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentStatementOrVariable">
            <summary>
            Returns parent statement or variable for this element or element itself if it is
            statement or variable. Returns null if there is no parent statement or variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetStartString">
            <summary>
            Returns the string before this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFromLiteModel">
            <summary>
            Returns lite element from project cache.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideSelection">
            <summary>
            Determines if this language element is contained inside a selection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsSibling(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Determines whether the specified element is a sibling of this element (both are contained in the same OwningList).
            </summary>
            <param name="aLanguageElement">The language element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsDeeperThan(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if this language element is deeper (measured through LevelsDeep) than the specified language element.
            </summary>
            <param name="aLanguageElement">The language element to test against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SameEndPoint(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified language element ends at the same point as this one. The specified element should be 
            from the same file as this one.
            </summary>
            <param name="aLanguageElement">The language element to test against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SameStartPoint(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified language element starts at the same point as this one. The specified element should be 
            from the same file as this one.
            </summary>
            <param name="aLanguageElement">The language element to test against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddNode(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Adds a child node to this LanguageElement and sets its Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="element">The LanguageElement to add.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddNodes(DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Adds a child nodes to this LanguageElement and sets its Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="nodes">The LanguageElement to add.</param>
            <remarks>
            This method also sets the Index field,
            which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertNode(System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Inserts a child node to this LanguageElement and sets its Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="index">The index to insert new element.</param>
            <param name="element">The LanguageElement to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertNodes(System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Inserts child nodes to this LanguageElement and sets 
            Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="index">The index to insert new element.</param>
            <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveNode(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Removes a child node of this LanguageElement and sets its Parent property accordingly.
            </summary>
            <param name="element">The LanguageElement to remove.</param>
            <remarks>
            This method also sets the _Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveNodes(DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Removes child nodes of this LanguageElement and sets Parent property accordingly.
            </summary>
            <param name="nodes">The elements to remove.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveNodes(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Removes child nodes of this LanguageElement and sets Parent property accordingly.
            </summary>
            <param name="nodes">The elements to remove.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveAllNodes">
            <summary>
            Removes all child nodes of this LanguageElement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Replaces a child node of this LanguageElement with a new one and sets its Parent property accordingly.
            </summary>
            <param name="oldElement">The LanguageElement to remove.</param>
            <param name="newElement">The LanguageElement to insert.</param>
            <remarks>
            This method also sets the _Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceNodes(DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Replaces child nodes of this LanguageElement with new ones
            and sets Parent property accordingly.
            </summary>
            <param name="oldNodes">The LanguageElements to remove.</param>
            <param name="newNodes">The LanguageElements to insert.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddDetailNode(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Adds a detail node to this LanguageElement and sets its Parent property accordingly. Detail nodes 
            are language elements that modify this language element, but are not direct children. An example of 
            a detail node is a parameter to a method.
            </summary>
            <param name="element">The LanguageElement to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.AddDetailNodes(DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Adds a child detail nodes to this LanguageElement and sets its Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="nodes">The LanguageElement to add.</param>
            <remarks>
            This method also sets the _Index field, which points to the index inside the parent. This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertDetailNode(System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Inserts a child detail node to this LanguageElement and sets its Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="index">The index to insert new element.</param>
            <param name="element">The LanguageElement to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InsertDetailNodes(System.Int32,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Inserts child detail nodes to this LanguageElement 
            and sets Parent property accordingly. Called by CodeRush language parsers.
            </summary>
            <param name="index">The index to insert new element.</param>
            <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveDetailNode(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Removes a detail node of this LanguageElement and sets its Parent property accordingly.
            </summary>
            <param name="element">The LanguageElement to remove.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation and also to validate structural integrity.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RemoveDetailNodes(DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Removes detail nodes of this LanguageElement and sets Parent property accordingly.
            </summary>
            <param name="nodes">The LanguageElements to remove.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation and also to validate structural integrity.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceDetailNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Replaces a detail node of this LanguageElement with a new one and 
            sets its Parent property accordingly.
            </summary>
            <param name="oldElement">The LanguageElement to remove.</param>
            <param name="newElement">The LanguageElement to insert.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceDetailNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Replaces a detail node of this LanguageElement with collection of the new elements and 
            sets their Parent property accordingly.
            </summary>
            <param name="oldElement">The LanguageElement to remove.</param>
            <param name="newElements">The LanguageElementCollection to insert.</param>
            <remarks>
            This method also sets the Index field for inserted elements, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Replaces a node of this LanguageElement with collection of the new elements and 
            sets their Parent property accordingly.
            </summary>
            <param name="oldElement">The LanguageElement to remove.</param>
            <param name="newElements">The LanguageElementCollection to insert.</param>
            <remarks>
            This method also sets the Index field for inserted elements, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ReplaceDetailNodes(DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Replaces a detail node of this LanguageElement with a new one and 
            sets its Parent property accordingly.
            </summary>
            <param name="oldNodes">The LanguageElements to remove.</param>
            <param name="newNodes">The LanguageElements to insert.</param>
            <remarks>
            This method also sets the Index field, which points to the index inside the parent.
            This field is used for fast sibling navigation.
            </remarks>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Collapse(System.Boolean)">
            <summary>
            Collapses this language element in active text view. If undoable is true, this action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Collapse">
            <summary>
            Collapses this language element in active text view. This action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Expand(System.Boolean)">
            <summary>
            Expands this language element in active text view. If undoable is true, this action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Expand">
            <summary>
            Expands this language element in active text view. This action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.InSameProject(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified element resides in the 
            same project as this element.
            </summary>
            <param name="element">The other element to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsRelatedTo(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if the specified element is the parent (or grandparent) of this 
            element, or if the specified element is the child (or grandchild) of this 
            element
            </summary>
            <param name="element">The LanguageElement to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsVisibleFrom(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if this LanguageElement can be accessed from the specified LanguageElement.
            </summary>
            <param name="viewer">The LanguageElement from which to check access.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsIdentifier(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if passed string is an identifier.
            </summary>
            <param name="identifier">The string to check.</param>
            <param name="viewer">The start element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindDeclaration(System.String,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Finds declaration of the passed in identifier starting from
            the given element.
            </summary>
            <param name="identifier">The string to check.</param>
            <param name="viewer">The start element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindChildByName(System.String)">
            <summary>
            Finds child element by it's name.
            </summary>
            <param name="aName">The name of the child element to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindChildByName(System.String,System.Boolean)">
            <summary>
            Finds child or detail node element by it's name.
            </summary>
            <param name="aName">The name of the child element to search.</param>
            <param name="lookInDetail">Pass true to search in detail nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindChildByElementType(DevExpress.CodeRush.StructuralParser.LanguageElementType)">
            <summary>
            Finds child node of this element by it's element type.
            </summary>
            <param name="type">The LanguageElementType of the child element to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindChildByElementType(DevExpress.CodeRush.StructuralParser.LanguageElementType,System.Boolean)">
            <summary>
            Finds child node of this element by it's element type.
            </summary>
            <param name="type">The LanguageElementType of the child element to search.</param>
            <param name="lookInDetail">Pass true to search in detail nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildAfter(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the child or detail node that starts closest to the specified SourcePoint.
            The detail nodes are not considered if closest to the specified point element is found inside nodes.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the child node that is closest to the specified point, or null if no child or detail nodes follows the specified point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildAfter(System.Int32,System.Int32)">
            <summary>
            Returns the child or detail node that starts closest to (but after) the specified SourcePoint.
            The detail nodes are not considered if closest to the specified point element is found inside nodes.
            </summary>
            <param name="line">The line to check.</param>
            <param name="offset">The character offset to check.</param>
            <returns>Returns the child node that is closest to the specified point, or null if no child or detail nodes follows the specified point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetSiblingBefore(System.Int32,System.Int32)">
            <summary>
            Gets sibling of this element that is situated right before the specified line and offset.
            </summary>
            <param name="line">The line to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetSiblingAfter(System.Int32,System.Int32)">
            <summary>
            Gets sibling of this element that is situated right after the specified line and offset.
            </summary>
            <param name="line">The line to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets the node that contains the specified point. Scope is restricted to this node, 
            its children and any detail nodes. The smallest node that contains the specified point 
            is returned. If no children contain this point, returns null.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the child node that contains the specified SourcePoint, or null if no containing child node was found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildAt(System.Int32,System.Int32)">
            <summary>
            Gets the node that contains the specified point. Scope is restricted to this 
            node, its children and any detail nodes. The smallest node that contains the 
            specified point is returned. If no children contain this point, returns null.
            </summary>
            <param name="line">The line to check.</param>
            <param name="column">The column to check.</param>
            <returns>Returns the child node that contains the specified point, or null 
            if no containing child node was found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildBefore(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the child or detail node that ends closest to the specified SourcePoint.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the child node that ends closest to the specified SourcePoint, or null if no child or detail nodes precede the specified point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetChildBefore(System.Int32,System.Int32)">
            <summary>
            Returns the child or detail node that ends closest to the specified line and character offset.
            </summary>
            <param name="line">The line to check.</param>
            <param name="offset">The character offset to check.</param>
            <returns>Returns the child node that is closest to the specified point, or null if no child or detail nodes precede the specified point.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetCyclomaticComplexity">
            <summary>
            Gets the cyclomatic complexity of this node. Cyclomatic complexity is a 
            measure of the structural complexity of a node (and its children). When 
            GetCyclomaticComplexity is called on a method or a property accessor, the 
            value returned will be the number of possible execution paths through 
            that code block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetMaintenanceComplexity">
            <summary>
            Gets the Maintenance Complexity of this node. Maintenance complexity is a 
            measure of the structural complexity of a node (and its children), and 
            represents how easy or challenging a method will be to understand and 
            maintain. Scores closer to zero are simple. Small methods usually score 
            below 150, while large/complex methods will exceed 500.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Inside(DevExpress.CodeRush.StructuralParser.LanguageElementType)">
            <summary>
            Returns true if this language element is parented by a LanguageElement of the specified ElementType.
            </summary>
            <returns>Returns true if this language element is parented by a LanguageElement of the specified ElementType.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNodeAt(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns the smallest node containing the specified SourcePoint in the same structure 
            as this element. Search is conducted from this node outward to the ends of the structure.
            </summary>
            <param name="sourcePoint">The SourcePoint to check.</param>
            <returns>Returns the node that contains the specified point, or null if no containing child node was found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Returns the smallest node containing line and column in the same structure 
            as this element. Search is conducted from this node outward to the ends of the structure.
            </summary>
            <param name="line">The line to check.</param>
            <param name="column">The column to check.</param>
            <returns>Returns the node that contains the specified point, or null if no containing child node was found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetNearestParentingStatement(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Geta nearest to the specified source point parenting statement.
            </summary>
            <param name="point">The point to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetDefaultVisibility">
            <summary>
            Returns default visibility for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetValidVisibilities">
            <summary>
            Returns valid visibilities for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsParentedBy(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if this language element is parented 
            by the specified language element (directly or by 
            an ancestor).
            </summary>
            <param name="aParentElement">The ancestor element to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.MatchesSelection">
            <summary>
            Determines if the bounds of the language element exactly matches the selected text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Parents(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if this language element parents 
            the specified language element (directly or as 
            an ancestor).
            </summary>
            <param name="aChildElement">The child element to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.RangeIsClean(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns true if the specified range does *not* intersect any internal code that defines 
            this element. This call is used by the incremental parser to determine if text newly 
            added inside a node requires a reparse of the entire node (performed if this method 
            returns false), or if the text can simply be parsed and inserted as child nodes of this 
            node. For safety, the default for this method is to return false. Descendants can 
            override and return true as needed.
            </summary>
            <param name="sourceRange">The SourceRange to check. When this method is called from the 
            incremental parser, it is guaranteed to intersect (or be contained in) this node's Range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFullPath">
            <summary>
            Returns full path of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.PointInDetails(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Returns true if the specified source point is inside detail nodes of this element.
            </summary>
            <param name="point">The point to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.HasInDetails(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Retunrs true if this element contains specified element inside detail nodes.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.HasInNodes(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Retunrs true if this element contains specified element inside nodes.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.IsDetailOfParentStatement">
            <summary>
            Returns true if this element is inside detail node list of the parent statement or variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetParentParentingStatement">
            <summary>
            Gets parent parenting statement for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFirstLevelParentInCustomElement(DevExpress.CodeRush.StructuralParser.LanguageElementType)">
            <summary>
            Gets first parent element of the first level parent with the specified element type.
            </summary>
            <param name="elementType">The element type of the parent to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFirstLevelParentInParentMethod">
            <summary>
            Gets first parent element of the first level parent method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFirstLevelParentInParentProperty">
            <summary>
            Gets first parent element of the first level parent property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFirstLevelParentInParentMethodOrProperty">
            <summary>
            Gets first parent element of the first level parent method or property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ParseOnDemandIfNeeded">
            <summary>
            Parses tokens stored inside PostponedTokens list.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ParseAllPostponedElements">
            <summary>
            Parses all children that use on demand parsing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SetParent(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Sets the parent of this LanguageElement. Called by the parser.
            </summary>
            <param name="aParent">The LanguageElement that parents this one.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.SetIndex(System.Int32)">
            <summary>
            Sets element index.
            </summary>
            <param name="index">The new index to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetDeclaration">
            <summary>
            Gets declaration for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetDeclaration(System.Boolean)">
            <summary>
            Gets declaration for this element.
            </summary>
            <param name="restore">
            Determines whether a LanguageElement should be restored for the found declaration.
            Pass in false if you only need to test and explore the element’s declaration (you’ll get an IElement implementer back).
            Pass in true if you will need to change the parse tree and generate new code (slower, but you’ll get a heavier LanguageElement descendant back).
            </param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindAllReferences">
            <summary>
            Searches for references inside active solution.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.FindAllReferences(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Searches for references inside the given scope.
            </summary>
            <param name="scope">The scope to search in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.GetFileLocation">
            <summary>
            Returns location of the current element in the SourceFile represented in the string form.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Find(DevExpress.CodeRush.StructuralParser.IProjectElement,System.String)">
            <summary>
            Finds LanguageElement in the file using its file location.
            Use GetFileLocation methods to get location of the LanguageElement in the file.
            </summary>
            <param name="proj">The project to restore LanguageElement</param>
            <param name="fileLocation">The file location of the LanguageElement</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Find(System.String)">
            <summary>
            Finds LanguageElement in the file using its file location.
            Use GetFileLocation methods to get location of the LanguageElement in the file.
            </summary>
            <param name="fileLocation">The file location of the LanguageElement</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.NextStandaloneCodeSibling(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the next "stand-alone" code sibling. A language element that is not a comment 
            and does not complete a previous node (unless it is a finally block).
            </summary>
            <param name="element">The element from which to derive the next stand-alone sibling.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.NextStandaloneCodeSibling">
            <summary>
            Returns the next "stand-alone" code sibling for this element. 
            A language element that is not a comment and does not complete a 
            previous node (unless it is a finally block).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ExpandInView(DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Expands this language element. This action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
            <param name="textView">The TextView to expand language element in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.ExpandInView(DevExpress.CodeRush.StructuralParser.IDXCoreTextView,System.Boolean)">
            <summary>
            Expands this language element. If undoable is true, this action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
            <param name="textView">The TextView to expand language element in.</param>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.CollapseInView(DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Collapses this language element. This action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
            <param name="textView">The TextView to collapse language element in.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.Collapse(DevExpress.CodeRush.StructuralParser.IDXCoreTextView,System.Boolean)">
            <summary>
            Collapses this language element. If undoable is true, this action is placed on the current undo stack. If this 
            language element is not collapsible, this method has no effect.
            </summary>
            <param name="textView">The TextView to collapse language element in.</param>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ToLanguageElement">
            <summary>
            Gets corresponding LanguageElement for this element.
            This method will return null, if this element doesn't 
            have corresponding LanguageElement available
            (e.g. if this element is inside referenced assembly).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElementModifier#SetParent(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Sets parent for current element.
            </summary>
            <param name="parent">The parent to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElementModifier#ReplaceChild(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Repplaces old element with new one.
            </summary>
            <param name="oldNode">The node to replace</param>
            <param name="newNode">New inserting node</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElementModifier#SetFakeNode(System.Boolean)">
            <summary>
            Sets IsFakeNode property to the given value.
            </summary>
            <param name="isFakeNode">The value to set.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ThisMaintenanceComplexity">
            <summary>
            Returns the Maintenance Complexity score for this element itself, excluding children.
            Descendant nodes that want to participate in Maintenance Complexity analysis can 
            override this property to calculate a value, or simply set protected field 
            _ThisMaintenanceComplexity to an appropriate value in their constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.PostponedComments">
            <summary>
            Gets comment collection of all postponed comments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.MacroCall">
            <summary>
            This property need to use only for C++.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ParsingPostponedTokens">
            <summary>
            Gets or sets flag indicating that on demand parsing
            is in progress.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Range">
            <summary>
            The source range of this language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.CanContainCode">
            <summary>
            True if this language element can contain code statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.CanBeDocumented">
            <summary>
            True if XML documentation comments can be bound to this language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.CompletesPrevious">
            <summary>
            True if this language element connects to the previous statement or preprocessor directive 
            (e.g., catch, finally, #if, #elif, #warning, etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DeclaresIdentifier">
            <summary>
            Gets whether this node declares an identifier or not. If true, the Name property will hold the name of the identifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ElementType">
            <summary>
            Returns the element type for this LanguageElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideMethod">
            <summary>
            Returns true if this language element is inside a Method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideEvent">
            <summary>
            Returns true if this language element is inside an Event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideEventAccessor">
            <summary>
            Returns true if this language element is inside an Event accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideAssignment">
            <summary>
            Returns true if this language element is inside left side of an assignment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideOutArgumentDirection">
            <summary>
            Returns true if this language element is used inside out argument direction expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideRefArgumentDirection">
            <summary>
            Returns true if this language element is used inside ref argument direction expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideIncrement">
            <summary>
            Returns true if this language element is used inside increment expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideDecrement">
            <summary>
            Returns true if this language element is used inside decrement expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideProperty">
            <summary>
            Returns true if this language element is inside a Property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideClass">
            <summary>
            Returns true if this language element is inside a Class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideStruct">
            <summary>
            Returns true if this language element is inside a Struct.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideInterface">
            <summary>
            Returns true if this language element is inside an Interface declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.InsideNamespace">
            <summary>
            Returns true if this language element is inside a Namespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.IsDetailNode">
            <summary>
            Returns true if this node is a detail node. Each LanguageElement can have 
            child nodes, which structurally and logically fall beneath it. LanguageElements
            can also maintain a list of detail nodes, which enhance it. For example, a 
            method's detail nodes would include parameters to the method. And a For-loop's
            detail nodes would include the iterator declaration (e.g., "int i = 0;", the 
            expression (e.g., "i &lt; Count;"), and the statement (e.g., "i++") that is 
            executed after every loop.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.HasDocument">
            <summary>
            Returns true if this language element was parsed from a source file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.LevelsDeep">
            <summary>
            Gets the number of parent nodes between this node and the topmost node (e.g., the file node).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Parent">
            <summary>
            Returns the parent of this LanguageElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.FileNode">
            <summary>
            Returns the file node for this LanguageElement.
            Returns null if this element is not parented by any source file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ParentRegion">
            <summary>
            Gets the region directive that parents this node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.IsLoop">
            <summary>
            Returns true if this is a loop, switch statement, or other 
            code block that can be broken by a break statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ParentLoop">
            <summary>
            Returns the parenting loop, switch statement, or other code block that 
            can be broken by a break statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ParentTryBlock">
            <summary>
            Returns the parenting try block, or null if this language element is not contained 
            in a try block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ParentWith">
            <summary>
            Gets parent with statement for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.ParentPath">
            <summary>
            Gets the full path for this element's parent.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.PathSegment">
            <summary>
            Gets path segment for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Solution">
            <summary>
            Gets the SolutionElement that this element belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Project">
            <summary>
            Gets the ProjectElement that this element belongs to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Location">
            <summary>
            Gets the location of this node as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.RootNamespaceLocation">
            <summary>
            Gets the location of this node as a string starting with root namespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.NextNode">
            <summary> 
            Gets the next node in the code following the start of this node. If  
            this node has children, this property returns the first child. If this node  
            has no children, this property returns the next sibling. If this node has no  
            next sibling, this property returns the next sibling of a parent node. If no  
            parents with siblings are found, this property returns null. 
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.NextSibling">
            <summary>
            Gets the next sibling to this element, or null if no siblings follow this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.PreviousSibling">
            <summary>
            Returns the previous sibling to this element, or null if no siblings precede this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.NextCodeSibling">
            <summary>
            Gets the next non-comment sibling to this element, or null if no siblings containing code follow this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.PreviousCodeSibling">
            <summary>
            Returns the previous non-comment sibling to this element, or null if no siblings containing code precede this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.FirstDetail">
            <summary> 
            Returns the first detail node of this element, or null if no detail nodes exist. 
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.FirstChild">
            <summary>
            Returns the first child of this element, or null if no children exist.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.FirstSibling">
            <summary>
            Gets the first sibling of this language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Nodes">
            <summary>
            Gets child nodes for this element.
            If this element overrides UsePostponedParsing property and
            returns true, then before returning child nodes list on demand
            parsing will be done.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DetailNodes">
            <summary>
            Gets detail nodes for this element.
            If this element overrides UsePostponedParsing property and
            returns true, then before returning child nodes list on demand
            parsing will be done.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.UsePostponedParsing">
            <summary>
            Returns true if this element uses on demand parsing, otherwise
            returns false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.HasUnparsedCode">
            <summary>
            Returns true if this element holds code that should be parsed on demand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.UnparsedCode">
            <summary>
            Returns token that contains unparsed code for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.HasPostponedComments">
            <summary>
            Returns true if this element holds code that should be parsed on demand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Index">
            <summary>
            The index into the OwningList.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.LastSibling">
            <summary>
            Gets the last sibling of this language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.LastChild">
            <summary>
            Returns the last child of this element, or null if no children exist.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.LastDetail">
            <summary>
            Returns the last detail node of this element, or null if no details exist.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Document">
            <summary>
            Gets the IDocument associated with the parenting SourceFile language element. May return null if this node was parsed from a file on disk.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.View">
            <summary>
            Returns a view associated with the document that was the source for this language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.IsCollapsible">
            <summary>
            Determines whether or not this language element can be collapsed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.CollapsibleRange">
            <summary>
            Gets the language element that is collapsible. This will not be valid unless IsCollapsible is true.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.HasOuterRangeChildren">
            <summary>
            Descendants should override and return true if this node can have children which range
            goes outside of this node's range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Collapsed">
            <summary>
            Gets or sets whether or not this language element is collapsed in active text view. If this language element is not collapsible,
            this property has no effect.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.Expanded">
            <summary>
            Gets or sets whether or not this language element is expanded in active text view. If this language element is not collapsible,
            this property has no effect.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentType">
            <summary>
            Gets parent type of element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentEvent">
            <summary>
            Gets parent event for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentMember">
            <summary>
            Gets parent member for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentMethod">
            <summary>
            Gets parent method for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentMethodOrAccessor">
            <summary>
            Gets parent method or accessor for the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentMethodOrPropertyOrEvent">
            <summary>
            Gets parent method or property or event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentProperty">
            <summary>
            Gets parent event for the element.
            </summary>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#ParentNamespace">
            <summary>
            Gets parent namespace of the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#AssemblyModel">
            <summary>
            Gets assembly model for the element.
            Note that elements that are not
            inside any assembly will return null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#AllChildren">
            <summary>
            Gets all children of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#CodeChildren">
            <summary>
            Gets children elements located in the body of the current element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#Files">
            <summary>
            Gets element file. In case of partial 
            elements there are more than one file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#FirstFile">
            <summary>
            Gets first file where the element is declared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#Ranges">
            <summary>
            Gets element range. In case of partial 
            elements there are more than one range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#FirstRange">
            <summary>
            Gets first TextRange that indicate where 
            the element appears in the code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#NameRanges">
            <summary>
            Gets element name range. In case of partial 
            elements there are more than one name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#FirstNameRange">
            <summary>
            Gets first TextRange that indicate where 
            the element name appears in the code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#NextSibling">
            <summary>
            Gets the next sibling to this element, or null if no siblings follow this element.
            </summary>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LanguageElement.DevExpress#CodeRush#StructuralParser#IElement#PreviousSibling">
            <summary>
            Returns the previous sibling to this element, or null if no siblings precede this element.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PathElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VisualStudioDocument.AssignProject(DevExpress.CodeRush.StructuralParser.IProjectElement)">
            <summary>
            Assigns the ProjectElement that contains this document.
            Document will not be added to the nodes list.
            </summary>
            <param name="project">The ProjectElement that contains this document.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VisualStudioDocument.InvalidateRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Invalidates the specified source range. Descendants can override and should remove 
            any LanguageElements that are contained within the specified range.
            </summary>
            <param name="range">The SourceRange to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VisualStudioDocument.RangedParseComplete(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Called after a ranged parse. Descendants can override and can perform any 
            cleanup necessary.
            </summary>
            <param name="range">The SourceRange to invalidate.</param>
            <param name="context">The LanguageElement that is the context for the 
            ranged parse.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VisualStudioDocument.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.VisualStudioDocument.Project">
            <summary>
            Gets the ProjectElement that this element belongs to.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAliasList">
            <summary>
            Provides name value collection of aliases.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAliasList.AliasList">
            <summary>
            Gets name value collection of aliases.
            E.g. in C# alias has the following form:
            using AliasName = AliasValue;
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ICompilerDirectives">
            <summary>
            Provides compiler directives collection and compiler directive root node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICompilerDirectives.CompilerDirectives">
            <summary>
            Gets a collection of compiler directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICompilerDirectives.CompilerDirectiveRootNode">
            <summary>
            Gets root compiler directive node.
            Compiler directive root node holds child compiler directives.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IRegions">
            <summary>
            Provides region directives collection and region root node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IRegions.Regions">
            <summary>
            Gets a collection of region directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IRegions.RegionRootNode">
            <summary>
            Gets region root node.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUsingList">
            <summary>
            Provides a list of namespace using statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUsingList.UsingList">
            <summary>
            Gets SortedList of using statements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIncludeDirectiveList">
            <summary>
            Provides a list of include directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IIncludeDirectiveList.IncludeDirectiveList">
            <summary>
            Gets SortedList of include directives.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITextStrings">
            <summary>
            Provides text strings collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITextStrings.TextStrings">
            <summary>
            Gets a collection of TextString objects.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IComments">
            <summary>
            Provides comment collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IComments.AllComments">
            <summary>
            Gets a collection of comments.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IXmlDocComments">
            <summary>
            Provides xml doc comments collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IXmlDocComments.AllXmlDocComments">
            <summary>
            Gets a collection of XmlDocComment objects.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy">
            <summary>
            Object implementing this interface could be created on demand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceFile.AliasList">
            <summary>
            Gets a list of aliases declared inside the file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceFile.AliasHash">
            <summary>
            Gets alias expressions hashtable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceFile.AssemblyList">
            <summary>
            Gets a list of assemblies used inside the file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceFile.AspPageBaseType">
            <summary>
            Gets base type for the asp page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceFile.UsingList">
            <summary>
            Gets a sorted list of using statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAspSourceFile.Asp">
            <summary>
            Returns Asp code layer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAspSourceFile.Code">
            <summary>
            Returns Code code layer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAspSourceFile.IncludedScriptFiles">
            <summary>
            Returns list of script files, included to ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAspSourceFile.IncludedStyleSheetFiles">
            <summary>
            Returns list of style sheet files, included to ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAspSourceFile.MasterPageFile">
            <summary>
            Return Master Page file path for ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAspSourceFile.ModelTypeName">
            <summary>
            Return Model Type Name for ASP page
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.InvalidateRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Invalidates the specified source range. Descendants can override and should remove 
            any LanguageElements that are contained within the specified range.
            </summary>
            <param name="range">The SourceRange to invalidate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.BindAdditionalElementsToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory)">
            <summary>
            Binds additional elements (e.g., regions and compiler directives) to the specified 
            IDisposableEditPointFactory (typically a TextDocument).
            </summary>
            <param name="textDoc">The implementor of IDisposableEditPointFactory (TextDocument implements this interface).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.BindAdditionalElementsToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Binds additional elements (e.g., regions and compiler directives) to the specified 
            IDisposableEditPointFactory (typically a TextDocument).
            </summary>
            <param name="textDoc">The implementor of IDisposableEditPointFactory (TextDocument implements this interface).</param>
            <param name="containingRange">The source range containing the elements to bind.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.Parse(System.String,System.String)">
            <summary>
            Parse code string using the specified language.
            </summary>
            <param name="code">The code to parse.</param>
            <param name="language">The language to use for parsing.</param>
            <returns>Returns new SourceFile instance.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.GetSourceFileProxy">
            <summary>
            Returns appropriate proxy for this source file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.AddComment(DevExpress.CodeRush.StructuralParser.Comment)">
            <summary>
            Adds comment to a list of all comments.
            </summary>
            <param name="comment">The comment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.AddComment(DevExpress.CodeRush.StructuralParser.Comment,System.Boolean)">
            <summary>
            Adds comment to a list of all comments.
            </summary>
            <param name="comment">The comment to add.</param>
            <param name="useSorting"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.RemoveComment(DevExpress.CodeRush.StructuralParser.Comment)">
            <summary>
            Removes comment from a list of all comments.
            </summary>
            <param name="comment">The comment to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.AddXmlDocComment(DevExpress.CodeRush.StructuralParser.XmlDocComment)">
            <summary>
            Adds xml doc comment to the list of all xml doc comments.
            </summary>
            <param name="xmlDoc"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.AddFriendAssemblyName(System.String)">
            <summary>
            Adds friend assembly name.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.RemoveFriendAssemblyName(System.String)">
            <summary>
            Removes friend assembly name.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.ClearFriendAssemblyNames">
            <summary>
            Clears friend assembly names.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.GetAlias(System.String)">
            <summary>
            Returns alias expression with the specified name.
            </summary>
            <param name="name">The name of the alias to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.GetData``1(System.String)">
            <summary>
            Returns data associated with this file node.
            </summary>
            <typeparam name="T">The data type to return.</typeparam>
            <param name="key">The key to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.SetData``1(System.String,``0)">
            <summary>
            Set data associated with this file node.
            </summary>
            <typeparam name="T">The data type to set.</typeparam>
            <param name="key">The key to use.</param>
            <param name="data">The data to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceFile.HasData(System.String)">
            <summary>
            Checks if this file contains data with the given key.
            </summary>
            <param name="key">The key to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.AllNamespaces">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to recursively iterate through all namespaces declared in this project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.AllTypes">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all types appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.HasUnparsedDocumentCode">
            <summary>
            Returns true if this source file has unparsed document code.
            Unparsed code was postoponed for demand parsing using
            document reader, and accessing the reader from another thread may result
            in exception.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.MacroRanges">
            <summary>
            Gets a collection of macro ranges expanded inside this file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.AspPageLanguage">
            <summary>
            Gets or sets default asp page language for this file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.AspPageBaseType">
            <summary>
            Gets or sets base type for the asp page.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.AssemblyList">
            <summary>
            Gets or sets a list of assemblies used inside the file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.Asp">
            <summary>
            Returns Asp code layer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.Code">
            <summary>
            Returns Code code layer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.CodeBehindFileName">
            <summary>
            Returns name of the ASP.NET code behind file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.IsAspFile">
            <summary>
            Returns true if this SourceFile instance contains asp code layer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.IsHeaderFile">
            <summary>
            Returns true if this source file is header file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.DeclaredNamespaces">
            <summary>
            Returns collection, which contains names of declared namespaces
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.IncludedScriptFiles">
            <summary>
            Returns list of script files, included to ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.IncludedStyleSheetFiles">
            <summary>
            Returns list of style sheet files, included to ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.MasterPageFile">
            <summary>
            Return Master Page file path for ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.ModelTypeName">
            <summary>
            Return Model Type Name for ASP page
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.BuildAction">
            <summary>
            Gets source file build action.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.HasCompileBuildAction">
            <summary>
            Returns true if build action is set to compile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.LoadBuildAction">
            <summary>
            Source file build action set on project load.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.IsLink">
            <summary>
            Source file "IsLink" property set on project load.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceFile.IsCustomToolOutput">
            <summary>
            Source file is auto-generated by some custom tool.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CSharp.CSharpSourceFile.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CSharp.TokenType">
            <summary>
            Summary description for TokenType.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.Base.TokenType.DescendantStartIndex">
            <summary>
            The starting index for descendants of TokenType. Descendant token types should be declared as public const integers starting at DescendantStartIndex + 1.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Base.TokenType.GetTokenType(System.Type,System.String)">
            <summary>
            Convert from a string name to an int value, using reflection...
            </summary>
            <param name="type">The type where to search.</param>
            <param name="name">The name of the token as a string.</param>
            <returns>The int value of the specified token name, or TokenType.UnknownToken if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Base.TokenType.GetTokenName(System.Type,System.Int32)">
            <summary>
            Searches a field with a value eaqul to the given token type.
            </summary>
            <param name="type">The type where to search.</param>
            <param name="token">The type of the token as an int.</param>
            <returns>The name of the specified token, "UnknownToken" if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Base.TokenType.GetTokenType(System.String)">
            <summary>
            Convert from a string name to an int value, using reflection...
            </summary>
            <param name="name">The name of the token as a string.</param>
            <returns>The int value of the specified token name, or TokenType.UnknownToken if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Base.TokenType.GetTokenName(System.Int32)">
            <summary>
            Convert from a type to a string name, using reflection...
            </summary>
            <param name="type">The type of the token as an int.</param>
            <returns>The name of the specified token, "UnknownToken" if not found.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager">
            <summary>
            Manages objects created on demand.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.RegisterObject(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy,System.Object)">
            <summary>
            Registers specified proxy and it's object.
            </summary>
            <param name="proxy">The proxy to register.</param>
            <param name="obj">The object to register.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.CreateObjectForProxy(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy)">
            <summary>
            Creates real object for the given proxy.
            </summary>
            <param name="proxy">The proxy to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.AddProxy(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy)">
            <summary>
            Adds proxy object to the manager.
            </summary>
            <param name="proxy">The proxy to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.RemoveProxy(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy)">
            <summary>
            Removes proxy and associated live object from the manager.
            </summary>
            <param name="proxy">The proxy to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.RequestObject(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy)">
            <summary>
            Returns real object for the given proxy.
            </summary>
            <param name="proxy">The proxy to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.RequestObject(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy,System.Boolean)">
            <summary>
            Returns real object for the given proxy.
            </summary>
            <param name="proxy">The proxy to use.</param>
            <param name="forceCreate">The value indicating that new object should be created.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.ReleaseObject(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy)">
            <summary>
            Releases real object for the given proxy.
            </summary>
            <param name="proxy">The proxy to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.ReleaseAllObjects">
            <summary>
            Releases all real objects.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.ReplaceObject(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy,System.Object)">
            <summary>
            Replaces real object for the given proxy.
            </summary>
            <param name="proxy">The proxy which object to replace.</param>
            <param name="obj">The object to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.GetAliveObject(DevExpress.CodeRush.StructuralParser.Patterns.IDemandObjectProxy)">
            <summary>
            Gets alive object for the given proxy.
            Returns null if object has been garbage collected
            </summary>
            <param name="proxy">The proxy to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.ObjectsToLive">
            <summary>
            Gets list of all objects that should be alive.
            The GC can't destroy these objects until they are remove from the list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.Proxies">
            <summary>
            Gets hashtable of all registered proxies with
            weak references to their real objects.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.ProxiesCount">
            <summary>
            Gets the number of all registered proxies.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.ProxiesHash">
            <summary>
            Gets hashtable of all registered proxy keys for fast access.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Patterns.DemandObjectManager.LiveObjectsCount">
            <summary>
            Gets the number of live objects.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ElementBuilder">
            <summary>
            Summary description for ElementBuilder.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.#ctor">
            <summary>
            Creates a new instance of ElementBuilder
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddParam(DevExpress.CodeRush.StructuralParser.MemberWithParameters,DevExpress.CodeRush.StructuralParser.Param)">
            <summary>
            Adds the specified param to the specified MemberWithParameters.
            </summary>
            <param name="parent">The parent MemberWithParameters.</param>
            <param name="param">The adding Param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddSource(DevExpress.CodeRush.StructuralParser.IHasQualifier,System.Object)">
            <summary>
            Adds the source to the specified IHasQualifier.
            </summary>
            <param name="parent">The parent IHasQualifier.</param>
            <param name="source">The adding Source object.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAttributeSection(DevExpress.CodeRush.StructuralParser.CodeElement,DevExpress.CodeRush.StructuralParser.AttributeSection)">
            <summary>
            Adds the Target for AttributeSection.
            </summary>
            <param name="target">The parent CodeElement. If null, the node is added as a top-level element to this ElementBuilder.</param>
            <param name="section">The AttributeSection for adding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAttribute(DevExpress.CodeRush.StructuralParser.AttributeSection,DevExpress.CodeRush.StructuralParser.Attribute)">
            <summary>
            Sets the Attribure to AttributeSection.
            </summary>
            <param name="parent">The parent AttributeSection.</param>
            <param name="attr">The Attribute for adding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddDetailNodes(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Adds the specified childred to the specified parent's DetailNodes list, and returns the child nodes.
            </summary>
            <param name="parent">The parent LanguageElement. If null, the node is added as a top-level element to this ElementBuilder.</param>
            <param name="children">The children LanguageElementCollectionBase.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddDetailNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Adds the specified child node to the specified parent's DetailNodes list, and returns the child node.
            </summary>
            <param name="parent">The parent LanguageElement.</param>
            <param name="child">The child LanguageElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddNodes(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase)">
            <summary>
            Adds the specified child nodes to the specified parent's Nodes list, and returns the child nodes.
            </summary>
            <param name="parent">The parent LanguageElement. If null, the node is added as a top-level element to this ElementBuilder.</param>
            <param name="children">The children LanguageElementCollectionBase.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Adds the specified child node to the specified parent's Nodes list, and returns the child node.
            </summary>
            <param name="parent">The parent LanguageElement. If null, the node is added as a top-level element to this ElementBuilder.</param>
            <param name="child">The child LanguageElement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.GetSnippetExpressions(System.String[])">
            <summary>
            Gets expression collection of snippet expression created for each string
            value in the given array.
            </summary>
            <param name="values">The string array of values.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.GetSnippetExpressions(DevExpress.CodeRush.StructuralParser.LanguageElementCollection)">
            <summary>
            Gets expression collection of snippet expression created for each element name
            in the given collection.
            </summary>
            <param name="elements">The elements to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.ClearTopLevelElements">
            <summary>
            Removes all top-level elements associated with this ElementBuilder. Top-level elements are used for code generation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.GenerateCode(System.String,System.Int32)">
            <summary>
            Gets a string equivalent to the code associated with all the 
            top-level elements (and their child nodes) in this ElementBuilder.
            You can add a top-level element to this ElementBuilder by calling 
            the appropriate AddXxxx method, and passing null for the parent.
            </summary>
            <param name="languageID">The id of the language to generate.</param>
            /// <param name="precedingWhiteSpaceCount">The white space count to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.GenerateCode(System.String)">
            <summary>
            Gets a string equivalent to the code associated with all the 
            top-level elements (and their child nodes) in this ElementBuilder.
            You can add a top-level element to this ElementBuilder by calling 
            the appropriate AddXxxx method, and passing null for the parent.
            </summary>
            <param name="languageID">The id of the language to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.GenerateCode">
            <summary>
            Gets a string equivalent to the code associated with all the 
            top-level elements (and their child nodes) in this ElementBuilder.
            You can add a top-level element to this ElementBuilder by calling 
            the appropriate AddXxxx method, and passing null for the parent.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpPlusPlus(System.Object)">
            <summary>
            Builds and returns an UnaryIncrement instance.
            </summary>
            <param name="identifier">The identifer to increment. This can be an 
            Expression descendant, a string that represents an identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpPlusPlus(System.Object,System.Boolean)">
            <summary>
            Builds and returns an UnaryIncrement instance.
            </summary>
            <param name="identifier">The identifer to increment. This can be an 
            Expression descendant, a string that represents an identifier.</param>
            <param name="isPostIncrement">True if the increment should happen after the reference. 
            False if the identifier should be incremented before the reference.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpMinusMinus(System.Object)">
            <summary>
            Builds and returns an UnaryDecrement instance.
            </summary>
            <param name="identifier">The identifer to decrement. This can be an 
            Expression descendant, a string that represents an identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpMinusMinus(System.Object,System.Boolean)">
            <summary>
            Builds and returns an UnaryDecrement instance.
            </summary>
            <param name="identifier">The identifer to decrement. This can be an 
            Expression descendant, a string that represents an identifier.</param>
            <param name="isPostDecrement">True if the decrement should happen after the reference. 
            False if the identifier should be decremented before the reference.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.Op(System.Object,System.String,System.Object)">
            <summary>
            Creates and returns a new binary operator expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="operatorText">The text of the operator.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.Op(System.Object,DevExpress.CodeRush.StructuralParser.BinaryOperatorType,System.Object)">
            <summary>
            Creates and returns a new binary operator expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="op">The binary operator type.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.Op(System.Object,DevExpress.CodeRush.StructuralParser.RelationalOperator,System.Object)">
            <summary>
            Creates and returns a new RelationalOperation.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="operatorType">The RelationalOperator that defines this comparison.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpMinus(System.Object,System.Object)">
            <summary>
            Creates and returns a new expression that subtracts the rightSide from the leftSide.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpPlus(System.Object,System.Object)">
            <summary>
            Creates and returns a new expression that is the sum of the rightSide and the leftSide.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpTimes(System.Object,System.Object)">
            <summary>
            Creates and returns a new expression that is the sum of the rightSide and the leftSide.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpDivide(System.Object,System.Object)">
            <summary>
            Creates and returns a new expression that is the sum of the rightSide and the leftSide.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpEquals(System.Object,System.Object)">
            <summary>
            Creates and returns a new equality comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpNotEquals(System.Object,System.Object)">
            <summary>
            Creates and returns a new inequality comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpGreaterOrEqual(System.Object,System.Object)">
            <summary>
            Creates and returns a new greater-than or equal comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpGreaterThan(System.Object,System.Object)">
            <summary>
            Creates and returns a new less-than comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpLessOrEqual(System.Object,System.Object)">
            <summary>
            Creates and returns a new greater-than or equal comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpLessThan(System.Object,System.Object)">
            <summary>
            Creates and returns a new less-than comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.OpLike(System.Object,System.Object)">
            <summary>
            Creates and returns a new like comparison expression.
            </summary>
            <param name="leftSide">The left side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
            <param name="rightSide">The right side of the expression. This can be an 
            Expression descendant, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddTypeCast(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a TypeCastExpression.
            </summary>
            <param name="parent">The LanguageElement that will parent this TypeCastExpression.</param>
            <param name="type">The type to cast to.</param>
            <param name="expression">The expression to cast.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddNamespaceReference(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a NamespaceReference.
            </summary>
            <param name="parent">The LanguageElement that will parent this reference.</param>
            <param name="namespaceName">The namespace referenced.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddNamespaceReference(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a NamespaceReference.
            </summary>
            <param name="parent">The LanguageElement that will parent this reference.</param>
            <param name="aliasName">The alias name.</param>
            <param name="expression">The expression aliased.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddClass(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Class.
            </summary>
            <param name="parent">The LanguageElement that will parent this Class.</param>
            <param name="className">Name of the Class.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddStruct(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Struct.
            </summary>
            <param name="parent">The LanguageElement that will parent this Struct.</param>
            <param name="structName">Name of the Struct.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInterface(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Interface.
            </summary>
            <param name="parent">The LanguageElement that will parent this Interface.</param>
            <param name="interfaceName">Name of the Interface.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInterfaceClass(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Interface Class.
            </summary>
            <param name="parent">The LanguageElement that will parent this Interface Class.</param>
            <param name="interfaceName">Name of the Interface.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInterfaceStruct(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Interface Struct.
            </summary>
            <param name="parent">The LanguageElement that will parent this Interface Struct.</param>
            <param name="interfaceName">Name of the Interface.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddDelegateDefinition(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Delegate.
            </summary>
            <param name="parent">The LanguageElement that will parent this Class.</param>
            <param name="delegateName">Name of the Delegate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddDelegateDefinition(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,DevExpress.CodeRush.StructuralParser.LanguageElementCollection)">
            <summary>
            Builds and adds (to the specified parent) a Delegate.
            </summary>
            <param name="parent">The LanguageElement that will parent this Class.</param>
            <param name="delegateName">Name of the Delegate.</param>
            <param name="parameters">Delegate parameters.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddBreak(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Break statement.
            </summary>
            <param name="parent">The LanguageElement that will parent this Break.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAbort(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Abort statement.
            </summary>
            <param name="parent">The LanguageElement that will parent this Abort.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddContinue(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Continue statement.
            </summary>
            <param name="parent">The LanguageElement that will parent this Continue.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddExit(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Exit statement.
            </summary>
            <param name="parent">The LanguageElement that will parent this Exit.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddReturn(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Return statement.
            </summary>
            <param name="parent">The LanguageElement that will parent this Return.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddReturn(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a Return statement.
            </summary>
            <param name="parent">The LanguageElement that will parent this Return.</param>
            <param name="expression">The object that will expression of this Return.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildAbort">
            <summary>
            Builds a Abort statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildBreak">
            <summary>
            Builds a Break statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildContinue">
            <summary>
            Builds a Continue statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildExit">
            <summary>
            Builds a Exit statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildReturn">
            <summary>
            Builds a Return statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildReturn(System.Object)">
            <summary>
            Builds a Return statement.
            <param name="expression">The object that will expression of this Return.</param>
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildNamespaceReference(System.String)">
            <summary>
            Builds a NamespaceReference.
            </summary>
            <param name="namespaceName">The namespace referenced.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildNamespaceReference(System.String,System.String)">
            <summary>
            Builds a NamespaceReference.
            </summary>
            <param name="aliasName">The alias name.</param>
            <param name="expression">The expression aliased.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildClass(System.String)">
            <summary>
            Builds a Class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildStruct(System.String)">
            <summary>
            Builds a Struct.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInterface(System.String)">
            <summary>
            Builds an Interface.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInterfaceClass(System.String)">
            <summary>
            Builds an Interface Class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInterfaceStruct(System.String)">
            <summary>
            Builds an Interface Struct.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildDelegateDefinition(System.String)">
            <summary>
            Builds a Delegate.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildDelegateDefinition(System.String,DevExpress.CodeRush.StructuralParser.LanguageElementCollection)">
            <summary>
            Builds a Delegate.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAssignment(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object,System.Object,DevExpress.CodeRush.StructuralParser.AssignmentOperatorType)">
            <summary>
            Builds and adds (to the specified parent) a statement that assigns the specified value to the identifier, using the specified AssignmentOperatorType.
            </summary>
            <param name="parent">The LanguageElement that will parent the Assignment.</param>
            <param name="identifier">The left side of the assignment statement. This can be either a string 
            that represents the identifier, or an ElementReferenceExpression.</param>
            <param name="assignedValue">The right side of the assignment statement. This can be either an 
            ElementReferenceExpression, a string that represents an identifier or a primitive value.</param>
            <param name="operatorType">The type of the operator (an element of AssignmentOperatorType).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAssignment(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a statement that assigns the specified value to the identifier.
            </summary>
            <param name="parent">The LanguageElement that will parent the Assignment.</param>
            <param name="identifier">The left side of the assignment statement. This can be either a string 
            that represents the identifier, or an ElementReferenceExpression.</param>
            <param name="assignedValue">The right side of the assignment statement. This can be either an 
            ElementReferenceExpression, a string that represents an identifier or a primitive value.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAccessSpecifiers(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement,DevExpress.CodeRush.StructuralParser.AccessSpecifiers)">
            <summary>
            Adds the specified param to the specified MemberWithParameters.
            </summary>
            <param name="parent">The parent AccessSpecifiedElement. </param>
            <param name="accessSpecifiers">The adding AccessSpecifiers. </param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAccessSpecifiers(DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds and adds (to the specified parent) a AccessSpecifiers.
            </summary>
            <param name="parent">The LanguageElement that will parent the AccessSpecifiers.</param>		
            <param name="isVirtual">The value determining that element is virtual.</param>
            <param name="isOverride">The value determining that element is overriden.</param>
            <param name="isOverloads">The value determining that element is overloaded.</param>
            <param name="isStatic">The value determining that element is static.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddCase(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a Case statement.
            </summary>
            <param name="parent">The LanguageElement that will parent the Case statement.</param>
            <param name="expression">The expression of the case statement (the value to compare with the expression of the parenting switch/Select statement).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddCatch(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Catch block that catches exceptions of the specified type.
            </summary>
            <param name="parent">The LanguageElement that will parent the Catch block.</param>
            <param name="exceptionType">The type of the exception to handle (e.g., "ArgumentException").</param>
            <param name="exceptionVariable">The variable name of the exception handled (e.g., "ex").</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddCatch(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Catch block.
            </summary>
            <param name="parent">The LanguageElement that will parent the Catch block.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddDo(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a Do block with the specified condition.
            </summary>
            <param name="parent">The LanguageElement that will parent the Do loop .</param>
            <param name="condition">The expression that determines when the Do loop terminates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddElse(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) an Else statement.
            </summary>
            <param name="parent">The LanguageElement that will parent the Else statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddElseIf(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) an ElseIf statement, with the specified expression.
            </summary>
            <param name="parent">The LanguageElement that will parent the ElseIf statement.</param>
            <param name="expression">The expression of the ElseIf statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddFinally(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Finally block.
            </summary>
            <param name="parent">The LanguageElement that will parent the Finally block.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddForEach(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a ForEach loop.
            </summary>
            <param name="parent">The LanguageElement that will parent the ForEach loop.</param>
            <param name="elementType">The type of the individual element.</param>
            <param name="elementVariable">The name of the variable representing each individual element.</param>
            <param name="collection">An expression representing the collection that the ForEach statement will iterate through.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddFor(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Builds and adds (to the specified parent) a simple For-loop with an ending condition. You should specify Initializers 
            and Incrementors for this For-loop as needed.
            </summary>
            <param name="parent">The LanguageElement that will parent the For loop.</param>
            <param name="endCondition">An Expression that determines when to stop iteration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddFor(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Builds and adds (to the specified parent) a simple For-loop with the specified ending condition and 
            specified iterator variable (assumed to be of type System.Int32, and initialized to zero). 
            </summary>
            <param name="parent">The LanguageElement that will parent the For loop.</param>
            <param name="iteratorVar">The variable to iterate (e.g., "i").</param>
            <param name="endCondition">An Expression that determines when to stop iteration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInitializedVariable(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String,System.Object)">
            <summary>
            Builds and adds (to the specified parent) an InitializedVariable.
            </summary>
            <param name="parent">The LanguageElement that will parent the InitializedVariable.</param>
            <param name="variableType">The type of the variable to declare.</param>
            <param name="variableName">The name of the variable to declare.</param>		
            <param name="initialValue">The initial value of the variable. This can be an Expression, a primitive, or a string representing another identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddImplicitVariable(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.Object)">
            <summary>
            Builds and adds (to the specified parent) an InitializedVariable.
            </summary>
            <param name="parent">The LanguageElement that will parent the InitializedVariable.</param>
            <param name="variableName">The name of the variable to declare.</param>
            <param name="initialValue">The initial value of the variable. This can be an Expression, a primitive, or a string representing another identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddIf(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) an If statement.
            </summary>
            <param name="parent">The LanguageElement that will parent the If statement.</param>
            <param name="expression">The expression of the If statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddLogicalOperation(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object,DevExpress.CodeRush.StructuralParser.LogicalOperator,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a LogicalOperation.
            </summary>
            <param name="parent">The LanguageElement that will parent the LogicalOperation.</param>
            <param name="leftSide">The left side expression of the LogicalOperation.</param>
            <param name="logicalOperator">The operator of the LogicalOperation.</param>
            <param name="rightSide">The right side expression of the LogicalOperation.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddMethodCall(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a MethodCall.
            </summary>
            <param name="parent">The LanguageElement that will parent the MethodCall.</param>		
            <param name="source">The object that determines source of MethodCall.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddMethodCall(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String[])">
            <summary>
            Builds method call with the given name and arguments.
            </summary>
            <param name="parent">The LanguageElement that will parent the MethodCall.</param>
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddMethodCall(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection,System.Object)">
            <summary>
            Builds method call with the given name and arguments.
            </summary>
            <param name="parent">The LanguageElement that will parent the MethodCall.</param>
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
            <param name="qualifier">The object that determines method call qualifier, e.g. for "A.B()" code, A is qualifier for B.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddLogicalOperation(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object,DevExpress.CodeRush.StructuralParser.RelationalOperator,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a RelationalOperation.
            </summary>
            <param name="parent">The LanguageElement that will parent the RelationalOperation.</param>
            <param name="leftSide">The left side expression of the RelationalOperation.</param>
            <param name="relationalOperator">The operator of the RelationalOperation.</param>
            <param name="rightSide">The right side expression of the RelationalOperation.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddSelect(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a Select/switch statement.
            </summary>
            <param name="parent">The LanguageElement that will parent the Select/switch statement.</param>
            <param name="expression">The expression of the Switch statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddSwitch(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a Switch statement. 
            This method can also be used to create Select statements in VB.
            </summary>
            <param name="parent">The LanguageElement that will parent the Switch/Select statement.</param>
            <param name="expression">The expression of the Switch/Select statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddTry(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Builds and adds (to the specified parent) a Try block.
            </summary>
            <param name="parent">The LanguageElement that will parent the Try block.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddThisMethodCall(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds this method call with the given name and arguments.
            </summary>
            <param name="parent">The LanguageElement that will parent the MethodCall.</param>
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddVariable(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Variable declaration.
            </summary>
            <param name="parent">The LanguageElement that will parent the Variable declaration.</param>
            <param name="variableType">The type of the variable to declare.</param>
            <param name="variableName">The name of the variable to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddWhile(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Object)">
            <summary>
            Builds and adds (to the specified parent) a While loop.
            </summary>
            <param name="parent">The LanguageElement that will parent the While loop.</param>
            <param name="condition">The expression that determines when the While loop terminates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddBaseMethodCall(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Adds call to base method.
            </summary>
            <param name="parent">The parent to add method call.</param>
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The arguments to pass to the method call.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddBaseMethodCall(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection,System.String,System.String)">
            <summary>
            Adds call to base method.
            </summary>
            <param name="parent">The parent to add method call.</param>
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The arguments to pass to the method call.</param>
            <param name="codeBefore">The code to add before method call.</param>
            <param name="codeAfter">The code to add after method call.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInnerParam(DevExpress.CodeRush.StructuralParser.Set,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Param with inner direction.
            </summary>
            <param name="parent">The Set that will parent the Param.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInnerParam(DevExpress.CodeRush.StructuralParser.MemberWithParameters,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Param with inner direction.
            </summary>
            <param name="parent">The MemberWithParameters that will parent the Param.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInParam(DevExpress.CodeRush.StructuralParser.Set,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Param with inner direction.
            </summary>
            <param name="parent">The Set that will parent the Param.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddInParam(DevExpress.CodeRush.StructuralParser.MemberWithParameters,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Param with inner direction.
            </summary>
            <param name="parent">The MemberWithParameters that will parent the Param.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddRefParam(DevExpress.CodeRush.StructuralParser.MemberWithParameters,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Param with ref direction.
            </summary>
            <param name="parent">The MemberWithParameters that will parent the Param.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddOutParam(DevExpress.CodeRush.StructuralParser.MemberWithParameters,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Param with out direction.
            </summary>
            <param name="parent">The MemberWithParameters that will parent the Param.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddParamArray(DevExpress.CodeRush.StructuralParser.MemberWithParameters,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a ParamArray.
            </summary>
            <param name="parent">The MemberWithParameters that will parent the ParamArray.</param>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddProperty(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Property.
            </summary>
            <param name="parent">The LanguageElement that will parent the Property.</param>
            <param name="memberType">The string that determines type of property.</param>
            <param name="name">The string that determines name of property.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddProperty(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String,DevExpress.CodeRush.StructuralParser.Get,DevExpress.CodeRush.StructuralParser.Set)">
            <summary>
            Builds and adds (to the specified parent) a Property.
            </summary>
            <param name="parent">The LanguageElement that will parent the Property.</param>
            <param name="memberType">The string that determines type of property.</param>
            <param name="name">The string that determines name of property.</param>
            <param name="getter">The Get that determines getter of property.</param>
            <param name="setter">The Set that determines setter of property.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddMethod(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String,System.String)">
            <summary>
            Builds and adds (to the specified parent) a Method.
            </summary>
            <param name="parent">The LanguageElement that will parent the Method.</param>
            <param name="memberType">The string that determines return type of method.</param>
            <param name="name">The string that determines name of method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddConstructor(DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Builds and adds (to the specified parent) a Constructor.
            </summary>
            <param name="parent">The TypeDeclaration that will parent the constructor.</param>				
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddDestructor(DevExpress.CodeRush.StructuralParser.TypeDeclaration)">
            <summary>
            Builds and adds (to the specified parent) a Destructor.
            </summary>
            <param name="parent">The TypeDeclaration that will parent the destructor.</param>				
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddThisConstructorInitializer(DevExpress.CodeRush.StructuralParser.Method,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds and adds (to the specified parent) a this ConstructorInitializer.
            </summary>
            <param name="parent">The Method that will parent of the constructor initializer.</param>				
            <param name="arguments">The constructor initializer arguments.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddBaseConstructorInitializer(DevExpress.CodeRush.StructuralParser.Method)">
            <summary>
            Builds and adds (to the specified parent) a base ConstructorInitializer.
            </summary>
            <param name="parent">The Method that will parent of the constructor initializer.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddBaseConstructorInitializer(DevExpress.CodeRush.StructuralParser.Method,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds and adds (to the specified parent) a base ConstructorInitializer.
            </summary>
            <param name="parent">The Method that will parent of the constructor initializer.</param>
            <param name="arguments">The constructor initializer arguments.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddExpressionConstructorInitializer(DevExpress.CodeRush.StructuralParser.Method,DevExpress.CodeRush.StructuralParser.Expression,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds and adds (to the specified parent) a expression ConstructorInitializer.
            </summary>
            <param name="parent">The Method that will parent of the constructor initializer.</param>				
            <param name="expr">The expression of constructor initializer</param>
            <param name="arguments">The constructor initializer arguments.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddGetter(DevExpress.CodeRush.StructuralParser.Property)">
            <summary>
            Builds and adds (to the specified parent) a Get.
            </summary>
            <param name="parent">The Property that will parent the Get.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddSetter(DevExpress.CodeRush.StructuralParser.Property)">
            <summary>
            Builds and adds (to the specified parent) a Set.
            </summary>
            <param name="parent">The Property that will parent the Set.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAttributeSection(DevExpress.CodeRush.StructuralParser.CodeElement)">
            <summary>
            Builds and adds (to the specified parent) an AttributeSection.
            </summary>
            <param name="target">The CodeElement that will target of the AttributeSection.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAttribute(DevExpress.CodeRush.StructuralParser.AttributeSection,System.String)">
            <summary>
            Builds and adds (to the specified parent) an Attribute.
            </summary>
            <param name="parent">The AttributeSection that will parent of the Attribute.</param>
            <param name="name">The string that will represent the name of Attribute.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddAttribute(DevExpress.CodeRush.StructuralParser.AttributeSection,System.Object,System.String)">
            <summary>
            Builds and adds (to the specified parent) an Attribute.
            </summary>
            <param name="parent">The AttributeSection that will parent of the Attribute.</param>
            <param name="qualifier">The object that will represent the qualifier of Attribute.</param>
            <param name="name">The string that will represent the name of Attribute.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddArgument(DevExpress.CodeRush.StructuralParser.Attribute,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Adds the Argument to Attribute.
            </summary>
            <param name="parent">The parent Attribute.</param>
            <param name="arg">The Expression for adding.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.AddSnippetCodeElement(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Builds and adds (to the specified parent) a SnippetCodeElement.
            </summary>
            <param name="parent">The LanguageElement that will parent the SnippetCodeElement.</param>
            <param name="code"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildBaseReferenceExpression">
            <summary>
            Builds base reference expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildThisReferenceExpression">
            <summary>
            Builds this reference expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMyClassExpression">
            <summary>
            Builds MyClass expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCallExpression(System.Object)">
            <summary>
            Builds a MethodCallExpression.
            </summary>				
            <param name="source">The object that determines name (or source) of MethodCallExpression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCallExpression(System.Object,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds a MethodCallExpression.
            </summary>				
            <param name="source">The object that determines name (or source) of MethodCallExpression.</param>
            <param name="arguments">Arguments collection of MethodCallExpression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildTypeCast(System.Object,System.Object)">
            <summary>
            Builds and returns new TypeCastExpression.
            </summary>
            <param name="type">The type to cast to.</param>
            <param name="expression">The expression to cast.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildAccessSpecifiers(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds an AccessSpecifiers.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildAssignment(System.Object,System.Object,DevExpress.CodeRush.StructuralParser.AssignmentOperatorType)">
            <summary>
            Builds a statement that assigns the specified value to the identifier, using the specified AssignmentOperatorType.
            </summary>
            <param name="identifier">The left side of the assignment statement. This can be either a string 
            that represents the identifier, or an ElementReferenceExpression.</param>
            <param name="assignedValue">The right side of the assignment statement. This can be either an 
            ElementReferenceExpression, a string that represents an identifier or a primitive value.</param>
            <param name="operatorType">The type of the operator (an element of AssignmentOperatorType).</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildAssignment(System.Object,System.Object)">
            <summary>
            Builds a statement that assigns the specified value to the identifier.
            </summary>
            <param name="identifier">The left side of the assignment statement. This can be either a string 
            that represents the identifier, or an ElementReferenceExpression.</param>
            <param name="assignedValue">The right side of the assignment statement. This can be either an 
            ElementReferenceExpression, a string that represents an identifier or a primitive value.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildCase(System.Object)">
            <summary>
            Builds a Case statement.
            </summary>
            <param name="expression">The expression of the case statement (the value to compare with the expression of the parenting switch/Select statement).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildCatch(System.String,System.String)">
            <summary>
            Builds a Catch block that catches exceptions of the specified type.
            </summary>
            <param name="exceptionType">The type of the exception to handle (e.g., "ArgumentException").</param>
            <param name="exceptionVariable">The variable name of the exception handled (e.g., "ex").</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildCatch">
            <summary>
            Builds a Catch block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildDo(System.Object)">
            <summary>
            Builds a Do block with the specified condition.
            </summary>
            <param name="condition">The expression that determines when the Do loop terminates.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildElse">
            <summary>
            Builds an Else statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildElseIf(System.Object)">
            <summary>
            Builds an ElseIf statement with the specified expression.
            </summary>
            <param name="expression">The expression of the ElseIf statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildFinally">
            <summary>
            Builds a Finally block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildForEach(System.String,System.String,System.Object)">
            <summary>
            Builds a ForEach loop.
            </summary>
            <param name="elementType">The type of the individual element.</param>
            <param name="elementVariable">The name of the variable representing each individual element.</param>
            <param name="collection">An expression representing the collection that the ForEach statement will iterate through.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildFor(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Builds a simple For-loop with an ending condition. You should specify Initializers 
            and Incrementors for this For-loop as needed.
            </summary>
            <param name="endCondition">An Expression that determines when to stop iteration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildFor(System.String,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Builds a simple For-loop with the specified iterator variable (assumed to be of type System.Int32, 
            and initialized to zero) and specified ending condition. 
            </summary>
            <param name="iteratorVar">The variable to iterate (e.g., "i").</param>
            <param name="endCondition">An Expression that determines when to stop iteration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildIf(System.Object)">
            <summary>
            Builds an If statement.
            </summary>
            <param name="expression">The expression of the If statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildLogicalOperation(System.Object,DevExpress.CodeRush.StructuralParser.LogicalOperator,System.Object)">
            <summary>
            Builds a LogicalOperation.
            </summary>
            <param name="leftSide">The left side expression of the LogicalOperation.</param>
            <param name="logicalOperator">The operator of the LogicalOperation.</param>
            <param name="rightSide">The right side expression of the LogicalOperation.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethod(System.String,System.String)">
            <summary>
            Builds a Method.
            </summary>		
            <param name="memberType">The string that determines type of method.</param>
            <param name="name">The string that determines name of method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildConstructor(System.String)">
            <summary>
            Builds a Constructor.
            </summary>				
            <param name="className">The string that determines name of class (or module).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildDestructor(System.String)">
            <summary>
            Builds a Destructor.
            </summary>				
            <param name="className">The string that determines name of class (or module).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildThisConstructorInitializer(DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds a ThisConstructorInitializer.
            </summary>
            <param name="arguments">The constructor initializer arguments.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildBaseConstructorInitializer">
            <summary>
            Builds a BaseConstructorInitializer.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildBaseConstructorInitializer(DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds a BaseConstructorInitializer.
            </summary>
            <param name="arguments">The constructor initializer arguments.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildExpressionConstructorInitializer(DevExpress.CodeRush.StructuralParser.Expression,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds a ConstructorInitializer.
            </summary>
            <param name="expr">The expression of constructor initializer</param>
            <param name="arguments">The constructor initializer arguments.</param>				
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildConstructorInitializer(System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds a ConstructorInitializer.
            </summary>
            <param name="name">Constructor initializer name.(It's necessary for C++ only, for another languages is possible to use Null)</param>
            <param name="arguments">The constructor initializer parameters.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCall(System.Object)">
            <summary>
            Builds a MethodCall.
            </summary>				
            <param name="source">The object that determines name (or source) of methodcall.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCall(System.String,System.String[])">
            <summary>
            Builds method call with the given name and arguments.
            </summary>				
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCall(System.String,System.String[],System.Object)">
            <summary>
            Builds method call with the given name and arguments.
            </summary>				
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
            /// <param name="qualifier">The object that determines method call qualifier, e.g. for "A.B()" code, A is qualifier for B.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCall(System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds method call with the given name and arguments.
            </summary>				
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildMethodCall(System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection,System.Object)">
            <summary>
            Builds method call with the given name and arguments.
            </summary>				
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
            <param name="qualifier">The object that determines method call qualifier, e.g. for "A.B()" code, A is qualifier for B.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildBaseMethodCall(System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds base method call with the given name and arguments.
            </summary>				
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildThisMethodCall(System.String,DevExpress.CodeRush.StructuralParser.ExpressionCollection)">
            <summary>
            Builds this method call with the given name and arguments.
            </summary>				
            <param name="name">The name of the method to call.</param>
            <param name="arguments">The method call arguments.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInnerParam(System.String,System.String)">
            <summary>
            Builds a Param with inner direction.
            </summary>
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInParam(System.String,System.String)">
            <summary>
            Builds a Param with inner direction.
            </summary>		
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildRefParam(System.String,System.String)">
            <summary>
            Builds a Param with ref direction.
            </summary>		
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildRelationalOperation(System.Object,DevExpress.CodeRush.StructuralParser.RelationalOperator,System.Object)">
            <summary>
            Builds a RelationalOperation.
            </summary>
            <param name="leftSide">The left side expression of the RelationalOperation.</param>
            <param name="relationalOperator">The operator of the RelationalOperation.</param>
            <param name="rightSide">The right side expression of the RelationalOperation.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildOutParam(System.String,System.String)">
            <summary>
            Builds a Param with out direction.
            </summary>		
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildParamArray(System.String,System.String)">
            <summary>
            Builds a ParamArray.
            </summary>		
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildParameter(System.String,System.String,DevExpress.CodeRush.StructuralParser.ArgumentDirection)">
            <summary>
            Builds a ParamArray.
            </summary>		
            <param name="paramType">The string that determines type of param.</param>
            <param name="name">The string that determines name of param.</param>
            <param name="direction">The direction of parameter.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildProperty(System.String,System.String)">
            <summary>
            Builds a Method.
            </summary>		
            <param name="memberType">The string that determines type of property.</param>
            <param name="name">The string that determines name of method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildProperty(System.String,System.String,DevExpress.CodeRush.StructuralParser.Get,DevExpress.CodeRush.StructuralParser.Set)">
            <summary>
            Builds a Method.
            </summary>		
            <param name="memberType">The string that determines type of property.</param>
            <param name="name">The string that determines name of method.</param>
            /// <param name="getter">The Get that determines getter of property.</param>
            <param name="setter">The Set that determines setter of property.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildGetter">
            <summary>
            Builds a Getter.
            </summary>				
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildSetter">
            <summary>
            Builds a Setter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildSelect(System.Object)">
            <summary>
            Builds a Select/switch statement. This method calls and returns the result from the virtual BuildSwitch method.
            </summary>
            <param name="expression">The expression of the Switch statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildSnippetCodeElement(System.String)">
            <summary>
            Builds a SnippetCodeElement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildSwitch(System.Object)">
            <summary>
            Builds a Switch statement (can also build Select statements in VB).
            </summary>
            <param name="expression">The expression of the Switch/Select statement.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildTry">
            <summary>
            Builds a Try block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildVariable(System.String,System.String)">
            <summary>
            Builds a Variable declaration.
            </summary>
            <param name="variableType">The type of the variable to declare.</param>
            <param name="variableName">The name of the variable to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildVariable(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String)">
            <summary>
            Builds a Variable declaration.
            </summary>
            <param name="variableType">The type of the variable to declare.</param>
            <param name="variableName">The name of the variable to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInitializedVariable(System.String,System.String,System.Object)">
            <summary>
            Builds an InitializedVariable.
            </summary>
            <param name="variableType">The type of the variable to declare.</param>
            <param name="variableName">The name of the variable to declare.</param>
            <param name="initialValue">The initial value of the variable. This can be an Expression, a primitive, or a string representing another identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildInitializedVariable(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression,System.String,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Builds an InitializedVariable declaration.
            </summary>
            <param name="variableType">The type of the variable to declare.</param>
            <param name="variableName">The name of the variable to declare.</param>
            <param name="value">The value of the variable to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildImplicitVariable(System.String,System.Object)">
            <summary>
            Builds an ImplicitVariable.
            </summary>
            <param name="variableName">The name of the variable to declare.</param>
            <param name="initialValue">The initial value of the variable. This can be an Expression, a primitive, or a string representing another identifier.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildImplicitVariable(System.String,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Builds an ImplicitVariable declaration.
            </summary>
            <param name="variableName">The name of the variable to declare.</param>
            <param name="value">The value of the variable to declare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementBuilder.BuildWhile(System.Object)">
            <summary>
            Builds a While loop.
            </summary>
            <param name="condition">The expression that determines when the While loop terminates.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementBuilder.TopLevelElements">
            <summary>
            The top-level elements inside this ElementBuilder.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementFilter.Apply(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if element is allowed by the filter,
            otherwise returns false.
            </summary>
            <param name="element">The element to filter.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementFilter.SkipChildren(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if children of the given
            element should be skipped by the filter.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementCollectionFilter.Apply(DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Filters the given collection of elements.
            </summary>
            <param name="elements">The elements to filter.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexAndFilter.#ctor(DevExpress.CodeRush.StructuralParser.IElementFilter[])">
            <summary>
            Creates a new instance of ComplexAndFilter using given
            inner filters.
            </summary>
            <param name="filters">The inner filters.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexAndFilter.Apply(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if all inner filters allow element.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexAndFilter.SkipChildren(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if all inner filters skip element children.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexOrFilter.#ctor(DevExpress.CodeRush.StructuralParser.IElementFilter[])">
            <summary>
            Creates a new instance of ComplexOrFilter using given
            inner filters.
            </summary>
            <param name="filters">The inner filters.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexOrFilter.Apply(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if at least one inner filter allows element.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexOrFilter.SkipChildren(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if at least one inner filter skips element children.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is type declaration.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsNamespace(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is namespace.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsTypeOrNamespace(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is type or namespace.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsNonPrivateMember(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is non private member.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsMember(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is member.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsMethod(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is method.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsProperty(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is property.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsEvent(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is event.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultElementFilters.IsConstructor(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is constructor.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ElementFilters">
            <summary>
            Contains common element filters.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsVoidTypeRef(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Checks if given type reference is void type ref.
            </summary>
            <param name="type">The type reference to check.</param>
            <returns>Returns true if given type reference is void type ref.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsVoidType(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Checks if the given type is void.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Returns true if given type reference is void type ref.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is type declaration.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsNamespace(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is namespace.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsTypeOrNamespace(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is type or namespace.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsNonPrivateMember(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is non private member.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsMember(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is member.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsExternMember(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is extern member.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsMethod(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is method.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsProperty(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is property.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsEvent(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is event.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsConstructor(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is constructor.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsField(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is field.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsLocal(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is local variable.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFilters.IsPublicParameterLessMethod(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is public parameterless method.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FirstLevelReferenceFilter">
            <summary>
            Filters first level references.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.UsingDeclarationFilter">
            <summary>
            Checks for IUsingDeclarationStatement
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UsingDeclarationFilter.Apply(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is IUsingDeclarationStatement.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper">
            <summary>
            Helper class for generating code using System.CodeDom
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeCompileUnit)">
            <summary>
            Generates code string for the given CodeCompileUnit object.
            </summary>
            <param name="unit">The CodeCompileUnit object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeCompileUnit,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeCompileUnit object.
            </summary>
            <param name="unit">The CodeCompileUnit object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeNamespace)">
            <summary>
            Generates code string for the given CodeNamespace object.
            </summary>
            <param name="space">The CodeNamespace object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeNamespace,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeNamespace object.
            </summary>
            <param name="space">The CodeNamespace object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code string for the given CodeTypeDeclaration object.
            </summary>
            <param name="type">The CodeTypeDeclaration object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeTypeDeclaration object.
            </summary>
            <param name="type">The CodeTypeDeclaration object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberEvent)">
            <summary>
            Generates code string for the given CodeMemberEvent object.
            </summary>
            <param name="e">The CodeMemberEvent object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberEvent,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberEvent object.
            </summary>
            <param name="e">The CodeMemberEvent object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberField)">
            <summary>
            Generates code string for the given CodeMemberField object.
            </summary>
            <param name="field">The CodeMemberField object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberField,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberField object.
            </summary>
            <param name="field">The CodeMemberField object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberField,System.Boolean)">
            <summary>
            Generates code string for the given CodeMemberField object.
            </summary>
            <param name="field">The CodeMemberField object to generate code.</param>
            <param name="isEnum">Pass true if you want to generate enum field.</param> 
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberField,System.Boolean,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberField object.
            </summary>
            <param name="field">The CodeMemberField object to generate code.</param>
            <param name="isEnum">Pass true if you want to generate enum field.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberMethod)">
            <summary>
            Generates code string for the given CodeMemberMethod object.
            </summary>
            <param name="method">The CodeMemberMethod object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberMethod,DevExpress.CodeRush.StructuralParser.CodeGenerationContext)">
            <summary>
            Generates code string for the given CodeMemberMethod object.
            </summary>
            <param name="method">The CodeMemberMethod object to generate code.</param>
            <param name="context">The context to generate code in.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberMethod,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberMethod object.
            </summary>
            <param name="method">The CodeMemberMethod object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberMethod,DevExpress.CodeRush.StructuralParser.CodeGenerationContext,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberMethod object.
            </summary>
            <param name="method">The CodeMemberMethod object to generate code.</param>
            <param name="context">The context to generate code in.</param>
            <param name="output">The TextWriter used to output generated code.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeConstructor)">
            <summary>
            Generates code string for the given CodeConstructor object.
            </summary>
            <param name="constructor">The CodeConstructor object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeConstructor,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeConstructor object.
            </summary>
            <param name="constructor">The CodeConstructor object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeTypeConstructor)">
            <summary>
            Generates code string for the given CodeTypeConstructor object.
            </summary>
            <param name="constructor">The CodeTypeConstructor object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeTypeConstructor,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeTypeConstructor object.
            </summary>
            <param name="constructor">The CodeTypeConstructor object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeEntryPointMethod)">
            <summary>
            Generates code string for the given CodeEntryPointMethod object.
            </summary>
            <param name="method">The CodeEntryPointMethod object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeEntryPointMethod,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeEntryPointMethod object.
            </summary>
            <param name="method">The CodeEntryPointMethod object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberProperty)">
            <summary>
            Generates code string for the given CodeMemberProperty object.
            </summary>
            <param name="property">The CodeMemberProperty object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberProperty,DevExpress.CodeRush.StructuralParser.CodeGenerationContext)">
            <summary>
            Generates code string for the given CodeMemberProperty object.
            </summary>
            <param name="property">The CodeMemberProperty object to generate code.</param>
            <param name="context">The context to generate code in.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberProperty,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberProperty object.
            </summary>
            <param name="property">The CodeMemberProperty object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeMemberProperty,DevExpress.CodeRush.StructuralParser.CodeGenerationContext,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeMemberProperty object.
            </summary>
            <param name="property">The CodeMemberProperty object to generate code.</param>
            <param name="context">The context to generate code in.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeStatement)">
            <summary>
            Generates code string for the given CodeStatement object.
            </summary>
            <param name="statement">The CodeStatement object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeStatement,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeStatement object.
            </summary>
            <param name="statement">The CodeStatement object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeExpression)">
            <summary>
            Generates code string for the given CodeExpression object.
            </summary>
            <param name="expression">The CodeExpression object to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeExpression,System.IO.TextWriter)">
            <summary>
            Generates code for the given CodeExpression object.
            </summary>
            <param name="expression">The CodeExpression object to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeAttributeDeclarationCollection)">
            <summary>
            Generates code for the given attributes collection.
            </summary>
            <param name="attributes">The CodeAttributeDeclarationCollection to generate code.</param>
            <returns>Generated code as a string.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.GenerateCode(System.CodeDom.CodeAttributeDeclarationCollection,System.IO.TextWriter)">
            <summary>
            Generates code for the given attributes collection.
            </summary>
            <param name="attributes">The CodeAttributeDeclarationCollection to generate code.</param>
            <param name="output">The TextWriter used to output generated code.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.CodeProvider">
            <summary>
            Gets or sets CodeDomProvider used to generate code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeDomGeneratorHelper.Options">
            <summary>
            Gets or sets code generator options.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementCollector.Collect(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementFilter)">
            <summary>
            Iterates all elements inside the given scope and applies the given filter.
            Returns all element that match the filter.
            </summary>
            <param name="scope">The scope to iterate.</param>
            <param name="filter">The filter to use.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ElementLocation">
            <summary>
            Incapsulate functionality which allows save location of LanguageElement into the string and restore LanguageElement using this information.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementLocation.GetFileLocation(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets location in the SourceFile for the specified LanguageElement.
            </summary>
            <param name="element">The LanguageElement to get file location for</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementLocation.FindElement(DevExpress.CodeRush.StructuralParser.IProjectElement,System.String)">
            <summary>
            Finds LanguageElement using file location string.
            </summary>
            <param name="proj">The ProjectElement where current element is located</param>
            <param name="fileLocation">The file location of the element</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementLocation.FindElementInFile(DevExpress.CodeRush.StructuralParser.SourceFile,System.String)">
            <summary>
            Finds LanguageElement in specified file using its file location represented in xml-form.
            </summary>
            <param name="file">The SourceFile to search LanfuageElement</param>
            <param name="location">The file location of element</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementRangeHelper.GetFullBlockNodes(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Gets the starting and ending language elements for the element's full block.
            "Full block" is defined as this element and any partnering
            elements that complete this block (or that this block
            completes), including attributes and XML Doc Comments and regions.
            </summary>
            <param name="element">The target element.</param>
            <param name="startNode">The starting language element.</param>
            <param name="endNode">The ending language element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementRangeHelper.GetFullBlockNodes(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.BlockElements,DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Gets the starting and ending language elements for the element's full block.
            "Full block" is defined as this element and any partnering
            elements that complete this block (or that this block
            completes), including elements specified inside blockElements flags.
            </summary>
            <param name="element">The target element.</param>
            <param name="blockElements">The block elements to take into account.</param>
            <param name="startNode">The starting language element.</param>
            <param name="endNode">The ending language element.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementRangeHelper.GetFullBlockNodes(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.BlockElements,System.Boolean,DevExpress.CodeRush.StructuralParser.LanguageElement@,DevExpress.CodeRush.StructuralParser.LanguageElement@)">
            <summary>
            Gets the starting and ending language elements for the element's full block.
            "Full block" is defined as this element and any partnering
            elements that complete this block (or that this block
            completes), including elements specified inside blockElements flags.
            </summary>
            <param name="element">The target element.</param>
            <param name="blockElements">The block elements to take into account.</param>
            <param name="startNode">The starting language element.</param>
            <param name="endNode">The ending language element.</param>		
            <param name="includeComplitingElements">The value determining if compliting elements should be included.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementRangeHelper.GetFullBlockRange(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Gets the full block range for the language element. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including attributes and XML Doc Comments and regions.
            </summary>
            <param name="element">The target element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementRangeHelper.GetFullBlockRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.BlockElements)">
            <summary>
            Gets the full block range for the language element. 
            "Full block" is defined as this element and any partnering 
            elements that complete this block (or that this block 
            completes), including elements specified inside blockElements flags.
            </summary>
            <param name="element">The target element.</param>
            <param name="blockElements">The block elements to take into account.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FrameworkVersion">
            <summary>
            FrameworkVersion
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Unknown">
            <summary>
            Unknown version.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version10">
            <summary>
            Framework v1.0.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version11">
            <summary>
            Framework v1.1.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version20">
            <summary>
            Framework v2.0.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version30">
            <summary>
            Framework v3.0.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version35">
            <summary>
            Framework v3.5.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version40">
            <summary>
            Framework v4.0.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.FrameworkVersion.Version45">
            <summary>
            Framework v4.5.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FrameworkHelper">
            <summary>
            FrameworkHelper
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetFrameworkIntstallRootPath">
            <summary>
            Returns framework root path.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetFrameworkPaths(DevExpress.CodeRush.StructuralParser.FrameworkVersion)">
            <summary>
            Returns paths to the framework with the given version.
            </summary>
            <param name="version">The framework version.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetFrameworkPath(DevExpress.CodeRush.StructuralParser.FrameworkVersion)">
            <summary>
            Returns path to the framework with the given version.
            </summary>
            <param name="version">The framework version.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetActiveFrameworkPath">
            <summary>
            Returns path to the active framework.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetMSCorLibPath(DevExpress.CodeRush.StructuralParser.FrameworkVersion)">
            <summary>
            Returns mscorlib.dll path for the given framework version.
            </summary>
            <param name="version">The framework version.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetVBRuntimeLibPath">
            <summary>
            Returns Microsoft.VisualBasic.dll path for the active framework.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetVBRuntimeLibPath(DevExpress.CodeRush.StructuralParser.FrameworkVersion)">
            <summary>
            Returns Microsoft.VisualBasic.dll path for the specific framework.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetActiveMSCorLibPath">
            <summary>
            Returns mscorlib.dll path for the active framework.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetAssemblyFoldersPaths">
            <summary>
            Returns assembly folders paths.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetVSInstallFoldersPaths">
            <summary>
            Returns installed VS folders paths.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.IsInstalled(DevExpress.CodeRush.StructuralParser.FrameworkVersion)">
            <summary>
            Returns true if the given framework is installed.
            </summary>
            <param name="version">The framework version.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetAssemblyPath(System.Reflection.AssemblyName)">
            <summary>
            Returns path to the assembly by it's assembly name.
            </summary>
            <param name="name">The assembly name to get path to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetAssemblyPath(System.String)">
            <summary>
            Returns path to the assembly by it's assembly name.
            </summary>
            <param name="assemblyFileName">The assembly file name to get path to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetAssemblyPath(System.String,System.String[])">
            <summary>
            Returns path to the assembly by it's assembly name.
            </summary>
            <param name="assemblyFileName">The assembly file name to get path to.</param>
            <param name="paths">The assembly search paths.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FrameworkHelper.GetSilverlightAssemblyPath(System.String)">
            <summary>
            Returns path to the assembly by it's assembly name.
            </summary>
            <param name="assemblyFileName">The assembly file name to get path to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetFullTypeName(DevExpress.CodeRush.StructuralParser.PrimitiveType)">
            <summary>
            Gets full type name from the PrimitiveType value.
            </summary>
            <param name="type">The primitive type to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsPrimitiveType(System.String)">
            <summary>
            Returns true if the given string contains primitive type.
            </summary>
            <param name="fullName">The string to checks.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.ToPrimitiveType(System.String)">
            <summary>
            Converts full name to primitive type.
            </summary>
            <param name="fullName">The fullname to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsSByte(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with SByte type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsByte(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with Byte type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsShort(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with Int16 type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsUShort(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with UInt16 type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsInt(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with Int32 type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsUInt(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with UInt32 type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsLong(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with Int64 type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.IsULong(System.Decimal)">
            <summary>
            Reurns true if the given value can be represented with UInt64 type.
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetPrimitiveTypes(System.Object)">
            <summary>
            Returns the types that can be used to represent specified value.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetPrimitiveType(System.Object)">
            <summary>
            Returns the type that can be used to represent specified value.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetPrimitiveTypes(System.Decimal)">
            <summary>
            Returns the types that can be used to represent specified value.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetPrimitiveType(System.Decimal)">
            <summary>
            Returns the type that can be used to represent specified value.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetDefaultValue(System.String)">
            <summary>
            Returns default value for the given primitive type.
            </summary>
            <param name="fullTypeName">The full name of the type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveTypeUtils.GetDefaultValue(DevExpress.CodeRush.StructuralParser.PrimitiveType)">
            <summary>
            Returns default value for the given primitive type.
            </summary>
            <param name="type">The primitive type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedExpressionHelper.GetLevel(DevExpress.CodeRush.StructuralParser.IHasQualifier)">
            <summary>
            Gets level of the expression. Level is used to resolve quailfied expressions.
            E.g. expression (A + B).ToString() is MethodCallExpression that has third level
            ( (A + B) - first level, ToString - second level).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedExpressionHelper.GetByLevel(DevExpress.CodeRush.StructuralParser.LanguageElement,System.Int32)">
            <summary>
            This method is used to get the specified level expression from qualified expression.
            </summary>
            <param name="level">Level of the expression to get.</param>
            <param name="element">The element to use.</param>
            <returns>Expression with the specified level or null if level is invalid.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedExpressionHelper.GetStartElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns starting expression of this qualified expression.
            If this expression is not qualified, then this method returns this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedExpressionHelper.GetEndElement(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns ending element of this qualified expression.
            If this expression is not qualified, then this method returns this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedExpressionHelper.GetEndExpression(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns ending expression of this qualified expression.
            If this expression is not qualified, then this method returns this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedExpressionHelper.HasCleanReferences(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given expression is a qualified expression that contain 
            simple references on each level.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.QuailifiedExpressionHelper">
            <summary>
            This class is just around to support backwards compatibility for older 3rd-party plug-ins. 
            Use the properly-named QualifiedExpressionHelper instead.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetCloneFromNodeList(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.NodeList,System.Object)">
            <summary>
            Gets node from the given node list using it's index in the source list.
            </summary>
            <param name="target">The target node list.</param>
            <param name="source">The source node list.</param>
            <param name="obj">The object to obtain clone from target node list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetCloneFromNodes(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.BaseElement,System.Object)">
            <summary>
            Gets node from the given target node using it's index in the source node.
            </summary>
            <param name="target">The target node.</param>
            <param name="source">The source node.</param>
            <param name="obj">The object to obtain clone from target node.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.RangeIsCorrupted(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Defines if range has corrupted coordinates.
            </summary>
            <param name="range">The range to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetIndexAt(System.Collections.IList,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Gets index of element located near the specified point.
            </summary>
            <param name="list">The list of elements</param>
            <param name="point">The point to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets nodes located inside of the specified range.
            </summary>
            <param name="scope">The scope to check</param>
            <param name="range">The range to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Gets nodes located inside of the specified range.
            </summary>
            <param name="scope">The scope to check</param>
            <param name="range">The range to check</param>
            <param name="useBinarySerach">Defines if binary search should be used</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetNodesInRange(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets nodes located inside of the specified range.
            </summary>
            <param name="nodes">The list of nodes to check</param>
            <param name="range">The range to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetNodesInRange(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Gets nodes located inside of the specified range.
            </summary>
            <param name="nodes">The list of nodes to check</param>
            <param name="range">The range to check</param>
            <param name="useBinarySerach">Defines if binary search should be used</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.RemoveNodesInRange(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Removes nodes located in the scpecified range from the scope.
            </summary>
            <param name="scope">The element to check</param>
            <param name="range">The range to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.RemoveNodesInRange(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Removes nodes located in the scpecified range from the list.
            </summary>
            <param name="nodes">The list of nods to check</param>
            <param name="range">The range to check</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.RemoveNodesInRange(DevExpress.CodeRush.StructuralParser.NodeList,DevExpress.CodeRush.StructuralParser.SourceRange,System.Boolean)">
            <summary>
            Removes nodes located in the scpecified range from the list.
            </summary>
            <param name="nodes">The list of nods to check</param>
            <param name="range">The range to check</param>
            <param name="useBinarySerach">Defines if binary search should be used</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetElementTypeName(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the type name for the passed element.
            </summary>
            <param name="element">The element to get type for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserUtils.GetElementType(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns the type name for the passed element.
            </summary>
            <param name="element">The element to get type for.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.LineTerminatorChar">
            <summary>
            Return value of the CodeRush.StrUtil.CheckLineTermintor method.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminatorChar.CarriageReturn">
            <summary>
            Carriage-return (\r)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminatorChar.LineFeed">
            <summary>
            Line-feed (\n)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminatorChar.LineSeparator">
            <summary>
            Unicode line-separator (\u2028)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminatorChar.ParagraphSeparator">
            <summary>
            Unicode paragraph-separator (\u2029)
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.LineTerminator">
            <summary>
            Return value of the CodeRush.StrUtil.CheckLineTermintor method.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminator.MSDOS">
            <summary>
            MS-DOS line terminator (carriage-return\line-feed)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminator.Mac">
            <summary>
            Macintosh line terminator (carriage-return)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminator.Unix">
            <summary>
            Unix line terminator (line-feed)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminator.LineSeparator">
            <summary>
            Unicode line separator (\u2028)
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.LineTerminator.ParagraphSeparator">
            <summary>
            Unicode paragraph separator (\u2029)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StringHelper.CloneStringCollection(System.Collections.Specialized.StringCollection)">
            <summary>
            Clones string collection.
            </summary>
            <param name="source">The source collection to clone.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StringHelper.SplitLines(System.String)">
            <summary>
            Splits a string containing line terminators into a string array. If, after splitting, the last entry
            is empty, it is removed from the result.
            </summary>
            <param name="text">The string to split.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StringHelper.SplitLines(System.String,System.Boolean)">
            <summary>
            Splits a string containing line terminators into a string array.
            </summary>
            <param name="text">The string to split.</param>
            <param name="removeLastIfEmpty">If true, the last entry is removed if it is an empty string.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StringHelper.GetLineTerminator(System.String)">
            <summary>
            Checks a string to see if it starts with a line terminator. The LineTerminator
            that it represents is returned (or LineTerminator.None if a line terminator was
            not found).
            </summary>
            <param name="text">The string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StringHelper.GetLineTerminator(System.String,System.Int32)">
            <summary>
            Checks a string at the specified index to see if it is a line terminator. The LineTerminator
            that it represents is returned (or LineTerminator.None if a line terminator was
            not found).
            </summary>
            <param name="text">The string to check.</param>
            <param name="index">The index into the string to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StringHelper.GetLineTerminatorLength(DevExpress.CodeRush.StructuralParser.LineTerminator)">
            <summary>
            Returns the length in characters of the specified LineTerminator.
            </summary>
            <param name="lineTerm">The LineTerminator to check.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ImageIndex">
            <summary>
            Image indexes for code elements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMarkupExtensionExpression">
            <summary>
            Method call expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IExpression.Is(System.String)">
            <summary>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">Full type name of the type to check.</param>
            <returns>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IExpression.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IExpression.Is(System.Type)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IExpression.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, 
            the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of 
            the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns element representing the type of the expression.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IExpression.IsStatement">
            <summary>
            Returns true if this expression is used as statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IObjectInitializerExpression">
            <summary>
            Represents ObjectInitializerExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IObjectInitializerExpression.Initializers">
            <summary>
            Gets initializers for current expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWithSource">
            <summary>
            Represents element that has source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IWithSource.Source">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IWithArguments.Args">
            <summary>
            Gets arguments passed to method call expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAddressOfExpression">
            <summary>
            Address of expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAddressOfExpression.Expression">
            <summary>
            Gets the detail expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAnonymousConstructorExpression">
            <summary>
            Represents anonymous method.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAnonymousMethodExpression">
            <summary>
            Represents anonymous method.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWithParameters">
            <summary>
            Determines if element has parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IWithParameters.Parameters">
            <summary>
            Gets element parameters.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IArgumentDirectionExpression">
            <summary>
            Argument direction expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IArgumentDirectionExpression.Direction">
            <summary>
            Gets argument direction.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IArgumentDirectionExpression.Expression">
            <summary>
            Gest argument direction expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IArrayCreateExpression">
            <summary>
            Array creation expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IArrayCreateExpression.BaseType">
            <summary>
            Gets base type of the array.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IArrayCreateExpression.Dimensions">
            <summary>
            Gets array dimensions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IArrayCreateExpression.Initializer">
            <summary>
            Gets array initializer expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IArrayInitializerExpression">
            <summary>
            Array initializer expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IArrayInitializerExpression.Initializers">
            <summary>
            Gets array initializers.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IBinaryOperatorExpression">
            <summary>
            Binary operator expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IOperatorExpression">
            <summary>
            Represents operator expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBinaryOperatorExpression.LeftSide">
            <summary>
            Gets or left operand of the expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBinaryOperatorExpression.RightSide">
            <summary>
            Gets right operand of the expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBinaryOperatorExpression.BinaryOperator">
            <summary>
            Gets binary operator type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAssignmentExpression.AssignmentOperatorType">
            <summary>
            Gets or sets assignment operator type
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAttributeVariableInitializer">
            <summary>
            Attribute variable initializer.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IBaseReferenceExpression">
            <summary>
            Base reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeCastExpression">
            <summary>
            Represents type cast expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeCastExpression.TypeReference">
            <summary>
            Gets type to cast to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeCastExpression.Target">
            <summary>
            Gets the expression being casted.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ICheckedExpression">
            <summary>
            Checked expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICheckedExpression.Expression">
            <summary>
            Gets detail expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IComplexExpression">
            <summary>
            Contains a collection of expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IComplexExpression.Expressions">
            <summary>
            Gets children epressions.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IConditionalExpression">
            <summary>
            Conditional expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IConditionalExpression.Condition">
            <summary>
            Gets condition expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IConditionalExpression.TrueExpression">
            <summary>
            Gets true part expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IConditionalExpression.FalseExpression">
            <summary>
            Gets false part expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IConditionalTypeCast">
            <summary>
            Represents conditional type cast expression.	
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IQualifiedElementReferenceExpression">
            <summary>
            Represents qualified element reference.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElementReferenceExpression">
            <summary>
            Element reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IReferenceExpression">
            <summary>
            Reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IGenericExpression">
            <summary>
            Represents generic expression with type arguments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericExpression.IsGeneric">
            <summary>
            Returns true if this expression is generic and has type arguments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericExpression.TypeArguments">
            <summary>
            Gets type arguments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericExpression.TypeArity">
            <summary>
            Returns generic type arity for this expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IReferenceExpression.FullSignature">
            <summary>
            Gets full signature for expression using its sources
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IReferenceExpression.NameQualifier">
            <summary>
            Gets name qualifier for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElementReferenceExpression.IsModified">
            <summary>
            Gets value determining if this expression is modified.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDefaultValueExpression">
            <summary>
            Default value expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDefaultValueExpression.TypeReference">
            <summary>
            Gets type reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDeleteExpression">
            <summary>
            Represents delete expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDeleteExpression.Expression">
            <summary>
            The expression to delete.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFunctionPointerTypeReference">
            <summary>
            Function pointer type reference.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression">
            <summary>
            Type reference expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Returns true if this type reference expression resolves to the same type as the specified type reference.
            </summary>
            <param name="typeRef">The type reference to compare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.GetElementType">
            <summary>
            Returns type of inner elements for pointers and arrays.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.UsesTypeParameters(DevExpress.CodeRush.StructuralParser.IGenericElement)">
            <summary>
            Returns true if this TypeReferenceExpression uses type parameters of the specified generic element.
            </summary>
            <param name="generic">The generic to find type parameters</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsTypeParameter(DevExpress.CodeRush.StructuralParser.IGenericElement)">
            <summary>
            Returns true if this TypeReferenceExpression is type parameter of the specified generic element.
            </summary>
            <param name="generic">The generic to find type parameter.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.CreateArrayReference(System.Int32)">
            <summary>
            Creates array type reference expression from the current type.
            </summary>
            <param name="rank">The rank of array</param>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.BaseType">
            <summary>
            Gets base type of the expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.Rank">
            <summary>
            Gets rank for array type reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.ArrayBounds">
            <summary>
            Gets array bounds.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsArrayType">
            <summary>
            Returns true for array type reference expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsPointerType">
            <summary>
            Returns true for pointer type reference expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsConst">
            <summary>
            Returns true if this type is constant.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsVolatile">
            <summary>
            Returns true if this type is volatile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsReferenceType">
            <summary>
            Returns true if this type is reference type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsManaged">
            <summary>
            Returns true if this type is managed type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsNullable">
            <summary>
            Returns true if this expression is nullable type reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsDynamic">
            <summary>
            Returns true if this expression is dynamic type reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.IsUnbound">
            <summary>
            Gets or sets value determining that this reference is generic unbound type reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.TypeReferenceType">
            <summary>
            Gets type reference type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression.HasElementType">
            <summary>
            Returns true if this expression is array or pointer reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFunctionPointerTypeReference.Parameters">
            <summary>
            Gets function pointer parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFunctionPointerTypeReference.ParametersCount">
            <summary>
            Gets function pointer parameters count.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFunctionPointerTypeReference.ReturnType">
            <summary>
            Gets function pointer return type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIfOperatorExpression">
            <summary>
            If-operator expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodCallExpression">
            <summary>
            Method call expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodCallExpression.Arguments">
            <summary>
            Gets arguments passed to method call expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIndexerExpression">
            <summary>
            Indexer expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IIndexerExpression.Arguments">
            <summary>
            Gets arguments passed to the indexer.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIsExpression">
            <summary>
            Is expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeCheckExpression">
            <summary>
            Represents type checking expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIsNotExpression">
            <summary>
            IsNot expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILogicalInversionExpression">
            <summary>
            Logical inversion.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUnaryOperatorExpression">
            <summary>
            Represents unary operator expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUnaryOperatorExpression.UnaryExpression">
            <summary>
            Gets unary expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUnaryOperatorExpression.Expression">
            <summary>
            Gets unary expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUnaryOperatorExpression.IsPostOperator">
            <summary>
            Returns true if this expression is post unary expression.
            Otherwise returns false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUnaryOperatorExpression.UnaryOperator">
            <summary>
            Get or set operator type
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILogicalOperationExpression">
            <summary>
            Logical operation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ILogicalOperationExpression.LogicalOperator">
            <summary>
            Gets logical operator.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMemberAccessExpression">
            <summary>
            Member access expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberAccessExpression.ParentWith">
            <summary>
            Gets parent with statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodReferenceExpression">
            <summary>
            Method reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.INullCoalescingExpression">
            <summary>
            Null coalescing expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IObjectCreationExpression">
            <summary>
            Object creation expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IObjectCreationExpression.ObjectType">
            <summary>
            Gets type of the created object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IObjectCreationExpression.ObjectInitializer">
            <summary>
            Gets type of the object initializer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IObjectCreationExpression.Arguments">
            <summary>
            Gets object creation expression arguments.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IParenthesizedExpression">
            <summary>
            Represents parens expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IParenthesizedExpression.Expression">
            <summary>
            Gets detail expression in parens.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression">
            <summary>
            Represents primitive expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.IsBooleanLiteral">
            <summary>
            Returns true if this primitive expression is boolean literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.IsStringLiteral">
            <summary>
            Returns true if this primitive expression is string literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.IsCharLiteral">
            <summary>
            Returns true if this primitive expression is char literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.IsNullLiteral">
            <summary>
            Returns true if this primitive expression is null literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.Value">
            <summary>
            Gets primitive expression value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.IsVerbatimString">
            <summary>
            Returns true if this primitive expression is verbatim string literal
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPrimitiveExpression.PrimitiveType">
            <summary>
            Gets primitive type of this expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IQualifiedAliasExpression">
            <summary>
            Represents qualified alias expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IQualifiedAliasExpression.IsGlobal">
            <summary>
            Returns true if this expresison is global alias.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasAttributes">
            <summary>
            Determines if element has attributes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasAttributes.Attributes">
            <summary>
            Gets member attributes.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IReDimExpression">
            <summary>
            Represents ReDim expression for VB.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IRelationalOperationExpression">
            <summary>
            Represents relational operation expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IRelationalOperationExpression.RelationalOperator">
            <summary>
            Gets or sets relational operator.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IShortInitializeExpression">
            <summary>
            Short initialize expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IShortInitializeExpression.Arguments">
            <summary>
            Gets initializer arguments.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ISizeOfExpression">
            <summary>
            Represents size of expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISizeOfExpression.TypeReference">
            <summary>
            Gets type reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IThisReferenceExpression">
            <summary>
            Represents this reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypedElementReferenceExpression">
            <summary>
            Represents type checking expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeOfExpression">
            <summary>
            Represents type of expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeOfExpression.TypeReference">
            <summary>
            Gets detail type reference expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeOfIsExpression">
            <summary>
            Represents type check expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeOfIsExpression.Expression">
            <summary>
            Gets target expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeOfIsExpression.TypeReference">
            <summary>
            Gets target type reference expression to check.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUnaryDecrementExpression">
            <summary>
            Unary decrement expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUnaryIncrementExpression">
            <summary>
            Unary increment expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUncheckedExpression">
            <summary>
            Represents unchecked expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUncheckedExpression.Expression">
            <summary>
            Gets detail expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IXmlNode.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IBaseVariable">
            <summary>
            Represents base variable, i.e. field, local, paramter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.IsLocal">
            <summary>
            Returns true if variable is local.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.IsField">
            <summary>
            Returns true if variable is field.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.IsParameter">
            <summary>
            Returns true if variable is parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.IsTypeDef">
            <summary>
            Returns true if this element is a typedef declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.IsAspxTag">
            <summary>
            Returns true if this variable was created from Aspx tag.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.IsRunAtServer">
            <summary>
            Returns true if this variable was created from Aspx tag and has runat=server attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IBaseVariable.NameQualifier">
            <summary>
            Gets name qualifier for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Collapse(System.Boolean)">
            <summary>
            Collapses this region. If undoable is true, this action is placed on the current undo stack.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Collapse">
            <summary>
            Collapses this region. This action is placed on the current undo stack.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Expand(System.Boolean)">
            <summary>
            Expands this region. If undoable is true, this action is placed on the current undo stack.
            </summary>
            <param name="undoable">If true, this action is placed on the current undo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Expand">
            <summary>
            Expands this region. This action is placed on the current undo stack.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Collapsed">
            <summary>
            Gets or sets the collapsed state of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Expanded">
            <summary>
            Gets or sets the expanded state of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Range">
            <summary>
            Returns the range of this region.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICollapsibleRegion.Text">
            <summary>
            Gets or sets the text banner for this region.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory.CreateDisposableEditPoint(System.Int32,System.Int32)">
            <summary>
            Creates and returns an implementor of IDisposableEditPoint at 
            the specified location. TextDocument implements IDisposableEditPointFactory.
            </summary>
            <param name="lineNumber">The line number of the IDisposableEditPoint to create.</param>
            <param name="columnOffset">The column offset of the IDisposableEditPoint to create.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory.CreateDisposableEditPoint(System.Int32,System.Int32,System.String)">
            <summary>
            Creates and returns an implementor of IDisposableEditPoint at 
            the specified location. TextDocument implements IDisposableEditPointFactory.
            </summary>
            <param name="lineNumber">The line number of the IDisposableEditPoint to create.</param>
            <param name="columnOffset">The column offset of the IDisposableEditPoint to create.</param>
            <param name="name">The name of this IDisposableEditPoint (for debugging purposes).</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.Activate">
            <summary>
            Activates the document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.LengthOfLine(System.Int32)">
            <summary>
            Determines the length of the specified line.
            </summary>
            <param name="lineNumber">The line number to check.</param>
            <returns>Returns the length of the specified line.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.SelectText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects text in this document between the specified start position (the anchor) and the 
            end position (the cursor).
            </summary>
            <param name="startLine">The starting line number of the selection.</param>
            <param name="startOffset">The starting column line offset of the selection.</param>
            <param name="endLine">The ending line number of the selection.</param>
            <param name="endOffset">The ending column line offset of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.DeleteText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Deletes the text specified by the given coordinates.
            </summary>
            <param name="range">The SourceRange of the text to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.DoParse">
            <summary>
            Performs a forced parse on this document. This is a low-level 
            method that should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.FullParse">
            <summary>
            Performs a forced full parse on this TextDocument. This is a low-level 
            method that should not need to be called by plug-in writers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.Parse(DevExpress.CodeRush.StructuralParser.ParserContext)">
            <summary>
            Parses given context.
            </summary>
            <param name="context">The context to parse.</param>
            <returns>Returns parsed language element.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.InsertText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Inserts the given text at the specified SourcePoint.
            </summary>
            <param name="point">The SourcePoint to insert the text at.</param>
            <param name="text">The text to insert.</param>
            <returns>Returns a SourceRange representing the coordinates of the inserted text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetText(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns of block of text from the TextDocument.
            </summary>
            <param name="range">A SourceRange defining the block to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetSelectionBounds(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the bounds of the text selection. Returns false if there is no selection.
            </summary>
            <param name="startLine">The starting line number of the selection.</param>
            <param name="startOffset">The starting column line offset of the selection.</param>
            <param name="endLine">The ending line number of the selection.</param>
            <param name="endOffset">The ending column line offset of the selection.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.ReplaceSelection(System.String,System.Boolean)">
            <summary>
            Replaces the entire selection with the specified text, and optionally keeps the selection active.
            </summary>
            <param name="Text">The replacement text.</param>
            <param name="KeepSelection">Specifies whether the new replacement text should be selected.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.AddHeaderFooter(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String[],System.String[],System.Boolean)">
            <summary>
            Adds the specified header and footer lines before and after the specified language element.
            </summary>
            <param name="aLanguageElement">The language element to enclose.</param>
            <param name="aHeader">The text to precede the language element.</param>
            <param name="aFooter">The text to follow the language element.</param>
            <param name="aSelect">Whether the new header and footer text, as well as 
            the enclosed language element should be selected in the editor.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.RegionDirective)">
            <summary>
            Returns an ICollapsibleRegion object for the specified RegionDirective in active TextView.
            </summary>                                              
            <param name="region">The RegionDirective to return the ICollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Returns an ICollapsibleRegion object for the specified SourceRange  in active TextView.
            </summary>                                              
            <param name="range">The SourceRange to return the ICollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.RegionDirective,DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Returns an ICollapsibleRegion object for the specified RegionDirective.
            </summary>                                              
            <param name="region">The RegionDirective to return the ICollapsibleRegion for.</param>
            <param name="textView">The TextView to return the ICollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetCollapsibleRegion(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.IDXCoreTextView)">
            <summary>
            Returns an ICollapsibleRegion object for the specified SourceRange.
            </summary>                                              
            <param name="range">The SourceRange to return the ICollapsibleRegion for.</param>
            <param name="textView">The TextView to return the ICollapsibleRegion for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.AddNamespace(DevExpress.CodeRush.StructuralParser.Namespace)">
            <summary>
            Adds the specified Namespace to the document. Each TextDocument owns a list of all the namespaces declared within.
            </summary>
            <param name="aNamespace">The Namespace (or descendant) to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.ClearNamespaces">
            <summary>
            Clears all namespaces associated with the document (parsers should call before parsing).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.IncludeWhitespace(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange (based on the specified SourceRange) 
            that includes leading and trailing white space. This is useful for cutting, 
            deleting, or moving text inside the SourceRange, as this expanded SourceRange
            tends to produce a clean break in the code when removed.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.IncludeLeadingWhiteSpace(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange (based on the specified SourceRange) 
            that includes leading white space. This is useful for cutting, 
            deleting, or moving text inside the SourceRange, as this expanded SourceRange
            tends to produce a clean break in the code when removed.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.IncludeTrailingWhiteSpace(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange (based on the specified SourceRange) 
            that includes trailing white space. This is useful for cutting, 
            deleting, or moving text inside the SourceRange, as this expanded SourceRange
            tends to produce a clean break in the code when removed.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueDelete(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Deletes the specified SourceRange. This is a queued edit operation, which 
            means it is not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="range">The SourceRange to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueDelete(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Deletes the specified node. This is a queued edit operation, which means it is 
            not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="element">The LanguageElement node to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueDelete(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Deletes the nodes in the specified sibling range (including firstSibling 
            and lastSibling). This is a queued edit operation, which means it is 
            not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="firstSibling">The first sibling node to delete.</param>
            <param name="lastSibling">The last sibling node to delete.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueInsert(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Inserts the specified newCode into the document at the specified insertionPoint. 
            This is a queued edit operation, which means it is not performed until 
            ApplyQueuedEdits is called.
            </summary>
            <param name="insertionPoint">The point to insert this new code.</param>
            <param name="newCode">The code to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueReplace(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Replaces the specified SourceRange with newCode. This is a queued edit operation, 
            which means it is not applied until ApplyQueuedEdits is called.
            </summary>
            <param name="range">The SourceRange to delete.</param>
            <param name="newCode">The new code that will replace the deleted range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueReplace(DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Replaces the specified node with newCode. This is a queued edit operation, 
            which means it is not applied until ApplyQueuedEdits is called.
            </summary>
            <param name="element">The LanguageElement node to delete.</param>
            <param name="newCode">The new code that will replace the element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueReplace(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement,System.String)">
            <summary>
            Replaces the nodes in the specified sibling range (including firstSibling and 
            lastSibling) with newCode. This is a queued edit operation, which means it is 
            not performed until ApplyQueuedEdits is called.
            </summary>
            <param name="firstSibling">The first sibling node to delete.</param>
            <param name="lastSibling">The last sibling node to delete.</param>
            <param name="newCode">The new code that will replace the sibling range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.QueueMove(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Moves the specified range to the insertionPoint.
            This is a queued edit operation, which means it is not performed until 
            ApplyQueuedEdits is called.
            </summary>
            <param name="range">The SourceRange to move.</param>
            <param name="insertionPoint">The SourcePoint to insert the moved text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.ApplyQueuedEdits">
            <summary>
            Applies all edits in the queue. You can place new insert, delete, and replace edit 
            operations into the edit queue using the QueueDelete, QueueInsert, and 
            QueueReplace methods. You can get a list of all pending edits by querying the 
            QueuedEdits property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.ApplyQueuedEdits(System.String)">
            <summary>
            Applies all edits in the queue. You can place new insert, delete, and replace edit 
            operations into the edit queue using the QueueDelete, QueueInsert, and 
            QueueReplace methods. You can get a list of all pending edits by querying the 
            QueuedEdits property.
            </summary>
            <param name="operation">The name of the operation you are performing. This text
            will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.Move(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Immediately moves the specified range to the insertionPoint. If you need to perform several 
            consecutive moves sequentially, use the QueueMove method instead (followed by a call to 
            ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to move.</param>
            <param name="insertionPoint">The SourcePoint to insert the moved text.</param>
            <param name="operation">The name of the operation this move represents. This text
            will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.MoveWithBinding(DevExpress.CodeRush.StructuralParser.SourceRange,DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Immediately moves the specified range to the insertionPoint. If you need to perform several 
            consecutive moves sequentially, use the QueueMove method instead (followed by a call to 
            ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to move.</param>
            <param name="insertionPoint">The SourcePoint to insert the moved text.</param>
            <param name="operation">The name of the operation this move represents. This text
            will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.Replace(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String)">
            <summary>
            Immediately replaces the specified range with the new text. If you need to perform several 
            consecutive replace operations sequentially, use the QueueReplace method instead (followed 
            by a call to ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to replace.</param>
            <param name="newCode">The text to insert.</param>
            <param name="operation">The name of the operation this replace operation represents. 
            This text will appear in the undo/redo stack.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.Replace(DevExpress.CodeRush.StructuralParser.SourceRange,System.String,System.String,System.Boolean)">
            <summary>
            Immediately replaces the specified range with the new text. If you need to perform several 
            consecutive replace operations sequentially, use the QueueReplace method instead (followed 
            by a call to ApplyQueuedEdits).
            </summary>
            <param name="range">The SourceRange to replace.</param>
            <param name="newCode">The text to insert.</param>
            <param name="operation">The name of the operation this replace operation represents. 
            This text will appear in the undo/redo stack.</param>
            <param name="format">Specifies if the text should be formatted.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.Format(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Formats a range of text in the TextDocument.
            </summary>
            <param name="range">The range to format.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a block of text from the TextDocument.
            </summary>
            <param name="startLine">The starting line of the block to retrieve.</param>
            <param name="startOffset">The starting character offset of the block to retrieve.</param>
            <param name="endLine">The ending line of the block to retrieve.</param>
            <param name="endOffset">The ending character offset of the block to retrieve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetText(System.Int32)">
            <summary>
            Retrieves the text for specified line in this TextDocument.
            </summary>
            <param name="lineNumber">The line number to return.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.SetText(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Sets the text at the given SourceRange to the specified text. This can be used to delete, replace or insert text.
            </summary>
            <param name="range">The SourceRange to replace with the specified text.</param>
            <param name="text">The specified text.</param>
            <returns>Returns a SourceRange representing the coordinates that were changed.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.IncludePrecedingEmptyLines(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange
            that includes leading empty lines.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.IncludeTrailingEmptyLines(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates and returns an expanded SourceRange
            that includes trailing empty lines.
            </summary>
            <param name="sourceRange">The SourceRange to expand.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetStartEmptyLinePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates and returns SourcePoint of the start empty line,
            preceding the specified source point.
            </summary>
            <param name="sourcePoint">The SourcePoint to start from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetEndEmptyLinePoint(DevExpress.CodeRush.StructuralParser.SourcePoint)">
            <summary>
            Creates and returns SourcePoint of the end empty line,
            trailing the specified source point.
            </summary>
            <param name="sourcePoint">The SourcePoint to start from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetProjectElement">
            <summary>
            Gets the ProjectElement associated with this Document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetSourceReader(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets ISourceReader implementer for the given source range.
            </summary>
            <param name="range">The range to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetChildFilePaths">
            <summary>
            Returns the file paths of any child items that belong to this TextDocument (if any). For example, if this 
            TextDocument represents a Windows Forms designer, this method will return the file path of the .resx or 
            .Designer.cs file. NOTE: This method is not recursive -- it only retrieves the file paths of the immediate children.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.ExpandText(System.Int32,System.Int32,System.String)">
            <summary>
            Expands text containing references to TextCommands and StringProviders at the specified location.
            </summary>
            <param name="line">The line number to expand the text at.</param>
            <param name="offset">The character offset to expand the text at.</param>
            <param name="text">The text to expand.</param>
            <returns>Returns a SourceRange representing the expanded text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.ExpandText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String)">
            <summary>
            Expands text containing references to TextCommands and StringProviders at the specified location.
            </summary>
            <param name="point">The SourcePoint to expand the text at.</param>
            <param name="text">The text to expand.</param>
            <returns>Returns a SourceRange representing the expanded text.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IDocument.GetSurroundingText(DevExpress.CodeRush.StructuralParser.SourcePoint,System.String@,System.String@)">
            <summary>
            Gets the text to the left and right of the specified SourcePoint.
            </summary>
            <param name="point">A SourcePoint representing the line containing the surrounding text and the 
            character offset to split the line at.</param>
            <param name="leftText">This output parameter is set to the text to the left of the SourcePoint.</param>
            <param name="rightText">This output parameter is set to the text to the right of the SourcePoint.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.ActiveView">
            <summary>
            Gets the active ITextView associated with this TextDocument.	Can return null if no TextViews are available for this document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.InactiveView">
            <summary>
            Gets the first inactive ITextView associated with this TextDocument.	Can return null if no TextViews are available for this document, or if the only ITextView available is active.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.RegionStartKeyword">
            <summary>
            The keyword to start a region (e.g., "#region" in C#).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.RegionEndKeyword">
            <summary>
            The keyword to end a region (e.g., "#endregion" in C#).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.FullName">
            <summary>
            Gets document full name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.Parser">
            <summary>
            Gets document parser.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.Language">
            <summary>
            Gets document language ID.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.LineCount">
            <summary>
            Gets the number of lines in this TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.Text">
            <summary>
            Gets document text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.Name">
            <summary>
             Gets document name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.Range">
            <summary>
            Returns the full range of this TextDocument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.IsDisposed">
            <summary>
            Returns true if document is disposed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.IsDisposing">
            <summary>
            Returns true if document is being disposed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDocument.ProjectElement">
            <summary>
            Returns the Project that this document belongs to.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDXCoreTextView">
            <summary>
            IDXCoreTextView defines the interface for TextViews
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElementVisitor">
            <summary>
            Defined abstract element visitor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IElementVisitor.Visit(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Visits the given element.
            </summary>
            <param name="element">The element to visit.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IExternAlias">
            <summary>
            Represents extern alias.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IGenericElement">
            <summary>
            Represents generic element with type parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericElement.TypeParameters">
            <summary>
            Gets or sets type parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericElement.IsGeneric">
            <summary>
            Returns true if element is generic.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericElement.IsActivatedGeneric">
            <summary>
            Returns true if element is activated.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGenericElement.GenericTemplate">
            <summary>
            Returns template element that was used to activate generic.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IGenericElementModifier">
            <summary>
            Allows generic element modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IGenericElementModifier.AddTypeParameter(DevExpress.CodeRush.StructuralParser.ITypeParameter)">
            <summary>
            Adds a new type parameter.
            </summary>
            <param name="typeParameter"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IGenericElementModifier.RemoveTypeParameter(DevExpress.CodeRush.StructuralParser.ITypeParameter)">
            <summary>
            Removes the specified type parameter.
            </summary>
            <param name="typeParameter"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IGenericElementModifier.InsertTypeParameter(System.Int32,DevExpress.CodeRush.StructuralParser.ITypeParameter)">
            <summary>
            Inserts a new type parameter at the specified index.
            </summary>
            <param name="index"></param>
            <param name="typeParameter"></param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasArguments">
            <summary>
            Provides arguments.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasArguments.AddArgument(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Adds argument.
            </summary>
            <param name="arg">The argument to add</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasArguments.Arguments">
            <summary>
            Gets a collection of arguments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasArguments.ArgumentsCount">
            <summary>
            Gets the number of arguments.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasArrayNameModifier">
            <summary>
            Determines if element has a array modifiers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasArrayNameModifier.Modifiers">
            <summary>
            Gets element array modifiers.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasAttributesModifier">
            <summary>
            Allows attributes modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasAttributesModifier.AddAttribute(DevExpress.CodeRush.StructuralParser.IAttributeElement)">
            <summary>
            Adds a new attribute.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasAttributesModifier.RemoveAttribute(DevExpress.CodeRush.StructuralParser.IAttributeElement)">
            <summary>
            Removes the specified attribute.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasParameters">
            <summary>
            Provides parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasParameters.Parameters">
            <summary>
            Gets a collection of parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasParameters.ParameterCount">
            <summary>
            Gets the number of parameters.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasParens">
            <summary>
            Elements which has parens.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasParens.ParensRange">
            <summary>
            Returns range of parens.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasResolvePoint.ResolvePoint">
            <summary>
            Gets or sets resolve point
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHasType">
            <summary>
            Determines if element has a type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasType.Is(System.String)">
            <summary>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">Full type name of the type to check.</param>
            <returns>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasType.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasType.Is(System.Type)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IHasType.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, 
            the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of 
            the type to compare against.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHasType.Type">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILocalDeclaration">
            <summary>
            Local declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ILocalDeclaration.IsImplicit">
            <summary>
            Returns true if this declaration is implicit.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ILocalDeclaration.IsReturnedValue">
            <summary>
            Returns true if this declaration is used as return value.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.INamespaceElement">
            <summary>
            Represents namespace element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INamespaceElement.Namespaces">
            <summary>
            Gets child namespaces.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INamespaceElement.Types">
            <summary>
            Gets namespace types.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.INamespaceReference">
            <summary>
            Represents namespace reference element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INamespaceReference.IsAlias">
            <summary>
            Returns true if namespace reference is alias.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INamespaceReference.NameExpression">
            <summary>
            Gets alias name expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INamespaceReference.Expression">
            <summary>
            Gets alias expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAliasDeclaration">
            <summary>
            Represents namespace reference element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAliasDeclaration.AliasName">
            <summary>
            Gets alias name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAliasDeclaration.Expression">
            <summary>
            Gets alias expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IXmlNamespaceReference">
            <summary>
            Represents xml-namespace reference element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISnippetCodeElement.Code">
            <summary>
            Gets code stored inside this snippet element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceReader.IsDocumentReader">
            <summary>
            Returns true if this reader works directly with VS document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceReader.IsDisposing">
            <summary>
            Returns true if reader is being disposed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceReader.IsDisposed">
            <summary>
            Returns true if reader is disposed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.BeginResolve">
            <summary>
            Creates internal resolver caches to speed up subsequent resolving operations.
            This method is useful if you plan to make several 
            repeated resolve calls. You must guarantee a 
            call to EndResolve() (e.g., placed in a finally block) so normal resolving can resume. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.EndResolve">
            <summary>
            Marks the end of resolving session.
            You must call this once for every call to BeginResolve().
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.IsTypeReference(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if element is type reference 
            </summary>
            <param name="type">The element to check</param>
            <param name="start">The start element</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.IsDeclarationOverriden(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if declaration is overriden by target element.
            </summary>
            <param name="declaration">The declaration element.</param>
            <param name="target">The target element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveAncestorInterfaces(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns a list of all ancestor interfaces for the
            given element.
            </summary>
            <param name="type">The element to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveTypeAncestor(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns ancestor of the given type declaration.
            </summary>
            <param name="type">The element to find ancestor</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveBaseTypes(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns ancestors of the given type declaration.
            </summary>
            <param name="type">The element to find ancestors.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveAllBaseTypes(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Recursively collects all ancestors for the given type declaration.
            </summary>
            <param name="type">The element to get ancestors.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveList(DevExpress.CodeRush.StructuralParser.IElement,System.Collections.Specialized.StringCollection)">
            <summary>
            Resolves a list of elements starting from the given element.
            </summary>
            <param name="element">The element to start from.</param>
            <param name="simpleNames">The list of names to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns a list of found elements with the given full name.
            </summary>
            <param name="start">The element to start from.</param>
            <param name="fullName">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IElement,System.String,System.Boolean)">
            <summary>
            Returns a list of found elements with the given full name.
            </summary>
            <param name="start">The element to start from.</param>
            <param name="fullName">The full name of the element to find.</param>
            <param name="isNamespace">The value determining if members should be skipped.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveFirst(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns the first found element.
            </summary>
            <param name="start">The element to start from.</param>
            <param name="fullName">The full name of decalration to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveFirst(DevExpress.CodeRush.StructuralParser.IElement,System.String,System.Boolean)">
            <summary>
            Returns the first found element.
            </summary>
            <param name="start">The element to start from.</param>
            <param name="fullName">The full name of decalration to resolve.</param>
            <param name="isNamespace">The value determining if members should be skipped.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveType(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Searches for type with a given type name, starting from the given element.
            </summary>
            <param name="start">The start element.</param>
            <param name="typeName">The type name to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveTypes(DevExpress.CodeRush.StructuralParser.IElement,System.String,System.Boolean)">
            <summary>
            Searches for all available types with a given type name, starting from the given element.
            </summary>
            <param name="start">The start element.</param>
            <param name="typeName">The type name to resolve.</param>
            <param name="breakOnFirstFound">Specifies a value whether to stop searching when a first item is found.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindLocalDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Finds local declaration for specified element reference if it is possible.
            The language element passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="element">The element for which to find declaration.</param>
            <returns>Returns declaration for the element reference.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindLocalDeclaration(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Finds local declaration with the given name, starting from the specified element 
            reference if it is possible.
            The language element passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="start">The start element.</param>
            <param name="name">The name of the declaration to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindFieldDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Finds field declaration for specified element reference if it is possible.
            The language element passed to this method should be determined through a call 
            that either guarantees a parse will happen if needed, or the element was 
            acquired directly after calling CodeRush.Language.ParseIfNeeded().
            </summary>
            <param name="element">Element for which to find declaration.</param>
            <returns>Returns declaration for the element reference.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindConstructors(DevExpress.CodeRush.StructuralParser.IObjectCreationExpression,DevExpress.CodeRush.StructuralParser.IExpressionCollection)">
            <summary>
            Finds constructors.
            </summary>
            <param name="element">The ObjectCreationExpression element</param>
            <param name="arguments">The arguments of constructor</param>	
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindConstructors(DevExpress.CodeRush.StructuralParser.IConstructorInitializerElement,DevExpress.CodeRush.StructuralParser.IExpressionCollection)">
            <summary>
            Finds constructors.
            </summary>
            <param name="element">The ConstructorInitializerElement element</param>
            <param name="arguments">The arguments of constructor</param>	
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindConstructors(DevExpress.CodeRush.StructuralParser.IMethodReferenceExpression,DevExpress.CodeRush.StructuralParser.IExpressionCollection)">
            <summary>
            Finds constructors.
            </summary>
            <param name="reference">The method reference element</param>
            <param name="arguments">The arguments of constructor</param>	
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindConstructors(DevExpress.CodeRush.StructuralParser.ITypeElement,DevExpress.CodeRush.StructuralParser.IExpressionCollection)">
            <summary>
            Finds constructors.
            </summary>
            <param name="type">The type element</param>
            <param name="arguments">The arguments of constructor</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindConstructors(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.ITypeElement,DevExpress.CodeRush.StructuralParser.IExpressionCollection)">
            <summary>
            Finds constructors.
            </summary>
            <param name="start">The start element</param>
            <param name="type">The type element</param>
            <param name="arguments">The arguments of constructor</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindFirstDeclaration(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Finds first declaration for expression
            </summary>
            <param name="expression">The expression to use</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindFirstElementDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Finds first declaration for the given element.
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindElementDeclarations(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Finds declarations for the given element.
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindMethodDeclarations(DevExpress.CodeRush.StructuralParser.IExpression,DevExpress.CodeRush.StructuralParser.IExpressionCollection,System.Boolean,System.Boolean)">
            <summary>
            Finds method declarations for the given element.
            </summary>
            <param name="element">The element to start search from.</param>
            <param name="arguments">The method arguments.</param>
            <param name="searchOnlyInCurrentClass">The value determining that search will be perfromed only in current class.</param>
            <param name="filterByArguments">The value determining that arguments should be taken into account.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FilterExplicitDeclarationsIfNeeded(DevExpress.CodeRush.StructuralParser.IElementCollection,DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Filters matching declarations comparing them with active interface implementer.
            </summary>
            <param name="declarations">The declarations to filter</param>
            <param name="active">The active iterface implener</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindMatchingMember(DevExpress.CodeRush.StructuralParser.IElementCollection,DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Searches matching member inside the given collection.
            </summary>
            <param name="members">The collection of elements to search.</param>
            <param name="member">The member to search matching element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindMatchingMembers(DevExpress.CodeRush.StructuralParser.IElementCollection,DevExpress.CodeRush.StructuralParser.IMemberElement,System.Boolean)">
            <summary>
            Searches matching members inside the given collection.
            </summary>
            <param name="members">The collection of elements to search.</param>
            <param name="member">The member to search matching element.</param>
            <param name="ignoreInterfaceName">Ignore interface name</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindMatchingMembers(DevExpress.CodeRush.StructuralParser.IElementCollection,DevExpress.CodeRush.StructuralParser.IMemberElement,System.Boolean,System.Boolean)">
            <summary>
            Searches matching members inside the given collection.
            </summary>
            <param name="members">The collection of elements to search.</param>
            <param name="member">The member to search matching element.</param>
            <param name="ignoreInterfaceName">Ignore interface name</param>
            <param name="checkExplicitMembers">Defines if explicitly implemented members with different name should be considered</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindParentType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets parent type for the given expression.
            </summary>
            <param name="element">The expression to get parent type for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindPrototype(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Returns prototype for the given method.
            </summary>
            <param name="method">The method to search for a prototype.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindPrototypes(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Returns prototypes for the given method.
            </summary>
            <param name="method">The method to search for a prototypes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindPrototypes(DevExpress.CodeRush.StructuralParser.IBaseVariable)">
            <summary>
            Returns prototypes for the given variable.
            </summary>
            <param name="variable">The variable to search for prototypes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindAccessorPrototype(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Returns prototype for the given accessor.
            </summary>
            <param name="method">The accessor to search for prototype</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindPrototype(DevExpress.CodeRush.StructuralParser.IBaseVariable)">
            <summary>
            Returns prototype for the given variable.
            </summary>
            <param name="variable">The variable to search for a prototype.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindAttributeDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Searches for attribute declaration.
            </summary>
            <param name="element">The element to search for declaration.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IElementReferenceExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IAddressOfExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IAwaitExpression)">
            <summary>
            Resolves given await expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IArrayCreateExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IArgumentDirectionExpression)">
            <summary>
            Resolves argument direction expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IAssignmentExpression)">
            <summary>
            Resolves assignment expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ICheckedExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IConditionalExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IUncheckedExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ILogicalInversionExpression)">
            <summary>
            Resolves logical inversion expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ILogicalOperationExpression)">
            <summary>
            Resolves logical operation expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IRelationalOperationExpression)">
            <summary>
            Resolves relational operation expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IParenthesizedExpression)">
            <summary>
            Resolves expression in parens.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IObjectCreationExpression)">
            <summary>
            Resolves object creation expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ITypeCastExpression)">
            <summary>
            Resolves type cast expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IConditionalTypeCast)">
            <summary>
            Resolves type cast expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ITypeCheckExpression)">
            <summary>
            Resolves type check expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Resolves type reference expression. Returns declaration for base type expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.PrimitiveType)">
            <summary>
            Resolves primitive type.
            </summary>
            <param name="start">The element to start from.</param>
            <param name="type">The primitive type to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IPrimitiveExpression)">
            <summary>
            Resolves primitive expression.
            </summary>
            <param name="expression">The primitive expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IThisReferenceExpression)">
            <summary>
            Resolves this reference expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IBaseReferenceExpression)">
            <summary>
            Resolves base reference expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IIndexerExpression)">
            <summary>
            Resolves indexer expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ITypeOfIsExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ISizeOfExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IUnaryOperatorExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IBinaryOperatorExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ITypeOfExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IMethodReferenceExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IMethodCallExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IIsNotExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IMemberAccessExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IQueryExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IDefaultValueExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IArrayInitializerExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IAnonymousMethodExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.ILambdaExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IMemberInitializerExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IXmlNode)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IXmlExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IXmlElementReferenceExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IXmlAttributeReferenceExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IGetXmlNamespaceOperator)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IEmptyArgumentExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Resolve(DevExpress.CodeRush.StructuralParser.IMarkupExtensionExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveElementType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Resolves the type of the given element.
            </summary>
            <param name="element">The element to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveType(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Searches for type by the given type reference.
            </summary>
            <param name="typeRef">The type reference to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindTypeOrNamespace(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Searches for type or namespace.
            </summary>
            <param name="element">The element to start searching from.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.IsImplicitVariableReference(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is reference to implicitly declared variable.
            </summary>
            <param name="reference">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.IsAttributeMemberAssignment(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Returns true if the given expression is used inside left side of attribute field or property assigment.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveNullable(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Resolves nullable type refernece and uses base type as type parameter
            for the resolved System.Nullable.
            </summary>
            <param name="typeRef">The type reference to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveExpression(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveExpression(DevExpress.CodeRush.StructuralParser.IExpression,System.Boolean)">
            <summary>
            Resolves given expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
            <param name="resolveMethodGroup">The value determining if it is necessary to resolve method group reference expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.ResolveMethodGroup(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Resolves method group expression.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.GetDeclaration(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns declaration for the given language element.
            </summary>
            <param name="element">The element to find declaration for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.GetResolvingCache">
            <summary>
            Returns resolving cache.
            </summary>
            <returns>Returns resolving cache.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.SetActiveProject(DevExpress.CodeRush.StructuralParser.IProjectElement)">
            <summary>
            Sets active project.
            </summary>
            <param name="project">The active project.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.FindAllElementDeclarations(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Finds all declarations for the given element.
            </summary>
            <param name="element">The element to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISourceTreeResolver.Options">
            <summary>
            Gets source tree resolver options.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeParameterModifier">
            <summary>
            Interface that allows type parameter modifications.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeParameterModifier.SetActivatedType(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Sets type for the activated type parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeParameterModifier.AddConstraint(DevExpress.CodeRush.StructuralParser.ITypeParameterConstraint)">
            <summary>
            Adds a new type parameter constraint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeParameterModifier.RemoveConstraint(DevExpress.CodeRush.StructuralParser.ITypeParameterConstraint)">
            <summary>
            Removes the specified type parameter constraint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeParameterModifier.SetDirection(DevExpress.CodeRush.StructuralParser.TypeParameterDirection)">
            <summary>
            Sets direction of type parameter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeReferenceExpressionModifier">
            <summary>
            Interface that allows type referecne expression modifications.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement">
            <summary>
            Represents a variable declaration.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IStatement">
            <summary>
            Base interface for all statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.IsConst">
            <summary>
            Defines if field is constant
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.Expression">
            <summary>
            Get initialization expression
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.IsBitField">
            <summary>
            Gets bit field size.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.BitFieldSize">
            <summary>
            Gets bit field size.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.IsVolatile">
            <summary>
            Returns true if variabe is volatile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.IsObjectCreationInit">
            <summary>
            Returns true if this field is object creation initialization.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.IsFixedSizeBuffer">
            <summary>
            Returns true if this element is a fixed size buffer declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.HasIterationExpression">
            <summary>
            Returns true if this variabe is used as iteration variable, e.g. inside for each loop.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IVariableDeclarationStatement.IterationExpression">
            <summary>
            Returns iteration expression, e.g. inside for each loop.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWithArgumentsModifier">
            <summary>
            Allows arguments modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IWithArgumentsModifier.AddArgument(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Adds a new argument.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IWithArgumentsModifier.RemoveArgument(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Removes the specified argument.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IWithArgumentsModifier.InsertArgument(System.Int32,DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Inserts a new argument at the specified index.
            </summary>
            <param name="index"></param>
            <param name="argument"></param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWithParametersModifier">
            <summary>
            Allows parameters modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IWithParametersModifier.AddParameter(DevExpress.CodeRush.StructuralParser.IParameterElement)">
            <summary>
            Adds a new parameter.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IWithParametersModifier.RemoveParameter(DevExpress.CodeRush.StructuralParser.IParameterElement)">
            <summary>
            Removes the specified parameter.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IWithParametersModifier.InsertParameter(System.Int32,DevExpress.CodeRush.StructuralParser.IParameterElement)">
            <summary>
            Inserts a new parameter at the specified index.
            </summary>
            <param name="index"></param>
            <param name="parameter"></param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IXmlDocParser">
            <summary>
            Parser used to parse xml doc comments.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IXmlDocParser.ParseXmlDocNodes(DevExpress.CodeRush.StructuralParser.ISourceReader)">
            <summary>
            Parses all xml doc comments nodes using the specfied reader.
            </summary>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IXmlDocParser.ParseXmlDocNodes(System.String)">
            <summary>
            Parses all xml doc comments nodes using the specfied xml doc string.
            </summary>
            <param name="xmlDoc">The xml doc comment string to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IXmlDocParser.ParseXmlDocNode(DevExpress.CodeRush.StructuralParser.ISourceReader)">
            <summary>
            Parses and returns first xml doc comment node using the specfied reader.
            </summary>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IXmlDocParser.ParseXmlDocNode(System.String)">
            <summary>
            Parses and returns first xml doc comment node using the specfied xml doc string.
            </summary>
            <param name="xmlDoc">The xml doc comment string to use.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFieldElement">
            <summary>
            Represents a field.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMemberElement">
            <summary>
            Represents member element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElement.GetOverrideCode">
            <summary>
            Gets code to override this member.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElement.GetOverrideCode(System.Boolean)">
            <summary>
            Gets code to override this member.
            </summary>
            <param name="callBase">Pass true to add call to base method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElement.GetOverrideCode(System.Boolean,System.String,System.String)">
            <summary>
            Gets code to override this member.
            </summary>
            <param name="callBase">Pass true to add call to base method.</param>
            <param name="codeBefore">The code to add before method call.</param>
            <param name="codeAfter">The code to add after method call.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.Implements">
            <summary>
            Returns expression collection for implemented interface members.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.NameQualifier">
            <summary>
            Gets name qualifier for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.Visibility">
            <summary>
            Gets member visibility.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsDefaultVisibility">
            <summary>
            True if the visibility for this member is derived from its parent's default visibility. 
            False if a visibility keyword was specified (e.g., "public", "protected", "private", etc.) 
            in the declaration of this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsAbstract">
            <summary>
            Gets value indicating that this element is abstract.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsVirtual">
            <summary>
            Gets value indicating that this member is virtual.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsOverride">
            <summary>
            Gets value indicating that this member override base element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsNew">
            <summary>
            Gets value indicating that this member is new.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsPartial">
            <summary>
            Gets value indicating that this member is partial.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsReadOnly">
            <summary>
            Gets value indicating that this member is read-only.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsStatic">
            <summary>
            Gets value indicating that this member is static.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsSealed">
            <summary>
            Gets value indicating that this member is sealed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsExtern">
            <summary>
            Gets value indicating that this member is extern.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsExplicitInterfaceMember">
            <summary>
            Returns true if this member is explicitly declared interface member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.IsIterator">
            <summary>
            Returns true if this method or property is iterator (VB only).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.Signature">
            <summary>
            Gets member signature.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberElement.HasDelimitedBlock">
            <summary>
            Returns true if this member owns a delimited block of code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.IsConst">
            <summary>
            Defines if field is constant
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.Expression">
            <summary>
            Get initialization expression
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.IsBitField">
            <summary>
            Gets bit field size.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.BitFieldSize">
            <summary>
            Gets bit field size.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.IsVolatile">
            <summary>
            Returns true if variabe is volatile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.IsObjectCreationInit">
            <summary>
            Returns true if this field is object creation initialization.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.IsFixedSizeBuffer">
            <summary>
            Returns true if this element is a fixed size buffer declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.IsWithEvents">
            <summary>
            Returns true if variabe is WithEvents (Visual Basic).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.NodeLink">
            <summary>
            Gets element node link for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFieldElement.HasNodeLink">
            <summary>
            Returns true if this element has element node link.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IEnumElement">
            <summary>
            Represents a enum element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEnumElement.ValueExpression">
            <summary>
            Gets value expression for current enum element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IEventElement">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEventElement.AddMethod">
            <summary>
            Gets Add method for event
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEventElement.RemoveMethod">
            <summary>
            Gets Remove method for event
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEventElement.RaiseMethod">
            <summary>
            Gets Raise method for event
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEventElement.Initializer">
            <summary>
            Gets event initializer for field-style
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEventElement.ImplicitElements">
            <summary>
            Gets implicit elements (field and delegate event handler) for VB event with parameters
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IEventElementModifier">
            <summary>
            Interface that allows event modification.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMemberElementModifier">
            <summary>
            Interface that allows member modifications.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Sets member visibility.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsStatic(System.Boolean)">
            <summary>
            Sets value indicating that this member is static.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsAbstract(System.Boolean)">
            <summary>
            Sets value indicating that this element is abstract.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsSealed(System.Boolean)">
            <summary>
            Sets value indicating that this member is sealed.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsVirtual(System.Boolean)">
            <summary>
            Sets value indicating that this member is virtual.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsOverride(System.Boolean)">
            <summary>
            Sets value indicating that this member override base element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsExtern(System.Boolean)">
            <summary>
            Sets value indicating that this member is extern.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMemberElementModifier.SetIsReadOnly(System.Boolean)">
            <summary>
            Sets value indicating that this member is read-only.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IEventElementModifier.SetAddMethod(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Sets Add method for event
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IEventElementModifier.SetRemoveMethod(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Sets Remove method for event
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodElement">
            <summary>
            Represents a method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMethodElement.IsExtensionMethod">
            <summary>
            Returns true if element is extension method.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMethodElement.IsMainProcedure">
            <summary>
            Determines whether this method is the main prodedure of an application.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMethodElement.IsInitializeComponent">
            <summary>
            Determines whether this method is InitializeComponent method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsConstructor">
            <summary>
            Returns true if element is constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsAsynchronous">
            <summary>
            True if this method is asynchronous.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsSerializationConstructor">
            <summary>
            Returns true if element is a serialization constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsDestructor">
            <summary>
            Returns true if element is destructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsTypeInitializer">
            <summary>
            Returns true if element is instance constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.HasImplicitVariable">
            <summary>
            Returns true if element has Implcit variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.MethodType">
            <summary>
            The type of this method (e.g., Constructor, Destructor, Procedure or Function).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.ImplicitVariable">
            <summary>
            Returns implicit variable of method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsMemberFunctionConst">
            <summary>
            Gets or sets member function const flag. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsClassOperator">
            <summary>
            Returns true if this method is operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsImplicitCast">
            <summary>
            Returns true if this method is implicit cast operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsExplicitCast">
            <summary>
            Returns true if this method is explicit cast operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.IsWebMethod">
            <summary>
            Returns true if element is extension method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.HandlesExpressions">
            <summary>
            Gets handles expressions. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodElement.ImplementsExpressions">
            <summary>
            Gets implements expressions. 
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodPrototypeElement">
            <summary>
            Represents a method prototype.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodGroupElement">
            <summary>
            Represents a method group.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodGroupElement.Elements">
            <summary>
            Gets all method group elements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodElementModifier">
            <summary>
            Allows method modifications.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMethodElementModifier.SetIsClassOperator(System.Boolean)">
            <summary>
            Sets value indicating that this method is operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMethodElementModifier.SetIsImplicitCast(System.Boolean)">
            <summary>
            Sets value indicating that this method is implicit cast operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IMethodElementModifier.SetIsExplicitCast(System.Boolean)">
            <summary>
            Sets value indicating that this method is explicit cast operator.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IParameterElement">
            <summary>
            Represents a parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IParameterElement.Direction">
            <summary>
            Gets argument direction for parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IParameterElement.IsOptional">
            <summary>
            Returns true if parameter is optional.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IParameterElement.IsParamArray">
            <summary>
            Returns true if parameter is defined as param array.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IParameterElement.IsArgList">
            <summary>
            Returns true if parameter is __arglist.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IParameterElement.DefaultValue">
            <summary>
            Gets default value of the optional parameter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IParameterModifier">
            <summary>
            Interface that allows parameter modification.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IParameterElementModifier">
            <summary>
            Interface that allows parameter modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IParameterElementModifier.SetType(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Sets parameter type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IParameterElementModifier.SetDirection(DevExpress.CodeRush.StructuralParser.ArgumentDirection)">
            <summary>
            Sets argument direction for parameter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IPropertyElement">
            <summary>
            Represents a property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPropertyElement.IsIndexed">
            <summary>
            Retruns true if property is indexer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPropertyElement.IsAutoImplemented">
            <summary>
            Returns true is property is autoimplemented.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPropertyElement.GetMethod">
            <summary>
            Returns property getter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IPropertyElement.SetMethod">
            <summary>
            Returns property setter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IPropertyElementModifier">
            <summary>
            Interface that allows property modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IPropertyElementModifier.SetGetMethod(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Sets property getter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IPropertyElementModifier.SetSetMethod(DevExpress.CodeRush.StructuralParser.IMethodElement)">
            <summary>
            Sets property setter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAggregateExpression">
            <summary>
            Represents AggregateExpression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFromExpression">
            <summary>
            Represents FromExpression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IQueryExpressionBase">
            <summary>
            Represents IQueryExpressionBase.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFromExpression.InExpressions">
            <summary>
            Gets in expressions for current element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAggregateExpression.QueryOperators">
            <summary>
            Gets child query operators for current element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAggregateExpression.IntoElements">
            <summary>
            Gets aggregate into elements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAnonymousTypeReferenceExpression">
            <summary>
            Anonymous type reference expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAnonymousTypeReferenceExpression.AnonymousType">
            <summary>
            Gets anonymous type this expression references.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDistinctExpression">
            <summary>
            Represents IIntoExpression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IEqualsExpression">
            <summary>
            Binary operator expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IExtensionMethodParam">
            <summary>
            Represents ExtensionMethodParam.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IGroupByExpression">
            <summary>
            Represents GroupExpression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IGroupExpression">
            <summary>
            Represents GroupExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IGroupExpression.GroupBy">
            <summary>
            Gets GroupBy expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IImplicitVariable">
            <summary>
            Represents ImplicitVariable.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IInExpression">
            <summary>
            Represents IIntoExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IInExpression.QueryIdent">
            <summary>
            Gets or sets QueryIdent for current element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IInExpression.Expression">
            <summary>
            Gets or sets expression for current element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIntoExpression">
            <summary>
            Represents IIntoExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IIntoExpression.IntoTarget">
            <summary>
            Gets into target for current element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IJoinExpression">
            <summary>
            Represents JoinExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IJoinExpression.InExpression">
            <summary>
            Gets in-expression for current expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IJoinExpression.JoinExpressions">
            <summary>
            Gets nested join-expressions for current expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IJoinExpression.EqualsExpressions">
            <summary>
            Gets equals expressions for current expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IJoinIntoExpression">
            <summary>
            Represents JoinIntoExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IJoinIntoExpression.IntoElements">
            <summary>
            Gets into-elements collection for current expression
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILambdaExpression">
            <summary>
            Represents LambdaExpression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILambdaImplicitlyTypedParam">
            <summary>
            Represents LambdaImplicitlyTypedParam.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILetExpression">
            <summary>
            Represents LetExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ILetExpression.Declarations">
            <summary>
            Contains declarations for Let clause.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMemberInitializerExpression">
            <summary>
            Represents MemberInitializerExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMemberInitializerExpression.Value">
            <summary>
            Gets member initializer value.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IOrderByExpression">
            <summary>
            Represents OrderByExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IOrderByExpression.Orderings">
            <summary>
            Gets order expressions.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IOrderingExpression">
            <summary>
            Represents OrderingExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IOrderingExpression.Ordering">
            <summary>
            Gets ordering for current expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IOrderingExpression.Order">
            <summary>
            Gets order type for current expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IQueryExpression">
            <summary>
            Represents SelectExpression
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IQueryExpression.Translation">
            <summary>
            Gets query expression translation.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IQueryIdent">
            <summary>
            Represents QueryIdent.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ISelectExpression">
            <summary>
            Represents SelectExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISelectExpression.ReturnedElements">
            <summary>
            Gets in returned expressions for current element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWhereExpression">
            <summary>
            Represents WhereExpression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IWhereExpression.WhereClause">
            <summary>
            Gets where clause for current expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAssemblyModel">
            <summary>
            Assembly model stores elements obtained from meta data.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IAssemblyModel.FindElementByFullName(System.String,System.Boolean)">
            <summary>
            Find element by full name..
            </summary>
            <param name="fullName">The element to search for.</param>
            <param name="ignoreCase">The value determining case sensitivity.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IAssemblyModel.CompleteElement(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean)">
            <summary>
            Completes the given element.
            </summary>
            <param name="element">The element to complete.</param>
            <param name="full">Pass true to fully complete the element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IAssemblyModel.CompleteElementIfNeeded(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Completes given element.
            </summary>
            <param name="element">The element to complete.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAssemblyModel.Assembly">
            <summary>
            Gets assembly reference for this assembly model.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAssemblyModel.FriendAssemblyNames">
            <summary>
            Returns friend assembly names.
            Note: Internal members from current assembly model are opened for these assemblies.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FilterDiskFiles(System.String)">
            <summary>
            Returns collection of all disc files that contain the given name.
            </summary>
            <param name="name">The name to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FilterDiskFiles(System.Collections.Specialized.StringCollection)">
            <summary>
            Returns collection of all disc files that contain the given names.
            </summary>
            <param name="names">The names to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetAllFiles">
            <summary>
            Returns collection of all disc files in current project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.ReleaseAllDiskFiles">
            <summary>
            Releases all disk files so GC could free memory.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindByFullNameInsideAssemblies(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the element with given full name inside project assemblies.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="cache">Pass true to cache element.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementsByFullNameInsideAssemblies(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the elements with given full name inside project assemblies.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="cache">Pass true to cache element.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideDefaultNamespace(System.String)">
            <summary>
            Finds an element with the given full name inside default namespace in 
            all source files of this project.
            </summary>
            <param name="name">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideDefaultNamespace(System.String,System.Boolean)">
            <summary>
            Finds an element with the given full name inside default namespace in 
            all source files of this project.
            </summary>
            <param name="name">The full name of the element to find.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideNamespace(System.String,System.String)">
            <summary>
            Finds an element with the given full name inside the specified namespace in 
            all source files of this project.
            </summary>
            <param name="namespaceFullName">The full name of the namespace to search in.</param>
            <param name="name">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideNamespace(System.String,System.String,System.Boolean)">
            <summary>
            Finds an element with the given full name inside the specified namespace in 
            all source files of this project.
            </summary>
            <param name="namespaceFullName">The full name of the namespace to search in.</param>
            <param name="name">The full name of the element to find.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideParentNamespace(System.String,System.String)">
            <summary>
            Finds a type or namespace with the given full name inside all parents of the specified namespace in 
            all source files of this project.
            </summary>
            <param name="namespaceFullName">The full name of the namespace to search in.</param>
            <param name="name">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideParentNamespace(System.String,System.String,System.Boolean)">
            <summary>
            Finds a type or namespace with the given full name inside all parents of the specified namespace in 
            all source files of this project.
            </summary>
            <param name="namespaceFullName">The full name of the namespace to search in.</param>
            <param name="name">The full name of the element to find.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideParentNamespace(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Finds a type or namespace with the given full name inside all parents of the specified namespace in 
            all source files of this project.
            </summary>
            <param name="start">Start element for search.</param>
            <param name="name">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementByFullName(System.String)">
            <summary>
            Finds a type or namespace with the given full name inside all source files of this project.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementByFullName(System.String,System.Boolean)">
            <summary>
            Finds a type or namespace with the given full name inside all source files of this project.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementByFullName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds a type or namespace with the given full name inside all source files or assembly references 
            of this project.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="searchInAssemblies">Pass true to continue the search inside assemblies if the element is not
            found inside project source files.</param>
            <param name="cache">Pass true to cache the element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementByFullName(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds a type or namespace with the given full name inside all source files or assembly references 
            of this project.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="searchInAssemblies">Pass true to continue the search inside assemblies if the element is not
            found inside project source files.</param>
            <param name="cache">Pass true to cache the element.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindTypeOrNamespaceByFullName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds a type or namespace with the given full name inside all source files or assembly references 
            of this project.
            </summary>
            <param name="fullName">The full name of the element to find.</param>
            <param name="searchInAssemblies">Pass true to continue the search inside assemblies if the element is not
            found inside project source files.</param>
            <param name="cache">Pass true to cache the element.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindAssemblyByAlias(System.String)">
            <summary>
            Finds assembly reference with the specified alias.
            </summary>
            <param name="alias">The alias of the assembly reference to find.</param>
            <returns>Assembly reference with the specified alias.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindAllAssembliesByAlias(System.String)">
            <summary>
            Finds all assembly references with the specified alias.
            </summary>
            <param name="alias">The alias of the assembly references to find.</param>
            <returns>All assembly references with the specified alias.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindElementInsideIncludes(System.String,System.String)">
            <summary>
            Finds element with the specified name inside all included files starting from the given file.
            </summary>
            <param name="filePath">The full path of the start file.</param>
            <param name="name">The name of the element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindExtensionMethods(System.String,System.String,System.Boolean)">
            <summary>
            Finds extension methods inside the specified namespace with the specified name.
            </summary>
            <param name="nameSpace">The namespace to search for extension methods.</param>
            <param name="name">The name of the extension method to search.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindExtensionMethods(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String,System.String,System.Boolean)">
            <summary>
            Finds extension methods inside the specified namespace with the specified name.
            </summary>
            <param name="resolver">The resolver to use.</param>
            <param name="nameSpace">The namespace to search for extension methods.</param>
            <param name="name">The name of the extension method to search.</param>
            <param name="isCaseSensitive">Perform case sensitive search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetFileImportedNamespaces(DevExpress.CodeRush.StructuralParser.ISourceFile)">
            <summary>
            Gets the names of all imported namespaces.
            </summary>
            <param name="file">The source file to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetModuleMembers(System.String)">
            <summary>
            Gets collection of module members with the given name.
            </summary>
            <param name="name">The name of members</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetModules(System.String)">
            <summary>
            Gets collection of modules with the given name.
            </summary>
            <param name="name">The name of modules</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetDirectlyVisibleMembersFilter">
            <summary>
            When override in derived class returns filter for elements that have directly visible
            members, e.g. Module elements in VisualBasic, Enumeration elements inside C++.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.IsBuiltInType(System.String)">
            <summary>
            Returns true if the given type name is a built-in type of the project language.
            </summary>
            <param name="name">The type name to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.IsBuiltInType(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns true if the given type name is a built-in type for the element language.
            </summary>
            <param name="element">The element to check.</param>
            <param name="name">The type name to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetFullTypeName(System.String)">
            <summary>
            Returns the full type name for the given simple name.
            </summary>
            <param name="name">The simple name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetFullTypeName(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns the full type name for the given simple name.
            </summary>
            <param name="element">The element to use.</param>
            <param name="name">The simple name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetSimpleTypeName(System.String)">
            <summary>
            Returns the simple type name for the given full name.
            </summary>
            <param name="name">The full name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetSimpleTypeName(DevExpress.CodeRush.StructuralParser.IElement,System.String)">
            <summary>
            Returns the simple type name for the given full name.
            </summary>
            <param name="element">The element to use.</param>
            <param name="name">The full name to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindDiskFile(System.String)">
            <summary>
            Returns disc file by its path.
            </summary>
            <param name="path">The path of the file to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindDiskFile(DevExpress.CodeRush.StructuralParser.ISourceFile)">
            <summary>
            Returns disc file.
            </summary>
            <param name="file">The file to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.IsCaseSensitive(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the element language is case sensitive.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindCssStylesByClassName(DevExpress.CodeRush.StructuralParser.ISourceFile,System.String,System.String)">
            <summary>
            Finds CSS styles inside the file and a included files with the specified name.
            </summary>
            <param name="file">The file to find.</param>
            <param name="styleName">The name of the CSS style to find.</param>
            <param name="ancestorName">The name of ancestor selector.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.FindCssStylesById(DevExpress.CodeRush.StructuralParser.ISourceFile,System.String,System.String)">
            <summary>
            Finds CSS styles inside the file and a included files with the specified id.
            </summary>
            <param name="file">The file to find.</param>
            <param name="id">The id of the CSS style to find.</param>
            <param name="ancestorName">The name of ancestor selector.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IProjectElement.GetAssemblyAttributes">
            <summary>
            Collects all assembly attributes defined in this project.
            </summary>
            <returns>Assembly attributes defined in this project.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.SourceModel">
            <summary>
            Gets the source model cache for this project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.HasRootNamespace">
            <summary>
            Returns true if the project element has a root namespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.RootNamespace">
            <summary>
            Gets the root namespace for the project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.IsClosed">
            <summary>
            Returns true if the project is closed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.IsCaseSensitiveLanguage">
            <summary>
            Returns true if the project language is case sensitive.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.Language">
            <summary>
            Gets the language ID for the project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.Solution">
            <summary>
            Gets solution element for this project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.Name">
            <summary>
            Gets project name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.FullName">
            <summary>
            Gets full name of the project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.HasNativeCompileOptions">
            <summary>
            Gets value indicating if project will be compiled as native application.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.HasOldSyntaxCompileOptions">
            <summary>
            Gets value indicating if project will be compiled as old syntax.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.CanUseAspImportedNamespaces">
            <summary>
            Returns true if aspx imported namespaces can be used for type resolving.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.AssemblyName">
            <summary>
            Gets name of assembly for this project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.FriendAssemblyNames">
            <summary>
            Returns friend assembly names.
            Note: Internal members from current project are opened for these assemblies.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.ImportedNamespaces">
            <summary>
            Returns namespaces implicitly imported into the project.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IProjectElement.TargetFramework">
            <summary>
            Returns target framework.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddElementType(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Adds element and its type to the cache.
            </summary>
            <param name="element">The element to add.</param>
            <param name="type">The type of the element to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetElementType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets resolved type of the given element.
            </summary>
            <param name="element">The element to resolve type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsElementType(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddResolvedElement(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Adds resolved element and it's type.
            </summary>
            <param name="element">The element to add.</param>
            <param name="type">The type of the element to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddResolvedElement(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement,System.Boolean)">
            <summary>
            Adds resolved element and it's type.
            </summary>
            <param name="element">The element to add.</param>
            <param name="type">The type of the element to add.</param>
            <param name="resolveMethodGroup">The value determining if it is necessary to resolve method group reference expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetResolvedElement(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets resolved element.
            </summary>
            <param name="element">The element to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetResolvedElement(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean)">
            <summary>
            Gets resolved element.
            </summary>
            <param name="element">The element to resolve.</param>
            <param name="resolveMethodGroup">The value determining if it is necessary to resolve method group reference expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsResolvedElement(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsResolvedElement(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to check.</param>
            <param name="resolveMethodGroup">The value determining if it is necessary to resolve method group reference expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.TryGetResolvedElement(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean,DevExpress.CodeRush.StructuralParser.IElement@)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to check.</param>
            <param name="resolveMethodGroup">The value determining if it is necessary to resolve method group reference expression.</param>
            <param name="resolvedElement">Gets resolved element from the cache.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.TryGetMetaDataElement(System.String,DevExpress.CodeRush.StructuralParser.IElement@)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="fullName">The fullname of the element to get.</param>
            <param name="resolvedElement">Gets resolved meta data element from the cache.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddElementModules(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Adds all element modules to the cache.
            </summary>
            <param name="element">The element to add.</param>
            <param name="modules">The list of modules to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetElementModules(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets element modules.
            </summary>
            <param name="element">The element to get modules for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsElementModules(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddModuleMembers(DevExpress.CodeRush.StructuralParser.IElement,System.String,DevExpress.CodeRush.StructuralParser.IElementCollection)">
            <summary>
            Adds all members to the cache.
            </summary>
            <param name="element">The element to add.</param>
            <param name="name">The element to add.</param>
            <param name="elements">The list of module members to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetModuleMembers(DevExpress.CodeRush.StructuralParser.IElement,System.String,System.Boolean)">
            <summary>
            Gets element modules.
            </summary>
            <param name="element">The element to add.</param>
            <param name="name">The element to add.</param>
            <param name="caseSensitive">The case sensitive.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsModuleMembers(DevExpress.CodeRush.StructuralParser.IElement,System.String,System.Boolean)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to add.</param>
            <param name="name">The element to add.</param>
            <param name="caseSensitive">The case sensitive.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddResolvedMethodGroup(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Adds resolved element and it's type.
            </summary>
            <param name="element">The element to add.</param>
            <param name="type">The type of the element to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetResolvedMethodGroup(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets resolved element.
            </summary>
            <param name="element">The element to resolve.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsResolvedMethodGroup(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="element">The element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddMetaDataElement(System.String,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Adds resolved meta data element.
            </summary>
            <param name="fullName">The fullname of the element to add.</param>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetMetaDataElement(System.String)">
            <summary>
            Gets resolved meta data element.
            </summary>
            <param name="fullName">The fullname of the element to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsMetaDataElement(System.String)">
            <summary>
            Returns true if the given element is contained inside the cache.
            </summary>
            <param name="fullName">The fullname of the element to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.AddTypeRef(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Adds type reference element.
            </summary>
            <param name="type">The type to add.</param>
            <param name="reference">The reference to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetTypeRef(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets type reference for the given element.
            </summary>
            <param name="type">The type to get.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.GetSiblingHelper(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Gets sibling helper for the given element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IResolvingCache.ContainsTypeRef(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns true if the given type is contained inside the cache.
            </summary>
            <param name="type">The type to check.</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ISolutionElement">
            <summary>
            Represents solution element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISolutionElement.Projects">
            <summary>
            Gets all projects inside the solution.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISolutionElement.ResolvingCache">
            <summary>
            Gets solution resolving cache.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILabelStatement">
            <summary>
            Represents Label element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IGotoStatement">
            <summary>
            Represents GotoStatement element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFlowBreakStatement">
            <summary>
            Represents FlowBreak element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IExitStatement">
            <summary>
            Represents Exit element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IBlockStatement">
            <summary>
            Represents "Block" statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFakeStatement">
            <summary>
            Base interface for all statements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAbortStatement">
            <summary>
            Represents FlowBreak element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAddHandlerStatement">
            <summary>
            Represents add handler statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IHandlerStatement">
            <summary>
            Base class for add/remove handler statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHandlerStatement.Expression">
            <summary>
            Gets handler expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IHandlerStatement.AddressExpression">
            <summary>
            Gets handler address of expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAssignmentStatement">
            <summary>
            Base class for add/remove handler statements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAssignmentStatement.LeftSide">
            <summary>
            Gets left side of the assignment.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAssignmentStatement.Expression">
            <summary>
            Gets assignment expression (right side).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAssignmentStatement.AssignmentOperator">
            <summary>
            Gets or sets assignment operator type
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IBreakStatement">
            <summary>
            Represents Break element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ICaseClausesList">
            <summary>
            Represents "case" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICaseClausesList.Clauses">
            <summary>
            Gets clauses for current case clasuses list.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ICaseClauseStatement">
            <summary>
            Represents "case clause" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICaseClauseStatement.StartExpression">
            <summary>
            Gets start expression for case clause.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICaseClauseStatement.EndExpression">
            <summary>
            Gets end expression for case clause.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ICaseStatement">
            <summary>
            Represents "case" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICaseStatement.Expression">
            <summary>
            Gets case statement expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICaseStatement.CaseClauses">
            <summary>
            Gets case clauses for current case statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICaseStatement.IsDefault">
            <summary>
            Returns true if this case block is the default one.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ICatchStatement">
            <summary>
            Represents "catch" statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IConditionalStatement">
            <summary>
            Base interface for all statements with conditional check.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ICatchStatement.ExceptionVariable">
            <summary>
            Gets exception variable of the statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IContinueStatement">
            <summary>
            Represents Continue element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDoStatement">
            <summary>
            Represents "with" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IDoStatement.Condition">
            <summary>
            Gets with statement expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElseIfStatement">
            <summary>
            Represents "ElseIf" statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IIfStatement">
            <summary>
            Represents "if" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IIfStatement.Condition">
            <summary>
            Gets exception variable of the statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IIfStatement.ElseStatement">
            <summary>
            Gets matching else statment for this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IIfStatement.HasElseStatement">
            <summary>
            True if this if-block has a matching else statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElseStatement">
            <summary>
            Represents "if" statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFinallyStatement">
            <summary>
            Represents "finally" statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IFixedStatement">
            <summary>
            Represents "fixed" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IFixedStatement.Initializers">
            <summary>
            Gets initializers for current statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IForEachStatement">
            <summary>
            Represents "with" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForEachStatement.LoopVariable">
            <summary>
            Gets iteration variable of the statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForEachStatement.Expression">
            <summary>
            Gets expression of the statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForEachStatement.NextExpression">
            <summary>
            Gets next expression of the statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IForStatement">
            <summary>
            Represents "with" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForStatement.Condition">
            <summary>
            Gets condition for statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForStatement.Initializers">
            <summary>
            Gets or sets initializers for current statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForStatement.Incrementors">
            <summary>
            Gets incrementors for current statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForStatement.ToExpression">
            <summary>
            Gets to expression for statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForStatement.StepExpression">
            <summary>
            Gets step expression for statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IForStatement.NextExpressions">
            <summary>
            Gets next expression for statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ILockStatement">
            <summary>
            Represents "lock" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ILockStatement.Expression">
            <summary>
            Gets with statement expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMethodCallStatement">
            <summary>
            Represents method call statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IMethodCallStatement.Arguments">
            <summary>
            Gets arguments passed to method call expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IRemoveHandlerStatement">
            <summary>
            Represents remove handler statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IReturnStatement">
            <summary>
            Represents ReturnStatement element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IReturnStatement.Expression">
            <summary>
            Gets expression for current statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ISwitchStatement">
            <summary>
            Represents "case" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISwitchStatement.Expression">
            <summary>
            Gets case statement expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ISwitchStatement.CaseStatements">
            <summary>
            Gets case statements for current switch statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IThrowStatement">
            <summary>
            Represents ReturnStatement element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IThrowStatement.Expression">
            <summary>
            Gets expression for current statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITryStatement">
            <summary>
            Represents "try" statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUsingDeclarationStatement">
            <summary>
            Using declaration statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUsingDeclarationStatement.NamespaceReference">
            <summary>
            Gets namespace reference for this using declaration statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUsingStatement">
            <summary>
            Represents "using" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IUsingStatement.Initializers">
            <summary>
            Gets initializers for current statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWhileStatement">
            <summary>
            Represents "with" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IWhileStatement.Condition">
            <summary>
            Gets with statement expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IWithStatement">
            <summary>
            Represents "with" statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IWithStatement.Expression">
            <summary>
            Gets with statement expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IYieldBreakStatement">
            <summary>
            Represents yield break statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IYieldStatement">
            <summary>
            Represents yield element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IYieldReturnStatement">
            <summary>
            Represents yield return statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IYieldReturnStatement.Expression">
            <summary>
            Gets expression for current statement.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IAnonymousTypeElement">
            <summary>
            Reresents type element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeElement">
            <summary>
            Reresents type element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetAllDescendants">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetAllDescendants(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetAllDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetAllDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetBaseType">
            <summary>
            Gets first base type for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetBaseType(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Gets first base type for this element using the given
            resolver object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetBaseTypes">
            <summary>
            Gets base types for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetBaseTypes(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Gets base types for this element using the given
            resolver object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetDescendants">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetDescendants(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.GetDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.Is(System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="parentElement">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.Is(System.Type)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="parentElement">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.Type)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified Type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.DescendsFrom(System.String)">
            <summary>
            Returns true if this type element descends from the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.DescendsFrom(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element descends from the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="parentElement">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.DescendsFrom(System.Type)">
            <summary>
            Returns true if this type element descends from the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element descends from the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element descends from the specified ITypeElement.
            Returns false otherwise.		
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="parentElement">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.Type)">
            <summary>
            Returns true if this type element descends from the specified Type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMember(System.String)">
            <summary>
            Returns member with the given name if it is declared inside this type or inside any
            of it's ancestors.
            </summary>
            <param name="name">The name of member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMember(System.String,System.Boolean)">
            <summary>
            Returns member with the given name if it is declared inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of member to find.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMember(System.String,DevExpress.CodeRush.StructuralParser.IElementFilter,System.Boolean)">
            <summary>
            Returns member with the given name if it is declared inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of member to find.</param>
            <param name="filter">The filter to use.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMembers(System.String)">
            <summary>
            Returns all members with the given name inside this type or inside any
            of it's ancestors.
            </summary>
            <param name="name">The name of members to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMembers(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of members to find.</param>
            <param name="resolver">The source tree resolver</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMembers(System.String,System.Boolean)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of members to find.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElement.FindMembers(System.String,DevExpress.CodeRush.StructuralParser.IElementFilter,System.Boolean)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of members to find.</param>
            <param name="filter">The filter to use.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeElement.PrimaryAncestor">
            <summary>
            Gets type reference to base type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeElement.SecondaryAncestors">
            <summary>
            Gets type references to implemented interfaces.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeElement.Members">
            <summary>
            Gets type members.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeElement.IsTypeParameter">
            <summary>
            Returns true if current type element was created for type parameter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IArrayNameModifier">
            <summary>
            Represents array modifier.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IArrayTypeElement">
            <summary>
            Represents array type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAttributeElement.Arguments">
            <summary>
            Gets arguments passed to method call expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAttributeElement.Qualifier">
            <summary>
            Gets attribute qualifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAttributeElement.HasTargetNode">
            <summary>
            Defines if attribute has target node.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IAttributeSectionElement.HasTargetNode">
            <summary>
            Defines if attribute has target node.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IClassElement">
            <summary>
            Represents class.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IExternDeclaration">
            <summary>
            Represents extern declaration.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDelegateElement">
            <summary>
            Represents a delegate.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IDynamicTypeElement">
            <summary>
            Reresents type element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IElaboratedTypeElement">
            <summary>
            Elaborated type declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElaboratedTypeElement.ElaboratedKind">
            <summary>
            Gets elaborated type kind.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IElaboratedTypeElement.Expression">
            <summary>
            Gets elaborated type expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IEnumerationElement">
            <summary>
            Represents enumeration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IEnumerationElement.UnderlyingType">
            <summary>
            Gets type name for enumeration elements.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IInterfaceClassElement">
            <summary>
            Represents interface class.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IInterfaceElement">
            <summary>
            Represents interface.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IInterfaceStructElement">
            <summary>
            Represents interface struct.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IModuleElement">
            <summary>
            Represents interface.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IRefClassElement">
            <summary>
            Represents ref class.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IRefStructElement">
            <summary>
            Represents ref struct.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IStructElement">
            <summary>
            Represents struct.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeElementModifier">
            <summary>
            Allows type element modification.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElementModifier.SetPrimaryAncestor(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Sets type reference to base type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElementModifier.AddSecondaryAncestor(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Adds type reference to implemented interfaces.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElementModifier.AddMember(DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Adds a new member.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ITypeElementModifier.RemoveMember(DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Removes the specified member.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IUnionElement">
            <summary>
            Represents union.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IValueClassElement">
            <summary>
            Represents value class.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IValueStructElement">
            <summary>
            Represents value struct.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeParameter">
            <summary>
            Represents generic type parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeParameter.IsActivated">
            <summary>
            Returns true if generic type parameter has
            been activated with some type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeParameter.ActivatedType">
            <summary>
            Gets type for the activated type parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeParameter.Constraints">
            <summary>
            Constraints of current TypeParameter
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITypeParameter.Direction">
            <summary>
            Get direction of 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ITemplateParameter.DefaultValue">
            <summary>
            Gets default value of the template parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INestedTemplateParameter.Parameters">
            <summary>
            Gets the template parameters.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IClassTypeParameterConstraint">
            <summary>
            Represents generic class type parameter constraint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITypeParameterConstraint">
            <summary>
            Represents generic type parameter constraint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.INamedTypeParameterConstraint">
            <summary>
            Represents generic named type parameter constraint.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.INamedTypeParameterConstraint.TypeReference">
            <summary>
            Gets type reference
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.INewTypeParameterConstraint">
            <summary>
            Represents generic named type parameter constraint.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IStructTypeParameterConstraint">
            <summary>
            Represents generic struct type parameter constraint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgCodeGenSetting.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgParserRule.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgParserDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgResolver.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgFactor.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgCode.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgComplexFactor.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgTerminal.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgTokenAlias.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgTokenDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgTokensSection.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgTokenNameSection.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgProductions.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AtgFrame.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CodeElement">
            <summary>
            Ancestor class to all code elements (e.g., everything that will be compiled, 
            but not including support elements such as comments, XML Doc comments,
            and attributes).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.#ctor">
            <summary>
            Creates CodeElement instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.TransferCommentsTo(DevExpress.CodeRush.StructuralParser.CodeElement)">
            <summary>
            Transfers all comments from this element to the given one.
            </summary>
            <param name="element">The element to transfer comments to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.TransferXmlDocCommentTo(DevExpress.CodeRush.StructuralParser.CodeElement)">
            <summary>
            Transfers documentation comment from this element to the given one.
            </summary>
            <param name="element">The element to transfer documentation comment to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.SetDocComment(DevExpress.CodeRush.StructuralParser.XmlDocComment)">
            <summary>
            Sets xml doc comment associated with this element.
            </summary>
            <param name="value">The comment to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.SetAttributes(DevExpress.CodeRush.StructuralParser.LanguageElementCollection)">
            <summary>
            Sets attributes attached to this element.
            </summary>
            <param name="attributes">The attributes to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.SetAttributes(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Reads attributes from this element's token queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.InsertSupportElement(DevExpress.CodeRush.StructuralParser.SupportElement,DevExpress.CodeRush.StructuralParser.NodeList@,System.Int32@)">
            <summary>
            Inserts the specified support element into this element.
            </summary>
            <param name="element">The element to insert.</param>
            <param name="nodeList">This out parameter will be set to the parenting node list that owns the newly-inserted element.</param>
            <param name="index">The index of the element in the parenting nodeList.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.GetSupportElementNodeListAndIndex(DevExpress.CodeRush.StructuralParser.SupportElement,DevExpress.CodeRush.StructuralParser.NodeList@,System.Int32@)">
            <summary>
            Gets node list and index where support element should be added.
            </summary>
            <param name="element">The element being add.</param>
            <param name="nodeList">The node list where to add support element.</param>
            <param name="index">The index within the node list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.CollectAttributes(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Collects atributes from the given list of attribute sections.
            </summary>
            <param name="sections">The list of attribute sections to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.AddAttributeSections(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Adds attribute sections from the given list to this element.
            </summary>
            <param name="sections">The attribute sections to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.GetLanguageElementLink(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Find data in the Nodes by the old reference.		
            </summary>
            <param name="source">The source element to find data in the new Nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.GetSupportElementLink(DevExpress.CodeRush.StructuralParser.SupportElement)">
            <summary>
            Find data in the Nodes by the old reference.		
            </summary>
            <param name="source">The source element to find data in the new Nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.AddSupportElement(DevExpress.CodeRush.StructuralParser.SupportElement)">
            <summary>
            Adds SupportElement to this element and sets its target.
            </summary>
            <param name="element">The supporting element to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.AddComment(DevExpress.CodeRush.StructuralParser.Comment)">
            <summary>
            Adds comment to a list of all comments.
            </summary>
            <param name="comment">The comment to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.AddComment(DevExpress.CodeRush.StructuralParser.Comment,System.Boolean)">
            <summary>
            Adds comment to a list of all comments.
            </summary>
            <param name="comment">The comment to add.</param>
            <param name="useSorting"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.RemoveComment(DevExpress.CodeRush.StructuralParser.Comment)">
            <summary>
            Removes Comment from a list of all comments.
            </summary>
            <param name="element">The comment to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.AddCommentNode(DevExpress.CodeRush.StructuralParser.Comment)">
            <summary>
            Adds comment to a list of all comments.
            </summary>
            <param name="comment">The comment to add.</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CodeElement.FindAttribute(System.String)">
            <summary>
            Searches for the attribute with the given name.
            </summary>
            <param name="name">The name of the attribute to find.</param>
            <returns>Attribute instance with the given name</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.AllExpressions">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all expressions appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.Attributes">
            <summary>
            Gets an ArrayList of all Attributes for this element. This list is created on demand, 
            so simply accessing this property will create an empty list if one does not 
            exist. You can use the AttributeCount property to get a count on attributes without 
            triggering a demand-load. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.AttributeCount">
            <summary>
            Gets the number of Attributes associated with this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.AttributeSections">
            <summary>
            Gets a NodeList of AttributeSections for this element. This list is created on demand, 
            so simply accessing this property will create an empty list if one does not exist. 
            You can use the AttributeSectionsCount property to get a count on attribute sections 
            without triggering a demand-load. 
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.AttributeSectionsCount">
            <summary>
            Gets the number of AttributeSections associated with this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.Comments">
            <summary>
            A collection of comments bound to this element. This list is created on demand, 
            so simply accessing this property will create an empty list if it does not 
            exist. To check the comment count without creating an empty collection, use the 
            CommentCount property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.CommentCount">
            <summary>
            Gets the number of comments bound to this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.DocComment">
            <summary>
            Gets xml doc comment associated with this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.FirstNode">
            <summary>
            Gets the first child or the first support element (Comment, Attribute, or XMLDocComment) 
            belonging to this node, whichever one appears closer to the top of the file.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CodeElement.LastNode">
            <summary>
            Gets the last child or the last support element (Comment, Attribute, or XMLDocComment) 
            belonging to this node, whichever one appears closer to the end of the file.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CompilerDirectiveCollection">
            <summary>
            A collection of compiler directives.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CompilerDirectiveCollection.Add(DevExpress.CodeRush.StructuralParser.CompilerDirective)">
            <summary>
            Adds the specified CompilerDirective to the collection.
            </summary>
            <param name="directive">The CompilerDirective to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CompilerDirectiveCollection.Remove(DevExpress.CodeRush.StructuralParser.CompilerDirective)">
            <summary>
            Removes the specified CompilerDirective from the collection.
            </summary>
            <param name="directive">The CompilerDirective to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CompilerDirectiveCollection.Find(System.String)">
            <summary>
            Finds and returns the CompilerDirective matching the specified name. Returns null 
            if a match was not found.
            </summary>
            <param name="directive">The name of the CompilerDirective to find.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CompilerDirectiveCollection.Item(System.Int32)">
            <summary>
            Gets the CompilerDirective at the specified index.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ConditionalParentingStatement">
            <summary>
            A statement that can parent other statements, plus it 
            adds a conditional check (increasing Cyclomatic Complexity
            by one).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.ParsePostponedTokens">
            <summary>
            Parses previously stored tokens.
            Descendants should override to implement language
            specific parsing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.GetBlockCodeRange(System.Boolean)">
            <summary>
            Returns source range of the child code block.
            </summary>
            <param name="checkRegions">The value determining if region directives contained inside this node should be included into result block code.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.GetBlockCodeRange(System.Boolean,System.Boolean)">
            <summary>
            Returns source range of the child code block.
            </summary>
            <param name="checkRegions">The value determining if region directives contained inside this node should be included into result block code.</param>
            <param name="checkDirectives">The value determining if compiler directives contained inside this node should be included into result block code.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.HasDelimitedBlock">
            <summary>
            Returns true if this node owns a delimited block of code. For example, 
            in C#, a Method body is delimited by "{" and "}" characters. Similarly, 
            if-blocks, while-loops, for-loops and other control flow blocks may own 
            a delimited block of code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.BlockStart">
            <summary>
            The position of the start delimiter of a blocked pair. In C#, this will 
            mark the position of the "{" for a node which owns such a block. Use the 
            HasDelimitedBlock property to determine if a node has a delimited 
            block of code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.BlockEnd">
            <summary>
            The position of the end delimiter of a blocked pair. In C#, this will 
            mark the position of the "}" for a node which owns such a block. Use the 
            HasDelimitedBlock property to determine if a node has a delimited 
            block of code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.BlockCodeRange">
            <summary>
            Gets the range of code inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.ExtendedBlockCodeRange">
            <summary>
            Gets the range of code inside this element, including region and compiler directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.BlockRange">
            <summary>
            Gets block range including block delimiters.
            If BlockType is not equal to DelimiterBlockType.Brace then BlockCodeRange value is returned.
            BlockCodeRange is returned in this case because token delimiters can not be included into block range
             (token delimiters belong to statement itself).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelimiterCapableBlock.BlockType">
            <summary> 
            The type of this delimited block. If the result is  
            DelimiterBlockType.Brace, then this block is delimited by  
            braces or another single-character delimiter (BlockStart  
            and BlockEnd properties will point to these braces). If  
            the result is DelimiterBlockType.Token, then this block is  
            delimited by multi-character tokens (e.g., "For" and  
            "Next ..." in VB) and the BlockEnd property will  
            point to the *start* of the ending tokens (e.g., the "N" in  
            "Next ..."). 
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Statement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Statement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParentingStatement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParentingStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParentingStatement.GetUnusedDeclarations">
            <summary>
            Gets a collection of all unused declarations within the specified scope.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParentingStatement.SetParensRange(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets parens range.
            </summary>		
            <param name="parenOpen">Open paren token</param>
            <param name="parenClose">Close paren token</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParentingStatement.SetParensRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets parens range.
            </summary>
            <param name="range">The SourceRange to set</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParentingStatement.HasBlock">
            <summary>
            True if this language element contains a block of code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParentingStatement.IsBreakable">
            <summary>
            True if this statement is a loop or a switch statement that 
            can be broken by a flow-break keyword (e.g., break).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParentingStatement.AllStatements">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all statements appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParentingStatement.AllVariables">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all variables appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParentingStatement.AllFlowBreaks">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all flow breaks appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParentingStatement.ParensRange">
            <summary>
            Returns range of parens.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalParentingStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ConditionalParentToSingleStatement">
            <summary>
            A statement that can parent a single statement, plus it 
            adds a conditional check (increasing Cyclomatic Complexity
            by one).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParentToSingleStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalParentToSingleStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.DelimiterBlockType.Brace">
            <summary> 
            Block is delimited by braces (e.g., "{" and "}" in C#), or another  
            single-character delimiter. 
            </summary> 
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.DelimiterBlockType.Token">
            <summary> 
            Block is delimited by tokens (e.g., "For" and "Next ..." in VB). 
            If this is the delimiter block type, the BlockEnd property will  
            point to the start of the ending tokens (e.g., the "N" in  
            "Next ..."). 
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ElementList">
            <summary>
            A list of LanguageElements.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementList.#ctor">
            <summary>
            Creates a new instance of ElementList.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementList.#ctor(DevExpress.CodeRush.StructuralParser.LanguageElementCollection)">
            <summary>
            Creates a new instance of ElementList.
            </summary>
            <param name="list">The LanguageElementCollection to add to this instance.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementList.#ctor(DevExpress.CodeRush.StructuralParser.NodeList)">
            <summary>
            Creates a new instance of ElementList.
            </summary>
            <param name="list">The LanguageElementCollection to add to this instance.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementList.#ctor(DevExpress.CodeRush.StructuralParser.NodeList,System.Boolean)">
            <summary>
            Creates a new instance of ElementList.
            </summary>
            <param name="list">The LanguageElementCollection to add to this instance.</param>
            <param name="setParent">Pass true to set parent for added nodes.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementList.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Creates a deep copy of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementList.ElementType">
            <summary>
            Gets type of this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IMarkupElement">
            <summary>
            Represents a HTML or XML specific markup element(element, attribute etc.).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElementCollectionBase.GetRange">
            <summary>
            Returns combined source range for all elements inside the collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElementCollection.Sort">
            <summary>
            Sorts this collection by line number. LanguageElements closer to the top of the file are 
            listed first.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElementCollection.SortReverse">
            <summary>
            Sorts this collection by line number. LanguageElements closer to the end of the file are 
            listed first. This sort arranges LanguageElements in the opposite order of Sort.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElementCollection.RemoveElementsInRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Removes all LanguageElements in the specified range from this list.
            </summary>
            <param name="range">The SourceRange containing LanguageElements to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LanguageElementCollection.DeepClone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this node list. All elements inside the list must implement
            ICloneable, otherwise exception will be thrown.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.LanguageElementList">
            <summary>
            Summary description for LanguageElementList.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.IsParsing">
            <summary>
            Gets or sets flag indicating that on demand parsing
            is in progress.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.Comments">
            <summary>
            Gets comment collection of all postponed comments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.UnparsedCode">
            <summary>
            Gets or sets unparsed code.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.RegionContext">
            <summary>
            Gets or sets region context.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.HasUnparsedCode">
            <summary>
            Returns true if this element holds comments to be parsed on demand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.HasComments">
            <summary>
            Returns true if this element holds comments to be parsed on demand.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PostponedParsingData.Parser">
            <summary>
            Gets or sets parser to use for posponed parsing.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirectiveCollection.Find(System.String)">
            <summary>
            Finds the specified named region. Searches top-level regions and child regions (e.g., regions within regions).
            </summary>
            <param name="aRegionDirective">The name of the region to find.</param>
            <returns>Returns the specified RegionDirective, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirectiveCollection.Find(DevExpress.CodeRush.StructuralParser.RegionDirective)">
            <summary>
            Finds the specified region. Searches only top-level regions.
            </summary>
            <param name="region">The region to find.</param>
            <returns>Returns the specified RegionDirective, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirectiveCollection.Contains(System.String)">
            <summary>
            Determines whether a specified named region exists.
            </summary>
            <param name="aRegionDirective">The name of the region to find.</param>
            <returns>Returns true if found. Otherwise returns false.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirectiveCollection.Contains(DevExpress.CodeRush.StructuralParser.RegionDirective)">
            <summary>
            Determines whether a specified region exists.
            </summary>
            <param name="region">The region to find.</param>
            <returns>Returns true if found. Otherwise returns false.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.RegionDirectiveCollection.Item(System.Int32)">
            <summary>
            Indexer to top-level regions in this file.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SupportElement">
            <summary>
            Base class for LanguageElements that support sibling LanguageElements. 
            XmlDocComments, Comments, and Attributes are all descendants of this 
            class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SupportElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SupportElement.SetTarget(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Sets the TargetNode property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElement.TargetNode">
            <summary>
            Gets the target of the SupportElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElement.Position">
            <summary>
            Gets or sets the position of this SupportElement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.Attributes">
            <summary>
            Gets an ArrayList of all Attributes for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.AttributeCount">
            <summary>
            Gets the number of Attributes associated with this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.AttributeSections">
            <summary>
            Gets an ArrayList of AttributeSections for this element. This list is created on demand, 
            so simply accessing this property will create an empty list if it does not 
            exist.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.AttributeSectionsCount">
            <summary>
            Gets the number of AttributeSections associated with this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.InnerComments">
            <summary>
            A collection of comments bound to this element. This list is created on demand, 
            so simply accessing this property will create an empty list if it does not 
            exist. To check the comment count without creating an empty collection, use the 
            CommentCount property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.CommentCount">
            <summary>
            Gets the number of comments bound to this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SupportElements.DocComment">
            <summary>
            Gets xml doc comment associated with this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.TextString">
            <summary>
            TextString element represents text string in a language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextString.#ctor">
            <summary>
            Creates new TextString instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextString.#ctor(System.Boolean)">
            <summary>
            Creates new TextString instance.
            </summary>
            <param name="isVerbatim">The value determining if the string is verbatim.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextString.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new TextString instance.
            </summary>
            <param name="text">The string text.</param>
            <param name="isVerbatim">The value determining if the string is verbatim.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextString.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextString.GetPrimitiveExpression">
            <summary>
            Gets PrimitiveExpression corresponding to this TextString object.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextString.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TextString.History">
            <summary>
            Gets DocumentHistorySlice associated with this document element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TextString.EscapedValue">
            <summary>
            Gets escaped value of the string.
            (E.g. for C# it is string value without @ prefix.)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TextString.IsVerbatim">
            <summary>
            Returns true if this string is verbatim.
            (E.g. for C# it is string value with @ prefix.)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TextString.PrimitiveExpression">
            <summary>
            Gets PrimitiveExpression corresponding to this TextString object.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TextString.ElementType">
            <summary>
            Gets language element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.TextStringCollection">
            <summary>
            Collection of TextStrings.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.#ctor">
            <summary>
            Creates a new instance of the TextStringCollection class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.Add(DevExpress.CodeRush.StructuralParser.TextString)">
            <summary>
            Add text string to the collection.
            </summary>
            <param name="s">The text string to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.AddUnique(DevExpress.CodeRush.StructuralParser.TextString)">
            <summary>
            Add text string to the collection.
            This method won't add the text string into the collection,
            if there is already text string with the same range added.
            </summary>
            <param name="s">The text string to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.Remove(DevExpress.CodeRush.StructuralParser.TextString)">
            <summary>
            Removes text string from the collection.
            </summary>
            <param name="s">The string to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.Find(System.String)">
            <summary>
            Finds the specified text string.
            </summary>
            <param name="s">The text string to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.Find(DevExpress.CodeRush.StructuralParser.TextString)">
            <summary>
            Finds the specified text string.
            </summary>
            <param name="s">The text string to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TextStringCollection.Contains(DevExpress.CodeRush.StructuralParser.TextString)">
            <summary>
            Returns true if the given string is contained 
            inside the collection.
            </summary>
            <param name="s">The text string to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TextStringCollection.Item(System.Int32)">
            <summary>
            Gets text string at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Comment.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Comment.GetFirstAndLastConnectedComments(DevExpress.CodeRush.StructuralParser.Comment@,DevExpress.CodeRush.StructuralParser.Comment@)">
            <summary>
            Returns first and last comments connected to this comment.
            </summary>
            <param name="first">The first comment.</param>
            <param name="last">The last comment.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Comment.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.StartPos">
            <summary>
            Gets or sets comment start position.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.EndPos">
            <summary>
            Gets or sets comment end position.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.IsUnfinished">
            <summary>
            Defines if multiline comment does not have closing tag.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.TextStartOffset">
            <summary>
            The number of characters from the start of the comment to the start of the comment text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.CommentType">
            <summary>
            The type of comment. Either CommentType.SingleLine or CommentType.MultiLine.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.NextConnectedComment">
            <summary>
            Gets the next comment that starts on the line after to 
            this comment's end line. If the next sibling is not 
            a comment, this property returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Comment.PreviousConnectedComment">
            <summary>
            Gets the previous comment that ends on the line prior to 
            this comment's start line. If the previous sibling is not 
            a comment, this property returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CommentCollection.LastComment">
            <summary>
            Gets last comment in the collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDocComment.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDocComment.SplitDocComment">
            <summary>
            Returns xml doc string without special comment characters, preserving
            xml doc source coordinates. E.g. for C# special comment characters are
            /// and /** and *.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDocComment.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlDocComment.MultiLine">
            <summary>
            Returns true if this xml doc comment is multiline. (/** */ xml comment in C#)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseCssElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssTerm.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssNumberLiteral.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssNumberLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssNumberLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssMeasuredNumber.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssAngleLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssAngleLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssSelector.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssSelector.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssSelector.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssAttributeSelector.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssAttributeSelector.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssAttributeSelector.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssCharsetDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssCharsetDeclaration.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssCharsetDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssColorReference.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssColorReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssCommentTag.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssCommentTag.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssCommentTag.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssExpression.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssFrequencyLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssFrequencyLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssFunctionReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssFunctionReference.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssFunctionReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssIdentifierReference.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssIdentifierReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssImportDirective.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssImportDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssImportDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssLengthLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssLengthLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssMediaDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssMediaDirective.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssMediaDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPageStyle.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPageStyle.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPageStyle.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPercentLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPercentLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPropertyDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPropertyDeclaration.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPropertyDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPseudoSelector.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPseudoSelector.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPseudoSelector.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPseudoFunctionSelector.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPseudoFunctionSelector.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssPseudoFunctionSelector.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStringLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStringLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStringLiteral.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStyleRule.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStyleRule.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStyleRule.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStyleSheet.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssStyleSheet.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssTimeLiteral.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssTimeLiteral.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssURIReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssURIReference.Clone">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CssURIReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.CompilerDirective">
            <summary>
            Base class for all compiler directives.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PreprocessorDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PreprocessorDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CompilerDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PragmaDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PragmaDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PragmaDirective.Text">
            <summary>
            The text of the warning that will appear in the compiler's output.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PragmaDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ConstDirective">
            <summary>
            Constant definition directive.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConstDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConstDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConstDirective.Expression">
            <summary>
            Gets or sets string expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConstDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.DefineDirective">
            <summary>
            Define directive.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefineDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefineDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DefineDirective.Value">
            <summary>
            Gets or sets the defined value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DefineDirective.Expression">
            <summary>
            Gets or sets the defined expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DefineDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElifDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElifDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElifDirective.Expression">
            <summary>
            Gets or sets expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElseDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElseDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EndIfDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EndIfDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.EndRegionDirective">
            <summary>
            Represents end of the region directive.
            Doesn't appear in the source tree, instead corresponding region directive
            coordinates are adjusted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EndRegionDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EndRegionDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ErrorDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ErrorDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ErrorDirective.Expression">
            <summary>
            Gets or sets expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IfDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IfDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IfDirective.Expression">
            <summary>
            Gets or sets expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IfDefDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IfDefDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IfnDefDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IfnDefDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ImportDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ImportDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ImportDirective.Expression">
            <summary>
            Gets or sets expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IncludeDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IncludeDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IncludeDirective.Expression">
            <summary>
            Gets or sets expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LineDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LineDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LineDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LineDirective.LineNumber">
            <summary>
            The line number specified for the following line in a source code file (modifying the compiler's line number generated for errors and warnings).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LineDirective.FileName">
            <summary>
            The file name that will appear in the compiler output. By default, the actual name
            of the source code file is used.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LineDirective.Hidden">
            <summary>
            If true, successive lines are hidden from the debugger until another LineDirective (#line directive) is encountered.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LineDirective.Default">
            <summary>
            If true, resets the line numbering in this file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OptionDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OptionDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.OptionDirective.Option">
            <summary>
            Gets or sets option defined inside the directive.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.OptionDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.SetStartTokenLength(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the length of the #region token. This is 7 for C#, 
            but may be different for other languages.
            </summary>
            <param name="token">The token to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.SetStartTokenLength(System.Int32)">
            <summary>
            Sets the length of the #region token. This is 7 for C#, 
            but may be different for other languages.
            </summary>
            <param name="value">The length of the start token.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.SetEndTokenLength(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the length of the #endregion token. This is 10 for C#, but 
            may be different for other languages.
            </summary>
            <param name="token">The token to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.SetEndTokenLength(System.Int32)">
            <summary>
            Sets the length of the #endregion token. This is 10 for C#, but 
            may be different for other languages.
            </summary>
            <param name="value">The length of the end token.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.ToggleCollapsedState">
            <summary>
            Toggles this region's collapsed state. If it is expanded, it will be collapsed. If collapsed, it will be expanded.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegionDirective.GetSubRegions">
            <summary>
            Returns a collection of chilren region directives.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.RegionDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.RegionDirective.EndTokenLength">
            <summary>
            The length of the #endregion token. This is 10 for C#, but may be different for other languages.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.RegionDirective.StartTokenLength">
            <summary>
            The length of the #region token. This is 7 for C#, but may be different for other languages.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.RegionDirective.FullRange">
            <summary>
            Gets full range of this region directive. Use this property
            instead of Range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UndefDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UndefDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UndefDirective.Symbol">
            <summary>
            The undefined symbol.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UndefDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.WarningDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.WarningDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.WarningDirective.Text">
            <summary>
            The text of the warning that will appear in the compiler's output.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.WarningDirective.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.EvaluateExpression">
            <summary>
            Descendants should override this method and return evaluated result
            of the expression.
            </summary>
            <returns>The result of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.GetByLevel(System.Int32)">
            <summary>
            This method is used to get the specified level expression from qualified expression.
            <see cref="P:DevExpress.CodeRush.StructuralParser.Expression.Level"/>
            </summary>
            <param name="level">Level of the expression to get.</param>
            <returns>Expression with the specified level or null if level is invalid.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.GetStartElement">
            <summary>
            Returns starting expression of this qualified expression.
            If this expression is not qualified, then this method returns this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.GetEndElement">
            <summary>
            Returns ending expression of this qualified expression.
            If this expression is not qualified, then this method returns this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Invert">
            <summary>
            Inverts this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Simplify">
            <summary>
            Simplifies this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Simplify(System.Boolean)">
            <summary>
            Simplifies this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.RemoveRedundantParens">
            <summary>
            Removes redundant outer parens from this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Evaluate">
            <summary>
            Evaluates this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.EvaluateAsBool">
            <summary>
            Evaluates this expression and returns the result as a boolean.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.TransferAllNodesTo(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Moves all nodes to the given language element.
            </summary>
            <param name="element">The element to move nodes to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.SetTestValue(System.Object)">
            <summary>
            Sets test value for this expression. 
            The test value is used when evaluating expressions, if it is set, 
            then it will be used as a result of evaluation this expression.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.ClearTestValue">
            <summary>
            Clears test value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.ClearTestValues">
            <summary>
            Clears test values for this expression and all it's subexpressions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Is(System.String)">
            <summary>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">Full type name of the type to check.</param>
            <returns>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Is(System.Type)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Expression.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, 
            the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of 
            the type to compare against.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverted.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.TestValue">
            <summary>
            Gets the test value used when evaluating expressions.
            If the test value is set, then it will be used as a result 
            of evaluation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.TestValueAsBool">
            <summary>
            Gets the test value used when evaluating expressions as a boolean.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.HasTestValue">
            <summary>
            Returns true if test value was set, otherwise returns false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.Level">
            <summary>
            Gets level of the expression. Level is used to resolve quailfied expressions.
            E.g. expression (A + B).ToString() is MethodCallExpression that has third level
            ( (A + B) - first level, ToString - second level).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.IsStatement">
            <summary>
            Gets value indicating that this expression is used as statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.IsIndirectlyModified">
            <summary>
            Returns true if this expression or any parent is used inside modification expressions,
            e.g. assignment, ref/out direction, increment/decrement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.IsInsideModificationExpression">
            <summary>
            Returns true if this expression is used inside modification expressions,
            e.g. assignment, ref/out direction, increment/decrement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.ExpressionTypeName">
            <summary>
            Gets the expression type name. Descendants should override
            this to return the correct expression type name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Expression.ElementType">
            <summary>
            Gets type of this language element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddressOfExpression.#ctor">
            <summary>
            Creates new AddressOfExpression instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddressOfExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddressOfExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddressOfExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddressOfExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddressOfExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AddressOfExpression.ThisMaintenanceComplexity">
            <summary>
            Gets maintenance complexity for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AddressOfExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AddressOfExpression.Operator">
            <summary>
            Gets operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AddressOfExpression.Expression">
            <summary>
            Gest address of detail expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase">
            <summary>
            Base class for all reference expressions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.#ctor">
            <summary>
            Creates new ReferenceExpressionBase instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.CreateQualifiedElementReference">
            <summary>
            Creates qualified element reference from the current element reference expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.Qualifier">
            <summary>
            Gets or sets element qualifier expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.Source">
            <summary>
            Gets or sets source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.IsGeneric">
            <summary>
            Returns true if this expression references to generic type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.TypeArguments">
            <summary>
            Gets or sets type arguments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.IsTypeArgument">
            <summary>
            Returns true if this expression is a type argument 
            of another reference expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.ParentGenericReference">
            <summary>
            Gets parent generic reference expression which holds this expression
            as a type argument.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.TypeArity">
            <summary>
            Gets or sets unbound generic type reference arity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReferenceExpressionBase.FullSignature">
            <summary>
            Gets full signature for expression using its sources
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.#ctor">
            <summary>
            Creates new ElementReferenceExpression instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.#ctor(System.String)">
            <summary>
            Creates new ElementReferenceExpression instance.
            </summary>
            <param name="name">The name of the reference.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.#ctor(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new ElementReferenceExpression instance.
            </summary>
            <param name="name">The name of the reference.</param>
            <param name="range">The range of the reference.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            This method doesn't check that this expression is the same as the given one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenace complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverting.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.NameRange">
            <summary>
            Gets element name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.Qualifier">
            <summary>
            Gets or sets element source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.HasCleanReferences">
            <summary>
            Returns true if all levels of this element reference consist only of element references.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.IsModified">
            <summary>
            Gets or sets value determining if this reference is modified.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElementReferenceExpression.IsUsed">
            <summary>
            Returns true if the value of the specified element is queried (e.g., on the 
            right side of an assignment and not passed as an out parameter to a method). If
            the element is not referenced, returns false.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AggregateElementReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional owned 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.SetParensRange(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets parens range.
            </summary>		
            <param name="parenOpen">Open paren token</param>
            <param name="parenClose">Close paren token</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCallExpression.SetParensRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets parens range.
            </summary>
            <param name="range">The SourceRange to set</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCallExpression.IsBaseConstructorCall">
            <summary>
            Returns true if this method is call to base construtor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCallExpression.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverted.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCallExpression.Qualifier">
            <summary>
            Gets or sets element qualifier expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCallExpression.Source">
            <summary>
            Gets or sets element source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCallExpression.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCallExpression.IsGeneric">
            <summary>
            Returns true if this expression references to generic type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AggregateMethodCallExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.ITypeReferenceExpression)">
            <summary>
            Returns true if this type reference expression resolves to the same type as the specified type reference.
            </summary>
            <param name="typeRef">The type reference to compare.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.GetElementType">
            <summary>
            Returns type of inner elements for pointers and arrays.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.UsesTypeParameters(DevExpress.CodeRush.StructuralParser.IGenericElement)">
            <summary>
            Returns true if this TypeReferenceExpression uses type parameters of the specified generic element.
            </summary>
            <param name="generic">The generic to find type parameters</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.IsTypeParameter(DevExpress.CodeRush.StructuralParser.IGenericElement)">
            <summary>
            Returns true if this TypeReferenceExpression is type parameter of the specified generic element.
            </summary>
            <param name="generic">The generic to find type parameter.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.CreateArrayReference(System.Int32)">
            <summary>
            Creates array type reference expression from the current type.
            </summary>
            <param name="rank">The rank of array</param>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.Is(System.String)">
            <summary>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">Full type name of the type to check.</param>
            <returns>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.Is(System.Type)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, 
            the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of 
            the type to compare against.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.ElementType">
            <summary>
            Gets type of this language element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.IsNullable">
            <summary>
            Returns true if this expression has nullable modifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.IsDynamic">
            <summary>
            Returns true if this expression is dynamic type reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.TypeArity">
            <summary>
            Gets or sets unbound generic type reference arity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.IsUnbound">
            <summary>
            Gets or sets value determining that this reference is generic unbound type reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.TypeReferenceType">
            <summary>
            Gets type reference type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.HasElementType">
            <summary>
            Returns true if this expression is array or pointer reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpression.BasedPointer">
            <summary>
            Represents __based target expression in C++
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.#ctor">
            <summary>
            Creates new AnonymousMethodExpression instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.Parameters">
            <summary>
            Gets parameters for this expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AnonymousMethodExpression.ParameterCount">
            <summary>
            Gets the number of parameters defined inside the expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.Direction">
            <summary>
            Gets or sets argument direction.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ArgumentDirectionExpression.Expression">
            <summary>
            Gest argument direction expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayCreateExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayCreateExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayCreateExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayCreateExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayCreateExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayInitializerExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayInitializerExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayInitializerExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayInitializerExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayInitializerExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.AssignmentOperatorType">
            <summary>
            Represents assignment operators.
            C#: = += -= *= /= %= &amp;= |= ^= &lt;&lt;= =&gt;&gt;
            VB: = ^= *= /= \= += -= &amp;= &lt;&lt;= =&gt;&gt;
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OperatorExpression.#ctor">
            <summary>
            Creates new OperatorExpression instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OperatorExpression.#ctor(System.String)">
            <summary>
            Creates new OperatorExpression instance.
            </summary>
            <param name="operatorText">The operator text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OperatorExpression.#ctor(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Creates new OperatorExpression instance.
            </summary>
            <param name="operatorToken">The operator token.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OperatorExpression.#ctor(DevExpress.CodeRush.StructuralParser.SourceRange,System.String)">
            <summary>
            Creates new OperatorExpression instance.
            </summary>
            <param name="operatorRange">The operator range.</param>
            <param name="operatorText">The operator text.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OperatorExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.OperatorExpression.NameRange">
            <summary>
            Gets expression name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.OperatorExpression.OperatorRange">
            <summary>
            Gets source range of the operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.OperatorExpression.OperatorText">
            <summary>
            Gets operator text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.SetLeftSide(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Sets left side expression of this operator.
            Adds the expression to detail nodes.
            </summary>
            <param name="left">The left side expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.SetRightSide(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Sets right side expression of this operator.
            Adds the expression to detail nodes.
            </summary>
            <param name="right">The left side expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.ToString">
            <summary>
            Returns string representation of this binary operator.
            This is not the same as generated code will look like.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.GetDetailNodeDescription(System.Int32)">
            <summary>
            Returns a description for the detail node at the specified index.
            </summary>
            <param name="index">The index into this element's DetailNodes list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.GetOverloadableOperatorType(DevExpress.CodeRush.StructuralParser.BinaryOperatorType)">
            <summary>
            Gets overloadable OperatorType from the given binary operator type.
            </summary>
            <param name="binary">The binary operator type to use.</param>
            <returns>Overloadable OperatorType from the given binary operator type.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.LeftSide">
            <summary>
            Gets or sets left operand of the operator expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.BinaryOperator">
            <summary>
            Gets or sets binary operator type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.Operator">
            <summary>
            Gets or sets binary operator type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BinaryOperatorExpression.RightSide">
            <summary>
            Gets or sets right operand of the operator expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssignmentExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssignmentExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssignmentExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssignmentExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AssignmentExpression.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AssignmentExpression.AssignmentOperator">
            <summary>
            Gets or sets assignment operator type
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AssignmentExpression.AssignmentOperatorType">
            <summary>
            Gets or sets assignment operator type
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssociativeContainerExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssociativeContainerExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AssociativeContainerExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AttributeVariableInitializer.#ctor">
            <summary>
            Creates new AttributeVariableInitializer instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AttributeVariableInitializer.#ctor(DevExpress.CodeRush.StructuralParser.Expression,DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Creates new AttributeVariableInitializer instance.
            </summary>
            <param name="left">The left expression.</param>
            <param name="token">The opertator token.</param>
            <param name="right">The right expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AttributeVariableInitializer.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AttributeVariableInitializer.ThisMaintenanceComplexity">
            <summary>
            Gets maintenance complexity for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AttributeVariableInitializer.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCastExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCastExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCastExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCastExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCastExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeCastExpression.ThisMaintenanceComplexity">
            <summary>
            Gets maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeCastExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeCastExpression.TypeReference">
            <summary>
            Gets type to cast to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeCastExpression.Target">
            <summary>
            Gets the expression being casted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CastTargetExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CastTargetExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CastTargetExpression.CastToken">
            <summary>
            Gets cast token. (This might be CBool, CDate, CStr, ...)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CastTargetExpression.CastTypeName">
            <summary>
            Gets cast type name as a string.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CastTargetExpression.CastKeyword">
            <summary>
            Gets cast keyword as a string.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CheckedExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CheckedExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CheckedExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CheckedExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CheckedExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexExpression.#ctor">
            <summary>
            Creates new instance of the ComplexExpression class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalExpression.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConditionalExpression.IsNeededResultsCasting">
            <summary>
            Property is necessary only for genration node.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast">
            <summary>
            Represents conditional type cast expression.
            E.g. "as" expression in C# language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance compexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConditionalTypeCast.ElementType">
            <summary>
            Gets type of this language element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.EvaluateExpression">
            <summary>
            Evaluates this expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverting.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsNumberLiteral">
            <summary>
            Returns true if the given object is a number literal.
            </summary>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsBooleanLiteral">
            <summary>
            Returns true if this primitive expression is boolean literal (true or false in C#).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsStringLiteral">
            <summary>
            Returns true if this primitive expression is string literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsCharLiteral">
            <summary>
            Returns true if this primitive expression is char literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsDateTime">
            <summary>
            Returns true if this primitive expression is DateTime literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.IsNullLiteral">
            <summary>
            Returns true if this primitive expression is null literal.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.PrimitiveType">
            <summary>
            Gets or sets primitive type of this expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.PrimitiveValue">
            <summary>
            Gets or sets primitive value of this expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.ExpressionTypeName">
            <summary>
            Gets expression type name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PrimitiveExpression.NameRange">
            <summary>
            Gets expression name range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CPrimitiveExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CTypeExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultValueExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DefaultValueExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DefaultValueExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DefaultValueExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DefaultValueExpression.TypeReference">
            <summary>
            Gets detail type reference expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DeleteExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DirectCastExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ElaboratedTypeReference.DevExpress#CodeRush#StructuralParser#ITypeElement#IsTypeParameter">
            <summary>
            Returns true if current type element was created for type parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionCollectionBase.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.ExpressionCollectionBase)">
            <summary>
            Checks if the given expression collection is identical to this one.
            </summary>
            <param name="collection">The expression collection to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionCollectionBase.ReplaceExpression(DevExpress.CodeRush.StructuralParser.Expression,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Replaces old expression with the new one inside this collection.
            </summary>
            <param name="oldExpression">The expression to replace.</param>
            <param name="newExpression">The new expression to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IfOperatorExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GetXmlNamespaceOperator.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GetXmlNamespaceOperator.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IndexerExpression.#ctor(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Creates new IndexerExpression instance.
            </summary>
            <param name="source">The source expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IndexerExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IndexerExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IndexerExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IndexerExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IndexerExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverted.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.NameRange">
            <summary>
            Gets element name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.Qualifier">
            <summary>
            Gets or sets element qualifier expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.Source">
            <summary>
            Gets or sets element source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IndexerExpression.Arguments">
            <summary>
            Gets or sets indexer arguments.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.TypeCheck">
            <summary>
            Represents type checking expression.
            E.g. "is" expression in C# language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCheck.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCheck.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCheck.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeCheck.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Is.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Is.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Is.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Is.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Is.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IsNot.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IsNot.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IsNot.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IsNot.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.IsNot.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverted.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LambdaExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LambdaExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.SetExpression(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Sets expression for this unary operator.
            The expression is added to detail nodes.
            </summary>
            <param name="expression">The expression to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.ToString">
            <summary>
            Returns string representation of this unary operator.
            This is not the same as generated code.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.GetImageIndex">
            <summary>
            Gets the image index of this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.GetOverloadableOperatorType(DevExpress.CodeRush.StructuralParser.UnaryOperatorType)">
            <summary>
            Gets overloadable OperatorType from the given unary operator type.
            </summary>
            <param name="unary">The unary operator type.</param>
            <returns>Overloadable OperatorType from the given unary operator type.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.Expression">
            <summary>
            Gets or sets unary expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.UnaryExpression">
            <summary>
            Gets or sets unary expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.IsPostOperator">
            <summary>
            Returns true if this expression is post unary expression.
            Otherwise returns false.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.UnaryOperator">
            <summary>
            Gets or sets unary operator type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryOperatorExpression.Operator">
            <summary>
            Gets or sets unary operator type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalInversion.EvaluateExpression">
            <summary>
            Evaluates this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalInversion.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalInversion.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalInversion.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalInversion.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.#ctor(DevExpress.CodeRush.StructuralParser.Expression,DevExpress.CodeRush.StructuralParser.LogicalOperator,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            This constructor does not set source ranges of this expression.
            </summary>
            <param name="left">The left side expression.</param>
            <param name="op">The logical operaton.</param>
            <param name="right">The right side expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.EvaluateExpression">
            <summary>
            Evaluates this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.SetLogicalOperator(DevExpress.CodeRush.StructuralParser.LogicalOperator)">
            <summary>
            Sets logical operator type.
            </summary>
            <param name="op">The operator type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.GetBinaryOperatorType(DevExpress.CodeRush.StructuralParser.LogicalOperator)">
            <summary>
            Returns binary operator type for the given logical operator.
            </summary>
            <param name="op">The operator to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LogicalOperation.GetLogicalOperatorType(DevExpress.CodeRush.StructuralParser.BinaryOperatorType)">
            <summary>
            Returns logical operator type for the given binary operator.
            </summary>
            <param name="op">The operator to convert.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.LogicalOperation.LogicalOperator">
            <summary>
            Gets or sets logical operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MacroExpressionCall.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ManagedArrayCreateExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberAccessExpression.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberAccessExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberAccessExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberAccessExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodReferenceExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodReferenceExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ThisReferenceExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ThisReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ThisReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ThisReferenceExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ThisReferenceExpression.ElementType">
            <summary>
            Gets expression element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ThisReferenceExpression.NameRange">
            <summary>
            Gets expression name range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NullCoalescingExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectInitializerExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectInitializerExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectInitializerExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectInitializerExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectInitializerExpression.AddInitializers(System.Collections.Generic.IEnumerable{DevExpress.CodeRush.StructuralParser.Expression})">
            <summary>
            Adds new initializers into initializers collection.
            </summary>
            <param name="initializers">The initializers to add</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectInitializerExpression.AddInitializer(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Adds new initializer into initializers collection.
            </summary>
            <param name="init">The initializer to add</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.SetParensRange(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets parens range.
            </summary>		
            <param name="parenOpen">Open paren token</param>
            <param name="parenClose">Close paren token</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.SetParensRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets parens range.
            </summary>
            <param name="range">The SourceRange to set</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.ObjectType">
            <summary>
            Gets or sets object type created.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.Arguments">
            <summary>
            Gets or sets expression arguments.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.NameRange">
            <summary>
            Gets or sets expression name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ObjectCreationExpression.ParensRange">
            <summary>
            Gets SourceRange for open and close parens.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParametrizedObjectCreationExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.EvaluateExpression">
            <summary>
            Evaluates this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ParenthesizedExpression.NeedsInvertParens">
            <summary>
            Returns true if this expression should be placed inside parens
            when inverting.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedAliasExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedAliasExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedElementReference.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedElementReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedElementReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QualifiedElementReference.HasCleanReferences">
            <summary>
            Returns true if all levels of this element reference consist only of element references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReDimExpression.#ctor">
            <summary>
            Creates new ReDimExpressionBase instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReDimExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReDimExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReDimExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReDimExpression.ElementType">
            <summary>
            Gets language element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.#ctor(DevExpress.CodeRush.StructuralParser.Expression,DevExpress.CodeRush.StructuralParser.RelationalOperator,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            This constructor does not set source ranges of this expression.
            </summary>
            <param name="left">The left side expression.</param>
            <param name="op">The logical operaton.</param>
            <param name="right">The right side expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.SetRelationalOperator(DevExpress.CodeRush.StructuralParser.RelationalOperator)">
            <summary>
            Sets relation operator.
            </summary>
            <param name="op">The operator.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.GetBinaryOperatorType(DevExpress.CodeRush.StructuralParser.RelationalOperator)">
            <summary>
            Returns binary operator type for the given relational operator.
            </summary>
            <param name="op">The relational operator to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.GetRelationalOperatorType(DevExpress.CodeRush.StructuralParser.BinaryOperatorType)">
            <summary>
            Returns binary operator type for the given relational operator.
            </summary>
            <param name="op">The relational operator to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RelationalOperation.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.RelationalOperation.RelationalOperator">
            <summary>
            Gets or sets relational operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional owned 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.SetParensRange(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets parens range.
            </summary>		
            <param name="parenOpen">Open paren token</param>
            <param name="parenClose">Close paren token</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.SetParensRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets parens range.
            </summary>
            <param name="range">The SourceRange to set</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ShortInitializeExpression.IsGeneric">
            <summary>
            Returns true if this expression references to generic type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SizeOfExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SizeOfExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SizeOfExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SizeOfExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SizeOfExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SizeOfExpression.ThisMaintenanceComplexity">
            <summary>
            Gets element maintenance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SizeOfExpression.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypedElementReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfIsExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfIsExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfIsExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfIsExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeOfIsExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryDecrement.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryDecrement.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryDecrement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryDecrement.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryIncrement.GetImageIndex">
            <summary>
            Returns image index for this binary operator.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryIncrement.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnaryIncrement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryIncrement.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.UnaryIncrement.CanBeStatement">
            <summary>
            Checks if this expression is allowed as a statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UncheckedExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UncheckedExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UncheckedExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UncheckedExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UncheckedExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExternAlias.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExternAlias.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Namespace.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Namespace.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Namespace.SetNamespaceCollection(DevExpress.CodeRush.StructuralParser.NamespaceCollection)">
            <summary>
            Sets the owning collection for this Namespace. Other Namespaces in this 
            NamespaceCollection will have the same Name as this one.
            </summary>
            <param name="namespaceCollection">A NamespaceCollection containing Namespaces with the
            same name as this one.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Namespace.FullName">
            <summary>
            The full name of this namespace. If this namespace is nested inside another namespace, 
            the full name is combination of all nested namespace names.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Namespace.AllNamespaces">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to recursively iterate through all namespaces declared in this namespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Namespace.AllTypes">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to recursively iterate through all types declared in this namespace.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamespaceCollection.#ctor(System.String)">
            <summary>
            Constructs a new NamespaceCollection for storing Namespaces. All Namespaces in this 
            collection will have the same FullName (e.g., "System.Drawing.Drawing2D").
            </summary>
            <param name="fullName">The full name (e.g., "System.Drawing.Drawing2D") of the Namespaces 
            that will be members of this collection.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamespaceCollection.FullName">
            <summary>
            The full name (e.g., "System.Drawing.Drawing2D") of all Namespaces in this collection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamespaceReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamespaceReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamespaceReference.ElementType">
            <summary>
            Returns type of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamespaceReference.NameRange">
            <summary>
            Gets or sets name range of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamespaceReference.AliasName">
            <summary>
            The name of the namespace (or potentially the class in the VB Imports statement) that this language element alias points to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamespaceReference.AliasNameRange">
            <summary>
            Gets or sets source range if the alias name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamespaceReference.IsAlias">
            <summary>
            True if this Using or Imports statement is an alias.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNamespaceReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNamespaceReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlNamespaceReference.ElementType">
            <summary>
            Returns type of this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.AliasDeclaration">
            <summary>
            Used by source tree resolver when resolving alias declarations.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AliasDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AliasDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AliasDeclaration.ElementType">
            <summary>
            Returns type of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AliasDeclaration.AliasName">
            <summary>
            Gets alias declaration name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AliasDeclaration.Name">
            <summary>
            Gets alias declaration name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AliasDeclaration.Expression">
            <summary>
            Gets alias expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ExternAliasDeclaration">
            <summary>
            Used by source tree resolver when resolving exern alias declarations.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExternAliasDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExternAliasDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ExternAliasDeclaration.ElementType">
            <summary>
            Returns type of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ExternAliasDeclaration.Name">
            <summary>
            Gets alias declaration name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ExternAliasDeclaration.Reference">
            <summary>
            Gets alias expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Abort">
            <summary>
            Abort throws a silent exception, and is the ancestor of Throw.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FlowBreak">
            <summary>
            FlowBreak is the ancestor of break, continue, throw, and return.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FlowBreak.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Abort.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Break">
            <summary>
            Summary description for Break.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Break.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Continue">
            <summary>
            Summary description for Continue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Continue.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.End.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Exit.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Exit.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Goto">
            <summary>
            Summary description for Goto.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Goto.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Goto.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Goto.LabelRange">
            <summary>
            Gets or sets source range of the goto label.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Label">
            <summary>
            Summary description for Label.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Label.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Resume.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Resume.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Return.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Return.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Return.Expression">
            <summary>
            Gets and sets return expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Stop.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Throw">
            <summary>
            Throw throws exceptions (descends from Abort).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Throw.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Throw.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Throw.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Throw.Expression">
            <summary>
            The expression thrown.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Throw.Exception">
            <summary>
            The exception thrown.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.YieldBreak.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.YieldReturn.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.YieldReturn.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.YieldReturn.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ClassTypeParameterConstraint.#ctor">
            <summary>
            Creates new ClassTypeParameterConstraint instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ClassTypeParameterConstraint.#ctor(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new ClassTypeParameterConstraint instance.
            </summary>
            <param name="name">The name of the constraint.</param>
            <param name="range">The range of the constraint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ClassTypeParameterConstraint.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ClassTypeParameterConstraint.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GenericModifier.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GenericModifier.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GenericModifier.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.GenericModifier.HasOuterRangeChildren">
            <summary>
            Descendatns should override and return true if this node can have children which range
            goes outside of this node's range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexGenericModifier.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamedTypeParameterConstraint.#ctor">
            <summary>
            Creates new instance of NamedTypeParameterConstraint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamedTypeParameterConstraint.#ctor(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Creates new instance of NamedTypeParameterConstraint.
            </summary>
            <param name="typeReference">The type reference for the constraint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamedTypeParameterConstraint.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NamedTypeParameterConstraint.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamedTypeParameterConstraint.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NamedTypeParameterConstraint.TypeReference">
            <summary>
            Gets or sets type reference for the constraint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewTypeParameterConstraint.#ctor">
            <summary>
            Creates new NewTypeParameterConstraint instance.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewTypeParameterConstraint.#ctor(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new NewTypeParameterConstraint instance.
            </summary>
            <param name="name">The name of the constraint.</param>
            <param name="range">The range of the constraint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewTypeParameterConstraint.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.NewTypeParameterConstraint.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StructTypeParameterConstraint.#ctor">
            <summary>
            Creates new instance of StructTypeParameterConstraint.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StructTypeParameterConstraint.#ctor(System.String,DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Creates new instance of StructTypeParameterConstraint.
            </summary>
            <param name="name">The name of the constraint.</param>
            <param name="range">The range of the constraint.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.StructTypeParameterConstraint.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.StructTypeParameterConstraint.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeParameter.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeParameter.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeParameter.HasOuterRangeChildren">
            <summary>
            Descendatns should override and return true if this node can have children which range
            goes outside of this node's range.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.IsConst">
            <summary>
            Returns true if this type is constant.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.IsVolatile">
            <summary>
            Returns true if this type is volatile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.IsReferenceType">
            <summary>
            Returns true if this type is reference type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.IsManaged">
            <summary>
            Returns true if this type is managed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.TypeReferenceType">
            <summary>
            Gets type reference type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.IsNullable">
            <summary>
            Returns true if this expression has nullable modifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeReferenceExpressionWrapper.IsGeneric">
            <summary>
            Returns true if this expression references to generic type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.XmlElement">
            <summary>
            Text
            <c></c>
            </summary>
            <remarks>
            My remarks
            </remarks>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.XmlNode">
            <summary>
            Ancestor class for XML nodes.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNode.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlNode.ElementType">
            <summary>
            Gets type of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElement.GetAttribute(System.String)">
            <summary>
            Gets the specified attribute.Performs case-sensitive search
            </summary>
            <param name="attributeName">The name of the attribute to find.</param>
            <returns>Returns the XmlAttribute, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElement.GetAttribute(System.String,System.Boolean)">
            <summary>
            Gets the specified attribute.
            </summary>
            <param name="attributeName">The name of the attribute to find.</param>
            <param name="ignoreCase">Indicates a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.)</param>
            <returns>Returns the XmlAttribute, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElement.GetValue(System.String)">
            <summary>
            Gets the value for the specified attribute.
            </summary>
            <param name="attributeName">The name of the attribute to find the value for.</param>
            <returns>Returns the value for the specified XmlAttribute, if found. Otherwise returns null.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlElement.XmlAttributes">
            <summary>
            An ArrayList of XmlAttribute nodes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlElement.HasAttributes">
            <summary>
            Determines if this element has attributes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlElement.XmlElementType">
            <summary>The XmlElementType of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlElement.FindHtmlElementByType(DevExpress.CodeRush.StructuralParser.HtmlElementType)">
            <summary>
            Performs searching of the HtmlElement in Nodes by specified HtmlElementType.
            </summary>
            <param name="type">Type of element to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AspCodeEmbedding.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AspCodeEmbedding.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RazorFunctions.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RazorSection.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RazorSection.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RazorHelper.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AspDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AspDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RazorInheritsDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RazorModelDirective.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AspImportDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ServerControlElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ServerControlElement.TagNameRange">
            <summary>
            Gets tag name source range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ServerControlElement.TagPrefixRange">
            <summary>
            Gets tag prefix source range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ServerControlElement.CloseNameRange">
            <summary>
            Gets close name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ServerControlElement.CloseTagNameRange">
            <summary>
            Gets close tag name range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ServerControlElement.CloseTagPrefixRange">
            <summary>
            Gets close tag name prefix.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ContentPlaceHolder.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ControlDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FictiveAspComment.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.XmlAttribute">
            <summary>
            Summary description for XmlAttribute.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttribute.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlAttribute.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlAttribute.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlScriptDefinition.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlScriptDefinition.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlStyleDefinition.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlStyleDefinition.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.XmlText">
            <summary>
            Holds a segment of text in Xml. The text is available through the Text property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlText.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlText.Text">
            <summary>
            Gets xml text for this node.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlText.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HtmlText.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PageDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MasterDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RegisterDirective.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement">
            <summary>
            AccessSpecifiedElement is the ancestor class for methods and properties that can specify 
            a method dispatch (virtual, override, extern, readonly, etc.).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.SetVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets the visibility and range based on the passed Token. Also sets IsDefaultVisibility to false. Called by parsers that create elements.
            </summary>
            <param name="visibility">The MemberVisibility to set to.</param>
            <param name="token">The Token to set the range to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.SetVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Sets the visibility.
            </summary>
            <param name="visibility">The MemberVisibility to set to.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.GetImplementExpressions">
            <summary>
            Returns expression collection for implemented interface members.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.SupportsVisibility(DevExpress.CodeRush.StructuralParser.MemberVisibility)">
            <summary>
            Determines whether this member supports the specified visibility as a valid access modifier.
            </summary>
            <param name="aMemberVisibility">The visibility to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.SetGenericModifier(DevExpress.CodeRush.StructuralParser.GenericModifier)">
            <summary>
            Sets generic modifier.
            </summary>
            <param name="modifier">The modifier to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.GetUnusedDeclarations">
            <summary>
            Gets a collection of all unused declarations within the specified scope.
            </summary>		
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsVisibleFrom(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if this LanguageElement can be accessed from the specified LanguageElement.
            </summary>
            <param name="viewer">The LanguageElement from which to check access.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.GetOverrideCode">
            <summary>
            Gets code to override this member.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.GetOverrideCode(System.Boolean)">
            <summary>
            Gets code to override this member.
            </summary>
            <param name="callBase">Pass true to add call to base method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.GetOverrideCode(System.Boolean,System.String,System.String)">
            <summary>
            Gets code to override this member.
            </summary>
            <param name="callBase">Pass true to add call to base method.</param>
            <param name="codeBefore">The code to add before method call.</param>
            <param name="codeAfter">The code to add after method call.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.BaseValidVisibilities">
            <summary>
            Returns an array of MemberVisibilities that represent the access-specifiers that are legal to be 
            declared on this element. If there aren't any valid visibilities, it returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.AccessSpecifiers">
            <summary>
            Gets access specifiers for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.AccessibleByDecendants">
            <summary>
            Returns true if this element can be accessed by descendants (e.g., visibility is 
            public, protected, or protected internal).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.HasInternalAccess">
            <summary>
            Returns true if this element can be accessed by members in the same assembly.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.HasProtectedAccess">
            <summary>
            Returns true if this element's visibility is protected (or protected internal) can be accessed by descendants.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.HasAccessSpecifiers">
            <summary>
            Returns true if this element has modifiers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.ValidVisibilities">
            <summary>
            Returns an array of MemberVisibilities that represent the access-specifiers that are legal to be 
            declared on this element. If there aren't any valid visibilities, it returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.Visibility">
            <summary>
            The visibility of this member (e.g., private, protected, internal, public, local, etc.).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.VisibilityIsFixed">
            <summary>
            True if the visibility of this member can not be changed (e.g., illegal, param, or local).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.VisibilityRange">
            <summary>
            The coordinates of the keywords that specify visibility for this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.VirtualOverrideAbstractRange">
            <summary>
            The coordinates of the virtual, override, or abstract keywords for this member. This property will equal SourceRange.Empty if these keywords are not present in its declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IteratorRange">
            <summary>
            The coordinates of the iterator keyword for this member. This property will equal SourceRange.Empty if these keywords are not present in its declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.VirtualRange">
            <summary>
            The coordinates of the virtual keywords for this member. This property will equal SourceRange.Empty if these keywords are not present in its declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.OverrideRange">
            <summary>
            The coordinates of the override keywords for this member. This property will equal SourceRange.Empty if these keywords are not present in its declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.AbstractRange">
            <summary>
            The coordinates of the abstract keywords for this member. This property will equal SourceRange.Empty if these keywords are not present in its declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.StaticRange">
            <summary>
            The coordinates of the static keyword for this member. This property will equal SourceRange.Empty if this member is not static.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.UnsafeRange">
            <summary>
            The coordinates of the unsafe keyword for this member. This property will equal SourceRange.Empty if this member is not unsafe.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.NewRange">
            <summary>
            The coordinates of the new keyword for this member. This property will equal SourceRange.Empty if this member is not newly redeclared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.SealedRange">
            <summary>
            The coordinates of the sealed keyword for this member. This property will equal SourceRange.Empty if this member is not sealed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.ReadOnlyRange">
            <summary>
            The coordinates of the readonly keyword for this member. This property will equal SourceRange.Empty if this member is not readonly.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.WriteOnlyRange">
            <summary>
            The coordinates of the writeonly keyword for this member. This property will equal SourceRange.Empty if this member is not writeonly.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.DefaultRange">
            <summary>
            The coordinates of the Default keyword for this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.OverloadsRange">
            <summary>
            The coordinates of the Overloads keyword for this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.ExternRange">
            <summary>
            The coordinates of the extern keyword for this member. This property will equal SourceRange.Empty if this member is not externally declared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.VolatileRange">
            <summary>
            The coordinates of the volatile keyword for this member. This property will equal SourceRange.Empty if this member is not volatile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.WithEventsRange">
            <summary>
            The coordinates of the WithEvents keyword for this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.GenericModifier">
            <summary>
            Gets generic declaration modifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsDefaultVisibility">
            <summary>
            True if the visibility for this member is derived from its parent's default visibility. 
            False if a visibility keyword was specified (e.g., "public", "protected", "private", etc.) 
            in the declaration of this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsAbstract">
            <summary>
            True if this is an abstract member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsIterator">
            <summary>
            True if this is an abstract member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsGeneric">
            <summary>
            Returns true if this element is generic.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsOverride">
            <summary>
            True if this member overrides an ancestor member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsReadOnly">
            <summary>
            True if this is a read-only member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsWriteOnly">
            <summary>
            True if this is a write-only member. (This construct is supported in VB).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsDefault">
            <summary>
            True if this is a Default member (this construct is supported in VB).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsStatic">
            <summary>
            True if this is a static member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsExtern">
            <summary>
            True if this is member is externally defined.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsVirtual">
            <summary>
            True if this member is virtual.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsVolatile">
            <summary>
            True if this member can be modified in the running program by an external asynchronous source, such as the operating system, the hardware, or a concurrently executing thread.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsNew">
            <summary>
            True if this member explicitly hides an inherited member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsSealed">
            <summary>
            True if this is a sealed member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsUnsafe">
            <summary>
            True if this is an unsafe member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsWithEvents">
            <summary>
            True if this member refers to an instance of a class that can raise events (this construct is supported in VB).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsOverloads">
            <summary>
            True if this member has Overloads modifier (this construct is supported in VB).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsExplicitInterfaceMember">
            <summary>
            Returns true if this member is explicitly declared interface member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.AllVariables">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all variables appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.AllStatements">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all statements appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.AllFlowBreaks">
            <summary>
            This IEnumerable property can be used inside a foreach statement
            to recursively iterate through all flow breaks appearing inside this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.HasOuterRangeChildren">
            <summary>
            Descendatns should override and return true if this node can have children which range
            goes outside of this node's range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.DevExpress#CodeRush#StructuralParser#IMemberElement#NameQualifier">
            <summary>
            Gets or sets name qualifier for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AccessSpecifiedElement.IsPureVirtual">
            <summary>
            Used for determine pure virtual members in C++
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.InitializedValue">
            <summary>
            Base class for all variable elements with initialization value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.GetSignature">
            <summary>
            Gets the signature for this element. Descendant elements should override and return a proper signature.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.GetImplementExpressions">
            <summary>
            Returns expression collection for implemented interface members.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.GetTypeName">
            <summary>
            Returns the type of this member.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.AddImplementsExpression(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Adds given expression to the implements list.
            </summary>
            <param name="expression">The expression to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.RemoveImplementsExpression(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Removes given expression from the implements list.
            </summary>
            <param name="expression">The expression to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.AddHandlesExpression(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Adds given expression to the handles list.
            </summary>
            <param name="expression">The expression to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.RemoveHandlesExpression(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Removes given expression from the handles list.
            </summary>
            <param name="expression">The expression to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.SetMemberTypeReference(DevExpress.CodeRush.StructuralParser.TypeReferenceExpression)">
            <summary>
            Sets member type reference for this element.
            </summary>
            <param name="type">The type reference expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.Is(System.String)">
            <summary>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">Full type name of the type to check.</param>
            <returns>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.Is(System.Type)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Member.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, 
            the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of 
            the type to compare against.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.MemberType">
            <summary>
            The type of this member or method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.MemberTypeReference">
            <summary>
            The type of this member or method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.TypeRange">
            <summary>
            The SourceRange of this member type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.Signature">
            <summary>
            Gets the signature of this member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.IsExplicitInterfaceMember">
            <summary>
            Returns true if this member is explicitly declared interface member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.ImplementsExpressions">
            <summary>
            Gets expressions inside implements section if any.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.HandlesExpressions">
            <summary>
            Gets expressions inside handles section if any.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Member.VisibilityIsFixed">
            <summary>
            True if the visibility of this member can not be changed (e.g., illegal, param, local, or if this is a static constructor).
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseVariable.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseVariable.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseVariable.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseVariable.HasUsedReferences">
            <summary>
            Returns true if the value of the specified variable is referenced 
            (its value is queried) in the code.
            </summary>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.References">
            <summary>
            Gets all references to this local declaration within it's parent scope.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.FullTypeName">
            <summary>
            Gets the full type name for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsField">
            <summary>
            Returns true if this element is declaraed inside class or structure or module.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsLocal">
            <summary>
            Returns true if this element is declaraed inside method or property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsImplicit">
            <summary>
            Returns true if this variable is implicitly declared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsFixedSizeBuffer">
            <summary>
            Returns true if this element is a fixed size buffer declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsReturnedValue">
            <summary>
            Returns true if this variable is used as return value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.ValidVisibilities">
            <summary>
            Returns an array of MemberVisibilities that represent the access-specifiers that are legal to be 
            declared on this element. If there aren't any valid visibilities, it returns empty array.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.ArrayNameModifiers">
            <summary>
            Gets array name modifiers applied to this variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.HasArrayNameModifiers">
            <summary>
            Returns true if this variable has array name modifiers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsBitField">
            <summary>
            Returns true if this variable declares bit field.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.BitFieldSize">
            <summary>
            Gets or sets size for bit field variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.HasIterationExpression">
            <summary>
            Returns true if this variabe is used as iteration variable, e.g. inside for each loop.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IterationExpression">
            <summary>
            Returns iteration expression, e.g. inside for each loop.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsObjectCreationInit">
            <summary>
            Returns true if this field is object creation initialization.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsAspxTag">
            <summary>
            Returns true if this variable was created from Aspx tag.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.IsRunAtServer">
            <summary>
            Returns true if this variable was created from Aspx tag and has runat=server attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.BaseVariable.DevExpress#CodeRush#StructuralParser#IBaseVariable#IsParameter">
            <summary>
            Returns true if variable is parameter
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.SetNextVariable(DevExpress.CodeRush.StructuralParser.Variable)">
            <summary>
            Sets next variable for this element.
            </summary>
            <param name="variable">The variable to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.SetPreviousVariable(DevExpress.CodeRush.StructuralParser.Variable)">
            <summary>
            Sets previous variable for this element.
            </summary>
            <param name="variable">The variable to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.SetAncestorVariable(DevExpress.CodeRush.StructuralParser.Variable)">
            <summary>
            Sets ancestor variable for this element.
            </summary>
            <param name="variable">The variable to set.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.GetDeclarationList">
            <summary>
            Gets variable declaration list for the given variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.GetReferencesInRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Gets local variable references inside the specified range.
            </summary>
            <param name="range">The target range.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Variable.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.AncestorVariable">
            <summary>
            The Variable that contibutes type, modifiers (static, volatile, new, and/or readonly), and visibility to this variable. This property will be assigned if this variable was declared in a list (e.g., "int a, b;").
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.InheritsModifiers">
            <summary>
            True if this variable inherits modifiers from a previously-declared variable. For example, in the C# declaration "int aa, bb;", bb inherits its type and modifiers from aa. If this property is true, you can access the variable providing the modifiers through the AncestorVariable property.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.PreviousVariable">
            <summary>
            Gets previous variable if this variable is in declaration list.
            E.g. for the code int i, j, k; previous variable for "j" will be "i".
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.NextVariable">
            <summary>
            Gets next variable if this variable is in declaration list.
            E.g. for the code int i, j, k; next variable for "j" will be "k".
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsInDeclarationList">
            <summary>
            Returns true if this variable is in variable declaration list.
            E.g. for the code int i, j, k; variables i, j, k are in list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.FirstVariable">
            <summary>
            Returns first variable inside variable delcaration list.
            E.g. for the code int i, j, k; it will return i variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.LastVariable">
            <summary>
            Returns last variable inside variable delcaration list.
            E.g. for the code int i, j, k; it will return k variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsStart">
            <summary>
            Returns true if this variable is in the start of a variable declaration list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsMiddle">
            <summary>
            Returns true if this variable is in the middle of a variable declaration list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsEnd">
            <summary>
            Returns true if this variable is in the end of a variable declaration list.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.HasType">
            <summary>
            Returns true if this variable has type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsFixedSizeBuffer">
            <summary>
            Returns true if this variable declares fixed size buffer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.FixedSize">
            <summary>
            Gets or sets fixed size variable expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsAspxTag">
            <summary>
            Returns true if this variable was created from Aspx tag.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Variable.IsRunAtServer">
            <summary>
            Returns true if this variable was created from Aspx tag and has runat=server attribute.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedValue.#ctor">
            <summary>
            Creates new instance of InitializedValue
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedValue.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of InitializedValue
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedValue.#ctor(System.String,System.String,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Creates new instance of InitializedVariable
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="expr">The initialization expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedValue.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedValue.GetDetailNodeDescription(System.Int32)">
            <summary>
            Returns a description for the detail node at the specified index.
            </summary>
            <param name="index">The index into this element's DetailNodes list.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.InitializedValue.Expression">
            <summary>
            The expression used to initialize this variable.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Const.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Const.Value">
            <summary>
            Gets or sets value of the constant.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Const.IsConst">
            <summary>
            Returns true if this value is constant.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConstVolatile.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConstructorInitializer.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConstructorInitializer.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ConstructorInitializer.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConstructorInitializer.Arguments">
            <summary>
            An ExpressionCollection of arguments (of type Expression) passed to this 
            constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ConstructorInitializer.Target">
            <summary>
            Gets constructor initializer target.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberWithParameters.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberWithParameters.GetParameter(System.String)">
            <summary>
            Gets the parameter whose name matches <paramref name="name"/>.
            </summary>
            <param name="name">The name of the parameter to find.</param>
            <returns>Returns the specified parameter, if found. Null otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberWithParameters.GetParameter(System.Int32)">
            <summary>
            Gets the parameter at the specified index.
            </summary>
            <param name="index">The index of the parameter to retrieve.</param>
            <returns>Returns the parameter at the specified index. If <paramref name="index"/> is invalid, null is returned.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberWithParameters.SetParensRange(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets parens range.
            </summary>		
            <param name="parenOpen">Open paren token</param>
            <param name="parenClose">Close paren token</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberWithParameters.SetParensRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets parens range.
            </summary>
            <param name="range">The SourceRange to set</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MemberWithParameters.Parameters">
            <summary>
            The parameters to this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MemberWithParameters.ParameterCount">
            <summary>
            The number of parameters declared by this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MemberWithParameters.AllParameters">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all parameters declared in this namespace.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MemberWithParameters.ParensRange">
            <summary>
            Returns range of parens.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Constructor">
            <summary>
            Used for methods that constructs object instances.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Destructor">
            <summary>
            Used for methods that destructs object instances.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Function">
            <summary>
            Function in VB, method with a return type in C#
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Void">
            <summary>
            Sub in VB, void method C#
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Property">
            <summary>
            C++ specific - property getter or setter
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Event">
            <summary>
            C++ specific - property raise, add or remove
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.MethodTypeEnum.Finalizer">
            <summary>
            Used for finalizers
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.CreateMethod">
            <summary>
            Creates new method copying data from the current one.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.CreateMethodPrototype">
            <summary>
            Creates and returns a new method prototype.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.IsEventHandler">
            <summary>
            Determines whether this method is an event handler.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.IsMainProcedure">
            <summary>
            Determines whether this method is the main prodedure of an application.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.IsInitializeComponent">
            <summary>
            Determines whether this method is InitializeComponent method
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Method.HasCharacteristics(DevExpress.CodeRush.StructuralParser.MethodCharacteristics)">
            <summary>
            Checks if the current method contains specified options.
            </summary>
            <param name="options">The options to check</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.HandlesCount">
            <summary>
            Returns the number of "Handles" expressions for this method. NOTE: Handles expressions are used in Visual Basic for event handlers.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsConstructor">
            <summary>
            Returns true if this method is constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsDestructor">
            <summary>
            Returns true if this method is destructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsFinalizer">
            <summary>
            Returns true if this method is finalizerr.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsClassOperator">
            <summary>
            Returns true if this method is operator override.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsImplicitCast">
            <summary>
            Returns true if this method defines implicit type cast.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsExplicitCast">
            <summary>
            Returns true if this method defines explicit type cast.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsConst">
            <summary>
            Returns true if this method is constant.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsExplicitInterfaceMethod">
            <summary>
            Returns true if this method is explicitly declared interface member.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.ValidVisibilities">
            <summary>
            Returns an array of MemberVisibilities that represent the access-specifiers that are legal to be 
            declared on this element. If there aren't any valid visibilities, it returns null.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.VisibilityIsFixed">
            <summary>
            True if the visibility of this member can not be changed (e.g., illegal, param, local, or if this is a static constructor).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.OverloadsOperator">
            <summary>
            Gets or sets operator type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.CharsetModifier">
            <summary>
            Returns char set modifier set for this method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.MethodType">
            <summary>
            The type of this method (e.g., Constructor, Destructor, Function, or Void).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.ParamOpenRange">
            <summary>
            Gets or sets source range for the method open paren.
            Returns SourceRange.Empty if active language doesn't use parens 
            for method parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.ParamCloseRange">
            <summary>
            Gets or sets source range for the method close paren.
            Returns SourceRange.Empty if active language doesn't use parens 
            for method parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.ImplicitVariable">
            <summary>
            Gets implicitly declared variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.HasImplicitVariable">
            <summary>
            Return true if this element has implicitly declared variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsWebMethod">
            <summary>
            Return true if the specified member is a web method.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.HasDllImportAttribute">
            <summary>
            Return true if this method has a DllImport attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Method.IsAsynchronous">
            <summary>
            True if this method is asynchronous.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCall.GetDetailNodeDescription(System.Int32)">
            <summary>
            Returns a description for the detail node at the specified index.
            </summary>
            <param name="index">The index into this element's DetailNodes list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCall.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCall.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCall.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCall.SetParensRange(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Sets parens range.
            </summary>		
            <param name="parenOpen">Open paren token</param>
            <param name="parenClose">Close paren token</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodCall.SetParensRange(DevExpress.CodeRush.StructuralParser.SourceRange)">
            <summary>
            Sets parens range.
            </summary>
            <param name="range">The SourceRange to set</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCall.Qualifier">
            <summary>
            Gets or sets element qualifier expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCall.Source">
            <summary>
            Gets or sets element source expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCall.Arguments">
            <summary>
            Returns an ArrayList of expressions that passed to this method call.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCall.IsBaseConstructorCall">
            <summary>
            Returns true if this method is call to base construtor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodCall.IsGeneric">
            <summary>
            Returns true if this expression references to generic type.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodPrototype.#ctor">
            <summary>
            Creates new instance of MethodPrototype.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodPrototype.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of MethodPrototype with the given type and name.
            </summary>
            <param name="type">The type of the method.</param>
            <param name="name">The name of the method.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MethodPrototype.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.MethodPrototype.ElementType">
            <summary>
            Gets type of this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Param.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Param.GetTypeName">
            <summary>
            Returns the type of this parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Param.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.ParamType">
            <summary>
            The type of this parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.DefaultValue">
            <summary>
            The default value for this parameter, if specified.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.Direction">
            <summary>
            Gets or sets parameter direction (in/out/ref).
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.IsOptional">
            <summary>
            True if this parameter is optional.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.IsByVal">
            <summary>
            True if this parameter is passed by value.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.IsReferenceParam">
            <summary>
            True if this parameter is passed by reference.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.IsOutParam">
            <summary>
            True if this is an out parameter.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Param.IsParamArray">
            <summary>
            True if this parameter is an array of objects.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Block.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Block.ForceDelimiters">
            <summary>
            Gets or sets value to force generating block delimiters.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionTypeArgument.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParametrizedArrayCreateExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ManagedObjectCreationExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QualifiedMethodReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TemplateExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Except.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TemplateModifier.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TemplateParameter.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NestedTemplateParameter.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UsingDeclaration.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AccessDeclaration.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AttributeSection.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AttributeSection.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional owned 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AttributeSection.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AttributeSection.AttributeCollection">
            <summary>
            Gets attributes inside this attribute section.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.AttributeSection.DevExpress#CodeRush#StructuralParser#IAttributeSectionElement#HasTargetNode">
            <summary>
            Defines if attribute section has target node.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ComplexConstructorInitializer.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExternDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberVisibilitySpecifier.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DistinctExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EqualsExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExtensionMethodParam.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FromExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FromExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.FromExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GroupByExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GroupByExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GroupByExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.InitializedVariable">
            <summary>
            Variable initialized to some value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedVariable.#ctor">
            <summary>
            Creates new instance of InitializedVariable
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedVariable.#ctor(System.String)">
            <summary>
            Creates new instance of InitializedVariable
            </summary>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedVariable.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of InitializedVariable
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedVariable.#ctor(System.String,System.String,DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Creates new instance of InitializedVariable
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="expr">The initialization expression.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedVariable.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InitializedVariable.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.InitializedVariable.ElementType">
            <summary>
            Gets language element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.InitializedVariable.IsObjectCreationInit">
            <summary>
            Gets or sets value indicating that this variable is initialized
            with the new object creation. (E.g. Dim A As New MyType())
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ImplicitVariable.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.InExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IntoExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IntoExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IntoExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.JoinExpressionBase.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.JoinExpressionBase.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.JoinIntoExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.JoinIntoExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.JoinIntoExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LambdaImplicitlyTypedParam.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LetExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LetExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.LetExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberInitializerExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberInitializerExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberInitializerExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberInitializerExpression.IsIdenticalTo(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Checks if the given expression is identical to this one.
            </summary>
            <param name="expression">The expression to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OrderByExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OrderByExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OrderByExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OrderingExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OrderingExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OrderingExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryExpression.ToString">
            <summary>
            Gets string representation for this expression.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves type of this expression.
            </summary>
            <param name="resolver">The resolver to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueryExpression.ElementType">
            <summary>
            Gets language element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueryExpression.Translation">
            <summary>
            Gets query expression translation.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueryExpression.IsTranslation">
            <summary>
            Returns true if this query expression is a translation of another query.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryIdent.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SelectExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SelectExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SelectExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AggregateExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AggregateExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryableCollectionReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueryableCollectionReferenceExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SkipExpressionBase.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SkipExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SkipWhileExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TakeExpressionBase.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TakeExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TakeWhileExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.WhereExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.WhereExpression.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.WhereExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttributeReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttributeReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElementReferenceExpression.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElementReferenceExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElementReferenceExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlExpression.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlExpression.ToString">
            <summary>
            Returns string representation of this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.XmlExpression.ElementType">
            <summary>
            Gets language element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.DefineBaseCollection">
            <summary>
            Summary description for DefineBaseCollection.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.DefineConst">
            <summary>
            Summary description for DefineConst.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.DefineMacro">
            <summary>
            Summary description for DefineMacro.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.FloatNum">
            <summary>
            Summary description for FloatNum.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Number">
            <summary>
            Summary description for Number.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IntNum">
            <summary>
            Summary description for IntNum.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ParamsStringCollection">
            <summary>
            Summary description for ParamsStringCollection.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Accessor.GetAccessorName">
            <summary>
            Returns the name of this accessor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Accessor.Is(System.String)">
            <summary>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">Full type name of the type to check.</param>
            <returns>
            Returns true if Type of this element is the same as, or 
            descends from, the specified type.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Accessor.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Accessor.Is(System.Type)">
            <summary>
            Returns true if type of this element is the same as, or descends from, 
            the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Accessor.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, 
            the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of 
            the type to compare against.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Accessor.ImplicitVariable">
            <summary>
            Gets implicitly declared variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Accessor.HasImplicitVariable">
            <summary>
            Return true if this element has implicitly declared variable.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Accessor.Visibility">
            <summary>
            Gets or sets member visibility for this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Accessor.HasAccessSpecifiers">
            <summary>
            Returns true if this element has modifiers.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Event.ClearInitializer">
            <summary>
            Clear Initializer and remove it from DetailNodes.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Event.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Event.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Event.GenerateAccessors">
            <summary>
            Used only for VB generation (AlexBG)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Event.Adder">
            <summary>
            Gets the Add accessor for this event, if declared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Event.Remover">
            <summary>
            Gets the Remove accessor for this event, if declared.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Event.Raise">
            <summary>
            Gets the Raise accessor for this event, if declared.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EventAccessor.GetAccessorName">
            <summary>
            Returns the name of this accessor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EventAccessor.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The clone options.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventAccessor.ParentEvent">
            <summary>
            Gets parent event for the accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventAccessor.EventName">
            <summary>
            Returns the name of the event that contains this accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventAccessor.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventAccessor.Parameters">
            <summary>
            Gets parameters of the event accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventAccessor.ParameterCount">
            <summary>
            Gets the number of parameters.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventAccessor.DevExpress#CodeRush#StructuralParser#IMemberElement#NameQualifier">
            <summary>
            Gets or sets name qualifier for this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.EventAdd">
            <summary>
            Summary description for EventAdd.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EventAdd.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.EventRaise">
            <summary>
            Represents raise event accessor.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EventRaise.#ctor">
            <summary>
            Creates new instance of EventRaise.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EventRaise.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventRaise.ThisMaintenanceComplexity">
            <summary>
            Gets element maintainance complexity.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.EventRaise.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.EventRemove">
            <summary>
            Summary description for EventRemove.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EventRemove.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PropertyAccessor.GetAccessorName">
            <summary>
            Returns the name of this accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PropertyAccessor.ParentProperty">
            <summary>
            Gets parent property for the accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PropertyAccessor.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PropertyAccessor.PropertyName">
            <summary>
            Returns the name of the property that contains this accessor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.PropertyAccessor.DevExpress#CodeRush#StructuralParser#IMemberElement#NameQualifier">
            <summary>
            Gets or sets name qualifier for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Get.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Property.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Property.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.HasGetter">
            <summary>
            True if this property can be read.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.HasSetter">
            <summary>
            True if this property can be written to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.IsReadable">
            <summary>
            True if this property can be read.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.IsWritable">
            <summary>
            True if this property can be written to.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.IsIndexed">
            <summary>
            True if this property is an indexer.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.Setter">
            <summary>
            Gets the Set accessor for this property, if available. Returns null 
            if this property is read-only.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.Getter">
            <summary>
            Returns the Get accessor for this property, if available. Returns null 
            if this property is write-only.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.GenerateAccessors">
            <summary>
            Used only for VB generation (AlexBG)
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Property.GenerateParens">
            <summary>
            Used only for VB generation (AlexBG)
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Set.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Set.GetValueParameterName">
            <summary>
            Gets the name of the value parameter for this setter.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.QueuedEdit">
            <summary>
            Ancestor class for an Insert, Replace, or Delete edit operation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEdit.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEdit.Apply(DevExpress.CodeRush.StructuralParser.IDocument)">
            <summary>
            Applies this SandboxEdit change to the file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEdit.Apply(DevExpress.CodeRush.StructuralParser.IDocument,System.Boolean)">
            <summary>
            Applies this SandboxEdit change to the file.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEdit.BindToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory)">
            <summary>
            Binds this edit to code using the specified text document.
            </summary>
            <param name="document">The document to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEdit.RemoveBinding">
            <summary>
            Removes binding from the element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueuedEdit.BoundRange">
            <summary>
            Gets bound source range for the queued edit operation.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedDelete.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedDelete.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueuedDelete.SeveredNodes">
            <summary>
            These nodes will be deleted when the edit delete operation is applied.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.QueuedEditCollection">
            <summary>
            Contains QueuedEdit descendants.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.#ctor">
            <summary>
            Creates new instance of the QueuedEditCollection class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.Add(DevExpress.CodeRush.StructuralParser.QueuedEdit)">
            <summary>
            Adds the specified queued edit to the collection.
            </summary>
            <param name="edit">The edit to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.AddRange(DevExpress.CodeRush.StructuralParser.QueuedEditCollection)">
            <summary>
            Adds the specified queued edit collection to this collection.
            </summary>
            <param name="edits">The collection to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.Remove(DevExpress.CodeRush.StructuralParser.QueuedEdit)">
            <summary>
            Removes the specified queued edit from the collection.
            </summary>
            <param name="edit">The edit to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.BindToCode(DevExpress.CodeRush.StructuralParser.IDisposableEditPointFactory)">
            <summary>
            Binds all elements inside the collection to code using the spcified edit point factory.
            </summary>
            <param name="factory">The edit point factory to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.RemoveBinding">
            <summary>
            Removes bindings from all elements.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueuedEditCollection.Item(System.Int32)">
            <summary>
            Gets or sets queued edit at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedInsert.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedInsert.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedReplace.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.QueuedReplace.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.QueuedReplace.UseTextExpansion">
            <summary>
            Gets or sets value determining if queued replace will call ExpandText to
            insert new code.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SnippetCodeElement">
            <summary>
            Snippet code element is used to represent arbitrary code.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SnippetCodeMember">
            <summary>
            Snippet code element is used to represent members with arbitrary code.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SnippetCodeStatement">
            <summary>
            Snippet code element is used to represent statements with arbitrary code.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.SnippetCodeStatementBlock">
            <summary>
            Snippet code element is used to represent statements with arbitrary code.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SnippetExpression.Resolve(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Resolves this expression.
            </summary>
            <param name="resolver">The source tree resolver.</param>
            <returns>Returns language element representing the type of the expression.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SnippetExpression.ElementType">
            <summary>
            Gets type of this language element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.HandlerStatement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.AddHandler.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Assignment.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Assignment.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Assignment.LeftSide">
            <summary>
            Left side of the assignment statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Assignment.Operator">
            <summary>
            Gets SourceTextRange for assignment operator.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Assignment.AssignmentOperator">
            <summary>
            Gets or sets assignment operator type
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Assignment.AssignmentOperatorType">
            <summary>
            Gets or sets assignment operator type
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Assignment.Expression">
            <summary>
            Right side of the assignment statement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BitFieldConst.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BitFieldConst.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BitFieldVariable.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BitFieldVariable.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BitFieldVolatile.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BitFieldVolatile.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Case.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Case.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Case.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Case.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Case.IsDefault">
            <summary>
            Returns true if this case block is the default one.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Case.Expression">
            <summary>
            Case expression.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Case.CaseClauses">
            <summary>
            Gets a list of case clauses defined
            for this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClause.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClause.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClause.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClause.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CaseClause.StartExpression">
            <summary>
            Gets start expression for this case clause.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CaseClause.EndExpression">
            <summary>
            Gets end expression for this case clause.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CaseClause.IsComparisonClause">
            <summary>
            Returns true if this case clause compares case expression
            with target one.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CaseClause.IsRangeCheckClause">
            <summary>
            Returns true if this case clause is the range check.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CaseClause.ComparisonOperator">
            <summary>
            Gets comparison operator as a string.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClausesList.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClausesList.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClausesList.OwnedReferencesTransfered">
            <summary>
            Called after child references are transferred to another node. Prevents those 
            child references from being reset through the Dispose() method call when this 
            node is freed. Descendants can override and null-out any additional child 
            references.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CaseClausesList.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CaseClausesList.Clauses">
            <summary>
            Get case clauses.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Catch">
            <summary>
            Summary description for Catch.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Catch.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Catch.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Catch.GetFinally">
            <summary>
            Gets a Finally block associated with this Catch block, if one exists. Returns null otherwise.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Catch.GetFinallyTarget">
            <summary>
            Gets the LanguageElement that is the target of a break or continue that might occur inside 
            this try block. This method will return the first code child of a Finally block, or the 
            Finally block itself if it has no child code nodes, or null if no finally block exists for this Catch.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Checked">
            <summary>
            Summary description for Checked.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Checked.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Do">
            <summary>
            Summary description for Do.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Do.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Do.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Do.SetCondition(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Called internally by ElementBuilder. Sets the internal _Expression field and also adds 
            the specified expression as a detail node.
            </summary>
            <param name="expression">The expression that determines when flow should break out of this do loop</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Do.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Do.Condition">
            <summary>
            Gets loop expression.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Else">
            <summary>
            Summary description for Else.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.IfElse">
            <summary>
            Summary description for IfElse.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.IfElse.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Else.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.If.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.If.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.If.GetDetailNodeDescription(System.Int32)">
            <summary>
            Returns a description for the detail node at the specified index.
            </summary>
            <param name="index">The index into this element's DetailNodes list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.If.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.HasElseStatement">
            <summary>
            True if this if-block has a matching else statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.ElseStatement">
            <summary>
            Gets matching else statment for this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.AcceptsElse">
            <summary>
            Returns true if this if-block can have else statement.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.TrueStatementsBlockRange">
            <summary>
            Gets block range of true statements for this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.FalseStatementsBlockRange">
            <summary>
            Gets block range of false statements for this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.TrueStatementsRange">
            <summary>
            Gets range of true statements for this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.FalseStatementsRange">
            <summary>
            Gets range of false statements for this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.Condition">
            <summary>
            Gets the condition of this if-block.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.If.Expression">
            <summary>
            Gets the condition of this if-block.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElseIf.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Erase.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Erase.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Finally.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Fixed.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.For.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.For.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.For.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ForEach.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ForEach.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.InitializedVolatile.Value">
            <summary>
            Gets or sets value of the constant.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Lock.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Lock.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Lock.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OnError.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OnError.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OptionStatement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.OptionStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RaiseEvent.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RaiseEvent.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RaiseEvent.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ReDim">
            <summary>
            Summary description for ReDim.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReDim.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ReDim.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ReDim.Expressions">
            <summary>
            Gets expressions inside the statment.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.RemoveHandler.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Switch.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Switch.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Switch.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Try">
            <summary>
            Summary description for Try.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Try.GetFinally">
            <summary>
            Gets a Finally block associated with this Try block, if one exists. Returns null otherwise.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Try.GetFinallyTarget">
            <summary>
            Gets the LanguageElement that is the target of a break or continue that might occur inside 
            this try block. This method will return the first code child of a Finally block, or the 
            Finally block itself if it has no child code nodes, or null if no finally block exists for this Try.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Try.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Unchecked">
            <summary>
            Summary description for Unchecked.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Unchecked.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UnsafeStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UsingStatement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UsingStatement.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.UsingStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.While.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.While.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.While.GetDetailNodeDescription(System.Int32)">
            <summary>
            Returns a description for the detail node at the specified index.
            </summary>
            <param name="index">The index into this element's DetailNodes list.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.While.SetCondition(DevExpress.CodeRush.StructuralParser.Expression)">
            <summary>
            Called internally by ElementBuilder. Sets the internal _Expression field and also adds 
            the specified expression as a detail node.
            </summary>
            <param name="condition">The expression that determines when flow should break out of this while loop.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.While.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.With.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.With.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.With.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Attribute.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Attribute.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Attribute.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Attribute.GetTargetTypeFromName(System.String)">
            <summary>
            Gets attribute target type from passed string name.
            </summary>
            <param name="name">The attribute target n.ame</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.Qualifier">
            <summary>
            Gets or sets attribute qualifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.ArgumentCount">
            <summary>
            Gets the number of arguments passed to this attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.Arguments">
            <summary>
            Gets arguments passed to this attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.TargetType">
            <summary>
            Gets or sets attribute target type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.NameRange">
            <summary>
            Gets or sets name range of the attribute.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Attribute.DevExpress#CodeRush#StructuralParser#IAttributeElement#HasTargetNode">
            <summary>
            Defines if attribute has target node.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMember(System.String)">
            <summary>
            Finds and returns the first member found inside this type matching the specified name.
            Only first level nodes are checked.
            </summary>
            <param name="name">The name of member to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMember(System.String,System.Boolean)">
            <summary>
            Returns member with the given name if it is declared inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of member to find.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMember(System.String,DevExpress.CodeRush.StructuralParser.IElementFilter,System.Boolean)">
            <summary>
            Returns member with the given name if it is declared inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of member to find.</param>
            <param name="filter">The filter to use.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMembers(System.String)">
            <summary>
            Returns all members with the given name inside this type or inside any
            of it's ancestors.
            </summary>
            <param name="name">The name of members to find.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMembers(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of members to find.</param>
            <param name="resolver">The source tree resolver</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMembers(System.String,System.Boolean)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of members to find.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMembers(System.String,DevExpress.CodeRush.StructuralParser.IElementFilter,System.Boolean)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="name">The name of members to find.</param>
            <param name="filter">The filter to use.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FindMembers(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String,DevExpress.CodeRush.StructuralParser.IElementFilter,System.Boolean)">
            <summary>
            Returns members with the given name inside this type or inside any
            of it's ancestors if needed.
            </summary>
            <param name="resolver">The instance of the ISourceTreeResolver implementor.</param>
            <param name="name">The name of members to find.</param>
            <param name="filter">The filter to use.</param>
            <param name="searchInAncestors">The value indicating if member should be searched inside base types.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetAllDescendants">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetAllDescendants(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetAllDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetAllDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetBaseType">
            <summary>
            Gets the base/ancestor type that this type descends/inherits from.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetBaseType(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Gets the base/ancestor type that this type descends/inherits from.
            </summary>
            <param name="resolver">The ISourceTreeResolver to use to resolve this type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetBaseTypes">
            <summary>
            Gets all base/ancestor types that this type descends/inherits from.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetBaseTypes(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Gets all base/ancestor types that this type descends/inherits from.
            </summary>
            <param name="resolver">The ISourceTreeResolver to use to resolve this type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetDescendants">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetDescendants(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.GetDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Is(System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Is(System.Type)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.Type)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified Type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DescendsFrom(System.String)">
            <summary>
            Returns true if this type element descends from the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DescendsFrom(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element descends from the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DescendsFrom(System.Type)">
            <summary>
            Returns true if this type element descends from the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element descends from the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element descends from the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.Type)">
            <summary>
            Returns true if this type element descends from the specified Type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Declares(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Determines whether the specified member
            declaration or reference is declared inside this type.
            </summary>
            <param name="element">The member or member reference to find.</param> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Declares(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean)">
            <summary>
            Determines whether the specified member
            declaration or reference is declared inside this type.
            </summary>
            <param name="element">The member or member reference to find.</param>
            <param name="searchBaseClasses">Set to true if base
            types should be scanned for this member. If false, only
            this type will searched.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TypeDeclaration.Declares(DevExpress.CodeRush.StructuralParser.IElement,DevExpress.CodeRush.StructuralParser.SearchScope,System.Boolean)">
            <summary>
            Determines whether the specified member
            declaration or reference is declared inside this type.
            </summary>
            <param name="element">The member or member reference to find.</param>
            <param name="scope">Determines the scope of the declaration search. 
            Set to SearchScope.AllPartialClasses to search through this class and any associated partial classes. 
            Set to SearchScope.ThisDeclaration to limit the search to this type declaration only, and ignore any partial classes.</param>
            <param name="searchBaseClasses">Set to true if base
            types should be scanned for this member. If false, only
            this type will searched.</param>		
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.HasDefaultConstructor">
            <summary>
            Returns true if this type has a default parameterless non-private constructor.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.PrimaryAncestorType">
            <summary>
            Gets or sets primary ancestor type for this declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.SecondaryAncestorTypes">
            <summary>
            Gets or sets secondary ancestor types for this declaration.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.FullName">
            <summary>
            Gets full name of this type declaration.
            Note that full name uses root namespace name.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllFields">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all fields declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllConstants">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all constants declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllProperties">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all properties declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllMethods">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all methods declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllEvents">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all events declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllTypes">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to recursively iterate through all types declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllChildTypes">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all types declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.AllMembers">
            <summary>
            This IEnumerable property can be used inside a foreach statement 
            to iterate through all members declared in this type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TypeDeclaration.DevExpress#CodeRush#StructuralParser#ITypeElement#IsTypeParameter">
            <summary>
            Returns true if current type element was created for type parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.AncestorDeclaresMember(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if an ancestor to this type declares the specified LanguageElement.
            </summary>
            <param name="member">The LanguageElement member to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.DeclaresMember(DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Returns true if this type declares the specified LanguageElement.
            </summary>
            <param name="member">The LanguageElement member to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.GetTypeName">
            <summary>
            Returns the type of this member.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The cloning options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.GetAncestor">
            <summary>
            Returns the ancestor for this type.
            </summary>
            <returns>The ancestor for this type.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Class.GetImplements">
            <summary>
            Returns the list of interfaces to implement. If you need a list of interfaces implemented by this class, use GetBaseTypes instead.
            </summary>
            <returns>The list of interfaces.</returns>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Class.AncestorName">
            <summary>
            Gets the name of the ancestor class.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Class.Implements">
            <summary>
            Gets names of the implemented interfaces.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetAllDescendants">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetAllDescendants(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetAllDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetAllDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetBaseType">
            <summary>
            Gets the base/ancestor type that this type descends/inherits from.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetBaseType(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Gets the base/ancestor type that this type descends/inherits from.
            </summary>
            <param name="resolver">The ISourceTreeResolver to use to resolve this type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetBaseTypes">
            <summary>
            Gets all base/ancestor types that this type descends/inherits from.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetBaseTypes(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Gets all base/ancestor types that this type descends/inherits from.
            </summary>
            <param name="resolver">The ISourceTreeResolver to use to resolve this type.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetDescendants">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetDescendants(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.GetDescendants(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Returns all direct descendants for this type declaration.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="scope">The scope to search.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Is(System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Is(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Is(System.Type)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.Is(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.Type)">
            <summary>
            Returns true if this type element is the same as, or descends from, the specified Type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DescendsFrom(System.String)">
            <summary>
            Returns true if this type element descends from the specified type.
            Returns false otherwise.
            </summary>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DescendsFrom(DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element descends from the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DescendsFrom(System.Type)">
            <summary>
            Returns true if this type element descends from the specified Type.
            Returns false otherwise.
            </summary>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.String)">
            <summary>
            Returns true if this type element descends from the specified type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="fullTypeName">The full name (e.g., "System.Drawing.Point") of the type to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,DevExpress.CodeRush.StructuralParser.ITypeElement)">
            <summary>
            Returns true if this type element descends from the specified ITypeElement.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The ITypeElement to compare against.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DescendsFrom(DevExpress.CodeRush.StructuralParser.ISourceTreeResolver,System.Type)">
            <summary>
            Returns true if this type element descends from the specified Type.
            Returns false otherwise.
            </summary>
            <param name="resolver">The source tree resolver instance to use.</param>
            <param name="type">The Type to compare against.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.DelegateDefinition.DevExpress#CodeRush#StructuralParser#ITypeElement#IsTypeParameter">
            <summary>
            Returns true if current type element was created for type parameter.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EmptyCommaDelimiter.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.EmptyCommaDelimeter">
            <summary>
            This class is just around to support backwards compatibility for older 3rd-party plug-ins. 
            Use the properly-named EmptyCommaDelimiter instead.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EmptyCommaDelimeter.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EmptyParens.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.EnumElement">
            <summary>
            Summary description for EnumElement.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EnumElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EnumElement.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.EnumElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Enumeration">
            <summary>
            Summary description for Enum.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Enumeration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Enumeration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Interface">
            <summary>
            Summary description for Interface.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Interface.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Struct">
            <summary>
            Summary description for Struct.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Struct.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Module.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Module.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayNameModifier.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ArrayNameModifier.ReplaceOwnedReference(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.LanguageElement)">
            <summary>
            Descendants that store additional references to nodes or detail nodes
            should override this method and replace old reference with new one.
            This method is called from ReplaceNode and ReplaceDetailNode methods
            right after old node is removed from inner node list.
            </summary>
            <param name="oldElement">The element being replaced.</param>
            <param name="newElement">The new element to use.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ArrayNameModifier.Rank">
            <summary>
            Gets or sets rank of this modifier.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.ArrayNameModifier.SizeInitializers">
            <summary>
            Gets size initializer expressions.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NullableTypeModifier.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseXmlNode.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.BaseXmlNode.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDecl.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDecl.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewExternalIDSystemLink.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewExternalIDSystemLink.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewExternalIDPublicLink.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.NewExternalIDPublicLink.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDocTypeDecl.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlDocTypeDecl.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElementDecl.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlElementDecl.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlEmptyContentSpec.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlEmptyContentSpec.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAnyContentSpec.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAnyContentSpec.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlMixedContentSpec.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlMixedContentSpec.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlName.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlName.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNameReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNameReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlContentParticle.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNamedContentParticle.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNamedContentParticle.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlSequencedContentParticle.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlChoiceContentParticle.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlChoiceContentParticle.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlSequenceContentParticle.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlSequenceContentParticle.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlChildrenContentSpec.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlChildrenContentSpec.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNotationDecl.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlNotationDecl.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttributeListDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttributeListDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttributeDeclaration.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlAttributeDeclaration.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlEntityDecl.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlEntityDecl.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlProcessingInstruction.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlProcessingInstruction.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlCharReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlCharReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlReference.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlReference.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlCharacterData.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.XmlCharacterData.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The element clone options.</param>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.Unknown">
            <summary>
            An unknown version of Visual Studio.
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2002">
            <summary>
            Visual Studio .NET 2002
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2003">
            <summary>
            Visual Studio .NET 2003
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2005">
            <summary>
            Visual Studio 2005
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2008">
            <summary>
            Visual Studio 2008
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2010">
            <summary>
            Visual Studio 2010
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2011">
            <summary>
            Visual Studio 2011
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2012">
            <summary>
            Visual Studio 2012
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2013">
            <summary>
            Visual Studio 2013
            </summary>
        </member>
        <member name="F:DevExpress.CodeRush.StructuralParser.ParserVersion.VS2015">
            <summary>
            Visual Studio 2015
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.System#ICloneable#Clone">
            <summary>
            Implements IClonebale to clone this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.CloneDataFrom(DevExpress.CodeRush.StructuralParser.Token,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.GetRange">
            <summary>
            Gets range of the token.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.Match(System.Int32)">
            <summary>
            Matches type of this token.
            </summary>
            <param name="type">The type to match.</param>
            <returns>Returns true if this token matches the given type, false otherwise.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.ToString">
            <summary>
            Returns token value.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.Clone">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Token.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.StartPosition">
            <summary>
            Gets or sets start char position of the token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.EndPosition">
            <summary>
            Gets or sets end char position of the token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Line">
            <summary>
            Gets or sets token start line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.EndLine">
            <summary>
            Gets or sets token end line.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Column">
            <summary>
            Gets or sets token start column.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.EndColumn">
            <summary>
            Gets or sets token end column.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Type">
            <summary>
            Gets token type.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Range">
            <summary>
            Gets token range.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Length">
            <summary>
            Gets token length.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.EscapedValue">
            <summary>
            Gets the value of this token with all unicode escapes replaced. The value of this 
            property is calculated from Value property by replacement of all \uXXXX escapes.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Value">
            <summary>
            Gets or Sets the value of this token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.Token.Next">
            <summary>
            Gets or sets next token.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CharProvider.#ctor(System.IO.TextReader)">
            <summary>
            Creates new CharProvider instance.
            </summary>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CharProvider.ReadChar">
            <summary>
            Reads char from the intrenal reader..
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CharProvider.Get">
            <summary>
            Gets char from the provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CharProvider.Peek">
            <summary>
            Peeks char from the provider.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CharProvider.ResetPeek">
            <summary>
            Resets peek queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.CharProvider.Close">
            <summary>
            Closes the provider.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.CharProvider.HasPeekedChars">
            <summary>
            Returns true if provider has chars inside peek queue.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ElementFactoryBase">
            <summary>
            Has the ability to create custom descendants during a parse.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewAttribute">
            <summary>
            Creates and returns a new Attribute instance. 
            Descendant element factories should override and return a 
            new Attribute (e.g., "return new VBAttribute();").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewAttributeSection">
            <summary>
            Creates and returns a new AttributeSection instance. 
            Descendant element factories should override and return a 
            new AttributeSection (e.g., "return new VBAttributeSection();").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewMethodCall">
            <summary>
            Creates and returns a new MethodCall instance. 
            Descendant element factories should override and return
            language specific elemenent.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewConstructorInitializer">
            <summary>
            Creates and returns a new ConstructorInitializer instance. 
            Descendant element factories should override and return
            language specific elemenent.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewParam">
            <summary>
            Creates and returns a new Param instance. 
            Descendant element factories should override and return a 
            new Param (e.g., "return new VBParam();").
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewCaseClause">
            <summary>
            Creates and returns a new CaseClause instance. 
            Descendant element factories should override and return
            language specific elemenent.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ElementFactoryBase.NewCaseClausesList">
            <summary>
            Creates and returns a new CaseClausesList instance. 
            Descendant element factories should override and return
            language specific elemenent.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.GlobalStringStorage">
            <summary>
            String storage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.InternString(System.String)">
            <summary>
            Interns the given string.
            </summary>
            <param name="s">The string to intern.</param>
            <returns>Returns interned string.</returns>    
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.IsInternedString(System.String)">
            <summary>
            Checks if given string is interned.
            </summary>
            <param name="s">The string to check.</param>
            <returns>Returns true if the given string is interned.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.ClearStrings">
            <summary>
            Clears this string storage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.Intern(System.String)">
            <summary>
            Interns the given string.
            </summary>
            <param name="s">The string to intern.</param>
            <returns>Returns interned string.</returns>    
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.IsInterned(System.String)">
            <summary>
            Checks if given string is interned.
            </summary>
            <param name="s">The string to check.</param>
            <returns>Returns true if the given string is interned.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.Clear">
            <summary>
            Clears this string storage.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.BeginUpdate">
            <summary>
            This method suspends clearing of storage and can be useful when you need to intern strings during customer calculation interval.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.EndUpdate">
            <summary>
            Marks the end of an update session. You must call this once for every call to BeginUpdate().
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.GlobalStringStorage.Instance">
            <summary>
            Gets global string storage instance.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ITokenReader">
            <summary>
            Summary description for ITokenReader.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserContext.AutoSetValues">
            <summary>
            Automatically sets the values for RegionContext, TextStrings, CompilerDirectiveContext, 
            and SourceFile based on the value of Context.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ParserContext.IntroduceComments">
            <summary>
            Adds collected Comments to the SourceFile.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLine.Start">
            <summary>
            Gets or sets source line start point.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLine.Text">
            <summary>
            Gets or sets source line text.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceLinesReader.Seek(System.Int32)">
            <summary>
            Moves this source reader to the given position.
            </summary>
            <param name="position">The position to move.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceLinesReader.ToPosition(System.Int32,System.Int32)">
            <summary>
            Converts line and line position to absolute position
            within source reader.
            </summary>
            <param name="line">The line to convert.</param>
            <param name="linePos">The line position to convert.</param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceLinesReader.ToPoint(System.Int32)">
            <summary>
            Converts absolute position to source point.
            </summary>
            <param name="pos">The position to convert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceLinesReader.GetMaxPosition">
            <summary>
            Gets the maximum absolute position.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceLinesReader.GetText">
            <summary>
            Returns source lines text.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLinesReader.StartLine">
            <summary>
            Gets the starting line of the source that was parsed. If the entire document 
            was parsed, will return 1. Otherwise, if a segment of the document was 
            parsed, this property will return the line number that started the parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLinesReader.StartColumn">
            <summary>
            Gets the starting column of the source that was parsed. If the entire 
            document was parsed, will return 1. Otherwise, if a segment of the document 
            was parsed, this property will return the column number on the first line 
            that started the parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLinesReader.CurrentLine">
            <summary>
            Gets or sets the current line of the source being parsed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLinesReader.CurrentColumn">
            <summary>
            Gets or sets the current column of the source being parsed.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceLinesReader.DevExpress#CodeRush#StructuralParser#ISourceReader#IsDocumentReader">
            <summary>
            Returns true if this reader works directly with VS document.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceStringReader.StartLine">
            <summary>
            Gets the starting line of the source that was parsed. If the entire document 
            was parsed, will return 1. Otherwise, if a segment of the document was 
            parsed, this property will return the line number that started the parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceStringReader.StartColumn">
            <summary>
            Gets the starting column of the source that was parsed. If the entire 
            document was parsed, will return 1. Otherwise, if a segment of the document 
            was parsed, this property will return the column number on the first line 
            that started the parse.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceStringReader.DevExpress#CodeRush#StructuralParser#ISourceReader#IsDocumentReader">
            <summary>
            Returns true if this reader works directly with VS document.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SourceTreeCommenter.CommentNode(DevExpress.CodeRush.StructuralParser.LanguageElement,DevExpress.CodeRush.StructuralParser.CommentCollection)">
            <summary>
            Adds comments to the given node and it's children recursively.
            </summary>
            <param name="node">The node to add</param>
            <param name="comments">The comments to add.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.SourceTreeCommenter.SourceFile">
            <summary>
            Gets or sets start node.
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.TokenCollection">
            <summary>
            Constains a collection of tokens.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenCollection.Add(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Adds token to the collection.
            </summary>
            <param name="token">The token to add.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenCollection.IndexOf(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Returns index of the given token.
            </summary>
            <param name="token">The token to get index for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenCollection.Insert(System.Int32,DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Inserts the given token to the specified position.
            </summary>
            <param name="index">The index to use.</param>
            <param name="token">The token to insert.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenCollection.Remove(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Removes token from the collection.
            </summary>
            <param name="token">The token to remove.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenCollection.Contains(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Returns true if the given token is contained inside the collection.
            </summary>
            <param name="token">The token to check.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenCollection.Item(System.Int32)">
            <summary>
            Gets or sets token at the specified index.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenizerBase.CreateTokens">
            <summary>
            Descendants of TokenizerBase should override and create any internal token lists here that might be needed by their GotoNext override. 
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenizerBase.GotoNext">
            <summary>
            Descendants classes should override and implement logic to return the next token.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenizerBase.GotoNextWithScannerExtension">
            <summary>
            Descendants classes can override and implement logic to return the next token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.Tokens">
            <summary>
            Gets or sets language specific token descriptions.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.TokenQueue">
            <summary>
            Gets token queue.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.SourceReader">
            <summary>
            Gets or sets source reader.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.ScannerExtension">
            <summary>
            Sets or sets scanner extension
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.CurrentToken">
            <summary>
            Gets or sets current token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.NextToken">
            <summary>
            Gets or sets next token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.Comments">
            <summary>
            Gets or sets comment collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.TextStrings">
            <summary>
            Gets or sets text strings collection.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenizerBase.Eof">
            <summary>
            Returns true if there are no more tokens left.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.#ctor">
            <summary>
            Token queue used to store and access tokens.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.Dequeue">
            <summary>
            Dequeues token from the queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.Enqueue(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Enqueues token to the queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.DequeueToken">
            <summary>
            Dequeues token from the queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.EnqueueToken(DevExpress.CodeRush.StructuralParser.Token)">
            <summary>
            Enqueues given token into the queue.
            </summary>
            <param name="token">The token to enqueue.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.TokenPosition(System.Int32)">
            <summary>
            Returns the position of the token with the given type.
            </summary>
            <param name="token">The token type to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.LookUpToken(System.Int32)">
            <summary>
            Looks up token at the specified position.
            </summary>
            <param name="pos">The pos of the token to look up.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.MoveForward">
            <summary>
            Moves to the next token in the queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.ContainsToken(System.Int32)">
            <summary>
            Returns true if the queue contains token with the given type.
            </summary>
            <param name="token">The token type to check.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.SkipUpTo(System.Int32)">
            <summary>
            Skips tokens in the queue up to the given token.
            Specified token is not skipped.
            </summary>
            <param name="tokenType">The token type to stop.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.SkipUpTo(System.Int32,System.Boolean)">
            <summary>
            Skips tokens in the queue up to the given token.
            </summary>
            <param name="tokenType">The token type to stop.</param>
            <param name="include">Set this flag to true to skip stop token.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.QueueUpTo(System.Int32)">
            <summary>
            Returns token queue up to the given token.
            </summary>
            <param name="tokenType">The token to stop.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.TokenQueueBase.QueueUpTo(System.Int32,System.Boolean)">
            <summary>
            Returns token queue up to the given token.
            </summary>
            <param name="tokenType">The token to stop.</param>
            <param name="include">Pass true to include stop token.</param>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenQueueBase.CurrentToken">
            <summary>
            Peeks current token from the queue.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenQueueBase.NextToken">
            <summary>
            Peeks next token from the queue.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenQueueBase.LastToken">
            <summary>
            Peeks last token from the queue.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenQueueBase.LastDequeuedToken">
            <summary>
            Gets previously dequeued token.
            </summary>
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.TokenQueueBase.Eof">
            <summary>
            Get true if there is no tokens in the queue.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.PathUtils.AddDirSeparatorIfNeed(System.String)">
            <summary>
            Adds directory name separator to the end of path if needed
            <param name="path">The path to the directory</param>
            </summary>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.ExpressionSignatureBuilder">
            <summary>
            Summary description for ExpressionSignatureBuilder.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.ExpressionSignatureBuilder.GetSignature(DevExpress.CodeRush.StructuralParser.IExpression)">
            <summary>
            Creates signature for expression.
            </summary>
            <param name="expr">The IExpression to get signature for</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.MemberSignatureBuilder">
            <summary>
            Utility class to help building member signatures.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberSignatureBuilder.GetSignature(DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Returs signature for the specified member.
            </summary>
            <param name="member">The member to get signature</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberSignatureBuilder.GetSignature(DevExpress.CodeRush.StructuralParser.IMemberElement,System.Boolean,System.String@,System.Int32@)">
            <summary>
            Returs signature for the specified member.
            </summary>
            <param name="member">The member to get signature</param>
            <param name="buildGenerics"></param>
            <param name="name"></param>
            <param name="nameIndex"></param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.MemberSignatureBuilder.GetSignatureForXmlDocumentation(DevExpress.CodeRush.StructuralParser.IMemberElement,System.Boolean,System.String@,System.Int32@)">
            <summary>
            Returns the signature in the XML documentation format, e.g. "M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)".
            </summary>
            <param name="member"></param>
            <param name="buildGenerics"></param>
            <param name="name"></param>
            <param name="nameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SignatureBuilder.GetSignature(DevExpress.CodeRush.StructuralParser.IElement)">
            <summary>
            Creates signature for element.
            </summary>
            <param name="element">The IElement to get a signature for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SignatureBuilder.GetSignatureForXmlDocumentation(DevExpress.CodeRush.StructuralParser.IMemberElement)">
            <summary>
            Returns the signature in the XML documentation format, e.g. "M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)".
            </summary>
            <param name="member">The IMemberElement to get a signature for.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.SignatureBuilder.GetSignature(DevExpress.CodeRush.StructuralParser.IElement,System.Boolean,System.String@,System.Int32@)">
            <summary>
            Creates signature for element.
            </summary>
            <param name="element">The IElement to get signature for</param>
            <param name="buildGenerics"></param>
            <param name="name">The element name</param>
            <param name="nameIndex">The position of name in signature</param>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.VB.VBCodeGen">
            <summary>
            VBCodeGen provides code generation for Visual Basic language.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VB90ExpressionCodeGen.GenerateConditionalExpression(DevExpress.CodeRush.StructuralParser.ConditionalExpression)">
            <summary>
            Generates code for ConditionalExpression.
            </summary>
            <param name="expression">The expression to generate.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.CorruptedLanguageElement.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.CorruptedLanguageElement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.XMLDocComment.SplitDocComment">
            <summary>
            Returns xml doc string without special comment characters, preserving
            xml doc source coordinates. E.g. for C# special comment characters are
            /// and /** and *.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.XMLDocComment.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBSourceFile.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBContinue.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBContinue.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.ExitStatement.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBMethod.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.VB.VBProperty">
            <summary>
            Summary description for Property.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBProperty.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.Error.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.Error.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBFor.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBFor.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBForEach.CloneDataFrom(DevExpress.CodeRush.StructuralParser.BaseElement,DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clone data from the given element.
            Descendants should create new CloneDataFrom 
            method to clone specific data.
            </summary>
            <param name="source">The source element to clone data from.</param>
            <param name="options">The options for element cloning.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBForEach.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.VBEvent.Clone(DevExpress.CodeRush.StructuralParser.ElementCloneOptions)">
            <summary>
            Clones this element.
            </summary> 
        </member>
        <member name="P:DevExpress.CodeRush.StructuralParser.VB.VB90Parser.Language">
            <summary>
            Returns the name of the language that this parses.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.MemberModifier.#ctor">
            <summary>
            Creates new instance of the MemberModifier class.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.TokenType.GetTokenType(System.String)">
            <summary>
            Convert from a string name to an int value, using reflection...
            </summary>
            <param name="name">The name of the token as a string.</param>
            <returns>The int value of the specified token name, or UnknownToken if not found.</returns>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.VB.TokenType.GetTokenName(System.Int32)">
            <summary>
            Convert from a type to a string name, using reflection...
            </summary>
            <param name="token">The type of the token as an int.</param>
            <returns>The name of the specified token, "UnknownToken" if not found.</returns>
        </member>
        <member name="T:DevExpress.CodeRush.StructuralParser.Xml.HtmlXmlCodeGen">
            <summary>
            HtmlXmlGen provides code generation for HTML and XML.
            </summary>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Xml.HtmlXmlNodesCodeGen.GenerateHtmlXmlNode(DevExpress.CodeRush.StructuralParser.XmlNode)">
            <summary>
            Generates code for given XmlNode.
            </summary>
            <param name="xmlNode">The XmlNode.</param>
        </member>
        <member name="M:DevExpress.CodeRush.StructuralParser.Xml.HtmlXmlNodesCodeGen.GenerateHtmlAttribute(DevExpress.CodeRush.StructuralParser.HtmlAttribute)">
            <summary>
            Generates code for HtmlAttribute.
            </summary>
            <param name="atr">The attribute to generate.</param>
        </member>
    </members>
</doc>
